$(document).ready(function() {
    function getOS() {
        var userAgent = window.navigator.userAgent,
          platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
          macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
          windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
          iosPlatforms = ["iPhone", "iPad", "iPod"],
          os = null;
    
        if (macosPlatforms.indexOf(platform) !== -1) {
          os = "Mac OS";
        } else if (iosPlatforms.indexOf(platform) !== -1) {
          os = "iOS";
        } else if (windowsPlatforms.indexOf(platform) !== -1) {
          os = "Windows";
        } else if (/Android/.test(userAgent)) {
          os = "Android";
        } else if (/Linux/.test(platform)) {
          os = "Linux";
        }
    
        return os;
    }
    function getCookie(name) {
        const cookies = document.cookie.split(";");
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.startsWith(name + "=")) {
                return cookie.substring(name.length + 1);
            }
        }
        return null;
    }

    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }
    function getPageDetails(isErrorPage = false) {
        let pagePath = window.location.pathname;
        let slug = pagePath.split("/");
        let actualSlug = slug[1].replace(".html", "");
        let primary_category = window.location.origin;
        let fullSplit = primary_category.split("//");
        let pcSplit = fullSplit[1].split(".");
        let title = $("title").text();
        let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
        let countryCode = "in";
        if (countryRegrex && countryRegrex.length > 1) {
          countryCode = countryRegrex[1];
        }
        let sub1 = "";
        let sub2 = "";
        let sub3 = "";
        let sub4 = "";
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
            sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
                sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
                sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
                sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
        } else {
            if (slug[2]) sub1 = slug[2].replace(".html", "");
            if (slug[3]) sub2 = slug[3].replace(".html", "");
            if (slug[4]) sub3 = slug[4].replace(".html", "");
            if (slug[5]) sub4 = slug[5].replace(".html", "");
        }
        return {
            pagename: title,
            server: window.location.hostname,
            fullURL: window.location.href,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            isErrorPage: isErrorPage,
            pageType: "AEM",
            language: "en",
            country: countryCode,
            platform: getOS(),
            custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
            loggedIn: isSignedIn(),
            previousPageValue: document.referrer,
        };
    }
    async function hashedValue(message) {
      const hashBuffer = await crypto.subtle.digest(
        "SHA-256",
        new TextEncoder().encode(message)
      );
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
      return hashValue;
    }
    function vehicleCallbackSucess(response, appendElem, template) {
        var template = _.template(template.html());
        var resultsTemplate = template({
            vehicleDetails: response
        });
        appendElem.append(resultsTemplate);
    }

    let defaultservlet = $('#defaultservlet').val();
    sendAjaxCall(`${defaultservlet}.getcustomercookiedata.json`, '').then(function (data) {
        try {
            let resp = data;
            if (typeof resp == "string") {
                resp = JSON.parse(resp);
            }
            if (resp.success == true) {
                if (resp.data) {
                    sessionStorage.setItem("data", resp.data);
                }
                if (resp["is-commerceToken"]) {
                    sessionStorage.setItem("is-commerce-token", resp["is-commerceToken"]);
                }
                if (resp["is-authorized"]) {
                    sessionStorage.setItem("is-authorized", resp["is-authorized"]);
                }
                if (resp.mobile) {
                    sessionStorage.setItem("mobile", resp.mobile);
                }
                onSessionDataCall(resp.data);
            } else {
                sessionStorage.removeItem("data");
                sessionStorage.removeItem("exchangeloggeddetails");
                sessionStorage.removeItem("is-commerce-token");
                sessionStorage.removeItem("is-authorized");
                sessionStorage.removeItem("mobile");
                sessionStorage.removeItem("selectedVehicleData");
                sessionStorage.removeItem("vehicleDetails");
                if (resp.data == true) {
                    sendAjaxCall(`${defaultservlet}.removeLoginCookies.json`, '').then(function (resp) {
                        window.location.reload();
                    }).catch(function (e) {
                        window.location.reload();
                    });
                }
            }
        } catch (error) {
          console.log(error);  
        }
    }).catch(function(err) {
        console.log(err);
    });


    function onSessionDataCall(respData) {
        let cookieData = JSON.parse(atob(respData));
        if (cookieData.selectedVehicle) {
            sessionStorage.setItem("selectedVehicleData", btoa(JSON.stringify(cookieData.selectedVehicle)));
        }
        if (cookieData.vehicleProfile) {
            sessionStorage.setItem("vehicleDetails", btoa(JSON.stringify(cookieData.vehicleProfile)));
        }      
        if ($('.updated-sideNav-links .profilesectionMobile').length > 0) {
            vehicleCallbackSucess(cookieData, $('.profilesectionMobile'), $('.userDetailsNavTemplateMobile'));
            showInitials();
        }
        if (!cookieData.name || !cookieData.profilePicPath) {
            let defaultservlet = $('#defaultservlet').val();
            send_AEM_AjaxCall(`${defaultservlet}.get-customer-profile.json`, '').then(function (data) {
                $('.log-in-link').addClass('d-none');
                $('.logout-header').removeClass('d-none');
                let serverResp = data
                let userName = `${serverResp.data.customer.firstname} ${serverResp.data.customer && (serverResp.data.customer.lastname ? serverResp.data.customer.lastname : '')}`;
                if (serverResp.data.customer && serverResp.data.customer.profile_pic_url && serverResp.data.customer.profile_pic_url != '') {
                    getProfileImg = serverResp.data.customer.profile_pic_url + "?" + atob(cookieData.mediaToken);
                    cookieData.profilePicPath = serverResp.data.customer.profile_pic_url;
                    $(".profile-roundPic").attr('src', getProfileImg);
                    $(".profile-roundPic").show();
                    $(".initials").hide();
                    $('.logout-header').find('.profile-name').addClass('d-none');
                    $('.logout-header').find('.profile-pic-header').removeClass('d-none');
                    $('.logout-header').find('.initials').addClass('d-none');
                    $('.logout-header').find('.profile-pic-header').attr('src',cookieData.profilePicPath+'?'+atob(cookieData.mediaToken));
                    $('.default-profile-image').hide();
                    $('.fetch-image').show();
                }else if(userName && userName.trim()){
                    $('.logout-header').find('.profile-pic-header').addClass('d-none');
                    $('.logout-header').find('.profile-name').addClass('d-none');
                    $('.logout-header').find('.initials').text(getInitials(userName.trim()));
                    $('.logout-header').find('.initials').removeClass('d-none');
                    $('.default-profile-image').hide();
                    $('.fetch-image').show();
                }else{
                    $('.logout-header').find('.profile-pic-header').addClass('d-none');
                    $('.logout-header').find('.initials').addClass('d-none');
                    $('.logout-header .profile-name').removeClass('d-none');
                    $('.logout-header .profile-name').addClass('backgroud-circle');
                    $('.fetch-image').hide();
                }
                if (userName && userName.trim()) {
                    $(".myvehicle-profile-pic h4").text(userName)
                    cookieData.name = userName.trim();
                    let user = toTitleCase(cookieData.name);
                    $('.login-user-name').removeClass('d-none')
                    cookieData.name && $('.login-user-name').text(`Hey ${user}`);
                }
                let detailsDataRequest = btoa(JSON.stringify(cookieData));
                sessionStorage.setItem("data", detailsDataRequest);
                sendAjaxCall(`${defaultservlet}.getcustomercookiedata.json`, {data: detailsDataRequest}).then(function (resp) {
                    // nothing do
                });
            });
        }else{
            $('.log-in-link').addClass('d-none');
            $('.logout-header').removeClass('d-none');
            if(cookieData.name){
                let user = toTitleCase(cookieData.name);
                $('.login-user-name').removeClass('d-none')
                $('.login-user-name').text(`Hey ${user}`);
            }
            if(cookieData.profilePicPath && cookieData.profilePicPath !== ''){
                $('.logout-header').find('.profile-name').addClass('d-none');
                $('.logout-header').find('.profile-pic-header').removeClass('d-none');
                $('.logout-header').find('.initials').addClass('d-none');
                $('.logout-header').find('.profile-pic-header').attr('src',cookieData.profilePicPath+'?'+atob(cookieData.mediaToken));
                $('.default-profile-image').hide();
                $('.fetch-image').show();
            }else if(cookieData.name){
                $('.logout-header').find('.profile-pic-header').addClass('d-none');
                $('.logout-header').find('.profile-name').addClass('d-none');
                $('.logout-header').find('.initials').text(getInitials(cookieData.name));
                $('.logout-header').find('.initials').removeClass('d-none');
                $('.default-profile-image').hide();
                $('.fetch-image').show();
            }else {
                $('.logout-header .profile-name').removeClass('d-none');
                $('.logout-header .profile-name').addClass('backgroud-circle');
                $('.fetch-image').hide();
            }
        }
    }

    $('.logout-link').on('click', function(e) {
        e.preventDefault();
        if (window.digitalData) {
            window.digitalData.push({
                event: "Logout",
                user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
            });
        }
	    var d = new Date();
        d.setTime(d.getTime());

        sessionStorage.removeItem("data");
        sessionStorage.removeItem("exchangeloggeddetails");
        sessionStorage.removeItem("is-commerce-token");
        sessionStorage.removeItem("is-authorized");
        sessionStorage.removeItem("mobile");
        sessionStorage.removeItem("selectedVehicleData");
        sessionStorage.removeItem("vehicleDetails");
        sessionStorage.removeItem("exchangeLoginType");

        $('.log-in-link').removeClass('d-none');
        $('.logout-header').addClass('d-none');

        let defaultservlet = $('#defaultservlet').val();
        sendAjaxCall(`${defaultservlet}.removeLoginCookies.json`, '').then(function (resp) {
            window.location.href = "/en-in.html";
        }).catch(function (e) {
            window.location.href = "/en-in.html";
        });
    });

    $('#logIn').on('hidden.bs.modal', function(){
        $('body.modal-open').removeClass('height-100vh');
    });

    $('#logIn').find('.close').click(function(){
        $('body.modal-open').removeClass('height-100vh');
        if(window.location.href.indexOf('/my-account/') !=-1){
            window.location.href="/en-in.html"
        }
    })

    $('#logIn').on('shown.bs.modal', function(){
        $('body.modal-open').addClass('height-100vh');
        $('#logIn .login-content').show();
        if (window.innerWidth < 1024) {
            $('#logIn .login-content').addClass('mobile-login-popup');
        }
    });

    $('span[data-target="#mobile-number"]').tab("show");
    $('#otp-verify').addClass('d-none');
    $('#otp-success').addClass('d-none');

    $("#otp-verify *:input[type!=hidden]:first").focus();
    let otp_fields = $("#otp-verify .otp-field"),
        otp_value_field = $("#otp-verify .otp-value");
    otp_fields
        .on("input", function(e) {
            $(this).val(
                $(this)
                    .val()
                    .replace(/[^0-9]/g, "")
            );
            let opt_value = "";
            otp_fields.each(function() {
                let field_value = $(this).val();
                if (field_value != "") opt_value += field_value;
            });
            otp_value_field.val(opt_value);
            $('.invalid-otp-message').hide();
            $('.incorrect-otp-message').hide();
            if(otp_value_field?.val()?.length == 6) {
                debounceInitiate();
            }
        })
        .on("keyup", function(e) {
            let key = e.keyCode || e.charCode;
            if (key == 8 || key == 46 || key == 37 || key == 40) {
                $(this).prev().focus();
            } else if (key == 38 || key == 39 || $(this).val() != "") {
                $(this).next().focus();
            }
        })

        const debounceInitiate = debounceSubmitClick(() => autoInputClick());

        function autoInputClick(){
            let realtimeClick = document.querySelector('#otp-verify .get-success-button');
            realtimeClick.click();
        }

        function debounceSubmitClick(func, timeout = 1500){
            let timer;
            return (...args) => {
              if (!timer) {
                func.apply(this, args);
              }
              clearTimeout(timer);
              timer = setTimeout(() => {
                timer = undefined;
              }, timeout);
            };
        }

    $('#otp-verify .scroll-down-icon').on('click', function() {
        $("#otp-verify .otp-field").val('');
        $('.invalid-otp-message').hide();
        $('.incorrect-otp-message').hide();
        $('#otp-verify').removeClass('show active');
        $('#mobile-number').addClass('show active');
        $('#otp-verify').addClass('d-none');
        $('#mobile-number').removeClass('d-none');
        $('.mobile-number-login').focus();
    });

    const mobileRegex = /^(?!([0-9])\1{9})((\+?[0-9]{1,5})?([6-9][0-9]{9}))$/;

    $('#mobile-number .get-verify-button').on('click', async function (event) {
        event.preventDefault();
        const mobileElement = $('#mobile-number .mobile-number-login');

        if (mobileRegex.test(mobileElement.val()) && mobileElement.val().length == 10) {
            mobileElement.parent('.cust-form-group').find('.invalid-mobile-message').hide();

            const mobNumber = "+91" + mobileElement.val();
            const hashedMobile = await hashedValue(mobNumber);
            localStorage.setItem("analyticsHashedMobile", hashedMobile);
            if (window.digitalData) {
                window.digitalData.push({
                    event: "Login OTP Requested",
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                });
            }

            $('#otp-verify .display-mobile-number').text(mobileElement.val());
            validateMobileNo(mobileElement, "mobile-verify");
        }else{
            mobileElement.parent('.cust-form-group').find('.invalid-mobile-message').show();
        }
    });

    $('#otp-verify .login-resend-otp-btn').on('click', async function (event) {
        event.preventDefault();
        const mobileElement = $('#mobile-number .mobile-number-login');

        if (mobileRegex.test(mobileElement.val()) && mobileElement.val().length == 10) {
            mobileElement.parent('.cust-form-group').find('.invalid-mobile-message').hide();

            const mobNumber = "+91" + mobileElement.val();
            const hashedMobile = await hashedValue(mobNumber);
            localStorage.setItem("analyticsHashedMobile", hashedMobile);
            if (window.digitalData) {
                window.digitalData.push({
                    event: "Login Resend OTP Requested",
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                });
            }
            $("#otp-verify .otp-field").val('');
            $('.invalid-otp-message').hide();
            $('.incorrect-otp-message').hide();
            validateMobileNo(mobileElement, "otp-verify");
        }else{
            mobileElement.parent('.cust-form-group').find('.invalid-mobile-message').show();
        }
    });

    $('#otp-verify .get-success-button').on('click', function () {
        const mobileElement = $('#mobile-number .mobile-number-login');
        const otpElement = $("#otp-verify .otp-value");
        if(otpElement?.val()?.length == 6){
            $('.invalid-otp-message').hide();
        } else {
            $('.invalid-otp-message').show();
        }

        if(mobileRegex.test(mobileElement.val()) && mobileElement?.val()?.length == 10 && otpElement?.val()?.length == 6){
            getAccessToken($(this));
        }
    });

    let formStartNotSent = true;
    $('#mobile-number .mobile-number-login').on("focus", function() {
        if (formStartNotSent) {
            formStartNotSent = false;
            if (window.digitalData) {
                window.digitalData.push({
                    event: "Login Initiated",
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                });
            }
        }
    });

    $(document).on('click', '.ex-form-tab-container #campaign-sub-btn', function(e) {
        e.preventDefault();
        var sessionVehicleDetails = sessionStorage.getItem("exchangeloggeddetails");
        let isFormValid = $("#exchangeLoginForms");
        if (isFormValid.valid()) {
            if(sessionVehicleDetails) {
                sessionStorage.setItem("exchangeLoginType", 'existing');
                let ctcRedirectLink = $(this).attr("data-component-relativePath");
                window.location.href = ctcRedirectLink;
            } else {
                getAccessToken($(this));
            }
        }
    });

    function validateMobileNo(otpElement, eventText) {
        $('#hero-loader').removeClass('d-none');
        let defaultServlet = $('#defaultservlet').val();
        let sendOtpApiUrl = defaultServlet+".externalLogin.json";

        let requestData = { mobileNumber : otpElement.val()}
        sendAjaxCall(sendOtpApiUrl, requestData).then(function(data) {
            let jsonResponse = data;
            if (typeof jsonResponse == "string") {
                jsonResponse = JSON.parse(jsonResponse);
            }
            if(jsonResponse.success === true && jsonResponse.message.toLowerCase().includes("success")) {
                autoPopulateOTP();
                $('#otp-verify').removeClass('d-none');
                $('#mobile-number').addClass('d-none');
                $('#otp-verify').addClass('show active');
                $('#mobile-number').removeClass('show active');
                $('#hero-loader').addClass('d-none');
            }else{
                otpElement.parent('.cust-form-group').find('.api-failure-msg').text(jsonResponse.message).show();
                $('#hero-loader').addClass('d-none');
            }
        })
    }

    function getAccessToken(loginElement) {
        let mobileNumber = $('#mobile-number .mobile-number-login').val();
        let loginOTP = $("#otp-verify .otp-value").val();
        if(!mobileNumber){
            mobileNumber = $('.exchange-form #mobnumber').val();
        }
        if(!loginOTP){
            loginOTP = $('.exchange-form #otpnumber').val();
        }
        let defaultservlet = $('#defaultservlet').val();
        let getTokenRow = {
            "phoneCode": "+91",
            "mobile": mobileNumber,
            "otp": loginOTP
        }
        $('#hero-loader').removeClass('d-none');

        $.ajax({
            url: `${defaultservlet}.login-with-otp.json`,
            type: "POST",
            contentType:"application/json",
            dataType:"json",
            data: JSON.stringify(getTokenRow),
            success: async function (responseData) {
                let resp = responseData;
                if (typeof resp == "string") {
                    resp = JSON.parse(resp);
                }
                if (resp.success == true) {
                    const custSequ = resp.uniqueId || '';
                    localStorage.setItem("analyticsCustSeqNo", custSequ);
                    if (mobileNumber) {
                        $('#otp-verify').addClass('d-none');
                        $('#otp-success').removeClass('d-none');
                        $('#otp-verify').removeClass('show active');
                        $('#otp-success').addClass('show active');
                        const mobNumber = getTokenRow.phoneCode + mobileNumber;
                        const hashedMobile = await hashedValue(mobNumber);
                        localStorage.setItem("analyticsHashedMobile", hashedMobile);

                        const phCodemobNumberMeta = "91" + mobileNumber;
                        let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
                        localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);
                    }
                    if (window.digitalData) {
                        window.digitalData.push({
                            event: "Login Success",
                            user: {
                                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                            },
                            page: getPageDetails(),
                        });
                    }
                    if (resp.data) {
                        sessionStorage.setItem("data", resp.data);
                    }
                    if (resp["is-commerceToken"]) {
                        sessionStorage.setItem("is-commerce-token", resp["is-commerceToken"]);
                    }
                    if (resp["is-authorized"]) {
                        sessionStorage.setItem("is-authorized", resp["is-authorized"]);
                    }

                    let dataObject =  JSON.parse(atob(sessionStorage.getItem("data")));
                    $('.log-in-link').addClass('d-none');
                    $('.logout-header').removeClass('d-none');
                    if(dataObject.name){
                        let user = toTitleCase(dataObject.name);
                        $('.login-user-name').text(`Hey ${user}`);
                    }
                    if (dataObject.mobile) {
                        sessionStorage.setItem("mobile", dataObject.mobile);
                    }
                    // dataObject.name ? $('.logout-header').find('.profile-name').text(dataObject.name) : $('.logout-header').find('.profile-name').text(dataObject.mobile);
                    $('.logout-header').find('.profile-pic-header').attr('src',dataObject.profilePicPath+'?'+atob(dataObject.mediaToken));
                    let defaultServlet = $('#defaultservlet').val();
                    let getcustomerdetailsApiUrl = defaultServlet+".getExternalCustomerDetails.json";
                    let getDetailsDMSRequest = "";
                    setTimeout(() => {
                        sendAjaxCall(getcustomerdetailsApiUrl, getDetailsDMSRequest).then(function(data) {
                            let jsonResponse = data;
                            if (typeof jsonResponse == "string") {
                                jsonResponse = JSON.parse(jsonResponse);
                            }
                            if (jsonResponse.success === true) {
                                let userObject = new Object();
                                userObject.state = jsonResponse.data.profile.state,
                                userObject.city = jsonResponse.data.profile.city,
                                userObject.username = jsonResponse.data.profile.firstName;
                                sessionStorage.setItem("exchangeloggeddetails", btoa(JSON.stringify(userObject)));
                                if (resp.is_existing == "0") {
                                    getVehicleData(true);
                                    if (sessionStorage.getItem('eventLogin') == 'true') {
                                        $("#event-register-status .event_status_sucess").addClass("d-none");
                                        $("#event-register-status #non-user").removeClass("d-none");
                                        $("#event-register-status").modal();
                                        $('#hero-loader').addClass('d-none');
                                        $('.login-modal .close').trigger('click');
                                        $('.logout-header').find('.profile-name').addClass('d-none');
                                        sessionStorage.removeItem('eventLogin');
                                    }
                                } else {
                                    getVehicleData();
                                }
                            }else{
                                $('#hero-loader').addClass('d-none');
                                let cartItem = localStorage.getItem('cart-login');
                                if (sessionStorage.getItem('eventLogin') == 'true') {
                                    $("#event-register-status .event_status_sucess").addClass("d-none");
                                    $("#event-register-status #non-user").removeClass("d-none");
                                    $("#event-register-status").modal();
                                    $('#hero-loader').addClass('d-none');
                                    $('.login-modal .close').trigger('click');
                                    $('.logout-header').find('.profile-name').addClass('d-none');
                                    sessionStorage.removeItem('eventLogin');
                                } else {
                                    if(cartItem){
                                        localStorage.removeItem('cart-login');
                                        window.location.href = "/en-in/cart.html";
                                    }
                                    $('.login-modal .close').trigger('click');
                                    window.location.href =  $('#loginForm').find('[name="pageAfterLogin"]').val();
                                }          
                            }

                            if (mobileNumber) {
                                $("#otp-verify .otp-value").val('');
                                $('#mobile-number .mobile-number-login').val('');
                            }
                        })
                    }, 1000);
                    
                } else if (resp.success != true) {
                    !mobileNumber ? loginElement.closest('#loginForm').find('.invalid-otp-message').show() : $('.incorrect-otp-message').show();
                    loginElement.closest('#loginForm').find('.invalid-otp-message').show();
                    $('#hero-loader').addClass('d-none');
                }
            },
            error: function (error) {
                !mobileNumber ? loginElement.closest('#loginForm').find('.invalid-otp-message').show() : $('.incorrect-otp-message').show();
                $('#hero-loader').addClass('d-none');
            }
        })
    }

    function autoPopulateOTP() {
        if ('OTPCredential' in window) {
            const ac = new AbortController();
            navigator.credentials.get({
                otp: { transport:['sms'] },
                signal: ac.signal
            }).then(otp => {
                const $inp = $("#otp-verify .otp-field");
                const otpValueField = $("#otp-verify .otp-value")
                $inp.each(function(index) {
                    $(this).val(otp.code[index]);
                });
                otpValueField.val(otp.code);
                $inp.trigger('input');
                ac.abort()
            }).catch(err => {
                console.log(err);
            });
        }
    }

    $('.cart-buy-icon').on('click' ,function (event){
        event.preventDefault();
        let dataCookie = sessionStorage.getItem("data");
        if (dataCookie){
            window.location.href = "/en-in/cart.html";
        }else{
            localStorage.setItem('cart-login','true');
            $('#logIn').modal('show');
        }
    })

    if(sessionStorage.getItem("is-commerce-token") == "true"){
        cartCheck();
    }else{
        $('.cart-buy-icon').addClass('hide-cart-indicator');
    }
});

function cartCheck(){
    let defaultservlet = $('#defaultservlet').val();
    $.ajax({
        url: `/content/hero-commerce/in/en/account/order-list/jcr:content.cart.json`,
        type: "POST",
        contentType:"application/json",
        success: function (response) {
            if (response) {
                const cartItems = response?.data?.customerCart?.items;
                if(cartItems && cartItems.length > 0) {
                    let cartNumber =  cartItems.length
                    $('.cart-buy-icon').removeClass('hide-cart-indicator');
                    $('.cart-buy-icon').attr("data-cart-count" ,cartNumber);
                }else{
                    $('.cart-buy-icon').addClass('hide-cart-indicator');
                }
            }else{
                $('.cart-buy-icon').addClass('hide-cart-indicator');
            }
        },
        error: function (error) {
            $('.cart-buy-icon').addClass('hide-cart-indicator');
        }
    })
}

$(document).ready(function () {
    // let cookieData = sessionStorage.getItem("data");
    // if(cookieData){
    // let userData = cookieData && JSON.parse(atob(sessionStorage.getItem("data")));
    //     vehicleCallbackSucess(userData, $('.login-user-name'), $('.user-profile-name'));
    //     let userName = toTitleCase($('.login-user-name span').eq(0).text()); 
    //     $('.login-user-name span').text(userName);
    // }
    $('.logout-header .logout-linkText').on('click', function () {
        let profileSlide = $('.updated-sideNav .updated-sideNav-links');
        if (profileSlide.hasClass('d-none')) {
            profileSlide.addClass('d-block');
            profileSlide.removeClass('d-none');
            $('html').css({
                overflow: 'hidden',
                height: '100vh'
            });
        } else {
            profileSlide.addClass('d-none');
            profileSlide.removeClass('d-block');
            $('html').css({
                overflow: '',
                height: ''
            });
        }
    })

    $('.profile-back').on('click', function () {
        let profileSlide = $('.updated-sideNav .updated-sideNav-links');
        profileSlide.removeClass('d-block');
        profileSlide.addClass('d-none');
        $('html').css({
            overflow: '',
            height: ''
        });
    })
});

function toTitleCase(str) {
    return str.replace(
        /\w\S*/g,
        function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }
    );
}

function getVehicleData(isNextCall = false) {
    let defaultservlet = $('#defaultservlet').val();
    let getDetailsDMSRequest = "";
    sendAjaxCall(`${defaultservlet}.getVehicleDetailsList.json`, getDetailsDMSRequest).then(function(response) {
        let jsonResponse = response;
        if (typeof jsonResponse == "string") {
            jsonResponse = JSON.parse(jsonResponse);
        }
        let cartItem = localStorage.getItem('cart-login');
        if (jsonResponse.success === true && jsonResponse.data) {
            const getVehicleDetails = jsonResponse.data.vehicleDetails
            let vehicleDetailJson = [];
            let selectedVehicle = new Object();
            let defaultVehicleFlag = false;

            if (getVehicleDetails && getVehicleDetails.length > 0) {
                for (let i = 0; i < getVehicleDetails.length; i++) {
                    if (getVehicleDetails[i].isPrimaryVehicle == '1' && !defaultVehicleFlag) {
                        selectedVehicle.vinNO = getVehicleDetails[i].vinId;
                        selectedVehicle.engine_no = getVehicleDetails[i].engineNo;
                        selectedVehicle.licenseNo = getVehicleDetails[i].licenceNumber;
                        selectedVehicle.purchaseDate = convertDate(getVehicleDetails[i].firstSaleDate);
                        selectedVehicle.imagePath = getImagePath(getVehicleDetails[i].model, getVehicleDetails[i].color);
                        selectedVehicle.modelName = getVehicleDetails[i].model;
                        defaultVehicleFlag = true;
                    }
                    let vehicleArray = {};
                    vehicleArray.vinNO = getVehicleDetails[i].vinId;
                    vehicleArray.engine_no = getVehicleDetails[i].engineNo;
                    vehicleArray.modelName = getVehicleDetails[i].model;
                    vehicleArray.imagePath = getImagePath(getVehicleDetails[i].model, getVehicleDetails[i].color);
                    vehicleArray.purchaseDate = getVehicleDetails[i].firstSaleDate;
                    vehicleArray.licenseNo = getVehicleDetails[i].licenceNumber;
                    vehicleArray.category_code = getVehicleDetails[i].category;
                    vehicleArray.make = "Hero";
                    vehicleDetailJson.push(vehicleArray);
                }
    
                if (!defaultVehicleFlag) {
                    selectedVehicle.vinNO = getVehicleDetails[0].vinId;
                    selectedVehicle.engine_no = getVehicleDetails[0].engineNo;
                    selectedVehicle.licenseNo = getVehicleDetails[0].licenceNumber;
                    selectedVehicle.purchaseDate = convertDate(getVehicleDetails[0].firstSaleDate);
                    selectedVehicle.imagePath = getImagePath(getVehicleDetails[0].model, getVehicleDetails[0].color);
                    selectedVehicle.modelName = getVehicleDetails[0].model;
                }
    
                if (getVehicleDetails[0].customerIdentifier) {
                    localStorage.setItem("analyticsCustomerIdentifier", getVehicleDetails[0].customerIdentifier);
                }
            }
            sessionStorage.setItem("vehicleDetails", btoa(JSON.stringify(vehicleDetailJson)));
            sessionStorage.setItem("selectedVehicleData", btoa(JSON.stringify(selectedVehicle)));
            let dataObject = JSON.parse(atob(sessionStorage.getItem('data')));
            dataObject.selectedVehicle = selectedVehicle;
            dataObject.vehicleProfile = vehicleDetailJson;
            let detailsDataRequest = btoa(JSON.stringify(dataObject));
            sessionStorage.setItem("data", detailsDataRequest);
            sendAjaxCall(`${defaultservlet}.getcustomercookiedata.json`, {data: detailsDataRequest}).then(function (resp) {
                // nothing do
            });
            if (sessionStorage.getItem('eventLogin') == 'true') {
                $('#hero-loader').addClass('d-none');
                $('.login-modal .close').trigger('click');
                $('.logout-header').find('.profile-name').addClass('d-none');
                sessionStorage.removeItem('eventLogin');
                $('#vehicle-list .floating-select-list').html("");
                let allowed = false;
                try {
                    let vehicleDet = JSON.parse(atob(sessionStorage.getItem('vehicleDetails')));
                    $.each(vehicleDet, function (key, value) {
                        if (value.modelName.toLowerCase().indexOf('xpulse') != -1 || value.modelName.toLowerCase().indexOf('mavrick') != -1 || value.modelName.toLowerCase().indexOf('karizma') != -1) {
                            $('#ride_events_loggedin_register input[name=vin]').val(value.vinNO);
                            $('#vehicle-list .floating-select-list').append(`<li data-vin="${value.vinNO}" data-value="${value.modelName}">${value.modelName}</li>`)
                            allowed = true;
                        }
                    })

                    $("#vehicle-list .floating-select-list li").click(function (e) {
                        const currentVal = $(this).html();
                        $("#vehicle-list .floating-select-list li.selected").removeClass("selected");
                        $(this).addClass("selected");
                        $('#vehicle-list input[name="eventName"]').val($(this).attr("data-value"));
                        $("#vehicle-list .floating-select span").val($(this).attr("data-vin"));
                        $("#vehicle-list .floating-select span").html(currentVal);
                        $("#vehicle-list .floating-select-group").removeClass("active");
                        $('input[name=vin]').val($('#vehicle-list .floating-select-list .selected').data('vin'));
                    });

                    $("#vehicle-list .floating-select-list li:first-child").trigger("click");

                    $("#event-city-list .floating-select-list li").click(function (e) {
                        const currentVal = $(this).html();
                        $("#event-city-list .floating-select-list li.selected").removeClass("selected");
                        $(this).addClass("selected");
                        $("#event-city-list .floating-select span").html(currentVal);
                        $("#event-city-list .floating-select-group").removeClass("active");
                    });

                    $("#event-city-list .floating-select-list li:first-child").trigger("click");

                    $('input[name=vin]').val($('#vehicle-list .floating-select-list .selected').data('vin'));

                    if (allowed) {
                        $('#vehicle-list .floating-select span').text($('#vehicle-list .floating-select-list li:first').text());
                        if (allowed) {
                            let defaultservlet = $('#defaultservlet').val();
                            send_AEM_AjaxCall(`${defaultservlet}.get-customer-profile.json`, '').then(function (data) {
                                $('.log-in-link').addClass('d-none');
                                $('.logout-header').removeClass('d-none');
                                let serverResp = data
                                let userName = `${serverResp.data.customer.firstname} ${serverResp.data.customer && (serverResp.data.customer.lastname ? serverResp.data.customer.lastname : '')}`;
                                let mobile = `${serverResp.data.customer.mobile}`;
                                let email = `${serverResp.data.customer.email}`;
                                let state = `${serverResp.data.customer.addresses[0].region.region}`;
                                let city = `${serverResp.data.customer.addresses[0].city}`;
                                let pincode = `${serverResp.data.customer.addresses[0].postcode}`;
                                $('#ride_events_loggedin_register input[name=fullName]').val(userName);
                                $('#ride_events_loggedin_register input[name=mobile]').val(mobile);
                                $('#ride_events_loggedin_register input[name=email]').val(email);
                                $('#user-state .floating-select span').text(state);
                                $('#user-city .floating-select span').text(city);
                                $('#ride_events_loggedin_register input[name=pin]').val(pincode);
                            });
                        }
                        $("html").css({
                            overflow: "hidden",
                            height: "100vh",
                        });
                        $("#ride_event_form").modal();
                    } else {
                        $("#event-register-status .event_status_sucess").addClass("d-none");
                        $("#event-register-status #non-vehicle").removeClass("d-none");
                        $("#event-register-status").modal();
                    }
                } catch (err) {
                    $("#event-register-status .event_status_sucess").addClass("d-none");
                    $("#event-register-status #non-user").removeClass("d-none");
                    $("#event-register-status").modal();
                }
            } else if (cartItem) {
                localStorage.removeItem('cart-login');
                window.location.href = "/en-in/cart.html";
            } else if (window.location.href.indexOf('/good-life/') != -1 || window.location.href.indexOf('/xclan/') != -1 || window.location.href.indexOf('/my-account/') != -1) {
                location.reload();
            }
            else if (window.location.href.indexOf('/exchange') != -1) {
                sessionStorage.setItem("exchangeLoginType", 'existing');
                window.location.href = $('#loginForm').find('[name="exchangedPage"]').val();
            } else {
                window.location.href = $('#loginForm').find('[name="loggedInPage"]').val();
            }
        } else {
            let vehicleDetailJson = [];
            let selectedVehicle = new Object();
            sessionStorage.setItem("vehicleDetails", btoa(JSON.stringify(vehicleDetailJson)));
            sessionStorage.setItem("selectedVehicleData", btoa(JSON.stringify(selectedVehicle)));
            let dataObject = JSON.parse(atob(sessionStorage.getItem('data')));
            dataObject.selectedVehicle = selectedVehicle;
            dataObject.vehicleProfile = vehicleDetailJson;
            let detailsDataRequest = btoa(JSON.stringify(dataObject));
            sessionStorage.setItem("data", detailsDataRequest);
            sendAjaxCall(`${defaultservlet}.getcustomercookiedata.json`, {data: detailsDataRequest}).then(function (resp) {
                // nothing do
            });
            if (isNextCall) {
                if(cartItem){
                    localStorage.removeItem('cart-login');
                    window.location.href = "/en-in/cart.html";
                }
                window.location.href = $('#loginForm').find('[name="pageAfterLogin"]').val();
            }
        }
    }).catch(function(err) {
        console.log(err);
        if (isNextCall) {
            let cartItem = localStorage.getItem('cart-login');
            if(cartItem){
                localStorage.removeItem('cart-login');
                window.location.href = "/en-in/cart.html";
            }
            window.location.href = $('#loginForm').find('[name="pageAfterLogin"]').val();
        }
    });
}

function createRequestBody(process_ID, create_row, in_process_ID) {
    var createRequestBody = {
        "PWSESSIONRS": {
            "PWPROCESSRS": {
                "PWHEADER": {
                    "IN_PROCESS_ID": in_process_ID == null ? "1" : in_process_ID,
                    "APP_ID": "CWS",
                    "ORG_ID": "CWS",
                    "OUT_PROCESS_ID": process_ID,
                    "LOGIN_ID": ""
                },
                "PWDATA": {
                    [process_ID]: {
                        "Row": create_row
                    }
                },
                "PWERROR": ""
            }
        }
    }
    return createRequestBody;
}

function sendAjaxCall(URL, data) {
    return new Promise(function(resolve, reject) {
        $.ajax({
            type: "POST",
            url: URL,
            data: data,
            success: function(response) {
                resolve(response); // Resolve promise and go to then()
            },
            error: function(err) {
                reject(err) // Reject the promise and go to catch()
            }
        })
    })
}

function send_AEM_AjaxCall(URL, data) {
    return new Promise(function(resolve, reject) {
        $.ajax({
            type: "POST",
            url: URL,
            contentType:"application/x-www-form-urlencoded",
            data: data,
            headers: {
                'Authorization': sessionStorage.getItem("data") != null ? JSON.parse(atob(sessionStorage.getItem("data"))).token : ''
            },
            success: function(response) {
                resolve(response); // Resolve promise and go to then()
            },
            error: function(err) {
                reject(err) // Reject the promise and go to catch()
            }
        })
    })
}

function get_browser() {
    var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if(/trident/i.test(M[1])){
        tem=/\brv[ :]+(\d+)/g.exec(ua) || [];
        return {name:'IE',version:(tem[1]||'')};
    }
    if(M[1]==='Chrome'){
        tem=ua.match(/\bOPR|Edge\/(\d+)/)
        if(tem!=null)   {return {name:'Opera', version:tem[1]};}
    }
    M=M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
    if((tem=ua.match(/version\/(\d+)/i))!=null) {M.splice(1,1,tem[1]);}
    return {
        name: M[0],
        version: M[1]
    };
}

function convertDate(date) {
    var getDate = new Date(date).getDate();
    var getMonthYear = new Date(date).toLocaleString('en-us', {
        month: 'long',
        year: 'numeric'
    });
    var formattedDate = getDate + ' ' + getMonthYear;
    return formattedDate;
}

function convertShortDate(date) {
    var getDate = new Date(date).getDate();
    getDate = getDate < 10 ? "0" + getDate : getDate
    var getMonthYear = new Date(date).toLocaleString('en-us', {
        month: 'short',
        year: 'numeric'
    });
    var formattedDate = getDate + '-' + getMonthYear;
    return formattedDate;
}

function convertDateTime(dateTime) {
    var getDate = new Date(dateTime).getDate();
    var getMonthYear = new Date(dateTime).toLocaleString('en-us', {
        month: 'long',
        year: 'numeric'
    });
    var formattedDate = getDate + ' ' + getMonthYear;
    const timeString12hr = new Date(dateTime)
        .toLocaleTimeString('en-US', {
            timeZone: 'IST',
            hour12: true,
            hour: 'numeric',
            minute: 'numeric'
        });

    return formattedDate + ', ' + timeString12hr;
}

function convertTime(date) {
    const timeString12hr = new Date(date)
        .toLocaleTimeString('en-US', {
            timeZone: 'IST',
            hour12: true,
            hour: 'numeric',
            minute: 'numeric'
        });

    return timeString12hr;
}
function imgExists(url)
{
    var http = new XMLHttpRequest();
    http.open('HEAD', url, false);
    http.send();
    return http.status != 404;
}

function getImagePath(model,color) {
    let path = "/content/dam/hero-aem-website/in/servicejourney/myvehicles/" + model.replace(/ /g, '-').toLowerCase().replace('+', '-').replace('*', '-') + "/" + color.toLowerCase() + ".png"
    if(imgExists(path)) {
        return path;
    }else if(imgExists("/content/dam/hero-aem-website/in/servicejourney/myvehicles/" + model.replace(/ /g, '-').toLowerCase().replace('+', '-').replace('*', '-') + "/all.png")){
        return "/content/dam/hero-aem-website/in/servicejourney/myvehicles/" + model.replace(/ /g, '-').toLowerCase().replace('+', '-').replace('*', '-') + "/all.png";
    }else {
        return "/content/dam/hero-aem-website/in/servicejourney/myvehicles/all.png";
    }
}


// code to return initials of a string

function getInitials(nameString) {
    const fullName = nameString.split(' ');
    let initials;
    if (fullName.length > 1) {
        initials = fullName.shift().charAt(0) + fullName.pop().charAt(0);
        return initials.toUpperCase();
    } else {
        initials = nameString.charAt(0).toUpperCase() + nameString.charAt(1).toLowerCase();
        return initials;
    }
}

function showInitials(){
    var displayinital = getInitials(JSON.parse(atob(sessionStorage.getItem("data"))).name);
    var getImagePath = JSON.parse(atob(sessionStorage.getItem("data"))).profilePicPath;
    $('.fetch-image .initials').html(displayinital);
    if (getImagePath && getImagePath !== '') {
        $('.fetch-image .initials').hide();
        $('.fetch-image').find('img').show();
    } else {
        $('.fetch-image').find('img').hide();
        $('.fetch-image .initials').show();
    }
}
$(document).ready(function () {
    $('.megamenu-li').on('click', function() {
        $(this).siblings().removeClass('active');
         if( $(event.target).hasClass('nav-link') || $(event.target.parentElement).hasClass('nav-link')){
             $(this).toggleClass('active');
             if($('.nav-item.dropdown.megamenu-li.active')?.length > 0) {
                $('body').addClass('position-fixed');
             } else {
                $('body').removeClass('position-fixed');
             }
             if($('.e-shop').hasClass('active')){
                    $(this).parent().siblings().find('.megamenu-li').removeClass('active');
             }
        }
    });
     if (window.innerWidth <= 991) {
        $('.megamenu-li').on('click', function() {
          $('.megamenu-li').removeClass('focused');
          $(this).addClass('focused');
        });
        $('.navbar-toggler').on('click', function(){
          $('.megamenu-li').removeClass('active focused');
          if($('body').hasClass('fixedcontent')){
			$('body').removeClass('fixedcontent');
		  }else{
			setTimeout(toggleScroll,500);
		  }
          if($('body').hasClass('position-fixed')){
            $('body').removeClass('position-fixed')
          }
        });
      }
      
      function toggleScroll(){
		$('body').addClass('fixedcontent');
	  }
});
function validateNumbersOnly(e) {
  var unicode = e.charCode ? e.charCode : e.keyCode;
  if (
    unicode == 8 ||
    unicode == 9 ||
    (unicode > 47 && unicode < 58) ||
    unicode == 43 ||
    unicode == 45
  ) {
    return true;
  } else {
    //alert("This field accepts only Numbers");
    return false;
  }
}
$(document).ready(function () {
  if ($("#register").length > 0) {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let captchText = "";
    let currentForm = $("#contactfrm");
    createCaptcha(currentForm);
    let eventcategory = $("#eventcategory");
    $(".event-names").length > 0 &&
      $(".event-names").each(function () {
        let names = $(this).attr("aria-label");
        eventcategory.append(`<option value="${names}">${names}</option>`);
      });
    $("#Submit").on("click", function () {
      let currentForm = $(this).closest("form");
      if (!$(".invalid-otp-message").hasClass('d-none')) {
        $(".invalid-otp-message").addClass("d-none");
      }
      if (currentForm.valid()) {
        if (
          $("#cpatchaTextBox").length > 0 &&
          $("#cpatchaTextBox").val() != captchText
        ) {
          $(".invalid-otp-message").removeClass("d-none");
        } else {
          registerForm();
        }
      } else {
        let formerrorList = currentForm.data("validator").errorList;
        let fieldlist = "";
        $.each(formerrorList, function (key, value) {
          if ("" !== fieldlist) {
            fieldlist = fieldlist + "|";
          }
          fieldlist = fieldlist + formerrorList[key].element.name;
        });
      }
    });

    function registerForm() {
      $("html, body").animate(
        {
          scrollTop: $("form").offset().top - 180,
        },
        1000
      );

      $("#Submit").prop("disabled", true);
      var Submitbutton = document.getElementById("Submit");
      //Submitbutton.src = '/en-in//images/Please-wait.png';
      document.getElementById("Submit").value = "Please wait";
      document.getElementById("Submit").style.letterSpacing = "0.5px";
      document.getElementById("Submit").style.textAlign = "center";

      var event = jQuery("#contactfrm #eventcategory").val()?.replace(/\//g, " per ");
      var name = jQuery("#contactfrm #name").val();
      var age = jQuery("#contactfrm #age").val();
      var email = jQuery("#contactfrm #email").val();
      var mobile = jQuery("#contactfrm #mobile").val();
      var city = jQuery("#contactfrm #city").val();
      var date = jQuery("#contactfrm #date").val();
      var vehicle = jQuery("#contactfrm #existing_vehicle").val();
      var address = jQuery("#contactfrm #address").val();
      var fb_handle = jQuery("#contactfrm #fb_handle").val();
      var tweet_handle = jQuery("#contactfrm #tweet_handle").val();
      var insta_handle = jQuery("#contactfrm #insta_handle").val();
      var data_rider = $("input[name='chk_rider']:checked").val();
      var rider_community_name = jQuery(
        "#contactfrm #rider_community_name"
      ).val();
      var utm_source = "";
      var utm_medium = "";
      var utm_term = "";
      var utm_content = "";
      var utm_campaign = "";
      var source = "";
      var urldata = "";
      var webpath = "/en-in/";
      var url = webpath + "xtracks/?type=" + urldata;

      let eventDesc = $(`[aria-label="${event}"]`).closest(".event-list");
      let eventName = eventDesc.find("h5") && eventDesc.find("h5").text();
      let varLocation =
        eventDesc.find(".location") &&
        eventDesc.find(".location").text().trim();
      let varDate =
        eventDesc.find(".evt-date") &&
        eventDesc.find(".evt-date").text().trim().replaceAll(" ", "");
      let varTime =
        eventDesc.find(".time") && eventDesc.find(".time").text().trim();
      let googleLocation =
        eventDesc.find(".location a") &&
        eventDesc.find(".location a").attr("href");
      var sms_text = `Thank you for registering for Hero Ride Event - ${eventName}. Google location for the event: ${googleLocation}. -HMCL`;
      let xtrackFormData = {
        event: event,
        name: name,
        age: age,
        email: email,
        mobile: mobile,
        city: $(".xpulse-form-wrapp .regform-fields").length ? city : null,
        date: $(".xpulse-form-wrapp .regform-fields").length ? date : null,
        vehicle: vehicle,
        address: address,
        fb_handle: fb_handle,
        tweet_handle: tweet_handle,
        insta_handle: insta_handle,
        data_rider: data_rider,
        rider_community_name: rider_community_name,
        sms_text: sms_text.replaceAll("\n", " "),
      };
      var xtrackRelativePath = $("#register").attr(
        "data-component-relativePath"
      );

      var xtrackFormPath = xtrackRelativePath.replace(
        "jcr:content",
        "_jcr_content"
      );
      // console.log(xtrackFormData, "xtrackFormData");
      $.ajax({
        url: xtrackFormPath,
        type: "POST",
        data: JSON.stringify(xtrackFormData),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          let jsonResp = resp;
          if (typeof jsonResp != "object") {
            jsonResp = JSON.parse(resp);
          }
          if (
            (jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
              .MB_User_RegistrationV2 &&
              jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.MB_User_RegistrationV2
                .Row[0].status == "success") ||
            (jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
              .Xpulse_Xperience_Registration &&
              jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
                .Xpulse_Xperience_Registration.Row[0].status == "success")
          ) {
            if ($('select#eventcategory').val() == "XDrags Underground") {
              window.location.href = "https://insider.in/hero-xdrags-underground-aug6-2023/event";
            }
            else if ($('select#eventcategory').val() == "XDrags Cult") {
              window.location.href = "https://insider.in/hero-xdrags-cult-aug27-2023/event";
            }
            else {
              $("select").val("");
              $("input").val("");
              $("textarea").val("");
              $("input[name='chk_rider']").val("0");
              $("#Submit").prop("disabled", true);
              $("#Submit").addClass("disable-btn");
              var Submitbutton = document.getElementById("Submit");
              document.getElementById("Submit").value = "Submit";
              $("#Submit").removeAttr("style");
              $("#tyDiv").show();
              $(".registration-form h6").html("");
              $("#Submit").addClass("disable-btn");
              document.getElementById("error").innerHTML = "";
            }
          } else {
            $("#Submit").prop("disabled", false);
            var Submitbutton = document.getElementById("Submit");
            document.getElementById("Submit").value = "Submit";
            $("#Submit").removeAttr("style");
            let respErrorMsg =
              (jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
                .MB_User_RegistrationV2 &&
                jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
                  .MB_User_RegistrationV2.Row[0].message) ||
              (jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
                .Xpulse_Xperience_Registration &&
                jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA
                  .Xpulse_Xperience_Registration.Row[0].message);
            jQuery("#error").html(respErrorMsg);
            // document.getElementById("thankyou").innerHTML = "";
            $("#tyDiv").hide();
          }
        },
        error: function (error) { },
      });
      return false;
    }
    $("input[name='chk_rider']").on("click", function () {
      var data_rider = $("input[name='chk_rider']:checked").val();
      if (data_rider == 1) {
        $("#chk_name").show();
      } else {
        $("#chk_name").val(" ");
        $("#chk_name").hide();
      }
    });
    function customValidationXtrack($form) {
      // for mobile no fields
      jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      });
      //to allow numbers only
      jQuery.validator.addMethod("numbersOnly", function (value) {
        return /^[0-9]+$/i.test(value);
      });
      //to allow indian numbers only
      jQuery.validator.addMethod("indianNumber", function (value) {
        return /^[6789]\d{9}$/i.test(value);
      });
      //to allow only character
      jQuery.validator.addMethod("charactersOnly", function (value) {
        return /^[a-zA-Z&\s]+$/i.test(value);
      });
      //for email
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      //for valid age
      jQuery.validator.addMethod("aboveEighteen", function (value) {
        return /^\d{2,}$/.test(value) && parseInt(value) >= 18;
      });
      //for valid future dates
      jQuery.validator.addMethod("onlyFutureDates", function (value) {
        let pickedDate = Date.parse(value.replace(/-/g, " "));
        let todaysDate = new Date();
        return !(pickedDate <= todaysDate);
      });
      //for valid mobile number
      jQuery.validator.addMethod("validNumber", function (value) {
        const disallowedNumbers = [
          "0123456789",
          "1111111111",
          "2222222222",
          "3333333333",
          "4444444444",
          "5555555555",
          "6666666666",
          "7777777777",
          "8888888888",
          "9999999999",
          "0000000000",
          "1234567890",
          "1010101010",
          "2020202020",
          "3030303030",
          "4040404040",
          "5050505050",
        ];
        if (disallowedNumbers.indexOf(value) !== -1) {
          return false;
        }
        if (value.length < 10) {
          return false;
        } else {
          return true;
        }
      });
      //   book-test-drive-form
      $form.validate({
        ignore: [],
        rules: {
          name: {
            required: true,
            charactersOnly: true,
          },
          mobile: {
            required: true,
            numbersOnly: true,
            validNumber: true,
            indianNumber: true,
          },
          city: {
            required: true,
            charactersOnly: true,
          },
          date: {
            required: true,
            onlyFutureDates: true,
          },
          datepulse: {
            required: true,
            onlyFutureDates: true,
            min: false,
          },
          captcha: {
            required: ".ignore-validation:visible",
          },
          email: {
            required: true,
            emailOnly: true,
          },
          eventcategory: {
            required: true,
          },
          age: {
            aboveEighteen: true,
          },
        },
        messages: {
          name: {
            required: $('[name="name"]').data("validation-msg-req"),
            charactersOnly: $('[name="name"]').data("validation-msg-format"),
          },
          mobile: {
            required: $('[name="mobile"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            validNumber: "Please enter a valid number",
            indianNumber: "Please enter a valid number"
          },
          email: {
            required: $('[name="email"]').data("validation-msg-req"),
            emailOnly: $('[name="email"]').data("validation-msg-format"),
          },
          city: {
            required: $('[name="city"]').data("validation-msg-req"),
            charactersOnly: $('[name="city"]').data("validation-msg-format"),
          },
          date: {
            required: $('[name="date"]').data("validation-msg-req"),
            onlyFutureDates: "Date should be greater than current date",
          },
          datepulse: {
            required: $('[name="datepulse"]').data("validation-msg-req"),
            onlyFutureDates: "Date should be greater than current date",
          },
          eventcategory: {
            required: $('[name="eventcategory"]').data("validation-msg-req"),
          },
          age: {
            aboveEighteen: $('[name="age"]').data("validation-msg-req"),
          },
        },
      });
    }
    if ($("#contactfrm").length > 0) {
      customValidationXtrack($("#contactfrm"));
    }

    // CAPTCHA CODE
    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }
    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }
    $(".refresh").on("click", function () {
      createCaptcha($(this).parents("form"));
    });
    function createCaptcha(currentForm) {
      sessionStorage.setItem("tempID", generateId());
      var captchaData = {
        reqID: sessionStorage.getItem("tempID"),
      };
      $.ajax({
        url: defaultservlet + ".captcha.html",
        type: "POST",
        data: captchaData,
        success: function (resp) {
          $(currentForm).find("#captcha-img").remove();
          createCaptchaImage(resp);
          captchText = resp;
        },
        error: function () { },
      });
    }
    function createCaptchaImage(resp) {
      var canv = document.createElement("canvas");
      canv.id = "captcha-img";
      canv.width = 200;
      canv.height = 50;
      var context = canv.getContext("2d");

      context.font = "bold 20px Arial";
      const spaceWidth = canv.width - context.measureText(resp).width - 40;
      const wordSpace = Math.floor(spaceWidth / resp.length);
      let left = 10;
      for (let i = 0; i < resp.length; i++) {
        const deg = (Math.random() * 30 * Math.PI) / 180;
        const x = left;
        const y = canv.height / 2 + Math.random() * 10;

        context.translate(x, y);
        context.rotate(deg);

        context.fillStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.fillText(resp[i], 0, 0);

        context.rotate(-deg);
        context.translate(-x, -y);

        left +=
          context.measureText(resp[i]).width +
          wordSpace +
          Math.floor(Math.random() * 5);
      }

      const strokeLength = resp.length * Math.round(Math.random() + 1) + 3;
      for (let i = 0; i < strokeLength; i++) {
        context.strokeStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.beginPath();
        context.moveTo(Math.random() * 100, Math.random() * 50);
        //context.lineTo(Math.random() * 100, Math.random() * 50);
        const x = Math.random() * 100;
        const y = Math.random() * 50;
        context.moveTo(x, y);
        //context.lineTo(x + 1, y + 1);
        context.stroke();
      }
      if ($("#captcha").length > 0) {
        document.getElementById("captcha").appendChild(canv); // adds the canvas to the body element
      }
    }

    $('[href="#register"]').click(function () {
      $("html, body").animate(
        {
          scrollTop: $("#register").offset().top - 120,
        },
        1000
      );
    });

    $('[href="#upcomingEvents"]').attr({
      "data-toggle": "modal",
      "data-target": "#upcomingEvents",
    });

    let maxLength = $(".event-list").length > 1;
    if (maxLength) {
      $(".event-list").each(function () {
        $(this).parent().addClass("col-md-6 col-lg-6 ");
      });
    } else {
      $(".event-list").each(function () {
        $(this).parent().addClass("col-md-12 col-lg-12 ");
      });
    }

    // Modal JS
    $("#upcomingEvents .btn-register-now").on("click", function () {
      $("#upcomingEvents").modal("hide");
      let eventNames = $(this).attr("aria-label");
      $("#eventcategory").val(eventNames);
      $("html, body").animate(
        {
          scrollTop: $("#register").offset().top - 120,
        },
        1000
      );
    });
  }
});

!function () { function e(e) { return e && e.__esModule ? e.default : e } function t(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function i(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } function n(e, t) { for (var i = 0; i < t.length; i++) { var n = t[i]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n) } } function r(e, t, i) { return t && n(e.prototype, t), i && n(e, i), e } function a(e) { return a = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) }, a(e) } function o(e, t) { return o = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e }, o(e, t) } function l(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), t && o(e, t) } function s(e, i) { return !i || "object" != ((n = i) && n.constructor === Symbol ? "symbol" : typeof n) && "function" != typeof i ? t(e) : i; var n } var u; function c(e) { return Array.isArray(e) || "[object Object]" == {}.toString.call(e) } function d(e) { return !e || "object" != typeof e && "function" != typeof e } u = function e() { var t = [].slice.call(arguments), i = !1; "boolean" == typeof t[0] && (i = t.shift()); var n = t[0]; if (d(n)) throw new Error("extendee must be an object"); for (var r = t.slice(1), a = r.length, o = 0; o < a; o++) { var l = r[o]; for (var s in l) if (Object.prototype.hasOwnProperty.call(l, s)) { var u = l[s]; if (i && c(u)) { var h = Array.isArray(u) ? [] : {}; n[s] = e(!0, Object.prototype.hasOwnProperty.call(n, s) && !d(n[s]) ? n[s] : h, u) } else n[s] = u } } return n }; var h = function () { "use strict"; function e() { i(this, e) } return r(e, [{ key: "on", value: function (e, t) { return this._callbacks = this._callbacks || {}, this._callbacks[e] || (this._callbacks[e] = []), this._callbacks[e].push(t), this } }, { key: "emit", value: function (e) { for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)i[n - 1] = arguments[n]; this._callbacks = this._callbacks || {}; var r = this._callbacks[e], a = !0, o = !1, l = void 0; if (r) try { for (var s, u = r[Symbol.iterator](); !(a = (s = u.next()).done); a = !0) { var c = s.value; c.apply(this, i) } } catch (e) { o = !0, l = e } finally { try { a || null == u.return || u.return() } finally { if (o) throw l } } return this.element && this.element.dispatchEvent(this.makeEvent("dropzone:" + e, { args: i })), this } }, { key: "makeEvent", value: function (e, t) { var i = { bubbles: !0, cancelable: !0, detail: t }; if ("function" == typeof window.CustomEvent) return new CustomEvent(e, i); var n = document.createEvent("CustomEvent"); return n.initCustomEvent(e, i.bubbles, i.cancelable, i.detail), n } }, { key: "off", value: function (e, t) { if (!this._callbacks || 0 === arguments.length) return this._callbacks = {}, this; var i = this._callbacks[e]; if (!i) return this; if (1 === arguments.length) return delete this._callbacks[e], this; for (var n = 0; n < i.length; n++) { var r = i[n]; if (r === t) { i.splice(n, 1); break } } return this } }]), e }(); var p = { url: null, method: "post", withCredentials: !1, timeout: null, parallelUploads: 2, uploadMultiple: !1, chunking: !1, forceChunking: !1, chunkSize: 2e6, parallelChunkUploads: !1, retryChunks: !1, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: !0, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: .8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: null, headers: null, clickable: !0, ignoreHiddenFiles: !0, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: !0, autoQueue: !0, addRemoveLinks: !1, previewsContainer: null, disablePreviews: !1, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: !1, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel", dictUploadCanceled: "Upload canceled.", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Completed", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function () { }, params: function (e, t, i) { if (i) return { dzuuid: i.file.upload.uuid, dzchunkindex: i.index, dztotalfilesize: i.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: i.file.upload.totalChunkCount, dzchunkbyteoffset: i.index * this.options.chunkSize } }, accept: function (e, t) { return t() }, chunksUploaded: function (e, t) { t() }, fallback: function () { var e; this.element.className = "".concat(this.element.className, " dz-browser-not-supported"); var t = !0, i = !1, n = void 0; try { for (var r, a = this.element.getElementsByTagName("div")[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var o = r.value; if (/(^| )dz-message($| )/.test(o.className)) { e = o, o.className = "dz-message"; break } } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } e || (e = f.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(e)); var l = e.getElementsByTagName("span")[0]; return l && (null != l.textContent ? l.textContent = this.options.dictFallbackMessage : null != l.innerText && (l.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm()) }, resize: function (e, t, i, n) { var r = { srcX: 0, srcY: 0, srcWidth: e.width, srcHeight: e.height }, a = e.width / e.height; null == t && null == i ? (t = r.srcWidth, i = r.srcHeight) : null == t ? t = i * a : null == i && (i = t / a); var o = (t = Math.min(t, r.srcWidth)) / (i = Math.min(i, r.srcHeight)); if (r.srcWidth > t || r.srcHeight > i) if ("crop" === n) a > o ? (r.srcHeight = e.height, r.srcWidth = r.srcHeight * o) : (r.srcWidth = e.width, r.srcHeight = r.srcWidth / o); else { if ("contain" !== n) throw new Error("Unknown resizeMethod '".concat(n, "'")); a > o ? i = t / a : t = i * a } return r.srcX = (e.width - r.srcWidth) / 2, r.srcY = (e.height - r.srcHeight) / 2, r.trgWidth = t, r.trgHeight = i, r }, transformFile: function (e, t) { return (this.options.resizeWidth || this.options.resizeHeight) && e.type.match(/image.*/) ? this.resizeImage(e, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t) : t(e) }, previewTemplate: e('<div class="dz-file-preview dz-preview"> <div class="dz-image"><img data-dz-thumbnail=""></div> <div class="dz-details"> <div class="dz-size"><span data-dz-size=""></span></div> <div class="dz-filename"><span data-dz-name=""></span></div> </div> <div class="dz-progress"> <span class="dz-upload" data-dz-uploadprogress=""></span> </div> <div class="dz-error-message"><span data-dz-errormessage=""></span></div> <div class="dz-success-mark"> <svg width="54" height="54" fill="#fff"><path d="m10.207 29.793 4.086-4.086a1 1 0 0 1 1.414 0l5.586 5.586a1 1 0 0 0 1.414 0l15.586-15.586a1 1 0 0 1 1.414 0l4.086 4.086a1 1 0 0 1 0 1.414L22.707 42.293a1 1 0 0 1-1.414 0L10.207 31.207a1 1 0 0 1 0-1.414Z"/></svg> </div> <div class="dz-error-mark"> <svg width="54" height="54" fill="#fff"><path d="m26.293 20.293-7.086-7.086a1 1 0 0 0-1.414 0l-4.586 4.586a1 1 0 0 0 0 1.414l7.086 7.086a1 1 0 0 1 0 1.414l-7.086 7.086a1 1 0 0 0 0 1.414l4.586 4.586a1 1 0 0 0 1.414 0l7.086-7.086a1 1 0 0 1 1.414 0l7.086 7.086a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7.086-7.086a1 1 0 0 1 0-1.414l7.086-7.086a1 1 0 0 0 0-1.414l-4.586-4.586a1 1 0 0 0-1.414 0l-7.086 7.086a1 1 0 0 1-1.414 0Z"/></svg> </div> </div>'), drop: function (e) { return this.element.classList.remove("dz-drag-hover") }, dragstart: function (e) { }, dragend: function (e) { return this.element.classList.remove("dz-drag-hover") }, dragenter: function (e) { return this.element.classList.add("dz-drag-hover") }, dragover: function (e) { return this.element.classList.add("dz-drag-hover") }, dragleave: function (e) { return this.element.classList.remove("dz-drag-hover") }, paste: function (e) { }, reset: function () { return this.element.classList.remove("dz-started") }, addedfile: function (e) { if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer && !this.options.disablePreviews) { var t = this; e.previewElement = f.createElement(this.options.previewTemplate.trim()), e.previewTemplate = e.previewElement, this.previewsContainer.appendChild(e.previewElement); var i = !0, n = !1, r = void 0; try { for (var a, o = e.previewElement.querySelectorAll("[data-dz-name]")[Symbol.iterator](); !(i = (a = o.next()).done); i = !0) { var l = a.value; l.textContent = e.name } } catch (e) { n = !0, r = e } finally { try { i || null == o.return || o.return() } finally { if (n) throw r } } var s = !0, u = !1, c = void 0; try { for (var d, h = e.previewElement.querySelectorAll("[data-dz-size]")[Symbol.iterator](); !(s = (d = h.next()).done); s = !0)(l = d.value).innerHTML = this.filesize(e.size) } catch (e) { u = !0, c = e } finally { try { s || null == h.return || h.return() } finally { if (u) throw c } } this.options.addRemoveLinks && (e._removeLink = f.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>'.concat(this.options.dictRemoveFile, "</a>")), e.previewElement.appendChild(e._removeLink)); var p = function (i) { var n = t; if (i.preventDefault(), i.stopPropagation(), e.status === f.UPLOADING) return f.confirm(t.options.dictCancelUploadConfirmation, (function () { return n.removeFile(e) })); var r = t; return t.options.dictRemoveFileConfirmation ? f.confirm(t.options.dictRemoveFileConfirmation, (function () { return r.removeFile(e) })) : t.removeFile(e) }, m = !0, v = !1, y = void 0; try { for (var g, b = e.previewElement.querySelectorAll("[data-dz-remove]")[Symbol.iterator](); !(m = (g = b.next()).done); m = !0) { g.value.addEventListener("click", p) } } catch (e) { v = !0, y = e } finally { try { m || null == b.return || b.return() } finally { if (v) throw y } } } }, removedfile: function (e) { return null != e.previewElement && null != e.previewElement.parentNode && e.previewElement.parentNode.removeChild(e.previewElement), this._updateMaxFilesReachedClass() }, thumbnail: function (e, t) { if (e.previewElement) { e.previewElement.classList.remove("dz-file-preview"); var i = !0, n = !1, r = void 0; try { for (var a, o = e.previewElement.querySelectorAll("[data-dz-thumbnail]")[Symbol.iterator](); !(i = (a = o.next()).done); i = !0) { var l = a.value; l.alt = e.name, l.src = t } } catch (e) { n = !0, r = e } finally { try { i || null == o.return || o.return() } finally { if (n) throw r } } return setTimeout((function () { return e.previewElement.classList.add("dz-image-preview") }), 1) } }, error: function (e, t) { if (e.previewElement) { e.previewElement.classList.add("dz-error"), "string" != typeof t && t.error && (t = t.error); var i = !0, n = !1, r = void 0; try { for (var a, o = e.previewElement.querySelectorAll("[data-dz-errormessage]")[Symbol.iterator](); !(i = (a = o.next()).done); i = !0) { a.value.textContent = t } } catch (e) { n = !0, r = e } finally { try { i || null == o.return || o.return() } finally { if (n) throw r } } } }, errormultiple: function () { }, processing: function (e) { if (e.previewElement && (e.previewElement.classList.add("dz-processing"), e._removeLink)) return e._removeLink.innerHTML = this.options.dictCancelUpload }, processingmultiple: function () { }, uploadprogress: function (e, t, i) { var n = !0, r = !1, a = void 0; if (e.previewElement) try { for (var o, l = e.previewElement.querySelectorAll("[data-dz-uploadprogress]")[Symbol.iterator](); !(n = (o = l.next()).done); n = !0) { var s = o.value; "PROGRESS" === s.nodeName ? s.value = t : s.style.width = "".concat(t, "%") } } catch (e) { r = !0, a = e } finally { try { n || null == l.return || l.return() } finally { if (r) throw a } } }, totaluploadprogress: function () { }, sending: function () { }, sendingmultiple: function () { }, success: function (e) { if (e.previewElement) return e.previewElement.classList.add("dz-success") }, successmultiple: function () { }, canceled: function (e) { return this.emit("error", e, this.options.dictUploadCanceled) }, canceledmultiple: function () { }, complete: function (e) { if (e._removeLink && (e._removeLink.innerHTML = this.options.dictRemoveFile), e.previewElement) return e.previewElement.classList.add("dz-complete");}, completemultiple: function () { }, maxfilesexceeded: function () { }, maxfilesreached: function () { }, queuecomplete: function () { }, addedfiles: function () { } }, f = function (n) { "use strict"; function o(n, r) { var l, c, d, h; if (i(this, o), (l = s(this, (c = o, a(c)).call(this))).element = n, l.clickableElements = [], l.listeners = [], l.files = [], "string" == typeof l.element && (l.element = document.querySelector(l.element)), !l.element || null == l.element.nodeType) throw new Error("Invalid dropzone element."); if (l.element.dropzone) throw new Error("Dropzone already attached."); o.instances.push(t(l)), l.element.dropzone = t(l); var f = null != (h = o.optionsForElement(l.element)) ? h : {}; if (l.options = e(u)(!0, {}, p, f, null != r ? r : {}), l.options.previewTemplate = l.options.previewTemplate.replace(/\n*/g, ""), l.options.forceFallback || !o.isBrowserSupported()) return s(l, l.options.fallback.call(t(l))); if (null == l.options.url && (l.options.url = l.element.getAttribute("action")), !l.options.url) throw new Error("No URL provided."); if (l.options.acceptedFiles && l.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated."); if (l.options.uploadMultiple && l.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking."); return l.options.acceptedMimeTypes && (l.options.acceptedFiles = l.options.acceptedMimeTypes, delete l.options.acceptedMimeTypes), null != l.options.renameFilename && (l.options.renameFile = function (e) { return l.options.renameFilename.call(t(l), e.name, e) }), "string" == typeof l.options.method && (l.options.method = l.options.method.toUpperCase()), (d = l.getExistingFallback()) && d.parentNode && d.parentNode.removeChild(d), !1 !== l.options.previewsContainer && (l.options.previewsContainer ? l.previewsContainer = o.getElement(l.options.previewsContainer, "previewsContainer") : l.previewsContainer = l.element), l.options.clickable && (!0 === l.options.clickable ? l.clickableElements = [l.element] : l.clickableElements = o.getElements(l.options.clickable, "clickable")), l.init(), l } return l(o, n), r(o, [{ key: "getAcceptedFiles", value: function () { return this.files.filter((function (e) { return e.accepted })).map((function (e) { return e })) } }, { key: "getRejectedFiles", value: function () { return this.files.filter((function (e) { return !e.accepted })).map((function (e) { return e })) } }, { key: "getFilesWithStatus", value: function (e) { return this.files.filter((function (t) { return t.status === e })).map((function (e) { return e })) } }, { key: "getQueuedFiles", value: function () { return this.getFilesWithStatus(o.QUEUED) } }, { key: "getUploadingFiles", value: function () { return this.getFilesWithStatus(o.UPLOADING) } }, { key: "getAddedFiles", value: function () { return this.getFilesWithStatus(o.ADDED) } }, { key: "getActiveFiles", value: function () { return this.files.filter((function (e) { return e.status === o.UPLOADING || e.status === o.QUEUED })).map((function (e) { return e })) } }, { key: "init", value: function () { var e = this, t = this, i = this, n = this, r = this, a = this, l = this, s = this, u = this, c = this, d = this; if ("form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(o.createElement('<div class="dz-default dz-message"><button class="dz-button" type="button">'.concat(this.options.dictDefaultMessage, "</button></div>"))), this.clickableElements.length) { var h = this, p = function () { var e = h; h.hiddenFileInput && h.hiddenFileInput.parentNode.removeChild(h.hiddenFileInput), h.hiddenFileInput = document.createElement("input"), h.hiddenFileInput.setAttribute("type", "file"), (null === h.options.maxFiles || h.options.maxFiles > 1) && h.hiddenFileInput.setAttribute("multiple", "multiple"), h.hiddenFileInput.className = "dz-hidden-input", null !== h.options.acceptedFiles && h.hiddenFileInput.setAttribute("accept", h.options.acceptedFiles), null !== h.options.capture && h.hiddenFileInput.setAttribute("capture", h.options.capture), h.hiddenFileInput.setAttribute("tabindex", "-1"), h.hiddenFileInput.style.visibility = "hidden", h.hiddenFileInput.style.position = "absolute", h.hiddenFileInput.style.top = "0", h.hiddenFileInput.style.left = "0", h.hiddenFileInput.style.height = "0", h.hiddenFileInput.style.width = "0", o.getElement(h.options.hiddenInputContainer, "hiddenInputContainer").appendChild(h.hiddenFileInput), h.hiddenFileInput.addEventListener("change", (function () { var t = e.hiddenFileInput.files, i = !0, n = !1, r = void 0; if (t.length) try { for (var a, o = t[Symbol.iterator](); !(i = (a = o.next()).done); i = !0) { var l = a.value; e.addFile(l) } } catch (e) { n = !0, r = e } finally { try { i || null == o.return || o.return() } finally { if (n) throw r } } e.emit("addedfiles", t), p() })) }; p() } this.URL = null !== window.URL ? window.URL : window.webkitURL; var f = !0, m = !1, v = void 0; try { for (var y, g = this.events[Symbol.iterator](); !(f = (y = g.next()).done); f = !0) { var b = y.value; this.on(b, this.options[b]) } } catch (e) { m = !0, v = e } finally { try { f || null == g.return || g.return() } finally { if (m) throw v } } this.on("uploadprogress", (function () { return e.updateTotalUploadProgress() })), this.on("removedfile", (function () { return t.updateTotalUploadProgress() })), this.on("canceled", (function (e) { return i.emit("complete", e) })), this.on("complete", (function (e) { var t = n; if (0 === n.getAddedFiles().length && 0 === n.getUploadingFiles().length && 0 === n.getQueuedFiles().length) return setTimeout((function () { return t.emit("queuecomplete") }), 0) })); var k = function (e) { if (function (e) { if (e.dataTransfer.types) for (var t = 0; t < e.dataTransfer.types.length; t++)if ("Files" === e.dataTransfer.types[t]) return !0; return !1 }(e)) return e.stopPropagation(), e.preventDefault ? e.preventDefault() : e.returnValue = !1 }; return this.listeners = [{ element: this.element, events: { dragstart: function (e) { return r.emit("dragstart", e) }, dragenter: function (e) { return k(e), a.emit("dragenter", e) }, dragover: function (e) { var t; try { t = e.dataTransfer.effectAllowed } catch (e) { } return e.dataTransfer.dropEffect = "move" === t || "linkMove" === t ? "move" : "copy", k(e), l.emit("dragover", e) }, dragleave: function (e) { return s.emit("dragleave", e) }, drop: function (e) { return k(e), u.drop(e) }, dragend: function (e) { return c.emit("dragend", e) } } }], this.clickableElements.forEach((function (e) { var t = d; return d.listeners.push({ element: e, events: { click: function (i) { return (e !== t.element || i.target === t.element || o.elementInside(i.target, t.element.querySelector(".dz-message"))) && t.hiddenFileInput.click(), !0 } } }) })), this.enable(), this.options.init.call(this) } }, { key: "destroy", value: function () { return this.disable(), this.removeAllFiles(!0), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, o.instances.splice(o.instances.indexOf(this), 1) } }, { key: "updateTotalUploadProgress", value: function () { var e, t = 0, i = 0; if (this.getActiveFiles().length) { var n = !0, r = !1, a = void 0; try { for (var o, l = this.getActiveFiles()[Symbol.iterator](); !(n = (o = l.next()).done); n = !0) { var s = o.value; t += s.upload.bytesSent, i += s.upload.total } } catch (e) { r = !0, a = e } finally { try { n || null == l.return || l.return() } finally { if (r) throw a } } e = 100 * t / i } else e = 100; return this.emit("totaluploadprogress", e, i, t) } }, { key: "_getParamName", value: function (e) { return "function" == typeof this.options.paramName ? this.options.paramName(e) : "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(e, "]") : "") } }, { key: "_renameFile", value: function (e) { return "function" != typeof this.options.renameFile ? e.name : this.options.renameFile(e) } }, { key: "getFallbackForm", value: function () { var e, t; if (e = this.getExistingFallback()) return e; var i = '<div class="dz-fallback">'; this.options.dictFallbackText && (i += "<p>".concat(this.options.dictFallbackText, "</p>")), i += '<input type="file" name="'.concat(this._getParamName(0), '" ').concat(this.options.uploadMultiple ? 'multiple="multiple"' : void 0, ' /><input type="submit" value="Upload!"></div>'); var n = o.createElement(i); return "FORM" !== this.element.tagName ? (t = o.createElement('<form action="'.concat(this.options.url, '" enctype="multipart/form-data" method="').concat(this.options.method, '"></form>'))).appendChild(n) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != t ? t : n } }, { key: "getExistingFallback", value: function () { var e = function (e) { var t = !0, i = !1, n = void 0; try { for (var r, a = e[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var o = r.value; if (/(^| )fallback($| )/.test(o.className)) return o } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } }, t = !0, i = !1, n = void 0; try { for (var r, a = ["div", "form"][Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var o, l = r.value; if (o = e(this.element.getElementsByTagName(l))) return o } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } } }, { key: "setupEventListeners", value: function () { return this.listeners.map((function (e) { return function () { var t = []; for (var i in e.events) { var n = e.events[i]; t.push(e.element.addEventListener(i, n, !1)) } return t }() })) } }, { key: "removeEventListeners", value: function () { return this.listeners.map((function (e) { return function () { var t = []; for (var i in e.events) { var n = e.events[i]; t.push(e.element.removeEventListener(i, n, !1)) } return t }() })) } }, { key: "disable", value: function () { var e = this; return this.clickableElements.forEach((function (e) { return e.classList.remove("dz-clickable") })), this.removeEventListeners(), this.disabled = !0, this.files.map((function (t) { return e.cancelUpload(t) })) } }, { key: "enable", value: function () { return delete this.disabled, this.clickableElements.forEach((function (e) { return e.classList.add("dz-clickable") })), this.setupEventListeners() } }, { key: "filesize", value: function (e) { var t = 0, i = "b"; if (e > 0) { for (var n = ["tb", "gb", "mb", "kb", "b"], r = 0; r < n.length; r++) { var a = n[r]; if (e >= Math.pow(this.options.filesizeBase, 4 - r) / 10) { t = e / Math.pow(this.options.filesizeBase, 4 - r), i = a; break } } t = Math.round(10 * t) / 10 } return "<strong>".concat(t, "</strong> ").concat(this.options.dictFileSizeUnits[i]) } }, { key: "_updateMaxFilesReachedClass", value: function () { return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached") } }, { key: "drop", value: function (e) { if (e.dataTransfer) { this.emit("drop", e); for (var t = [], i = 0; i < e.dataTransfer.files.length; i++)t[i] = e.dataTransfer.files[i]; if (t.length) { var n = e.dataTransfer.items; n && n.length && null != n[0].webkitGetAsEntry ? this._addFilesFromItems(n) : this.handleFiles(t) } this.emit("addedfiles", t) } } }, { key: "paste", value: function (e) { if (null != (t = null != e ? e.clipboardData : void 0, i = function (e) { return e.items }, null != t ? i(t) : void 0)) { var t, i; this.emit("paste", e); var n = e.clipboardData.items; return n.length ? this._addFilesFromItems(n) : void 0 } } }, { key: "handleFiles", value: function (e) { var t = !0, i = !1, n = void 0; try { for (var r, a = e[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var o = r.value; this.addFile(o) } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } } }, { key: "_addFilesFromItems", value: function (e) { var t = this; return function () { var i = [], n = !0, r = !1, a = void 0; try { for (var o, l = e[Symbol.iterator](); !(n = (o = l.next()).done); n = !0) { var s, u = o.value; null != u.webkitGetAsEntry && (s = u.webkitGetAsEntry()) ? s.isFile ? i.push(t.addFile(u.getAsFile())) : s.isDirectory ? i.push(t._addFilesFromDirectory(s, s.name)) : i.push(void 0) : null != u.getAsFile && (null == u.kind || "file" === u.kind) ? i.push(t.addFile(u.getAsFile())) : i.push(void 0) } } catch (e) { r = !0, a = e } finally { try { n || null == l.return || l.return() } finally { if (r) throw a } } return i }() } }, { key: "_addFilesFromDirectory", value: function (e, t) { var i = this, n = e.createReader(), r = function (e) { return t = console, i = "log", n = function (t) { return t.log(e) }, null != t && "function" == typeof t[i] ? n(t, i) : void 0; var t, i, n }, a = function () { var e = i; return n.readEntries((function (i) { if (i.length > 0) { var n = !0, r = !1, o = void 0; try { for (var l, s = i[Symbol.iterator](); !(n = (l = s.next()).done); n = !0) { var u = l.value, c = e; u.isFile ? u.file((function (e) { if (!c.options.ignoreHiddenFiles || "." !== e.name.substring(0, 1)) return e.fullPath = "".concat(t, "/").concat(e.name), c.addFile(e) })) : u.isDirectory && e._addFilesFromDirectory(u, "".concat(t, "/").concat(u.name)) } } catch (e) { r = !0, o = e } finally { try { n || null == s.return || s.return() } finally { if (r) throw o } } a() } return null }), r) }; return a() } }, { key: "accept", value: function (e, t) { this.options.maxFilesize && e.size > 1048576 * this.options.maxFilesize ? t(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(e.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : o.isValidFile(e, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (t(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", e)) : this.options.accept.call(this, e, t) : t(this.options.dictInvalidFileType) } }, { key: "addFile", value: function (e) { var t = this; e.upload = { uuid: o.uuidv4(), progress: 0, total: e.size, bytesSent: 0, filename: this._renameFile(e) }, this.files.push(e), e.status = o.ADDED, this.emit("addedfile", e), this._enqueueThumbnail(e), this.accept(e, (function (i) { i ? (e.accepted = !1, t._errorProcessing([e], i)) : (e.accepted = !0, t.options.autoQueue && t.enqueueFile(e)), t._updateMaxFilesReachedClass() })) } }, { key: "enqueueFiles", value: function (e) { var t = !0, i = !1, n = void 0; try { for (var r, a = e[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var o = r.value; this.enqueueFile(o) } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } return null } }, { key: "enqueueFile", value: function (e) { if (e.status !== o.ADDED || !0 !== e.accepted) throw new Error("This file can't be queued because it has already been processed or was rejected."); var t = this; if (e.status = o.QUEUED, this.options.autoProcessQueue) return setTimeout((function () { return t.processQueue() }), 0) } }, { key: "_enqueueThumbnail", value: function (e) { if (this.options.createImageThumbnails && e.type.match(/image.*/) && e.size <= 1048576 * this.options.maxThumbnailFilesize) { var t = this; return this._thumbnailQueue.push(e), setTimeout((function () { return t._processThumbnailQueue() }), 0) } } }, { key: "_processThumbnailQueue", value: function () { var e = this; if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) { this._processingThumbnail = !0; var t = this._thumbnailQueue.shift(); return this.createThumbnail(t, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, !0, (function (i) { return e.emit("thumbnail", t, i), e._processingThumbnail = !1, e._processThumbnailQueue() })) } } }, { key: "removeFile", value: function (e) { if (e.status === o.UPLOADING && this.cancelUpload(e), this.files = m(this.files, e), this.emit("removedfile", e), 0 === this.files.length) return this.emit("reset") } }, { key: "removeAllFiles", value: function (e) { null == e && (e = !1); var t = !0, i = !1, n = void 0; try { for (var r, a = this.files.slice()[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var l = r.value; (l.status !== o.UPLOADING || e) && this.removeFile(l) } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } return null } }, { key: "resizeImage", value: function (e, t, i, n, r) { var a = this; return this.createThumbnail(e, t, i, n, !0, (function (t, i) { if (null == i) return r(e); var n = a.options.resizeMimeType; null == n && (n = e.type); var l = i.toDataURL(n, a.options.resizeQuality); return "image/jpeg" !== n && "image/jpg" !== n || (l = g.restore(e.dataURL, l)), r(o.dataURItoBlob(l)) })) } }, { key: "createThumbnail", value: function (e, t, i, n, r, a) { var o = this, l = new FileReader; l.onload = function () { e.dataURL = l.result, "image/svg+xml" !== e.type ? o.createThumbnailFromUrl(e, t, i, n, r, a) : null != a && a(l.result) }, l.readAsDataURL(e) } }, { key: "displayExistingFile", value: function (e, t, i, n, r) { var a = void 0 === r || r; if (this.emit("addedfile", e), this.emit("complete", e), a) { var o = this; e.dataURL = t, this.createThumbnailFromUrl(e, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, (function (t) { o.emit("thumbnail", e, t), i && i() }), n) } else this.emit("thumbnail", e, t), i && i() } }, { key: "createThumbnailFromUrl", value: function (e, t, i, n, r, a, o) { var l = this, s = document.createElement("img"); return o && (s.crossOrigin = o), r = "from-image" != getComputedStyle(document.body).imageOrientation && r, s.onload = function () { var o = l, u = function (e) { return e(1) }; return "undefined" != typeof EXIF && null !== EXIF && r && (u = function (e) { return EXIF.getData(s, (function () { return e(EXIF.getTag(this, "Orientation")) })) }), u((function (r) { e.width = s.width, e.height = s.height; var l = o.options.resize.call(o, e, t, i, n), u = document.createElement("canvas"), c = u.getContext("2d"); switch (u.width = l.trgWidth, u.height = l.trgHeight, r > 4 && (u.width = l.trgHeight, u.height = l.trgWidth), r) { case 2: c.translate(u.width, 0), c.scale(-1, 1); break; case 3: c.translate(u.width, u.height), c.rotate(Math.PI); break; case 4: c.translate(0, u.height), c.scale(1, -1); break; case 5: c.rotate(.5 * Math.PI), c.scale(1, -1); break; case 6: c.rotate(.5 * Math.PI), c.translate(0, -u.width); break; case 7: c.rotate(.5 * Math.PI), c.translate(u.height, -u.width), c.scale(-1, 1); break; case 8: c.rotate(-.5 * Math.PI), c.translate(-u.height, 0) }y(c, s, null != l.srcX ? l.srcX : 0, null != l.srcY ? l.srcY : 0, l.srcWidth, l.srcHeight, null != l.trgX ? l.trgX : 0, null != l.trgY ? l.trgY : 0, l.trgWidth, l.trgHeight); var d = u.toDataURL("image/png"); if (null != a) return a(d, u) })) }, null != a && (s.onerror = a), s.src = e.dataURL } }, { key: "processQueue", value: function () { var e = this.options.parallelUploads, t = this.getUploadingFiles().length, i = t; if (!(t >= e)) { var n = this.getQueuedFiles(); if (n.length > 0) { if (this.options.uploadMultiple) return this.processFiles(n.slice(0, e - t)); for (; i < e;) { if (!n.length) return; this.processFile(n.shift()), i++ } } } } }, { key: "processFile", value: function (e) { return this.processFiles([e]) } }, { key: "processFiles", value: function (e) { var t = !0, i = !1, n = void 0; try { for (var r, a = e[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { var l = r.value; l.processing = !0, l.status = o.UPLOADING, this.emit("processing", l) } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } return this.options.uploadMultiple && this.emit("processingmultiple", e), this.uploadFiles(e) } }, { key: "_getFilesWithXhr", value: function (e) { return this.files.filter((function (t) { return t.xhr === e })).map((function (e) { return e })) } }, { key: "cancelUpload", value: function (e) { if (e.status === o.UPLOADING) { var t = this._getFilesWithXhr(e.xhr), i = !0, n = !1, r = void 0; try { for (var a, l = t[Symbol.iterator](); !(i = (a = l.next()).done); i = !0) { (p = a.value).status = o.CANCELED } } catch (e) { n = !0, r = e } finally { try { i || null == l.return || l.return() } finally { if (n) throw r } } void 0 !== e.xhr && e.xhr.abort(); var s = !0, u = !1, c = void 0; try { for (var d, h = t[Symbol.iterator](); !(s = (d = h.next()).done); s = !0) { var p = d.value; this.emit("canceled", p) } } catch (e) { u = !0, c = e } finally { try { s || null == h.return || h.return() } finally { if (u) throw c } } this.options.uploadMultiple && this.emit("canceledmultiple", t) } else e.status !== o.ADDED && e.status !== o.QUEUED || (e.status = o.CANCELED, this.emit("canceled", e), this.options.uploadMultiple && this.emit("canceledmultiple", [e])); if (this.options.autoProcessQueue) return this.processQueue() } }, { key: "resolveOption", value: function (e) { for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)i[n - 1] = arguments[n]; return "function" == typeof e ? e.apply(this, i) : e } }, { key: "uploadFile", value: function (e) { return this.uploadFiles([e]) } }, { key: "uploadFiles", value: function (e) { var t = this; this._transformFiles(e, (function (i) { if (t.options.chunking) { var n = i[0]; e[0].upload.chunked = t.options.chunking && (t.options.forceChunking || n.size > t.options.chunkSize), e[0].upload.totalChunkCount = Math.ceil(n.size / t.options.chunkSize) } if (e[0].upload.chunked) { var r = t, a = t, l = e[0]; n = i[0]; l.upload.chunks = []; var s = function () { for (var t = 0; void 0 !== l.upload.chunks[t];)t++; if (!(t >= l.upload.totalChunkCount)) { 0; var i = t * r.options.chunkSize, a = Math.min(i + r.options.chunkSize, n.size), s = { name: r._getParamName(0), data: n.webkitSlice ? n.webkitSlice(i, a) : n.slice(i, a), filename: l.upload.filename, chunkIndex: t }; l.upload.chunks[t] = { file: l, index: t, dataBlock: s, status: o.UPLOADING, progress: 0, retries: 0 }, r._uploadData(e, [s]) } }; if (l.upload.finishedChunkUpload = function (t, i) { var n = a, r = !0; t.status = o.SUCCESS, t.dataBlock = null, t.xhr = null; for (var u = 0; u < l.upload.totalChunkCount; u++) { if (void 0 === l.upload.chunks[u]) return s(); l.upload.chunks[u].status !== o.SUCCESS && (r = !1) } r && a.options.chunksUploaded(l, (function () { n._finished(e, i, null) })) }, t.options.parallelChunkUploads) for (var u = 0; u < l.upload.totalChunkCount; u++)s(); else s() } else { var c = []; for (u = 0; u < e.length; u++)c[u] = { name: t._getParamName(u), data: i[u], filename: e[u].upload.filename }; t._uploadData(e, c) } })) } }, { key: "_getChunk", value: function (e, t) { for (var i = 0; i < e.upload.totalChunkCount; i++)if (void 0 !== e.upload.chunks[i] && e.upload.chunks[i].xhr === t) return e.upload.chunks[i] } }, { key: "_uploadData", value: function (t, i) { var n = this, r = this, a = this, o = this, l = new XMLHttpRequest, s = !0, c = !1, d = void 0; try { for (var h, p = t[Symbol.iterator](); !(s = (h = p.next()).done); s = !0) { (_ = h.value).xhr = l } } catch (e) { c = !0, d = e } finally { try { s || null == p.return || p.return() } finally { if (c) throw d } } t[0].upload.chunked && (t[0].upload.chunks[i[0].chunkIndex].xhr = l); var f = this.resolveOption(this.options.method, t), m = this.resolveOption(this.options.url, t); l.open(f, m, !0), this.resolveOption(this.options.timeout, t) && (l.timeout = this.resolveOption(this.options.timeout, t)), l.withCredentials = !!this.options.withCredentials, l.onload = function (e) { n._finishedUploading(t, l, e) }, l.ontimeout = function () { r._handleUploadError(t, l, "Request timedout after ".concat(r.options.timeout / 1e3, " seconds")) }, l.onerror = function () { a._handleUploadError(t, l) }, (null != l.upload ? l.upload : l).onprogress = function (e) { return o._updateFilesUploadProgress(t, l, e) }; var v = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" }; for (var y in this.options.headers && e(u)(v, this.options.headers), v) { var g = v[y]; g && l.setRequestHeader(y, g) } var b = new FormData; if (this.options.params) { var k = this.options.params; for (var w in "function" == typeof k && (k = k.call(this, t, l, t[0].upload.chunked ? this._getChunk(t[0], l) : null)), k) { var F = k[w]; if (Array.isArray(F)) for (var E = 0; E < F.length; E++)b.append(w, F[E]); else b.append(w, F) } } var x = !0, z = !1, C = void 0; try { for (var S, A = t[Symbol.iterator](); !(x = (S = A.next()).done); x = !0) { var _ = S.value; this.emit("sending", _, l, b) } } catch (e) { z = !0, C = e } finally { try { x || null == A.return || A.return() } finally { if (z) throw C } } this.options.uploadMultiple && this.emit("sendingmultiple", t, l, b), this._addFormElementData(b); for (E = 0; E < i.length; E++) { var T = i[E]; b.append(T.name, T.data, T.filename) } this.submitRequest(l, b, t) } }, { key: "_transformFiles", value: function (e, t) { for (var i = this, n = function (n) { i.options.transformFile.call(i, e[n], (function (i) { r[n] = i, ++a === e.length && t(r) })) }, r = [], a = 0, o = 0; o < e.length; o++)n(o) } }, { key: "_addFormElementData", value: function (e) { var t = !0, i = !1, n = void 0; if ("FORM" === this.element.tagName) try { for (var r = this.element.querySelectorAll("input, textarea, select, button")[Symbol.iterator](); !(t = (s = r.next()).done); t = !0) { var a = s.value, o = a.getAttribute("name"), l = a.getAttribute("type"); if (l && (l = l.toLowerCase()), null != o) if ("SELECT" === a.tagName && a.hasAttribute("multiple")) { t = !0, i = !1, n = void 0; try { var s; for (r = a.options[Symbol.iterator](); !(t = (s = r.next()).done); t = !0) { var u = s.value; u.selected && e.append(o, u.value) } } catch (e) { i = !0, n = e } finally { try { t || null == r.return || r.return() } finally { if (i) throw n } } } else (!l || "checkbox" !== l && "radio" !== l || a.checked) && e.append(o, a.value) } } catch (e) { i = !0, n = e } finally { try { t || null == r.return || r.return() } finally { if (i) throw n } } } }, { key: "_updateFilesUploadProgress", value: function (e, t, i) { var n = !0, r = !1, a = void 0; if (e[0].upload.chunked) { c = e[0]; var o = this._getChunk(c, t); i ? (o.progress = 100 * i.loaded / i.total, o.total = i.total, o.bytesSent = i.loaded) : (o.progress = 100, o.bytesSent = o.total), c.upload.progress = 0, c.upload.total = 0, c.upload.bytesSent = 0; for (var l = 0; l < c.upload.totalChunkCount; l++)c.upload.chunks[l] && void 0 !== c.upload.chunks[l].progress && (c.upload.progress += c.upload.chunks[l].progress, c.upload.total += c.upload.chunks[l].total, c.upload.bytesSent += c.upload.chunks[l].bytesSent); c.upload.progress = c.upload.progress / c.upload.totalChunkCount, this.emit("uploadprogress", c, c.upload.progress, c.upload.bytesSent) } else try { for (var s, u = e[Symbol.iterator](); !(n = (s = u.next()).done); n = !0) { var c; (c = s.value).upload.total && c.upload.bytesSent && c.upload.bytesSent == c.upload.total || (i ? (c.upload.progress = 100 * i.loaded / i.total, c.upload.total = i.total, c.upload.bytesSent = i.loaded) : (c.upload.progress = 100, c.upload.bytesSent = c.upload.total), this.emit("uploadprogress", c, c.upload.progress, c.upload.bytesSent)) } } catch (e) { r = !0, a = e } finally { try { n || null == u.return || u.return() } finally { if (r) throw a } } } }, { key: "_finishedUploading", value: function (e, t, i) { var n; if (e[0].status !== o.CANCELED && 4 === t.readyState) { if ("arraybuffer" !== t.responseType && "blob" !== t.responseType && (n = t.responseText, t.getResponseHeader("content-type") && ~t.getResponseHeader("content-type").indexOf("application/json"))) try { n = JSON.parse(n) } catch (e) { i = e, n = "Invalid JSON response from server." } this._updateFilesUploadProgress(e, t), 200 <= t.status && t.status < 300 ? e[0].upload.chunked ? e[0].upload.finishedChunkUpload(this._getChunk(e[0], t), n) : this._finished(e, n, i) : this._handleUploadError(e, t, n) } } }, { key: "_handleUploadError", value: function (e, t, i) { if (e[0].status !== o.CANCELED) { if (e[0].upload.chunked && this.options.retryChunks) { var n = this._getChunk(e[0], t); if (n.retries++ < this.options.retryChunksLimit) return void this._uploadData(e, [n.dataBlock]); console.warn("Retried this chunk too often. Giving up.") } this._errorProcessing(e, i || this.options.dictResponseError.replace("{{statusCode}}", t.status), t) } } }, { key: "submitRequest", value: function (e, t, i) { 1 == e.readyState ? e.send(t) : console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.") } }, { key: "_finished", value: function (e, t, i) { var n = !0, r = !1, a = void 0; try { for (var l, s = e[Symbol.iterator](); !(n = (l = s.next()).done); n = !0) { var u = l.value; u.status = o.SUCCESS, this.emit("success", u, t, i), this.emit("complete", u) } } catch (e) { r = !0, a = e } finally { try { n || null == s.return || s.return() } finally { if (r) throw a } } if (this.options.uploadMultiple && (this.emit("successmultiple", e, t, i), this.emit("completemultiple", e)), this.options.autoProcessQueue) return this.processQueue() } }, { key: "_errorProcessing", value: function (e, t, i) { var n = !0, r = !1, a = void 0; try { for (var l, s = e[Symbol.iterator](); !(n = (l = s.next()).done); n = !0) { var u = l.value; u.status = o.ERROR, this.emit("error", u, t, i), this.emit("complete", u) } } catch (e) { r = !0, a = e } finally { try { n || null == s.return || s.return() } finally { if (r) throw a } } if (this.options.uploadMultiple && (this.emit("errormultiple", e, t, i), this.emit("completemultiple", e)), this.options.autoProcessQueue) return this.processQueue() } }], [{ key: "initClass", value: function () { this.prototype.Emitter = h, this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], this.prototype._thumbnailQueue = [], this.prototype._processingThumbnail = !1 } }, { key: "uuidv4", value: function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (e) { var t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16) })) } }]), o }(h); f.initClass(), f.options = {}, f.optionsForElement = function (e) { return e.getAttribute("id") ? f.options[v(e.getAttribute("id"))] : void 0 }, f.instances = [], f.forElement = function (e) { if ("string" == typeof e && (e = document.querySelector(e)), null == (null != e ? e.dropzone : void 0)) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone."); return e.dropzone }, f.discover = function () { var e; if (document.querySelectorAll) e = document.querySelectorAll(".dropzone"); else { e = []; var t = function (t) { return function () { var i = [], n = !0, r = !1, a = void 0; try { for (var o, l = t[Symbol.iterator](); !(n = (o = l.next()).done); n = !0) { var s = o.value; /(^| )dropzone($| )/.test(s.className) ? i.push(e.push(s)) : i.push(void 0) } } catch (e) { r = !0, a = e } finally { try { n || null == l.return || l.return() } finally { if (r) throw a } } return i }() }; t(document.getElementsByTagName("div")), t(document.getElementsByTagName("form")) } return function () { var t = [], i = !0, n = !1, r = void 0; try { for (var a, o = e[Symbol.iterator](); !(i = (a = o.next()).done); i = !0) { var l = a.value; !1 !== f.optionsForElement(l) ? t.push(new f(l)) : t.push(void 0) } } catch (e) { n = !0, r = e } finally { try { i || null == o.return || o.return() } finally { if (n) throw r } } return t }() }, f.blockedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i], f.isBrowserSupported = function () { var e = !0; if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) if ("classList" in document.createElement("a")) { void 0 !== f.blacklistedBrowsers && (f.blockedBrowsers = f.blacklistedBrowsers); var t = !0, i = !1, n = void 0; try { for (var r, a = f.blockedBrowsers[Symbol.iterator](); !(t = (r = a.next()).done); t = !0) { r.value.test(navigator.userAgent) && (e = !1) } } catch (e) { i = !0, n = e } finally { try { t || null == a.return || a.return() } finally { if (i) throw n } } } else e = !1; else e = !1; return e }, f.dataURItoBlob = function (e) { for (var t = atob(e.split(",")[1]), i = e.split(",")[0].split(":")[1].split(";")[0], n = new ArrayBuffer(t.length), r = new Uint8Array(n), a = 0, o = t.length, l = 0 <= o; l ? a <= o : a >= o; l ? a++ : a--)r[a] = t.charCodeAt(a); return new Blob([n], { type: i }) }; var m = function (e, t) { return e.filter((function (e) { return e !== t })).map((function (e) { return e })) }, v = function (e) { return e.replace(/[\-_](\w)/g, (function (e) { return e.charAt(1).toUpperCase() })) }; f.createElement = function (e) { var t = document.createElement("div"); return t.innerHTML = e, t.childNodes[0] }, f.elementInside = function (e, t) { if (e === t) return !0; for (; e = e.parentNode;)if (e === t) return !0; return !1 }, f.getElement = function (e, t) { var i; if ("string" == typeof e ? i = document.querySelector(e) : null != e.nodeType && (i = e), null == i) throw new Error("Invalid `".concat(t, "` option provided. Please provide a CSS selector or a plain HTML element.")); return i }, f.getElements = function (e, t) { var i, n; if (e instanceof Array) { n = []; try { var r = !0, a = !1, o = void 0; try { for (var l = e[Symbol.iterator](); !(r = (s = l.next()).done); r = !0)i = s.value, n.push(this.getElement(i, t)) } catch (e) { a = !0, o = e } finally { try { r || null == l.return || l.return() } finally { if (a) throw o } } } catch (e) { n = null } } else if ("string" == typeof e) { n = []; r = !0, a = !1, o = void 0; try { var s; for (l = document.querySelectorAll(e)[Symbol.iterator](); !(r = (s = l.next()).done); r = !0)i = s.value, n.push(i) } catch (e) { a = !0, o = e } finally { try { r || null == l.return || l.return() } finally { if (a) throw o } } } else null != e.nodeType && (n = [e]); if (null == n || !n.length) throw new Error("Invalid `".concat(t, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.")); return n }, f.confirm = function (e, t, i) { return window.confirm(e) ? t() : null != i ? i() : void 0 }, f.isValidFile = function (e, t) { if (!t) return !0; t = t.split(","); var i = e.type, n = i.replace(/\/.*$/, ""), r = !0, a = !1, o = void 0; try { for (var l, s = t[Symbol.iterator](); !(r = (l = s.next()).done); r = !0) { var u = l.value; if ("." === (u = u.trim()).charAt(0)) { if (-1 !== e.name.toLowerCase().indexOf(u.toLowerCase(), e.name.length - u.length)) return !0 } else if (/\/\*$/.test(u)) { if (n === u.replace(/\/.*$/, "")) return !0 } else if (i === u) return !0 } } catch (e) { a = !0, o = e } finally { try { r || null == s.return || s.return() } finally { if (a) throw o } } return !1 }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function (e) { return this.each((function () { return new f(this, e) })) }), f.ADDED = "added", f.QUEUED = "queued", f.ACCEPTED = f.QUEUED, f.UPLOADING = "uploading", f.PROCESSING = f.UPLOADING, f.CANCELED = "canceled", f.ERROR = "error", f.SUCCESS = "success"; var y = function (e, t, i, n, r, a, o, l, s, u) { var c = function (e) { e.naturalWidth; var t = e.naturalHeight, i = document.createElement("canvas"); i.width = 1, i.height = t; var n = i.getContext("2d"); n.drawImage(e, 0, 0); for (var r = n.getImageData(1, 0, 1, t).data, a = 0, o = t, l = t; l > a;)0 === r[4 * (l - 1) + 3] ? o = l : a = l, l = o + a >> 1; var s = l / t; return 0 === s ? 1 : s }(t); return e.drawImage(t, i, n, r, a, o, l, s, u / c) }, g = function () { "use strict"; function e() { i(this, e) } return r(e, null, [{ key: "initClass", value: function () { this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } }, { key: "encode64", value: function (e) { for (var t = "", i = void 0, n = void 0, r = "", a = void 0, o = void 0, l = void 0, s = "", u = 0; a = (i = e[u++]) >> 2, o = (3 & i) << 4 | (n = e[u++]) >> 4, l = (15 & n) << 2 | (r = e[u++]) >> 6, s = 63 & r, isNaN(n) ? l = s = 64 : isNaN(r) && (s = 64), t = t + this.KEY_STR.charAt(a) + this.KEY_STR.charAt(o) + this.KEY_STR.charAt(l) + this.KEY_STR.charAt(s), i = n = r = "", a = o = l = s = "", u < e.length;); return t } }, { key: "restore", value: function (e, t) { if (!e.match("data:image/jpeg;base64,")) return t; var i = this.decode64(e.replace("data:image/jpeg;base64,", "")), n = this.slice2Segments(i), r = this.exifManipulation(t, n); return "data:image/jpeg;base64,".concat(this.encode64(r)) } }, { key: "exifManipulation", value: function (e, t) { var i = this.getExifArray(t), n = this.insertExif(e, i); return new Uint8Array(n) } }, { key: "getExifArray", value: function (e) { for (var t = void 0, i = 0; i < e.length;) { if (255 === (t = e[i])[0] & 225 === t[1]) return t; i++ } return [] } }, { key: "insertExif", value: function (e, t) { var i = e.replace("data:image/jpeg;base64,", ""), n = this.decode64(i), r = n.indexOf(255, 3), a = n.slice(0, r), o = n.slice(r), l = a; return l = (l = l.concat(t)).concat(o) } }, { key: "slice2Segments", value: function (e) { for (var t = 0, i = []; ;) { if (255 === e[t] & 218 === e[t + 1]) break; if (255 === e[t] & 216 === e[t + 1]) t += 2; else { var n = t + (256 * e[t + 2] + e[t + 3]) + 2, r = e.slice(t, n); i.push(r), t = n } if (t > e.length) break } return i } }, { key: "decode64", value: function (e) { var t = void 0, i = void 0, n = "", r = void 0, a = void 0, o = "", l = 0, s = []; for (/[^A-Za-z0-9\+\/\=]/g.exec(e) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); t = this.KEY_STR.indexOf(e.charAt(l++)) << 2 | (r = this.KEY_STR.indexOf(e.charAt(l++))) >> 4, i = (15 & r) << 4 | (a = this.KEY_STR.indexOf(e.charAt(l++))) >> 2, n = (3 & a) << 6 | (o = this.KEY_STR.indexOf(e.charAt(l++))), s.push(t), 64 !== a && s.push(i), 64 !== o && s.push(n), t = i = n = "", r = a = o = "", l < e.length;); return s } }]), e }(); g.initClass(); window.Dropzone = f }();

$(document).ready(function () {
  var otpRecieved;
  var ogFile;
  function checkHidden(form) {
    var allHiddenInputsHaveValue = true;
    form.find('input').each(function () {
      if ($(this).val() === '') {
        allHiddenInputsHaveValue = false;
        return false;
      }
    });
    return allHiddenInputsHaveValue;
  }
  var isBookTestrideFormStarted = false
  var isCallbackTestFormStarted = false
  var isBookTestrideCampaignInfluencer = false;
  $('.student-voucher .voucher-no img').on('click', function () {
    var contentToCopy = $('.voucher-no span').text();
    var tempInput = $('<input>');
    tempInput.attr('type', 'hidden');
    tempInput.val(contentToCopy);
    $('body').append(tempInput);
    if (navigator.clipboard) {
      navigator.clipboard.writeText(contentToCopy)
        .then(function () {
          console.log('voucher-no copied')
        })
        .catch(function (err) {
          console.error('Could not copy text: ', err);
        });
    }
    tempInput.remove();
  });
  function hashCode(s) {
    var h = 0,
      l = s.length,
      i = 0;
    if (l > 0)
      while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
    return h;
  }
  function isValidOtp(mobile, otp) {
    const reqId = sessionStorage.getItem("tempID");
    return (
      otp.toString() ===
      (Math.abs(hashCode(mobile + reqId)) % 1000000)
        .toString()
        .padStart(6, "0")
    );
  }
  async function hashedValue(message) {
    const hashBuffer = await crypto.subtle.digest(
      "SHA-256",
      new TextEncoder().encode(message)
    );
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    return hashValue;
  }

  if (
    $(".book-test-drive-section").length > 0 ||
    $(".book-test-ride-campaign").length > 0
  ) {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let stateName = "";
    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }
    function getPageDetails(isErrorPage = false) {
      let pagePath = window.location.pathname;
      let slug = pagePath.split("/");
      let actualSlug = slug[1].replace(".html", "");
      let primary_category = window.location.origin;
      let fullSplit = primary_category.split("//");
      let pcSplit = fullSplit[1].split(".");
      let title = $("title").text();
      let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
      let sub1 = "";
      let sub2 = "";
      let sub3 = "";
      let sub4 = "";
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
        sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
          sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
          sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
          sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
      } else {
        if (slug[2]) sub1 = slug[2].replace(".html", "");
        if (slug[3]) sub2 = slug[3].replace(".html", "");
        if (slug[4]) sub3 = slug[4].replace(".html", "");
        if (slug[5]) sub4 = slug[5].replace(".html", "");
      }
      return {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: isErrorPage,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      };
    }
    function getEncryptString(ekey) {
      var key = '63C09AE37D4254AD7D13A7HGF$F88411';
      var iv = '1234567890123456';
      var data = ekey;
      var authpass = CryptoJS.AES.encrypt(data, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
      var token = base64(authpass);
      return token
    }
    function base64(data) {
        var wordArray = CryptoJS.enc.Utf8.parse(data);
        var final = CryptoJS.enc.Base64.stringify(wordArray);
        return final;
    }
    function sendFormStartEvent(currentForm, inputElement, formTypeValue) {
      if (window.digitalData) {
        if(!isBookTestrideFormStarted && formTypeValue == "static"){
          const pageData = {
            event: "Form Start",
            formDetails: {
              formname: currentForm.data("aa-formname"),
              formtype: formTypeValue,
              formfield: $(inputElement).find("input").attr("name"),
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          }
          window.digitalData.push(pageData);
          isBookTestrideFormStarted = true
        }else if(!isCallbackTestFormStarted && formTypeValue == "popup"){
          const pageData = {
            event: "Form Start",
            formDetails: {
              formname: currentForm.data("aa-formname"),
              formtype: formTypeValue,
              formfield: $(inputElement).find("input").attr("name"),
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          }
          window.digitalData.push(pageData);
          isCallbackTestFormStarted = true
        }
      }
    }

    function deleteObjectFormByKey(arr, formname, eventName) {
      const index = arr.findIndex(obj => obj?.event == eventName && obj?.formDetails?.formname === formname);
    
      if (index !== -1) {
        arr.splice(index, 1);
      }
    
      return arr;
    }

    // Auto Population Function 

    function autoPopulateLocation(callback) {
      const stateDropdown = $(".book-test-drive-section [aria-labelledby='stateDropdown']");
      const cityDropdown = $(".book-test-drive-section [aria-labelledby='cityDropdown']");
      const stateValue = locations.State.replace(/\s+/g, "").toLowerCase();

      function clickElement(selector, value) {
        const element = selector.find("li").filter(function(){
          return $(this).attr("value").replace(/\s+/g, "").toLowerCase() === value;
        })
        if (element.length > 0) {
          element.click();
          return true;
        }
        return false;
      }

      if (clickElement(stateDropdown, stateValue)) {
        checkCity();
      } else {
        const stateCheckInterval = setInterval(() => {
          if (clickElement(stateDropdown, stateValue)) {
            clearInterval(stateCheckInterval);
            checkCity();
          } else {
            clearInterval(stateCheckInterval);
          }
        }, 100);
      }

      function checkCity() {
        const cityText = locations.City.trim().replace(/\s+/g, "").toLowerCase();
        function clickCityElement() {
          const cityLi = cityDropdown.find("li").filter(function () {
            return $(this).find("a").text().trim().replace(/\s+/g, "").toLowerCase() === cityText;
          });
          if (cityLi.length > 0) {
            cityLi.click();
            return true;
          }
          return false;
        }

        if (clickCityElement()) {
          if (typeof callback === "function") {
            callback();
          }
        } else {
          const cityCheckInterval = setInterval(() => {
            if (clickCityElement()) {
              clearInterval(cityCheckInterval);
              if (typeof callback === "function") {
                callback();
              }
            } else {
              clearInterval(cityCheckInterval);
            }
          }, 100);
        }
      }
    }

    if ($(".book-test-ride-campaign-influencer").length > 0) {
      isBookTestrideCampaignInfluencer = true;
    }

    if ($(".book-test-drive-section") && !$("#harleyRequestCallBack").length > 0) {
      if (window.locations && (locations.State || locations.City)) {
        autoPopulateLocation();
      }
      if (!sessionStorage.getItem("stateCityList")) {
        //let url = "/bin/statecitylist";
        let url = $('[name="statecitylist_url"]').val();
        if (url !== undefined) {
          fetch(url)
            .then(function (response) {
              if (!response.ok) {
                // make the promise be rejected if we didn't get a 2xx response
                throw new Error("Not 2xx response", { cause: response });
              } else {
                return response.text();
              }
            })
            .then(function (html) {
              let newList = html && JSON.parse(html);
              for (const key of Object.keys(newList)) {
                const capitalizedKey = key
                  .split(" ")
                  .map(
                    (word) =>
                      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                  )
                  .join(" ");
                const capitalizedValue = newList[key]
                  .split(" ")
                  .map(
                    (word) =>
                      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                  )
                  .join(" ");

                delete newList[key];
                newList[capitalizedKey] = capitalizedValue;
              }
              sessionStorage.setItem("stateCityList", JSON.stringify(newList));
              $(".book-test-drive-form").each(function (item) {
                let statelist = $(this)
                  .find('[name="statename"]')
                  .parents(".cust-drop-down")
                  .find(".cust-dropdown-menu ");
                generateStateDropDown(statelist);
                customValidation($(this));
              });
            });
        }
      } else {
        $(".book-test-drive-form").each(function (item) {
          let statelist = $(this)
            .find('[name="statename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          generateStateDropDown(statelist);
          customValidation($(this));
        });
      }
    }

    function generateStateDropDown(selector) {
      let form = $(selector).closest("form");
      let stateList = form
        .find('[name="statename"]')
        .parents(".cust-drop-down")
        .find(".cust-dropdown-menu");

      form.find('[name="cityname"]').attr("disabled", true);

      let stateCityList = JSON.parse(sessionStorage.getItem("stateCityList"));

      Object.keys(stateCityList).forEach(function (stateName) {
        $("<li>")
          .addClass("font-montserrat-regular font-weight-500")
          .attr("value", stateName)
          .append($("<a>").attr("href", "javascript:void(0)").text(stateName))
          .appendTo(stateList);
      });
    }

    function populateCityDropdown(listSelector, selectedState, cityName) {
      if (cityName != "") {
        let form = $(listSelector).closest("form");
        let cityField = form.find('[name="cityname"]');
        cityField.text(
          form.find('[name="cityname"]').attr("data-default-label")
        );
      }

      if (listSelector[0] !== undefined) {
        let newList = JSON.parse(sessionStorage.getItem("stateCityList"));
        for (const key of Object.keys(newList)) {
          const capitalizedKey = key
            .split(" ")
            .map(
              (word) =>
                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
            )
            .join(" ");
          const capitalizedValue = newList[key]
            .split(" ")
            .map(
              (word) =>
                word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
            )
            .join(" ");
          delete newList[key];
          newList[capitalizedKey] = capitalizedValue;
        }

        let cities = newList[selectedState];
        if (!cities) {
          throw new Error("Selected state not found in data");
        }

        listSelector.empty();
        var cityArray = cities.slice(1, -1).split(",");
        $.each(cityArray, function (index, city) {
          var newItem = document.createElement("li");
          newItem.innerHTML =
            "<a href=javascript:void(0)>" + city.trim() + "</a>";
          listSelector.append(newItem);
        });

        $('[name="cityname"]').removeAttr("disabled");
      }
    }

    function populateDropdown(url, selector, keyword, selectedVal) {
      if (url && selector[0] !== undefined) {
        fetch(url)
          .then(function (response) {
            if (!response.ok) {
              // make the promise be rejected if we didn't get a 2xx response
              throw new Error("Not 2xx response", { cause: response });
            } else {
              return response.text();
            }
          })
          .then(function (html) {
            selector[0].innerHTML = html;
            let form = $(selector).closest("form");
            if (keyword == "state") {
              //sort in ascending order
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="statename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let state;
              let abbrState = form
                .find('[name="statename"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  state = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  if (window.locations != null) {
                    stateName = state;
                  }
                  abbrState = selectedVal;
                  form.find('[name="stateNameVal"]').val(selectedVal).trigger("input");
                }
              }
              form.find('[name="statename"]').text(abbrState);
              let cityField = form.find('[name="cityname"]');
              let cityValue =
                null != (window && window.locations) ? locations.City : "";
              if (
                cityField.text().trim() !== cityField.attr("data-default-label")
              ) {
                cityValue = cityField.text().trim();
              }
              let citylist = cityField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu ");
              if (state) {
                cityField[0].disabled = false;
                if ($('[name="dealername"]').length) {
                  populateDropdown(
                    url.substr(0, url.indexOf(".")) +
                    ".dealercities." +
                    state +
                    ".html",
                    citylist,
                    "city",
                    cityValue
                  );
                }
                else {
                  populateDropdown(
                    url.substr(0, url.indexOf(".")) +
                    ".citylist." +
                    state +
                    ".html",
                    citylist,
                    "city",
                    cityValue
                  );
                }
              } else {
                cityField[0].disabled = true;
                cityField.text(
                  form.find('[name="cityname"]').attr("data-default-label")
                );
                let dealerField = form.find('[name="dealername"]');
                $('.address-input').addClass('d-none');
                $('#harley__dealer--address').val('');
                dealerField[0].disabled = true;
                dealerField.text(
                  form.find('[name="dealername"]').attr("data-default-label")
                );
              }
            }
            if (keyword == "city") {
              //sort in ascending order
              let cityField = form.find('[name="cityname"]');
              let dealerField = form.find('[name="dealername"]');
              cityField[0].disabled = false;
              cityField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  cityField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let abbrCity;
              let abbrDealer;
              abbrCity = cityField.attr("data-default-label");
              abbrDealer = dealerField.attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  abbrCity = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrCity = selectedVal;
                  form.find('[name="cityNameVal"]').val(selectedVal).trigger("input");
                  abbrDealer = dealerField.text().trim();
                  form
                    .find('[name="dealerNameVal"]')
                    .val(form.find('[name="dealerNameVal"]').val());
                }
              }
              cityField.text(abbrCity);
              if (dealerField.length) {
                if (abbrDealer == dealerField.attr("data-default-label")) {
                  dealerField[0].disabled = true;
                  $('.address-input').addClass('d-none');
                  $('#harley__dealer--address').val('');
                  form.find('[name="dealerNameVal"]').val("").trigger("input");
                }
                dealerField.text(abbrDealer);
              }
            }
            if (keyword == "dealer") {
              //sort in ascending order
              let dealerField = form.find('[name="dealername"]');
              dealerField[0].disabled = false;
              // Removed Sorting When in Harley Campaign Else Sorts (For Dealers)
              if (!$('#harley__campaign').length) {
                dealerField
                  .parents(".cust-drop-down")
                  .find(".cust-dropdown-menu li")
                  .sort(sortAscending)
                  .appendTo(
                    dealerField
                      .parents(".cust-drop-down")
                      .find(".cust-dropdown-menu")
                  );
              }
              abbrDealer = dealerField.attr("data-default-label");
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrDealer = selectedVal;
                form
                  .find('[name="dealerNameVal"]')
                  .val(form.find('[name="dealerNameVal"]').val());
              } else {
                form.find('[name="dealerNameVal"]').val("").trigger("input");
                $('.address-input').addClass('d-none');
                $('#harley__dealer--address').val('');
              }
              dealerField.text(abbrDealer);
            }
          })
          .catch(function (err) {
            console.warn("Something went wrong.", err);
          });
      }
    }

    if ($(".book-test-drive-form") || $(".book-test-ride-campaign")) {
      if ($(".book-test-ride-campaign").length > 0) {
        customValidation($("#campaign-sub-form"));
        createCaptcha($("#campaign-sub-form"));
        if ($('#student__campaign').length) {
          customValidation($(".student-detail-form"));
          customValidation($(".state-city-form"));
          customValidation($("#doc--form"));
        }
      } else {
        customValidation($(".book-test-drive-form"));
      }
      let form =
        $(".book-test-drive-form").length > 0
          ? $(".book-test-drive-form")
          : $(".book-test-ride-campaign");
      let statelist = form
        .find('[name="statename"]')
        .parents(".cust-drop-down")
        .find(".cust-dropdown-menu ");
      if ($(".book-test-ride-campaign").length > 0) {
        if ($('.campaign-container #harley__campaign').length > 0) {
          populateDropdown(
            defaultservlet + ".harleystates.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        }
        else if ($("#booking__section").length > 0) {
          populateDropdown(
            defaultservlet + ".harleystates.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        } else if ($('[name="modelName"]').val() == 'MAVRICK') {
          populateDropdown(
            defaultservlet + ".mavrickcampstates.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        }
        else {
          populateDropdown(
            defaultservlet + ".statelist.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        }
      }
    }

    $(".invalid-otp-message").hide();
    //check if not harley page then execute
    if (!$("#harleyRequestCallBack").length > 0) {
      $(
        ".book-test-drive-parent .cust-dropdown-menu, .book-test-ride-campaign .cust-dropdown-menu"
      ).on("click", "li", function () {
        let selectionGroup = $(this).parents(".cust-drop-down");
        var button = selectionGroup.find(".dropdown-select");
        if ($('#harley__form').length) {
          button.addClass('active');
        }
        button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
        var form = $(this).closest("form");
        selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
        $(this).addClass("active");
        if("enqsource" == button.attr("name")){
          form.find('[name="enqsourceVal"]').val($(this).attr("value")).trigger("input");
        }
        else if ("plantobuy" == button.attr("name")) {
          form.find('[name="plantoBuyVal"]').val($(this).attr("value")).trigger("input");
          form.find('[name="plantoBuyVal"]').valid();
        } else if ("vehiclename" == button.attr("name")) {
          form.find('[name="vehicleNameVal"]').val($(this).attr("value")).trigger("input");
          $('#vehicleDropdown').html($(this).attr("value"));
          if ($("#bharath-mobility").length &&
          $("#bharath-mobility #number").val() != "" &&
          $("#bharath-mobility [name='fullname']").val() != "" &&
            $("#bharath-mobility form").valid()) {

            $('#bharath-mobility #bharath-mob-sub').prop("disabled", false);
          }
          if ($('#student__campaign').length) {
            button.addClass('active');
            if (checkHidden(form)) {
              form.find('input').each(function (index) {
                let inputValue = $(this).val();
                form.parent().parent().siblings().find('.grey-text span').eq(index).text(inputValue);
              });
              form.parent().parent().siblings().find('.grey-text').removeClass('d-none');
              $('.accordion-card').eq(1).find('.accordion--title').removeClass('pe-none');
              $('.accordion-card').eq(1).find('.accordion--title').click();
            }
          }
        } else if ("statename" == button.attr("name")) {
          let cityField = form.find('[name="cityname"]');
          let list = cityField
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          stateName = $(this).attr("value");

          setTimeout(function () {
            if ($('[name="stateNameVal"]').val()) {
              $('[name="stateNameVal"]').parent().children('label').remove()
            }
          }, 500);

          let cityPath;
          if ($('.campaign-container #harley__campaign').length > 0) {
            cityPath =
              defaultservlet + ".harleycities." + $(this).attr("value") + ".html";
          }
          else if ($("#booking__section").length > 0) {
            cityPath =
              defaultservlet + ".harleycities." + $(this).attr("value") + ".html";
          }
          else if ($('[name="modelName"]').val() == 'MAVRICK') {
            cityPath =
              defaultservlet + ".mavrickcampcities." + $(this).attr("value") + ".html";
          }
          else {
            cityPath =
              defaultservlet + ".dealercities." + $(this).attr("value") + ".html";
          }

          let cityValue =
            null != (window && window.locations) ? locations.City : "";

          // var cityPath = "/bin/statecitylist";

          if (cityField.text().trim() !== cityField.attr("data-default-label")) {
            cityValue = cityField.text().trim();
          }

          if ($(".book-test-ride-campaign").length > 0) {
            populateDropdown(cityPath, list, "city", cityValue, true);
          } else {
            let cityValue = form.find('[name="cityNameVal"]').val();
            populateCityDropdown(list, stateName, cityValue);
          }

          if ($('#harley__campaign').length) {
            form.find('[name="stateNameVal"]').val($(this).attr('value')).trigger("input");
            if ($('#magento-form-submit').length) {
              $('#magento-form-submit #state').val($(this).attr('value'));
            }
          }
          else {
            form.find('[name="stateNameVal"]').val(button.text()).trigger("input");
          }
          form.find('[name="cityNameVal"]').val("").trigger("input");
          $('#stateDropdown').html($(this).attr("value"));


          if ($('#student__campaign').length) {
            button.addClass('active');
            let cityName = $("[name=cityname]").text();
            if (cityName != $("[name=cityname]").data('default-label')) {
              $("[name=cityname]").removeClass('active');
            }
          }

        } else if ("cityname" == button.attr("name")) {

          if ($('#booking__section').length && $('#harley__form [name="pin"]').length) {
            $('#harley__form [name="pin"]').val('');
          }

          setTimeout(function () {
            if ($('[name="cityNameVal"]').val()) {
              $('[name="cityNameVal"]').parent().children('label').remove()
            }
          }, 500);

          let dealerName = form.find('[name="dealerNameVal"]');
          let dealerField = form.find('[name="dealername"]');
          let list = dealerName
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");

          let dealerNamePath;
          if ($('#harley__campaign').length) {
            dealerNamePath =
              defaultservlet +
              ".harleydealers." +
              stateName +
              "." +
              $(this).attr("value") +
              ".html";
          }
          else if ($('[name="modelName"]').val() == 'MAVRICK') {
            dealerNamePath =
              defaultservlet +
              ".mavrickcampdealers." +
              stateName +
              "." +
              $(this).attr("value") +
              ".html";
          }
          else {
            dealerNamePath =
              defaultservlet +
              ".dealercodes." +
              stateName +
              "." +
              $(this).attr("value") +
              ".html";
          }
          let dealerValue;
          if (dealerField.text().trim() !== dealerField.attr("data-default-label")) {
            dealerValue = dealerField.text().trim();
          }
          populateDropdown(dealerNamePath, list, "dealer", dealerValue);
          if ($('#magento-form-submit').length) {
            $('#magento-form-submit #city').val($(this).attr('value'));
          }
          form.find('[name="cityNameVal"]').val(button.text()).trigger("input");
          $('#cityDropdown').html(button.text().replace(/(<([^>]+)>)/ig, ''));

          if ($('#student__campaign').length) {
            button.addClass('active');
            if (checkHidden(form)) {
              form.find('input[type="hidden"]').each(function (index) {
                let inputValue = $(this).val();
                form.parent().parent().siblings().find('.grey-text span').eq(index).text(inputValue);
              });
              form.parent().parent().siblings().find('.grey-text').removeClass('d-none');
              $('.accordion-card').eq(1).find('.accordion--title').removeClass('pe-none');
              $('.accordion-card').eq(1).find('.accordion--title').click();
            }
          }
        } else if ("dealername" == button.attr("name")) {
          form.find('[name="dealerNameVal"]').val($(this).attr("value")).trigger("input");
          if ($('.campaign-container #harley__campaign').length) {
            let clickedDealerAddress = $(this).find('span').text();
            $('#harley__dealer--address').val(clickedDealerAddress);
            $('.address-input').removeClass('d-none');
          }
        } else if ("topics" == button.attr("name")) {
          form.find('[name="topicVal"]').val($(this).attr("value")).trigger("input");
        } else if ("sectiondropdown" == button.attr("name")) {
          form.find('[name="sectionVal"]').val($(this).attr("value")).trigger("input");
        }
        else if ("docname" == button.attr("name")) {
          button.addClass('active');
          $('[name="docVal"]').val($(this).text().trim()).trigger("input");
          if (checkHidden(form)) {
            if ($('.dz-complete').length) {
              $('.campaign--footer').removeClass('d-none');
            }
          }
        }
      });
    }
    $(
      ".book-test-drive-parent .cust-form-group,.book-test-ride-campaign .cust-form-group"
    ).on("click", function (event) {
      var currentForm = $(this).parents("form");

      if (!$("#bookTestRideCollapse").hasClass("show")) {
        $(this)
          .parents(".book-test-drive-wrapper")
          .find(".collapse-btn")
          .trigger("click");
      }
      if ($(currentForm).attr('data-aa-formname') == "callback") {
        const checkFormStartCallBack = digitalData.find(
          (obj) => obj.event == 'Form Start' && obj?.formDetails?.formname === "callback"
        );
        // checkFormStartCallBack && deleteObjectFormByKey(window.digitalData, "callback", "Form Start");
        event?.which && sendFormStartEvent(currentForm, this, "popup");
      } else if ($(currentForm).attr('data-aa-formname') == "bookride") {
        const checkFormStartRide = digitalData.find(
          (obj) => obj.event == 'Form Start' && obj?.formDetails?.formname === "bookride"
        );
        // checkFormStartRide && deleteObjectFormByKey(window.digitalData, "bookride", "Form Start");
        event?.which && sendFormStartEvent(currentForm, this, "static");
      }else if ($(currentForm).attr('data-aa-formname') == "campaign") {
        const checkFormStartRide = digitalData.find(
          (obj) => obj.event == 'Form Start' && obj?.formDetails?.formname === "campaign"
        );
        // checkFormStartRide && deleteObjectFormByKey(window.digitalData, "bookride", "Form Start");
        event?.which && sendFormStartEvent(currentForm, this, "static");
      }
    });

    $(".mobile-number").on("keyup", function () {
      if ($(this).val().length == 10 && $(this).valid()) {
        if (
          $("#bharath-mobility").length &&
          $("#bharath-mobility [name='fullname']").val() != "" &&
          $("#bharath-mobility [name='vehicleNameVal']").val() != ""
        ) {
          if ($("#bharath-mobility form").valid()) {
            $("#bharath-mobility #bharath-mob-sub").prop("disabled", false);
          }
        }
        if ($(this).parent().parent().hasClass("check-status-form")) {
          $(this).parent(".cust-form-group").find(".send-otp-student").addClass("show");
        } else {
          $(this).parent(".cust-form-group").find(".send-otp-btn").addClass("show");
        }
      } else {
        $(this).parents("form").find(".test-drive-otp-link").removeClass("show");
        $(this).parents("form").find(".otp-field").prop("disabled", true);
        $("#bharath-mobility #bharath-mob-sub").prop("disabled", true);
      }
    });
    $("[name='fullname']").on("change", function () {
      $(this).valid();
      if ($(this).val() === "") {
        $("#bharath-mobility #bharath-mob-sub").prop("disabled", true);
      }
      if (
        $("#bharath-mobility").length &&
        $("#bharath-mobility #number").val() != "" &&
        $("#bharath-mobility [name='vehicleNameVal']").val() != ""
      ) {
        if ($("#bharath-mobility form").valid()) {
          $("#bharath-mobility #bharath-mob-sub").prop("disabled", false);
        }
      }
    });
    $(".campaign-concern-check [name='concernCheck']").on("click", function () {
      $(this).valid();
      if (!$(this).is(':checked')) {
        $("#bharath-mobility #bharath-mob-sub").prop("disabled", true);
      }
      if (
        $("#bharath-mobility").length &&
        $("#bharath-mobility #number").val() != "" &&
        $("#bharath-mobility [name='fullname']").val() != "" &&
        $("#bharath-mobility [name='vehicleNameVal']").val() != ""
      ) {
        if ($("#bharath-mobility form").valid()) {
          $("#bharath-mobility #bharath-mob-sub").prop("disabled", false);
        }
      }
    });
    $(".send-otp-btn").on("click", function () {
      var currentForm = $(this).parents("form");
      let $this = $(this);
      $(currentForm).find(".resend-otp-btn").addClass("show");
      $(currentForm).find(".otp-field").attr("disabled", false);
      $(currentForm).find(".otp-field").focus();
      // $(this).removeClass("show");
      let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
      grecaptcha.ready(function () {
        grecaptcha.execute(sitKey).then(function (token) {
          if ($('#student__campaign').length) {
            $this.text('Resend OTP');
            $(currentForm).find(".otp-form").removeClass("d-none");
            $(".invalid-otp-message").hide();
          }
          else {
            $this.removeClass("show");
          }
          sendOtp(currentForm, token);
        });
      });

    });


    $(".send-otp-student").on("click", function () {
      var currentForm = $(this).parents("form");
      let clickedAnchor = $(this);
      $(currentForm).find(".otp-value").focus();
      $(".invalid-otp-message").hide();
      sendOtpStudent(currentForm, function (isZero) {
        if (!isZero) {
          $(currentForm).find('.err-here').remove();
          currentForm.find('.otp-form').addClass('d-none');
          currentForm.find('.phone-no').append('<div class="err-here">Not a registered user</div>');
        }
        else {
          $(currentForm).find(".otp-form").removeClass("d-none");
          $(currentForm).find('.err-here').remove();
          clickedAnchor.text('Resend OTP')
        }
      });
    });

    $(".resend-otp-btn").on("click", function () {
      $(".invalid-otp-message").hide();
      var currentForm = $(this).parents("form");
      let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
      grecaptcha.ready(function () {
        grecaptcha.execute(sitKey).then(function (token) {
          sendOtp(currentForm, token);
        });
      });
      $(this).attr("data-attempt", parseInt($(this).attr("data-attempt")) + 1);
      let attempts = $(this).attr("data-attempt");
      if (attempts == 3) {
        $(this).removeClass("show");
      }
    });

    $(".otp-value").on("keyup", async function () {
      $(".invalid-otp-message").hide();
      if ($(this).val().length == 6) {
        let form = $(this).parents('form');
        let mobNumber;
        if ($('.modal-comp #number')?.val()?.length > 0) mobNumber = $('.modal-comp #number').val();
        else
          if ($('#festive-hub-callback #number')?.val()?.length > 0) mobNumber = $('#festive-hub-callback #number').val();
          else mobNumber = $('#number').val();
        let otpEntered = $(this).val();
        if (isValidOtp(mobNumber, otpEntered)) {
          $(this).parent().addClass('valid--otp');
          let formTypeValue = $(form).find('[name="isPopup"]').val() == "true" ? "popup" : "static";
          let encMob = getEncryptString(mobNumber);
          const phCodemobNumber = "+91" + mobNumber;
          let hashedMobile = await hashedValue(phCodemobNumber);
          localStorage.setItem("analyticsHashedMobile", hashedMobile);

          const phCodemobNumberMeta = "91" + mobNumber;
          let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
          localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Verified",
              formDetails: {
                formname: form.data("aa-formname"),
                formtype: formTypeValue,
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                encryptedEmail: "NA",
                encryptedMobile: encMob,
              },
              page: getPageDetails(),
            });
          }
          if (checkHidden(form)) {
            form.find('input').each(function (index) {
              if ($(this).attr('name') !== 'otp') {
                let inputValue = $(this).val();
                form.parent().parent().siblings().find('.grey-text span').eq(index).text(inputValue);
              }
            });
            $('.accordion-card').eq(2).find('.accordion--title').removeClass('pe-none');
            $('.accordion-card').eq(2).find('.accordion--title').click();
            form.parent().parent().siblings().find('.grey-text').removeClass('d-none');
          }
          $(".invalid-otp-message").hide();
        }
        else {
          $(this).parent().removeClass('valid--otp');
          $(this).parent().addClass('invalid--otp');
          $(".invalid-otp-message").show();
        }
      }
      else {
        $(this).parent().removeClass('valid--otp');
      }
    });

    $('.otp-student-value').on("keyup", function () {
      let currentForm = $(this).parents('form');
      let mobNo = currentForm.find('#number').val();
      let $this = $(this);
      if ($(this).val().length == 6) {
        currentForm.find('.invalid-otp-message').hide();
        if ($this.val() == otpRecieved) {
          $this.parent().addClass('valid--otp');
          $('#sub-btn-new').removeAttr('disabled');
        }
        else {
          $this.parent().removeClass('valid--otp');
          currentForm.find('.invalid-otp-message').show();
        }
      }
      else {
        $this.parent().removeClass('valid--otp');
        $('#sub-btn-new').attr("disabled", true);
      }
    })

    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }
    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }
    async function sendOtp(currentForm, token) {
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      let otpField = currentForm.find('[name="otp"]');
      var pageType = $("#harleyRequestCallBack").length > 0 ? "Premia HD" : $(currentForm).find('[name="pageType"]').val();
      sessionStorage.setItem("tempID", generateId());
      var otpdata = {
        phoneNum: $(currentForm).find('[name="mobileno"]').val(),
        pageType: pageType,
        vehicleName:
          pageType == "homepage"
            ? $(currentForm).find('[name="vehicleNameVal"]').val()
            : "",
        reqID: sessionStorage.getItem("tempID"),
        token: token
      };
      let formTypeValue = $(currentForm).find('[name="isPopup"]').val() == "true" ? "popup" : "static";
      const phCodemobNumber = "+91" + otpdata.phoneNum;
      let hashedMobile = await hashedValue(phCodemobNumber);
      localStorage.setItem("analyticsHashedMobile", hashedMobile);

      const phCodemobNumberMeta = "91" + otpdata.phoneNum;
      let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
      localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

      if (window.digitalData && window._satellite) {
        window.digitalData.push({
          formDetails: {
            formname: currentForm.data("aa-formname"),
            formtype: formTypeValue,
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
        _satellite.track("OTP Requested");
      }
      $.ajax({
        url: defaultservlet + ".sendotp.html",
        type: "POST",
        data: otpdata,
        success: function (resp) {
          autoPopulateOTP(otpField);
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Success",
              formDetails: {
                formname: currentForm.data("aa-formname"),
                formtype: formTypeValue,
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
        error: function () {
          $(currentForm).find(".invalid-otp-message").show();
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Fails",
              formDetails: {
                formname: currentForm.data("aa-formname"),
                formtype: formTypeValue,
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
      });
    }

    function sendOtpStudent(currentForm, callback) {
      let otpdata = {
        searchby: $(currentForm).find('[name="mobileno"]').val()
      };
      $.ajax({
        url: defaultservlet + "/_jcr_content.getOtp.json",
        type: "POST",
        data: otpdata,
        success: function (resp) {
          otpRecieved = resp.Data[0].OTP;
          if (resp.Data[0].OTP == 0) {
            callback(false);
          } else {
            callback(resp.Data[0].OTP);
          }
        },
        error: function () {
          $(currentForm).find(".invalid-otp-message").show();
        },
      });
    }

    $(".refresh").on("click", function () {
      createCaptcha($(this).parents("form"));
    });
    function createCaptcha(currentForm) {
      sessionStorage.setItem("tempID", generateId());
      var captchaData = {
        reqID: sessionStorage.getItem("tempID"),
      };
      $.ajax({
        url: defaultservlet + ".captcha.html",
        type: "POST",
        data: captchaData,
        success: function (resp) {
          $(currentForm).find("#captcha-img").remove();
          createCaptchaImage(resp);
        },
        error: function () { },
      });
    }
    function createCaptchaImage(resp) {
      var canv = document.createElement("canvas");
      canv.id = "captcha-img";
      canv.width = 200;
      canv.height = 50;
      var context = canv.getContext("2d");

      context.font = "bold 20px Arial";
      const spaceWidth = canv.width - context.measureText(resp).width - 40;
      const wordSpace = Math.floor(spaceWidth / resp.length);
      let left = 10;
      for (let i = 0; i < resp.length; i++) {
        const deg = (Math.random() * 30 * Math.PI) / 180;
        const x = left;
        const y = canv.height / 2 + Math.random() * 10;

        context.translate(x, y);
        context.rotate(deg);

        context.fillStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.fillText(resp[i], 0, 0);

        context.rotate(-deg);
        context.translate(-x, -y);

        left +=
          context.measureText(resp[i]).width +
          wordSpace +
          Math.floor(Math.random() * 5);
      }

      const strokeLength = resp.length * Math.round(Math.random() + 1) + 3;
      for (let i = 0; i < strokeLength; i++) {
        context.strokeStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.beginPath();
        context.moveTo(Math.random() * 100, Math.random() * 50);
        //context.lineTo(Math.random() * 100, Math.random() * 50);
        const x = Math.random() * 100;
        const y = Math.random() * 50;
        context.moveTo(x, y);
        //context.lineTo(x + 1, y + 1);
        context.stroke();
      }
      if ($("#captcha").length > 0) {
        document.getElementById("captcha").appendChild(canv); // adds the canvas to the body element
      }
      //$(currentForm).find(".captcha-img").attr("src", "data:image/jpg;base64," + resp);
    }
    function customValidation($form) {
      // for mobile no fields
      jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      });
      //for allow numbers only
      jQuery.validator.addMethod("numbersOnly", function (value) {
        return /^[0-9]+$/i.test(value);
      });
      //for allow only character
      jQuery.validator.addMethod("charactersOnly", function (value) {
        return /^[a-zA-Z]+$/i.test(value);
      });
      //for email
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      //   book-test-drive-form
      $form.validate({
        ignore: [],
        rules: {
          fullname: {
            required: true,
            charactersOnly:
              $("#student__campaign").length ? false : true,
          },
          mobileno: {
            required: true,
            numbersOnly: true,
            mobilenoOnly: true,
          },
          otp: {
            required: true,
            numbersOnly: true,
          },
          vehicleNameVal: {
            required: true,
          },
          plantoBuyVal: {
            required: true,
          },
          enqsourceVal: {
            required: true,
          },
          stateNameVal: {
            required: true,
          },
          cityNameVal: {
            required: true,
          },
          captcha: {
            required: ".ignore-validation:visible",
          },
          dealerNameVal: {
            required: true,
          },
          schoolname: {
            required: true,
          },
          email: {
            emailOnly: {
              depends: function (elem) {
                return $form.find('[name="email"]').val().length != 0
              }
            },
          },
          countrymobileno: {
            required: true,
          },
        },
        messages: {
          fullname: {
            required: $('[name="fullname"]').data("validation-msg-req"),
            charactersOnly: $('[name="fullname"]').data(
              "validation-msg-format"
            ),
          },
          mobileno: {
            required: $('[name="mobileno"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            mobilenoOnly: $('[name="mobileno"]').data("validation-msg-format"),
          },
          otp: {
            required: $('[name="otp"]').data("validation-msg-req"),
            numbersOnly: "Please enter valid OTP",
          },
          vehicleNameVal: {
            required: $('.book-test-ride-campaign').length ? $('[name="vehicleNameVal"]').data("validation-msg-req") : $('[name="vehicleNameVal"]#veh-req').data("validation-msg-req")
          },
          plantoBuyVal: {
            required: $('.book-test-ride-campaign').length ? $('[name="plantoBuyVal"]').data("validation-msg-req") : $('[name="plantoBuyVal"]#ptb-req').data("validation-msg-req")
          },
          enqsourceVal: {
            required: $('.book-test-ride-campaign').length ? $('[name="enqsourceVal"]').data("validation-msg-req") : $('[name="enqsourceVal"]#enqsrc-req').data("validation-msg-req")
          },
          stateNameVal: {
            required: $('[name="stateNameVal"]').data("validation-msg-req"),
          },
          cityNameVal: {
            required: $('[name="cityNameVal"]').data("validation-msg-req"),
          },
          captcha: {
            required: $('[name="captcha"]').data("validation-msg-req"),
          },
          dealerNameVal: {
            required: $('[name="dealerNameVal"]').data("validation-msg-req"),
          },
          schoolname: {
            required: $('[name="schoolname"]').data("validation-msg-req"),
          },
          email: {
            emailOnly: $('[name="email"]').data("validation-msg-format"),
          },
          birdies: {
            required: $('[name="birdies"]').data("validation-msg-req"),
          },
          organisationName: {
            required: $('[name="organisationName"]').data("validation-msg-req"),
          },
        },
      });
    }
    $(".book-test-submit").on("click", function (e) {
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }

      let currentForm = $(this).closest("form");
      if (currentForm.valid()) {
        submitClicked = true;
        bookridesubmit(currentForm);
      } else {
        let formerrorList = currentForm.data("validator").errorList;
        let fieldlist = "";
        let formTypeValue = currentForm.find('[name="isPopup"]').val() == "true" ? "popup" : "static";
        $.each(formerrorList, function (key, value) {
          if ("" !== fieldlist) {
            fieldlist = fieldlist + "|";
          }
          fieldlist = fieldlist + formerrorList[key].element.name;
        });
        if (!fieldlist.includes("otp") && $('#otp').val() === '') {
          console.log('am in')
          fieldlist = fieldlist + '|' + 'otp'
        }
        if (window.digitalData) {
          window.digitalData.push({
            event: "Form Error",
            formDetails: {
              formname: currentForm.data("aa-formname"),
              formtype: formTypeValue,
              formerrorfields: fieldlist,
              city: currentForm.find("input[name=cityNameVal]").val() || "NA",
              state: currentForm.find("input[name=stateNameVal]").val() || "NA",
            },
            productDetails:{
              productName : "NA",
              variant: "NA", // selected variant
              colour: "NA", // selected color
              dealer: currentForm.find('button[name=dealername]').text() || "NA", // selected dealer name
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      }
    });

    $('#sub-btn-exist').click(function () {
      $(".student-accordion-container form").each(function () {
        var currentForm = $(this);
        customValidation(currentForm);
      });
      let base64Data = ogFile;

      function dataURItoBlob(dataURI) {
        var byteString = atob(dataURI.split(',')[1]);
        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
        var ab = new ArrayBuffer(byteString.length);
        var ia = new Uint8Array(ab);
        for (var i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
      }

      var blob = dataURItoBlob(base64Data);
      var file = new File([blob], 'image.png', { type: blob.type });
      var data = new FormData();
      data.append('Name', $('#student__campaign #name').val());
      data.append("File1", file);
      data.append("File2", null);
      data.append('Mobile', $('#student__campaign .student-detail-form #number').val());
      data.append('State', $('#student__campaign [name="stateNameVal"]').val());
      data.append('City', $('#student__campaign [name="cityNameVal"]').val());
      data.append('Model', $('#student__campaign [name="vehicleNameVal"]').val());
      data.append('SchoolName', $('#student__campaign #school').val());
      console.log(data);

      $.ajax({
        url: "https://worxpertise.in/HeroGD_API/api/InsertDetails",
        type: "POST",
        data: data,
        cache: false,
        contentType: false,
        processData: false,
        success: function (resp) {
          $('.student-accordion-container,.campaign--footer,#student__campaign h3,.offer-subtext').addClass('d-none');
          $('.student-sub-success').removeClass('d-none');
        },
        error: function () {
          console.log("submit fail")
        },
      });
    })

    function generateUniqueString() {
      return "_" + new Date().getTime();
    }

    $('#sub-btn-new').click(function () {
      let formdata = {
        searchby: $('.check-status-form #number').val(),
        type: 'Mobile',
        otp: $('.check-status-form [name="otp"]').val()
      }
      $.ajax({
        url: defaultservlet + "/_jcr_content.getOtp.json",
        type: "POST",
        data: formdata,
        success: function (resp) {
          let status = resp.Data[0].Status;
          let unicode = resp.Data[0].unique_code;
          let discount = resp.Data[0].discount;
          let dateTimeString = resp.Data[0].Date;
          let dateTimeParts = dateTimeString.split(" ");
          let datePart = dateTimeParts[0];
          let timePart = dateTimeParts[1] + " " + dateTimeParts[2];
          $('.student-voucher .voucher').toggleClass('d-flex', unicode !== '').toggleClass('d-none', unicode === '');
          $('.dateandtime .date').text(datePart);
          $('.dateandtime span.time').text(timePart);
          if (status == "Under Processing") {
            $('.student-voucher .tab-container').removeClass('activated').addClass('under-process');
          } else if (status == "Voucher Expired") {
            $('.student-voucher .tab-container').removeClass('activated under-process').addClass('expired');
          } else {
            $('.student-voucher .tab-container').addClass('activated').removeClass('under-process expired');
          }
          $('.student-voucher .tab-container p').text(status);
          $('.student-voucher .voucher-no span').text(unicode);
          if ((!discount) || discount == "NA") {
            $('.student-voucher .voucher-details p.discount').addClass('d-none');
          }
          else {
            $('.student-voucher .voucher-details p.discount span').text(discount);
          }
          // $('#check__status').addClass('d-none')
          $('#voucher-switch').removeClass('justify-content-end');
          $('#voucher-switch').addClass('justify-content-between');
          $('.student-check-container').addClass('d-none');
          $('.student-voucher').removeClass('d-none');
        },
        error: function () {
          console.log("submit fail")
        },
      });
    })

    $('#campaign-sub-form #otp').on('input', function () {
      let mobileNumber = $('#campaign-sub-form #number').val();
      if ($(this).val().length == 6 && isValidOtp(mobileNumber, $(this).val())) {
        $('#campaign-sub-form .invalid-otp-message').css('display', 'none');
      } else if ($(this).val().length == 6) {
        $('#campaign-sub-form .invalid-otp-message').css('display', 'block');
      }
    })

    function getQueryParams(search) {
      let params = {};
      let definitions = search.split("&");
      definitions.forEach(function (val, key) {
        let parts = val.split("=", 2);
        if (parts[1] != undefined && parts[1].length > 1) {
          params[parts[0]] = decodeURIComponent(parts[1]);
        }
      });
      return {
        utm_source: params["utm_source"],
        utm_medium: params["utm_medium"],
        utm_term: params["utm_term"],
        utm_content: params["utm_content"],
        utm_campaign: params["utm_campaign"],
      };
    }
    async function bookridesubmit(currentForm) {
      let formTypeValue = $(currentForm).find('[name="isPopup"]').val() == "true" ? "popup" : "static";
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      let planToBuy;
      let buyingUsedVehicle;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      $(currentForm).find(".book-test-submit").attr("disabled", "disabled");
      if ($(currentForm).find('[name="pageType"]').val() == "homepage") {
        vehicleName = $(currentForm).find('[name="vehicleNameVal"]').val();
      } else {
        if ($(currentForm).find('[name="isPopup"]').val() == "true") {
          vehicleName = $(currentForm).find('[name="modelName"]').val();
        } else {
          vehicleName = $(currentForm).find('[name="vehicleNameVal"]').val();
        }
      }
      if ($(currentForm).find(".plantobuy-dropdown").length > 0) {
        planToBuy = $(currentForm).find('[name="plantoBuyVal"]').val();
      }
      if($("#exchange-campaign").length > 0) {
        buyingUsedVehicle = $('#exchange-campaign input[name=selectradio]:checked').val();
      }
      if ($(currentForm).find('[name="pageType"]').val() == "campaignpage") {
        if ($(currentForm).find(".vehicle-dropdown").length > 0)
          vehicleName = $(currentForm).find('[name="vehicleNameVal"]').val();
        else vehicleName = $(currentForm).find('[name="modelName"]').val();
      }
      var validationType =
        $(".book-test-ride-campaign").length > 0
          ? $(".book-test-ride-campaign").data("validationtype")
          : "otp";
      let _getParams = getQueryParams(window.location.search.slice(1));
      let _url = window.location.href;
      let _utmsource = $("#utmsource").data("utmsource");
      let _utmContent = $("#utmcontent").data("utmcontent");
      let dealerInfo = $("#dealer").val();
      let campaignPage = $("#capaignpage").val();
      let pageTitle = document.title;
      let source;
      let enqsource;
      let isReferral = $(currentForm).find('[name="isReferral"]').val();

      if ($("#bharath-mobility").length || (_utmsource && _utmsource.toLowerCase() == "hot leads")) {
        source = _utmsource;
      } else {
        source = _getParams.utm_source
          ? _getParams.utm_source
          : _utmsource
            ? `AEM-${getOS()}-${_utmsource}`
            : `AEM-${getOS()}-${category}-${pageTitle}-${validationType}`;
      }
      if($('#harley__campaign').length){
        if ($(currentForm).find(".enqsource-dropdown").length > 0) {
          enqsource = $(currentForm).find('[name="enqsourceVal"]').val();
          console.log("ENQSOURCE: "+enqsource);
        } 
      }
      var dataObj = {
        vehicle_purchase_plan: planToBuy? planToBuy: '',
        mx_Interested_in_Buying_Used_Vehicle: buyingUsedVehicle? buyingUsedVehicle : '',
        bike_model:
          $("#harleyRequestCallBack").length > 0 ? $('[name="modelName"]').val() : vehicleName,
        name: $(currentForm).find('[name="fullname"]').val().trim(),
        mobile: $(currentForm).find('[name="mobileno"]').val(),
        otp: validationType == "otp" ? $(currentForm).find('[name="otp"]').val() : "",
        isReferral: isReferral ? isReferral : "",
        captcha: 
          validationType == "captcha" ? $(currentForm).find('[name="captcha"]').val() : "",
        city: $(currentForm)
          .find('[name="cityname"]')
          .text()
          .replaceAll("&amp;", "and")
          .replaceAll("&", "and"),
        state: $(currentForm)
          .find('[name="statename"]')
          .text()
          .replaceAll("&amp;", "and")
          .replaceAll("&", "and"),
        reqID: sessionStorage.getItem("tempID"),
        dealer_code: dealerInfo ? dealerInfo : null,
        variation_type: campaignPage,
        dealer_name: $(currentForm)
          .find('[name="dealername"]')
          .text()
          .replaceAll("&amp;", "and")
          .replaceAll("&", "and"),
        topic: $(".book-test-ride-campaign.ndc-campaign").length
          ? $("#ndc-topic").val()
          : null,
        suggestion: $(".book-test-ride-campaign.ndc-campaign").length
          ? $("#txtSuggestion").val() + "|||" + $("#txtCommitment").val()
          : null,
        section: $(".book-test-ride-campaign.ndc-campaign").length
          ? $("#ndc-section").val()
          : null,
        source: source,
        enqsource: enqsource ? enqsource : "",
        utm_source: _getParams.utm_source,
        utm_medium: _getParams.utm_medium,
        utm_term: _getParams.utm_term,
        utm_content: _utmContent ? _utmContent : _getParams.utm_content,
        utm_campaign: _getParams.utm_campaign,
        email: $(currentForm).find('[name="email"]').val(),
      };
      const hashBuffer = await crypto.subtle.digest(
        "SHA-256",
        new TextEncoder().encode(dataObj.mobile)
      );
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      $(currentForm)
        .closest(".book-test-drive-wrapper")
        .find(".book-test-drive-loading")
        .addClass("active");
      $(currentForm)
        .closest(".book-test-drive-wrapper")
        .find(".collapse-btn")
        .addClass("d-none");
      // $(currentForm)
      //   .closest(".book-test-drive-wrapper")
      //   .find("#bookTestRideCollapse")
      //   .removeClass("show");

      function onSubmitCall() {
        $.ajax({
          url: $('[name="action_url"]').val(),
          type: "POST",
          data: JSON.stringify(dataObj),
          dataType: "json",
          contentType: "application/json",
          success: function (resp) {
            if ($("#bharath-mobility").length) {
              if (JSON.parse(JSON.stringify(resp)).message == "success") {
                $("#bharath-mobility h3, #bharath-mobility form").addClass("d-none");
                $("#bharath-mobility .successmsg").removeClass("d-none");

                if (window.digitalData && window._satellite) {
                  window.digitalData = {
                    form: {
                      formname: currentForm.data("aa-formname"),
                      formtype: currentForm.attr("id"),
                      mobilenumber: hashArray
                        .map((b) => b.toString(16).padStart(2, "0"))
                        .join(""),
                      vehicle: dataObj.bike_model,
                    },
                    page: {
                      siteType: "AEM",
                      siteCategory: siteCategory,
                      fullReferringUrl: document.referrer,
                      pageName: pageTitle,
                      pageUrl: window.location.href,
                      path: window.location.pathname,
                      category: category ? category : "",
                    },
                  };
                  _satellite.track("formSuccess");
                }
              } else {
                $("#bharath-mobility h3, #bharath-mobility form").addClass("d-none");
                $("#bharath-mobility .failmsg").removeClass("d-none");
              }
            } else {
              if (resp && JSON.parse(JSON.stringify(resp)).login == "true") {
                if (window.digitalData) {
                  window.digitalData.push({
                    event: "Form Success",
                    formDetails: {
                      formname: currentForm.data("aa-formname"),
                      formtype: formTypeValue,
                      city: dataObj.city,
                      state: dataObj.state,
                      leadId: JSON.parse(JSON.stringify(resp)).leadSequenceNumber || "",
                    },
                    productDetails:{
                      productName : dataObj.bike_model,
                      variant: "NA", // selected variant
                      colour: "NA", // selected color
                      dealer: dataObj.dealer_name ?? dataObj.dealer_code, // selected dealer name
                    },
                    user: {
                      hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                      hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                      hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                      customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                  });
                  if(formTypeValue == "static"){
                    isBookTestrideFormStarted = false
                  }
                  if(formTypeValue == "popup"){
                    isCallbackTestFormStarted = false
                  }
                }
                if ($(window).width() < 768) {
                  $(currentForm)
                    .closest(".book-test-drive-wrapper")
                    .find(".book-test-drive-parent:not(.modal-body .book-test-drive-parent)")
                    .css("height", "404px");
                  $(currentForm)
                    .closest(".book-test-drive-wrapper")
                    .find(
                      ".book-test-drive-parent:not(.modal-body .book-test-drive-parent) .book-test-drive-form"
                    )
                    .addClass("d-none");
                }
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-drive-loading")
                  .removeClass("active");
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-thankyou.success")
                  .addClass("active");
                if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
                  const response = JSON.parse(JSON.stringify(resp));
                  const isCampaignInfluencerPage = $(currentForm).closest(".book-test-ride-campaign").next().hasClass("book-test-ride-campaign-influencer");
                  if (isBookTestrideCampaignInfluencer && isCampaignInfluencerPage && response.RelatedId) {
                    campaignInfluencerShowStep(1, currentForm, response.RelatedId);
                  } else {
                    window.location.href = $(currentForm).find('[name="thankyoulink"]').val();
                  }
                } else {
                  $(currentForm).find(".book-test-submit").removeAttr("disabled");
                }

              } else {
                $(currentForm).find(".book-test-submit").removeAttr("disabled");
                if ($(window).width() < 768) {
                  $(currentForm)
                    .closest(".book-test-drive-wrapper")
                    .find(".book-test-drive-parent:not(.modal-body .book-test-drive-parent)")
                    .css("height", "404px");
                  $(currentForm)
                    .closest(".book-test-drive-wrapper")
                    .find(
                      ".book-test-drive-parent:not(.modal-body .book-test-drive-parent) .book-test-drive-form"
                    )
                    .addClass("d-none");
                }
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-drive-loading")
                  .removeClass("active");
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-thankyou.fail")
                  .addClass("active");
                if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
                  $(currentForm)
                    .closest(".book-test-ride-campaign")
                    .find(".failmsg")
                    .removeClass("d-none");
                  $(currentForm)
                    .closest(".book-test-ride-campaign")
                    .find(".successmsg")
                    .addClass("d-none");
                  $(currentForm)
                    .closest(".book-test-ride-campaign")
                    .find(".book-test-submit")
                    .removeAttr("disabled");
                  // createCaptcha(currentForm);
                  $(currentForm).find(".book-test-submit").removeAttr("disabled");
                }
                if (window.digitalData) {
                  window.digitalData.push({
                    event: "Form Success",
                    formDetails: {
                      formname: currentForm.data("aa-formname"),
                      formtype: formTypeValue,
                      city: currentForm.find("input[name=cityNameVal]").val(),
                      state: currentForm.find("input[name=stateNameVal]").val(),
                      leadId: JSON.parse(JSON.stringify(resp)).leadSequenceNumber || "",
                    },
                    productDetails:{
                      productName : currentForm.find("input[name=vehicleNameVal]").val(),
                      variant: "NA", // selected variant
                      colour: "NA", // selected color
                      dealer: dataObj.dealer_name ?? dataObj.dealer_code, // selected dealer name
                    },
                    user: {
                      hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                      hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                      hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                      customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                  });
                }
              }
            }
          },
          error: function (error) {
            $(currentForm).find(".book-test-submit").removeAttr("disabled");
            if ($("#bharath-mobility").length) {
              $("#bharath-mobility h3, #bharath-mobility form").addClass("d-none");
              $("#bharath-mobility .failmsg").removeClass("d-none");
            }
            $(currentForm)
              .closest(".book-test-ride-campaign")
              .find(".book-test-submit")
              .removeAttr("disabled");
            $(currentForm)
              .closest(".book-test-drive-wrapper")
              .find(".book-test-drive-loading")
              .removeClass("active");
            $(currentForm)
              .closest(".book-test-drive-wrapper")
              .find(".book-test-drive-wrapper .collapse-btn")
              .removeClass("d-none");
            $(currentForm).find("#bookTestRideCollapse").addClass("show");
            $(currentForm).find(".invalid-otp-message").show();
            if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
              // createCaptcha(currentForm);
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Error",
                  formDetails: {
                    formname: currentForm.data("aa-formname"),
                    formtype: formTypeValue,
                    formerrorfields: "incorrect-otp",
                    city: currentForm.find("input[name=cityNameVal]").val(),
                    state: currentForm.find("input[name=stateNameVal]").val()
                  },
                  productDetails:{
                    productName : currentForm.find("input[name=vehicleNameVal]").val(),
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: dataObj.dealer_name, // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
            } else {
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Error",
                  formDetails: {
                    formname: currentForm.data("aa-formname"),
                    formtype: formTypeValue,
                    formerrorfields: "incorrect-otp",
                    city: currentForm.find("input[name=cityNameVal]").val(),
                    state: currentForm.find("input[name=stateNameVal]").val()
                  },
                  productDetails:{
                    productName : currentForm.find("input[name=vehicleNameVal]").val(),
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: dataObj.dealer_name, // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
            }
          },
        });
      }

      if ($('[name="isHiddenCaptchaCheck"]').val() == 'true') {
        let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
        grecaptcha.ready(function () {
          grecaptcha.execute(sitKey).then(function (token) {
            dataObj.token = token;
            onSubmitCall();
          });
        });
      } else if ($('[name="modelName"]').val() == 'MAVRICK') {
        let dataObject = {
          FName: $(currentForm).find('[name="fullname"]').val().trim(),
          LName: ".",
          MobileNo: $(currentForm).find('[name="mobileno"]').val(),
          ModelNo: "MAVRICK 440",
          DealerCode: dealerInfo,
          EnqName: $(currentForm).find('[name="fullname"]').val().trim() + generateUniqueString(),
          EnqSource: "Campaign",
          EmailAddr: "",
          Comments: "",
        };
        $.ajax({
          url: defaultservlet + ".harleyenquiry.html",
          type: "POST",
          data: dataObject,
          mimeType: "multipart/form-data",
          success: function (resp) {
            let jsonObj = resp;
            if (typeof jsonObj != "object") {
              jsonObj = $.parseJSON(jsonObj);
            }
            if (jsonObj.ErrorMessage && jsonObj.ErrorMessage === "SUCCESS") {
              try {
                if (window.digitalData) {
                  window.digitalData.push({
                    event: "Form Success",
                    formDetails: {
                      formname: "campaign",
                      formtype: formTypeValue,
                      city: dataObj.city || "NA",
                      state: dataObj.state || "NA",
                      leadId: jsonObj.EnqNo || "",
                    },
                    productDetails:{
                      productName : dataObject.ModelNo,
                      variant: "NA", // selected variant
                      colour: "NA", // selected color
                      dealer: $(currentForm).find('button[name=dealername]').text() || "NA", // selected dealer name
                    },
                    user: {
                      hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                      hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                      hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                      customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                  });
                }
              } catch (error) {
                console.log(error)
              }
              if ($(window).width() < 768) {
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-drive-parent:not(.modal-body .book-test-drive-parent)")
                  .css("height", "404px");
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(
                    ".book-test-drive-parent:not(.modal-body .book-test-drive-parent) .book-test-drive-form"
                  )
                  .addClass("d-none");
              }
              $(currentForm)
                .closest(".book-test-drive-wrapper")
                .find(".book-test-drive-loading")
                .removeClass("active");
              $(currentForm)
                .closest(".book-test-drive-wrapper")
                .find(".book-test-thankyou.success")
                .addClass("active");
              if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
                window.location.href = $(currentForm).find('[name="thankyoulink"]').val();
              } else {
                $(currentForm).find(".book-test-submit").removeAttr("disabled");
              }

            } else if (jsonObj.ErrorMessage &&
              jsonObj.ErrorMessage === "Already Open Enq Exists"
            ) {
              try {
                if (window.digitalData) {
                  window.digitalData.push({
                    event: "Form Success",
                    formDetails: {
                      formname: "campaign",
                      formtype: formTypeValue,
                      city: dataObj.city || "NA",
                      state: dataObj.state || "NA",
                      leadId: jsonObj.EnqNo || "",
                    },
                    productDetails:{
                      productName : dataObject.ModelNo,
                      variant: "NA", // selected variant
                      colour: "NA", // selected color
                      dealer: $(currentForm).find('button[name=dealername]').text() || "NA", // selected dealer name
                    },
                    user: {
                      hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                      hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                      hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                      customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                  });
                }
              } catch (error) {
                console.log(error)
              }
              $(currentForm).find(".book-test-submit").removeAttr("disabled");
              if ($(window).width() < 768) {
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(".book-test-drive-parent:not(.modal-body .book-test-drive-parent)")
                  .css("height", "404px");
                $(currentForm)
                  .closest(".book-test-drive-wrapper")
                  .find(
                    ".book-test-drive-parent:not(.modal-body .book-test-drive-parent) .book-test-drive-form"
                  )
                  .addClass("d-none");
              }
              $(currentForm)
                .closest(".book-test-drive-wrapper")
                .find(".book-test-drive-loading")
                .removeClass("active");
              $(currentForm)
                .closest(".book-test-drive-wrapper")
                .find(".book-test-thankyou.fail")
                .addClass("active");
              if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
                $(currentForm)
                  .closest(".book-test-ride-campaign")
                  .find(".failmsg")
                  .removeClass("d-none");
                $(currentForm)
                  .closest(".book-test-ride-campaign")
                  .find(".successmsg")
                  .addClass("d-none");
                $(currentForm)
                  .closest(".book-test-ride-campaign")
                  .find(".book-test-submit")
                  .removeAttr("disabled");
                // createCaptcha(currentForm);
                $(currentForm).find(".book-test-submit").removeAttr("disabled");
              }
            }
          },
          error: function (error) {
            $(currentForm).find(".book-test-submit").removeAttr("disabled");
            if ($("#bharath-mobility").length) {
              $("#bharath-mobility h3, #bharath-mobility form").addClass("d-none");
              $("#bharath-mobility .failmsg").removeClass("d-none");
            }
            $(currentForm)
              .closest(".book-test-ride-campaign")
              .find(".book-test-submit")
              .removeAttr("disabled");
            $(currentForm)
              .closest(".book-test-drive-wrapper")
              .find(".book-test-drive-loading")
              .removeClass("active");
            $(currentForm)
              .closest(".book-test-drive-wrapper")
              .find(".book-test-drive-wrapper .collapse-btn")
              .removeClass("d-none");
            $(currentForm).find("#bookTestRideCollapse").addClass("show");
            $(currentForm).find(".invalid-otp-message").show();
            if ($(currentForm).closest(".book-test-ride-campaign").length > 0) {
              // createCaptcha(currentForm);
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Error",
                  formDetails: {
                    formname: currentForm.data("aa-formname"),
                    formtype: formTypeValue,
                    formerrorfields: "incorrect-otp",
                    city: dataObj.city || "NA",
                    state: dataObj.state || "NA",
                  },
                  productDetails:{
                    productName : dataObject.ModelNo,
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: dealerInfo || "NA", // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
            } else {
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Error",
                  formDetails: {
                    formname: currentForm.data("aa-formname"),
                    formtype: formTypeValue,
                    formerrorfields: "incorrect-otp",
                    city: dataObj.city || "NA",
                    state: dataObj.state || "NA",
                  },
                  productDetails:{
                    productName : dataObject.ModelNo,
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: dealerInfo || "NA", // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
            }
          },
        });
      } else {
        onSubmitCall();
      }
    }
    function sortAscending(a, b) {
      return $(b).text().toUpperCase() < $(a).text().toUpperCase() ? 1 : -1;
    }
    function getOS() {
      var userAgent = window.navigator.userAgent,
        platform =
          window.navigator?.userAgentData?.platform ||
          window.navigator.platform,
        macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
        windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
        iosPlatforms = ["iPhone", "iPad", "iPod"],
        os = null;

      if (macosPlatforms.indexOf(platform) !== -1) {
        os = "Mac OS";
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = "iOS";
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = "Windows";
      } else if (/Android/.test(userAgent)) {
        os = "Android";
      } else if (/Linux/.test(platform)) {
        os = "Linux";
      }

      return os;
    }

    //Smooth scrolling with links
    $(".home-book-test-drive-btn").on("click", function (event) {
      event.preventDefault();
      var currentElement = this.hash;
      $("html,body").animate(
        {
          scrollTop:
            $(currentElement).offset().top - $(".header-main").height(),
        },
        500,
        function () {
          var focusedElem = $(currentElement).find(".form-group").first();
          focusedElem.find("input").focus().click();
        }
      );
    });

    $(".form-close").on("click", function () {
      var formID =
        $(this).closest("#book-test-drive-nav").find("form").length > 0
          ? $(this).closest("#book-test-drive-nav").find("form")
          : $(this).closest(".book-test-drive-wrapper").find("form");
      $(this).parents(".book-test-thankyou").removeClass("active");
      $(formID).find("#bookTestRideCollapse").removeClass("d-none");
      $(formID).find("#bookTestRideCollapse").addClass("show");
      $(this)
        .closest("#book-test-drive-nav")
        .find(".collapse-btn")
        .removeClass("d-none");
      formID
        .find("input,textarea,select")
        .not('[type="button"]')
        .not('[type="hidden"]')
        .val("")
        .end();
      formID.find("label.error").remove();
      formID.find(".send-otp-btn,.resend-otp-btn").removeClass("show");
      formID.find(".invalid-otp-message").hide();
    });

    $("#golf-form-submit").on("click", function () {
      let currentForm = $(this).closest("form");
      if (currentForm.valid()) {
        $("#golf-loader").addClass("active");
        let dataObj = {
          PWSESSIONRS: {
            PWPROCESSRS: {
              PWHEADER: {
                IN_PROCESS_ID: "1",
                APP_ID: "GBC",
                ORG_ID: "GBC",
                OUT_PROCESS_ID: "oa_getCountryCode",
                LOGIN_ID: "",
              },
              PWDATA: {
                oa_getCountryCode: {
                  Row: [
                    {
                      0: $("#number").val(),
                      1: $("#name").val(),
                      2: $("#email").val(),
                      3: $("#organisation").val(),
                      4: $("#birdies").val(),
                      5: "MTE2NzAxODQxY2ZiM2ZmZGQ2MTY=",
                    },
                  ],
                },
              },
              PWERROR: "",
            },
          },
        };
        $.ajax({
          url: "https://hmclmobazfun02p-dev.azurewebsites.net/api/cloudware_prod?ORG_ID=GBC",
          type: "POST",
          data: JSON.stringify(dataObj),
          dataType: "json",
          contentType: "application/json",
          success: function (resp) {
            $("#golf-loader").removeClass("active");
            let jsonResp = JSON.parse(JSON.stringify(resp));
            if (
              jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.oa_getCountryCode
                .Row[0].status == "success"
            ) {
              window.location.href = $("[name=thankyoulink]").val();
            } else {
              $("#golf-error-response").addClass("active");
              $("#golf-error-response span").text(
                jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.oa_getCountryCode
                  .Row[0].message
              );
            }
          },
          error: function (error) {
            $("#golf-loader").removeClass("active");
          },
        });
      }
    });
    // Smooth scrolling when the document is loaded and ready
    $(document).ready(function () {
      if (location.hash.length > 0 && $(".header-main")) {
        $("html,body").animate(
          {
            scrollTop:
              $(location.hash).offset().top - $(".header-main").height(),
          },
          500
        );
      }

      if ($('#student__campaign').length) {
        function applyStyles() {
          let screenWidth = $(window).width();

          var $campaignRightContent = $(".campaign-right-content");
          var $custContainerStudent = $(".cust-container-student");

          if (screenWidth < 768) {

            if (!$campaignRightContent.parent().hasClass("cust-container-student")) {
              $campaignRightContent.wrap('<div class="cust-container-student"></div>');
            }

            $(".campaign-right-content").css({
              'box-shadow': '0px 10px 40px rgba(120, 120, 120, 0.15)',
              'backdrop-filter': 'blur(13.1579px)',
              'margin-top': '16px'
            });
          }
          else {
            if ($campaignRightContent.parent().hasClass("cust-container-student")) {
              $campaignRightContent.unwrap();
            }
          }

        }

        applyStyles();

        $(window).resize(function () {
          applyStyles();
        });

        $('.accordion--title').click(function (e) {
          let dropDown = $(this).closest('.accordion-card').find('.accordion--panel');
          $(this).closest('.student-accordion').find('.accordion--panel').not(dropDown).slideUp();
          if ($(this).hasClass('active')) {
            $(this).removeClass('active');
          } else {
            $(this).closest('.student-accordion').find('.accordion--title.active').removeClass('active');
            $(this).addClass('active');
          }
          dropDown.stop(false, true).slideToggle();
          e.preventDefault();
        });

        $('.accordion--title').first().click();

        // File Upload

        var dropzone = new Dropzone('.demo-upload', {
          url: "/upload/",
          maxFilesize: 1,
          maxFiles: 1,
          addRemoveLinks: true,
          acceptedFiles: ".jpeg, .jpg, .png",
          previewTemplate: document.querySelector('#preview-template').innerHTML,
          parallelUploads: 1,
          thumbnailHeight: 50,
          thumbnailWidth: 50,
          filesizeBase: 100000000000,
          success: function (file, response) {
            file.previewElement.classList.add("image__open");
            let form = $('#doc--form');
            ogFile = file.dataURL;
            let closeButton = document.createElement("div");
            closeButton.classList.add("dpz-close-custom");
            let filenameDiv = file.previewElement.querySelector(".dz-filename");
            if (filenameDiv) {
              filenameDiv.appendChild(closeButton);
              closeButton.addEventListener("click", function () {
                dropzone.removeFile(file);
                $('.campaign--footer').addClass('d-none');
              });
              let ogClose = file.previewElement.querySelector(".dz-remove");
              ogClose.classList.add('dpz-upload-success');
            }
            if (checkHidden(form)) {
              form.find('input').each(function (index) {
                let inputValue = $(this).val();
                form.parent().parent().siblings().find('.grey-text span').eq(index).text(inputValue);
              });
              form.parent().parent().siblings().find('.grey-text').removeClass('d-none');
              setTimeout(function () {
                $('.accordion--title').last().click();
                $('.campaign--footer').removeClass('d-none');
              }, 2500);
            }
          },
          thumbnail: function (file, dataUrl) {
            if (file.previewElement) {
              file.previewElement.classList.remove("dz-file-preview");
              var images = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
              for (var i = 0; i < images.length; i++) {
                var thumbnailElement = images[i];
                thumbnailElement.alt = file.name;
                thumbnailElement.src = dataUrl;
              }
              setTimeout(function () { file.previewElement.classList.add("dz-image-preview"); }, 800);
            }
          },

          init: function () {
            this.on("uploadprogress", function (file, progress, bytesSent) {
              const progressElement = file.previewElement.querySelector(".upload--percentage");
              const percentage = Math.round(progress);
              progressElement.textContent = "(" + percentage + "%)";
            });
            this.on("addedfile", function (file) {
              if (file.size > 1000000) {
                alert("File size exceeds 1MB. Please select a smaller file.");
                this.removeFile(file);
              }

              let acceptedExtensions = ["jpeg", "jpg", "png"];
              let fileExtension = file.name.split('.').pop().toLowerCase();
              if (acceptedExtensions.indexOf(fileExtension) === -1) {
                alert("Invalid file type. Please select a .jpeg, .jpg, or .png file.");
                this.removeFile(file);
              }

            });
          }

        });
        var minSteps = 6,
          maxSteps = 100,
          timeBetweenSteps = 300,
          bytesPerStep = 10000;
        dropzone.uploadFiles = function (files) {
          var self = this;
          for (var i = 0; i < files.length; i++) {
            var file = files[i];
            totalSteps = Math.round(Math.min(maxSteps, Math.max(minSteps, file.size / bytesPerStep)));

            for (var step = 0; step < totalSteps; step++) {
              var duration = timeBetweenSteps * (step + 1);
              setTimeout(function (file, totalSteps, step) {
                return function () {
                  file.upload = {
                    progress: 100 * (step + 1) / totalSteps,
                    total: file.size,
                    bytesSent: (step + 1) * file.size / totalSteps
                  };

                  self.emit('uploadprogress', file, file.upload.progress, file.upload.bytesSent);
                  if (file.upload.progress == 100) {
                    file.status = Dropzone.SUCCESS;
                    self.emit("success", file, 'success', null);
                    self.emit("complete", file);
                    self.processQueue();
                  }
                };
              }(file, totalSteps, step), duration);
            }
          }
        }

        var clickCount = 0;
        let ogHeaderText = $('#student__campaign h3.student-header').text();
        $('.check-status-anchor').click(function () {
          $('#voucher-switch').removeClass('justify-content-between');
          $('#voucher-switch').addClass('justify-content-end');
          let checkVoucherStatus = "check voucher status";
          clickCount++;
          if (clickCount % 2 === 1) {
            toggleView('register');
            $('.campaign--footer').addClass('d-none');
            $('.student-sub-success').addClass('d-none');
            $('#student__campaign h3, .offer-subtext').removeClass('d-none');
            $('#student__campaign h3').text(checkVoucherStatus);
          } else {
            toggleView('status');
            if ($('#dropzone .dz-complete').length && $('input[name="docVal"]').val() != '') {
              $('.campaign--footer').removeClass('d-none');
            }
            $('.student-sub-success').addClass('d-none');
            $('.student-voucher').addClass('d-none');
            $('#student__campaign h3').text(ogHeaderText);
          }
        });

        function toggleView(view) {
          let isNewUser = (view === 'register');
          let $this = $('.check-status-anchor');
          $('.student-accordion-container').toggleClass('d-none', isNewUser);
          $('.student-check-container').toggleClass('d-none', !isNewUser);
          customValidation($('.check-status-form'));
          $this.text(isNewUser ? String.fromCharCode(160) + 'Register Here' : String.fromCharCode(160) + 'Check status');
          $this.parent().find('span').text(isNewUser ? 'Are you a new user? ' : 'Track your submission status. ');
        }
      }
    });

    function decryptData(encryptedData, key, iv) {
      var base64DecodedData = atob(encryptedData);
      var decryptedBytes = CryptoJS.AES.decrypt(base64DecodedData, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
      var decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);
      return decryptedText;
    }

    function campaignInfluencerShowStep(stepNumber, bookrideForm, relatedId) {
      if ($(".book-test-ride-campaign-influencer").length > 0) {
        const campaignInfluencerEle = $(".book-test-ride-campaign-influencer");
        if (campaignInfluencerEle.hasClass("d-none")) {
          $(bookrideForm).closest(".book-test-ride-campaign").addClass("d-none");
          campaignInfluencerEle.removeClass("d-none");
        }
        if (relatedId) {
          const encRelatedID = getEncryptString(relatedId);
          sessionStorage.setItem('festivecampaignID', encRelatedID);
        }
        if (stepNumber == 2) {
          campaignInfluencerEle.find("#step2").addClass("d-none");
          campaignInfluencerEle.find("#step3").removeClass("d-none");
          campaignInfluencerEle.find('.thanks-wrapper .sub-text span').html($('.influencer-radio.active .influencer-text').text());
          campaignInfluencerEle.find('.thanks-wrapper .decorator-top').addClass('animate fadeInDownStand');
          campaignInfluencerEle.find('.thanks-wrapper .text-wrapper, .thanks-wrapper .final-cta-campaign').addClass('animate fadeInUpStand');
        }
      }
    }

    if (isBookTestrideCampaignInfluencer) {
      let key = '63C09AE37D4254AD7D13A7HGF$F88411';
      let iv = '1234567890123456';
  
      $(".influencer-radio .thumbnail-img, .influencer-radio .influencer-options").on("click", function (e) {
        $('.influencer-radio').removeClass('active');
        $(this).parent().addClass('active');
        $(this).parent().find('.influencer-options').prop("checked", true);
      });

      $(".book-test-ride-campaign-influencer .language-options .lang-content-options").on("click", function (e) {
        $('.lang-content-options').removeClass('active-option-checks');
        $(this).addClass('active-option-checks');
        $(this).find('.options').prop("checked", true);
      });

      $('.book-test-ride-campaign-influencer .influencer-radio').eq(0).find('.influencer-options').prop("checked", true);

      $('.book-test-ride-campaign-influencer .submit-influencer-btn').on("click", function (e) {
        $('.festive-loader').removeClass('d-none');
        $('.festive-loader .festive-loader-icon').addClass('animate fadeInUpStand');

        let sessionCampaignId = sessionStorage.getItem("festivecampaignID");
        let requestCampaignID = "";
        requestCampaignID = decryptData(sessionCampaignId, key, iv);

        const dataObj = {
          variation_type: "festive-update-lead",
          leadId: requestCampaignID,
          mx_Language: $('.language-options .lang-content-options.active-option-checks input').attr('value'),
          mx_Influencer_Name: $(".left-module .influencer-radio.active .influencer-text").text()
        };

        const analyticsValue = {
          formname: "Influencer Form",
          formtype: "static",
          city: $('.book-test-ride-campaign')
            .find('[name="cityname"]')
            .text()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and"),
          state: $('.book-test-ride-campaign')
            .find('[name="statename"]')
            .text()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and"),
          influencername: $(".left-module .influencer-radio.active .influencer-text").text(),
          preferredlanguage: $('.language-options .lang-content-options.active-option-checks input').attr('value')
        }

        try {
          $.ajax({
            url: defaultservlet + ".updatelead.html",
            type: "POST",
            data: JSON.stringify(dataObj),
            dataType: "json",
            contentType: "application/json",
            success: function (resp) {
              if (resp?.Status == "Success") {
                sessionStorage.removeItem("festivecampaignID");
                if (window.digitalData) {
                  const pageData = {
                      event: "Form Success",
                      formDetails: analyticsValue,
                      user: {
                          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                      },
                      page: getPageDetails(),
                  }
                  window.digitalData.push(pageData);
                }
                campaignInfluencerShowStep(2);
              }
              $('.festive-loader').addClass('d-none');
              $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
            },
            error: function (error) {
              console.log('Error', error);
              $('.festive-loader').addClass('d-none');
              $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
            },
          });
        }
        catch (e) {
          console.log('Error', e);
          $('.festive-loader').addClass('d-none');
          $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
        }
      });

      if (sessionStorage.getItem("festivecampaignID")) {
        campaignInfluencerShowStep(1, $(".book-test-ride-campaign form"));
      }
    }
  }

  if ($('#upsell-passion-campaign').length) {

    let key = '63C09AE37D4254AD7D13A7HGF$F88411';
    let iv = '1234567890123456';

    function getQueryParam(name) {
      var url = window.location.href;
      var paramIndex = url.indexOf('?');
      if (paramIndex === -1) {
        return null; // No query parameter in the URL
      }
      var queryString = url.substring(paramIndex + 1);
      var params = queryString.split('&');
      for (var i = 0; i < params.length; i++) {
        var param = params[i].split('=');
        if (param[0] === name) {
          return param[1] || '';
        }
      }
      return null;
    }

    var paramName = 'enc';
    let res = getQueryParam(paramName);

    function decryptData(encryptedData, key, iv) {
      var base64DecodedData = atob(encryptedData);
      var decryptedBytes = CryptoJS.AES.decrypt(base64DecodedData, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
      var decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);
      return decryptedText;
    }

    function setFormData(firstNameValue, phoneNoValue, state, city, dealer) {
      $('#upsell-passion-campaign [name="fullname"]').val(firstNameValue);
      $('#upsell-passion-campaign [name="mobileno"]').val(phoneNoValue);

      if ($('#festive-hub-landing').length && window.location.search.includes('enc=')) {
        $('.claim-offer-left-section#upsell-passion-campaign .claim-offer-otp-link ').addClass('show');
      }

      setTimeout(function () {
        if (state) {
          $('ul[aria-labelledby="stateDropdown"] li a:contains("' + state.toLowerCase() + '")').click();
        }
      }, 800);

      setTimeout(function () {
        if (city) {
          $('ul[aria-labelledby="cityDropdown"] li a:contains("' + city.toLowerCase() + '")').click();
        }
      }, 1000);

      setTimeout(function () {
        if (dealer) {
          let dealerElement = $('ul li[value="' + dealer + '"]');
          if (dealerElement.length > 0) {
            let anchorTag = dealerElement.find("a");
            anchorTag.click();
          }
        }
      }, 1200);
    }

    var decryptedData = decryptData(res, key, iv);
    var [firstName, phoneNo, state, city, dealer] = decryptedData.split('|');
    setFormData(firstName, phoneNo, state, city, dealer);
  }

  $('#exchange-campaign input[name=selectradio]').on('click', function(){
    $('#exchange-campaign input[name=selectradio]').parent().removeClass('check');
    $('#exchange-campaign input[name=selectradio]:checked').parent().addClass('check');
  })

  if ($(".festive-campaign-form-valid").length) {
    $(".festive-campaign-form-valid").each(function (idx, campaignFormElement) {
      const isGolfPage = $(campaignFormElement).parent().hasClass("golf-page");
      if (isGolfPage) {
        $(campaignFormElement).find("#golf-form-submit").addClass("book-test-submit-disabled");
      } else {
        $(campaignFormElement).find(".book-test-submit").addClass("book-test-submit-disabled");
      }
      const allInputEle = $(campaignFormElement).find(".cust-form-group:not(.d-none) input:not([type='radio']), .cust-form-group:not(.d-none) textarea");
      if (allInputEle.length) {
        const fieldValidList = new Map();
        const concernCheckbox = [...allInputEle].filter((ele) => $(ele).attr("name") == "concernCheck");
        if (concernCheckbox && concernCheckbox.length) {
          const isChecked = $(concernCheckbox[0]).is(':checked');
          fieldValidList.set("concernCheck", `${isChecked}`);
        }
        allInputEle.on("keyup keydown keypress input propertychange blur", function(e) {
          const fieldName = $(this).attr("name");
          if (fieldName == "otp") {
            const otpEntered = $(this).val();
            if (otpEntered.length == 6) {
              const mobNumber = $(campaignFormElement).find(".cust-form-group #number").val();
              if(isValidOtp(mobNumber, otpEntered)) {
                fieldValidList.set(fieldName, "true");
              } else {
                fieldValidList.set(fieldName, "false");
              }
            } else {
              if (fieldValidList.has(fieldName)) {
                fieldValidList.set(fieldName, "false");
              }
            }
          } else if (fieldName == "concernCheck") {
            const isChecked = $(this).is(':checked');
            fieldValidList.set(fieldName, `${isChecked}`);
          } else if ($(this).val() != "" && $(this).valid()) {
            fieldValidList.set(fieldName, "true");
          } else {
            fieldValidList.set(fieldName, "false");
          }

          if (allInputEle.length == fieldValidList.size) {
            if ([...fieldValidList.values()].includes("false")) {
              if (isGolfPage) {
                $(campaignFormElement).find("#golf-form-submit").addClass("book-test-submit-disabled");
              } else {
                $(campaignFormElement).find(".book-test-submit").addClass("book-test-submit-disabled");
              }
            } else {
              if (isGolfPage) {
                $(campaignFormElement).find("#golf-form-submit").removeClass("book-test-submit-disabled");
              } else {
                $(campaignFormElement).find(".book-test-submit").removeClass("book-test-submit-disabled");
              }
            }
          }
        });
      } else {
        if (isGolfPage) {
          $(campaignFormElement).find("#golf-form-submit").removeClass("book-test-submit-disabled");
        } else {
          $(campaignFormElement).find(".book-test-submit").removeClass("book-test-submit-disabled");
        }
      }
    });
  }
});

$(document).ready(function () {
      $('.mobile-number').on('keyup', function () {
        if ($(this).val().length == 10) {
          $(this).parent('.cust-form-group').find('.otp-link').addClass('show');
        }
      });
      $('.sent-otp').on('click', function () {
        $('.resent-otp').addClass('show');
      });

      $('.campaign-right-content .campaign-dropdown .dropdown-content').on('click', function () {
        event.preventDefault();
        var getValue = $(this).text();
        $(this).parents('.select-dropdown').find('.btn-drop ').text(getValue);

      });

      $('.btn-drop-v1 .dropdown-content').on('click', function () {
        $(this).parents('.btn-drop-v1').find('.btn-drop').addClass('active');
      })

    })

$('body').scrollspy({ target: ".product-navbar .nav", offset: 200 });
var servicescrollDwnNavOffset = $('.product-header-main').height();
$(".product-navbar .navbar-nav .nav-link").on('click', function (event) {
  var href = $(this).attr('href');
  if (this.hash !== "") {
    event.preventDefault();
    var hash = this.hash;
    $('html, body').animate({
      scrollTop: $(hash).offset().top - servicescrollDwnNavOffset
    }, 800, function () {
      window.location.hash = hash;
      $(href)[0].scrollIntoView();
      window.scrollBy(0, -servicescrollDwnNavOffset);
    });
  }
});
$(window).on("scroll", function () {
    var bookingTestRideScrollOffset = '';
    if($('.explore-360-main').length){
         bookingTestRideScrollOffset = $(".explore-360-main").offset().top - $(window).scrollTop() + 10;
    }
    if (bookingTestRideScrollOffset <= 0) {
      $(".product-header-main .book-now-btn").addClass("visible");
    } else {
      $(".product-header-main .book-now-btn").removeClass("visible");
    }
  });
$(document).ready(function() {
    bredCrumbResize();

    function bredCrumbResize() {
        if ($('.bread-crumbs-section').length > 0) {
            var headerHeight = $('.header-main').height();
            $('.hero-breadcrumb').css({
                'margin-top': Math.round(headerHeight)
            })

            $('.home-main-section').css({
                'margin-top': Math.round($('.bread-crumbs-section').height())
            })
            if($('.hide-breadcrumb').length > 0 && sessionStorage.getItem("data") == null) {
            	$('.hide-breadcrumb').addClass('d-none');
            }
        }
    }
    $(window).bind("resize", function() {
        bredCrumbResize();
    });

    if($('#homeXpulse').length > 0){
        $(".breadcrumb  .breadcrumb-item a").click(function(){
         let hashValue = $(this).attr('href');
         hashValue && $("html, body").animate(
             {
               scrollTop: $(hashValue).offset().top - 100,
             },
             "slow"
           );
        }) 
     }
});

$(document).ready(function () {
if($('.product-header-main').length){
var productNavHeight = $('.product-header-main').height();
$('.hero-section-video,#scooterBanner,home-main-section').css('margin-top',productNavHeight);

$(".scroll-down-btn").on('click', function () {
  var scrollAmount = $('.next-section').offset().top - productNavHeight;
  window.scroll({
    top: scrollAmount,
    behavior: 'smooth'
  });

    });
    $(window).on('resize', function () {
    productNavHeight = $('.product-header-main').height();
   $('.hero-section-video,#scooterBanner,home-main-section').css('margin-top',productNavHeight);
    });
    }

});
$(document).ready(function () {
  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
  
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }

  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }
  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }
  let isClicked = false;
  $(".exchange-form .ex-new-options").click(function (e) {
    sessionStorage.setItem("aaExchangeJourneyType", "New Customer");
    if (window.digitalData && isClicked === false) {
      window.digitalData.push({
        event: "Exchange Journey Initiated",
        exchangeDetails: {
          journeyType: "new customer",
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
    isClicked = true;
  });

  $("#exchangeLoginForms #campaign-sub-btn").click(function () {
    var sessionVehicleDetails = sessionStorage.getItem("exchangeloggeddetails");
    var cookieMobileData = sessionStorage.getItem("data");
    let journey =
      sessionVehicleDetails && cookieMobileData
        ? "Loggedin user - Hero site"
        : "Exchange login";
    sessionStorage.setItem("aaExchangeJourneyType", journey);
    if (!$(this).hasClass("exchg-disable-login")) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "Exchange Journey Initiated",
          exchangeDetails: {
            journeyType: journey,
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
  });
});


$(document).ready(function () {
    var sessionVehicleDetails = sessionStorage.getItem("exchangeloggeddetails");
    var cookieMobileData = sessionStorage.getItem("data");

    function getOS() {
      var userAgent = window.navigator.userAgent,
        platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
        macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
        windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
        iosPlatforms = ["iPhone", "iPad", "iPod"],
        os = null;
    
      if (macosPlatforms.indexOf(platform) !== -1) {
        os = "Mac OS";
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = "iOS";
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = "Windows";
      } else if (/Android/.test(userAgent)) {
        os = "Android";
      } else if (/Linux/.test(platform)) {
        os = "Linux";
      }
      return os;
    }
    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }
    function getPageDetails(isErrorPage = false) {
      let pagePath = window.location.pathname;
      let slug = pagePath.split("/");
      let actualSlug = slug[1].replace(".html", "");
      let primary_category = window.location.origin;
      let fullSplit = primary_category.split("//");
      let pcSplit = fullSplit[1].split(".");
      let title = $("title").text();
      let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
      let sub1 = "";
      let sub2 = "";
      let sub3 = "";
      let sub4 = "";
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
        sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
          sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
          sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
          sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
      } else {
        if (slug[2]) sub1 = slug[2].replace(".html", "");
        if (slug[3]) sub2 = slug[3].replace(".html", "");
        if (slug[4]) sub3 = slug[4].replace(".html", "");
        if (slug[5]) sub4 = slug[5].replace(".html", "");
      }
      return {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: isErrorPage,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      };
    }

    async function hashedValue(message) {
      const hashBuffer = await crypto.subtle.digest(
        "SHA-256",
        new TextEncoder().encode(message)
      );
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashValue = hashArray
        .map((b) => b.toString(16).padStart(2, "0"))
        .join("");
      return hashValue;
    }
    if(sessionVehicleDetails && cookieMobileData) {
        sessionVehicleDetails = JSON.parse(decodeURIComponent(atob(sessionVehicleDetails)));
        cookieMobileData = JSON.parse(decodeURIComponent(atob(cookieMobileData)));
        $('.ex-form-tab-content').addClass('d-none');
        $('.ex-form-tab-content.addressPan').addClass('d-flex flex-column');
        $('.ex-form-heading.ex-form-tab-list').replaceWith(`<div class="d-flex justify-content-center align-items-center mt-sm-4 pt-sm-1 pt-3">
            <img src="/content/dam/hero-aem-website/in/exchange---assets/exchg-smile-gif.gif" class="exchg-logged-smile-gif" alt="gif smile">
            <div class="exchg-logged-user-text">Hello ${cookieMobileData.name}</div></div>`);
        $('.ex-form-subhead-label p').html('Excited to know the price of 2-wheeler you want to exchange');
        $('.exchange-banner .otp-form-wrap').addClass('d-none');
        $('.exchange-banner .ex-form-cta-label').addClass('d-none');
        $('#exchangeLoginForms').append(`<div>
            <div class="exchg-content-title text-center mt-3 mb-sm-2 mb-3">Or</div>
            <div>
                <div class="check-popup-text mb-2" id="exchangeLogout">Try with another registered mobile number</div>
                <div class="exchg-landing-logout-note mb-2">(You will be logged out after clicking this link)</div>
            </div>
        </div>`);
        if(cookieMobileData?.mobile) {
            $('.exchange-banner-bg #mobnumber').val(cookieMobileData?.mobile);      
            $('.ex-form-tab-content #otpnumber, .exchange-banner-bg #mobnumber').prop('disabled', true);
            $('.exchange-banner-bg #campaign-sub-btn').removeClass('exchg-disable-login');
        }
    }

    $('.mob-exchange-cta-product').click(function (e) {
        const productEntry = $(this).attr('data-href');
        if (productEntry) {
            window.location.href = productEntry;
        }
    })

    var tipsLanding = $('.exchange-form .ex-bulb-wrap');
    var landingTipsIndex = 0;

    function showNextDivLanding(tipsEle, tipsIndex) {
        tipsEle.eq(tipsIndex).fadeIn(500, function() {
            setTimeout(function() {
                tipsEle.eq(tipsIndex).fadeOut(500, function() {
                    tipsIndex = (tipsIndex + 1) % tipsEle.length;
                    showNextDivLanding(tipsEle, tipsIndex);
            });
            }, 5000); // 5 seconds
        }).css({'display': 'flex', 'align-items': 'center'});
    }

    showNextDivLanding(tipsLanding, landingTipsIndex);

    $('#exchangeLogout').on('click', function() {
	    var d = new Date();
        d.setTime(d.getTime());

      sessionStorage.removeItem('data');
      sessionStorage.removeItem('exchangeloggeddetails');
      sessionStorage.removeItem("is-commerce-token");
      sessionStorage.removeItem("is-authorized");
      sessionStorage.removeItem("mobile");
      sessionStorage.removeItem('selectedVehicleData');
      sessionStorage.removeItem('vehicleDetails');
      sessionStorage.removeItem("exchangeLoginType");

	    $('.log-in-link').removeClass('d-none');
        $('.logout-header').addClass('d-none');

      let defaultservlet = $('#defaultservlet').val();
      sendAjaxCall(`${defaultservlet}.removeLoginCookies.json`, '').then(function (resp) {
          window.location.href = "/content/hero-aem-website/in/en-in/exchange.html";
      }).catch(function (e) {
          window.location.href = "/content/hero-aem-website/in/en-in/exchange.html";
      });
	 });

     $('.exchange-form #landingCheckHere').on('click', function() {
        $('#tab1').prop('checked', true);
     })

    $(document).on('click', '.exchange-banner .ex-new-options input', function(e) {
        sessionStorage.setItem("exchangeVehicleType", $(this).filter(":checked").val());
        let ctcRedirectLink = $(this).attr("data-component-relativePath");
        window.location.href = ctcRedirectLink;
    });

    $(document).on('click', '.outer-calc-wrap .exchg-form-viewall, .exchange-step-4-faq .exchg-form-viewall, #mobViewExchgCTA', function(e) {
        sessionStorage.removeItem("exchangeVehicleType");
        let ctcRedirectLink = $(this).attr("data-component-relativePath");
        window.location.href = ctcRedirectLink;
    });

    $("#mobnumber").on("keyup", function () {
        if ($(this).val().length == 10 && $(this).valid() && !sessionVehicleDetails) {
          $(this)
            .parent(".cust-form-group")
            .find("#send-otp")
            .removeClass("d-none");
        } else {
          $(this).parents("form").find("#send-otp").addClass("d-none");
          $(this).closest('.exchange-banner-bg').find('.exchg-landing-err-mobile').hide();
        }
        if($(this).val().length == 10 && $(this).valid() && sessionVehicleDetails) {
            $('.exchange-banner-bg #campaign-sub-btn').removeClass('exchg-disable-login');
        }

      });

    $("#otpnumber").on("keyup", function () {
    if ($(this).val().length == 6 && $(this).valid() && $('#mobnumber').val().length == 10) {
        $('.exchange-banner-bg #campaign-sub-btn').removeClass('exchg-disable-login');
        $(this).closest('.exchange-banner-bg').find('.exchg-landing-err-otp').hide();
    } else {
        $(this).closest('.exchange-banner-bg').find('.exchg-landing-err-otp').show();
        $('.exchange-banner-bg #campaign-sub-btn').removeClass('exchg-disable-login');
        $('.exchange-banner-bg #campaign-sub-btn').addClass('exchg-disable-login');
    }
    });

  $(".exchange-banner #send-otp").click(async function (e) {
    e.preventDefault();
    let mobNumber = $(".exchange-banner #mobnumber").val();
    if (mobNumber) {
        const phCodemobNumber = "+91" +  mobNumber;
        let hashedMobile = await hashedValue(phCodemobNumber);
        localStorage.setItem("analyticsHashedMobile", hashedMobile);

        const phCodemobNumberMeta = "91" +  mobNumber;
        let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
        localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);
    }
    if (window.digitalData) {
      window.digitalData.push({
        formDetails: {
          formname: "Exchange existing customer login",
          formtype: "Exchange journey",
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
      _satellite.track("OTP Requested");
    }
    validateExchgMobileNo($(this));
  });

    function validateExchgMobileNo(otpElement) {
        $('#hero-loader').removeClass('d-none');
        let defaultServlet = $('#defaultservlet').val();
        let sendOtpApiUrl = defaultServlet+".externalLogin.json";

        var requestData = { mobileNumber : otpElement.closest('.exchange-banner-bg').find('#mobnumber').val()}
        sendAjaxCall(sendOtpApiUrl, requestData).then(function(data)  {
        	let jsonResponse = data;
          if (typeof jsonResponse == "string") {
            jsonResponse = JSON.parse(data);
          }
          if(jsonResponse.success === true && jsonResponse.message.toLowerCase().includes("success")) {
            otpElement.closest('.exchange-banner-bg').find('.exchg-landing-err-mobile').hide();
            otpElement.closest('.exchange-banner-bg').find('#mobnumber').removeClass('exchg-error-input-border');
            otpElement.closest('.exchange-banner-bg').find('.exchg-landing-success-mobile').show();
            otpElement.closest('.exchange-banner-bg').find('#mobnumber').addClass('exchg-success-input-border');
            var $sendOTP = $(this);
            var $timer = $("#timer");
            var count = 30;
            if (!$(".otp-field").val("")) {
                $(".otp-field").val("");
            }
            // onSendOTP();
            $(this).text("Resend OTP");
            $timer.text("00:30");
            $timer.show();
            $(this).attr("disabled", true);
            $('.otp--sent').removeClass('d-none');
            var timerInterval = setInterval(function () {
                count--;
                var minutes = Math.floor(count / 60).toString().padStart(2, "0");
                var seconds = (count % 60).toString().padStart(2, "0");
                $timer.text(minutes + ":" + seconds);

                if (count <= 0) {
                clearInterval(timerInterval);
                $timer.text("00:00");
                $timer.hide();
                $('.otp--sent').addClass('d-none');
                $sendOTP.removeAttr("disabled");
                }
            }, 1000);
                $('#hero-loader').addClass('d-none');
        	}else{
        		otpElement.closest('.exchange-banner-bg').find('.exchg-landing-fail-mobile').show();
                otpElement.closest('.exchange-banner-bg').find('.exchg-landing-success-mobile').hide();
                otpElement.closest('.exchange-banner-bg').find('#mobnumber').removeClass('exchg-success-input-border');
                $('#hero-loader').addClass('d-none');
        	}
        })
    }

    //Unwanted function

    // function createRequestBody(process_ID, create_row, in_process_ID) {
    //     var createRequestBody = {
    //         "PWSESSIONRS": {
    //             "PWPROCESSRS": {
    //                 "PWHEADER": {
    //                     "IN_PROCESS_ID": in_process_ID == null ? "1" : in_process_ID,
    //                     "APP_ID": "ONEAPP",
    //                     "ORG_ID": "ONEAPP",
    //                     "OUT_PROCESS_ID": process_ID,
    //                     "LOGIN_ID": ""
    //                 },
    //                 "PWDATA": {
    //                     [process_ID]: {
    //                         "Row": create_row
    //                     }
    //                 },
    //                 "PWERROR": ""
    //             }
    //         }
    //     }
    //     return createRequestBody;
    // }

  function sendAjaxCall(URL, data) {
    return new Promise(function (resolve, reject) {
      $.ajax({
        type: "POST",
        url: URL,
        data: data,
        success: function (response) {
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Success",
              formDetails: {
                formname: "Exchange existing customer login",
                formtype: "Exchange journey",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
          resolve(response); // Resolve promise and go to then()
        },
        error: function (err) {
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Fails",
              formDetails: {
                formname: "Exchange existing customer login",
                formtype: "Exchange journey",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
          reject(err); // Reject the promise and go to catch()
        },
      });
    });
  }

    function exchangeFormValidation($form) {
        jQuery.validator.addMethod("validNumber", function(value) {
            const disallowedNumbers = [
                "0123456789",
                "1111111111",
                "2222222222",
                "3333333333",
                "4444444444",
                "5555555555",
                "6666666666",
                "7777777777",
                "8888888888",
                "9999999999",
                "0000000000",
                "1234567890",
                "1010101010",
                "2020202020",
                "3030303030",
                "4040404040",
                "5050505050",
            ];
            if (disallowedNumbers.indexOf(value) !== -1) {
                return false;
            }
            if (value.length < 10) {
                return false;
            } else {
                return true;
            }
        });

        jQuery.validator.addMethod("validOtp", function(value) {
            if (value.length < 6) {
                return false;
            } else {
                return true;
            }
        });

        jQuery.validator.addMethod("indianNumber", function(value) {
            return /^[6789]\d{9}$/i.test(value);
        });

        $form.validate({
            ignore: [],
            rules: {
                mobileno: {
                    required: true,
                    validNumber: true,
                    indianNumber: true,
                },
                otp: {
                    required: true,
                    validOtp: true,
                },
                agreement: {
                    required: true,
                },
            },
            messages: {
                mobileno: {
                    required: $("#mobnumber").data("validation-msg-req"),
                    validNumber: "Please enter a valid number",
                    indianNumber: "Please enter a valid number",
                },
                otp: {
                    required: $("#otpnumber").data("validation-msg-req"),
                    validOtp: "Please enter valid mobile otp",
                },
                agreement: {
                    required: $("#exLoginAgree").data("validation-msg-req"),
                },
            },
        });
    }

    if ($("#exchangeLoginForms").length > 0) {
        exchangeFormValidation($("#exchangeLoginForms"));
    }
});
$(document).ready(function () {
  const tabSlickSettings = {
    infinite:
      $(".investor-explore").length > 0
        ? false
        : true || $("#gallary-tab").length > 0
        ? false
        : true,
    dots: false,
    autoplay: false,
    centerMode:
      $(".investor-explore").length > 0 || $("#event-gallary-tab").length > 0 ? false : true,
    variableWidth: $(".investor-explore").length > 0 ? false : true,
    focusOnSelect: true,
    arrows: $(".investor-explore").length > 0 ? false : true,
    prevArrow:
      "<button type='button' class='slick-prev'><img src='/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/left-black-arrow.svg'></button>",
    nextArrow:
      "<button type='button' class='slick-next'><img src='/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/left-black-arrow.svg'></button>",
    responsive: [
      {
        breakpoint: 9999,
        settings: "unslick",
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: $(".investor-explore").length > 0 ? 3 : 2,
        },
      },
      {
        breakpoint: 414,
        settings: {
          slidesToShow:
            $(".good-life-tab-header").length > 0 ||
            $("#genuine-parts-slick").length > 0 ||
            $("#gallary-tab").length > 0
              ? 2
              : 3,
          slidesToScroll:
            $(".good-life-tab-header").length > 0 || $("#genuine-parts-slick").length > 0
              ? 2
              : 3,
        },
      },
      {
        breakpoint: 320,
        settings: {
          slidesToShow:
            $(".good-life-tab-header").length > 0 || $("#genuine-parts-slick").length > 0
              ? 2
              : 3,
          slidesToScroll:
            $(".good-life-tab-header").length > 0 || $("#genuine-parts-slick").length > 0
              ? 2
              : 3,
        },
      },
    ],
  };
  $(".common-tabs-main").slick(tabSlickSettings, 500).on("afterChange", onSliderAfterChange);
  $(window).on("resize", function () {
    if ($(".common-tabs-main") && !$(".common-tabs-main").hasClass("slick-initialized")) {
      $(".common-tabs-main").slick(tabSlickSettings, 500);
    }
  });

  // $('#maintenanceschedule').on('click', '.slick-arrow', function () {
  //   $('.content-maintain--slider-wrap').css("visibility","hidden");
  //   $('.content-maintain--slider-wrap').css("","hidden");
  // })

  function onSliderAfterChange() {
    $(".content-maintain--slider-wrap").css("visibility", "visible");
    $(".content-maintain--slider-wrap").slick("setPosition");
    $(".content-hdbc--slider-wrap").slick("setPosition");
  }

  function changeCommonTabs(TabValue) {
    var strTabName = TabValue;
    $(strTabName).siblings().removeClass("active show");
    $(strTabName).addClass("active");
    setTimeout(function () {
      $(strTabName).addClass("show");
    }, 150);
  }

  if ($("#gallary-tab").length > 0) {
    $(".active .year-append").text("Year - 20");
  }

  $(document).on("click", ".common-tabs-main .nav-link", function () {
    $(this).parent().siblings().find(".nav-link").removeClass("active");
    $(this).parent().siblings().find(".active-img").addClass("d-none");
    $(this).parent().siblings().find(".inactive-img").removeClass("d-none");
    $(this).parent().find(".active-img").removeClass("d-none");
    $(this).parent().find(".inactive-img").addClass("d-none");

    if ($("#gallary-tab").length > 0) {
      $(".year-append").text("");
      $(".active .year-append").text("Year - 20");
    }

    var strTabName = $(this).attr("href");
    changeCommonTabs(strTabName);

    if ($(".content-hdbc--slider-wrap").length > 0) {
      let hash = $(this).closest("a").attr("href");
      console.log(hash, "hash");
      $(`${hash} .content-hdbc--slider-wrap`).slick("setPosition");
    }

    if ($(".content-maintain--slider-wrap").length > 0) {
      $(".content-maintain--slider-wrap").slick("setPosition");
    }

    if ($(".explore-card-section-slick").length > 0) {
      $(".explore-card-section-slick").slick("setPosition");
    }

    if ($(".gallary-carousel").length > 0) {
      $(".gallary-carousel").slick("setPosition");
    }

    if ($(".gallary-carousel-mobile").length > 0) {
      $(".gallary-carousel-mobile").slick("setPosition");
    }
  });

  $(document).on("click", ".common-tabs-main .slick-arrow", function () {
    var TabValue = $(this)
      .siblings(".slick-list")
      .find(".nav-item.slick-current a")
      .attr("href");
    changeCommonTabs(TabValue);
  });
  $(document).on("click", ".generic-left-faq-wrap .submenu-faq-tile", function () {
    var TabValue = $(this).attr("href");
    changeCommonTabs(TabValue);
  });
  $(document).on(
    "click",
    ".generictab .outer-faq-card .mob-head-faq-mobile .faq-mob-generic",
    function () {
      let clickIndex = $(this).parent().parent().index();
      let blockInside = $(this).parent().parent().find(".tab-pane.fade.show");
      blockInside.removeClass("active");
      blockInside.eq(clickIndex).addClass("active");
      var TabValue = $(this).attr("href");
      changeCommonTabs(TabValue);
    }
  );
  $(function () {
    $(".slider-for").slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      fade: true,
      asNavFor: ".slider-nav",
      speed: 300,
    });
    $(".slider-nav").slick({
      slidesToShow: 8,
      slidesToScroll: 1,
      asNavFor: ".slider-for",
      dots: false,
      centerMode: false,
      focusOnSelect: true,
      vertical: true,
      speed: 300,
      arrows: false,
      responsive: [
        {
          breakpoint: 991,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true,
            vertical: false,
            adaptiveHeight: true,
            prevArrow: $(".city-bike-specifications .custom-slider-arrows .prev"),
            nextArrow: $(".city-bike-specifications .custom-slider-arrows .next"),
          },
        },
      ],
    });
    if ($(window).width() > 991) {
      $(".specifications-list .b1-heavy-text-std.slick-slide:first-child").click();
    } else {
      $(".specifications-list .b1-heavy-text-std.slick-slide.slick-current").first().click();
    }
  });

  $(".investor-explore ul.common-tabs-main .nav-item").click(function () {
    $(".investor-explore ul.common-tabs-main .nav-item").removeClass("slick-current");
    $(this).addClass("slick-current");
    if ($("#blogs-and-news").length > 0) {
      $(".explore-card-section-slick").slick("slickGoTo", 0);
    }
  });

  setTimeout(slickDotsWrap, 0);

  function slickDotsWrap() {
    $.each($(".slick-dots"), function () {
      if ($(this).find("li").length < 2) {
        $(this).css("display", "none");
      }
    });
  }

  $(document).on("click", ".specifications-list .b1-heavy-text-std.slick-slide", function () {
    const currentSlide = $(".specifications-list .right-content .slick-current .info");
    $(".specifications-list .right-content .slick-slide .info").addClass("d-none");
    if (currentSlide) {
      currentSlide.removeClass("d-none");
    }
  });

  //dropdonw
  $(".gallery-container").hide();
  let dropdown = $("#gallerydd .dropdown-menu li.active").data("value");
  $("#" + dropdown).show();
  $("#" + dropdown).addClass('active');

  $(document).on("change", ".tab-navigation #select-gallery", function () {
    if ($(".gallary-carousel").length > 0) {
      $(".gallary-carousel").slick("setPosition");
    }

    if ($(".gallary-carousel-mobile").length > 0) {
      $(".gallary-carousel-mobile").slick("setPosition");
    }
  });

  let isClickedByUser = false;

  $("#gallerydd .campaign-dropdown").on("click", "li", function () {
    $("#gallerydd .campaign-dropdown li").removeClass("active");
    let sortBy = $(this).text().trim();
    $(this).addClass("active");
    $(".header-sortby .dropdown-toggle").html(
      sortBy +
        `<img class="sortby-drop-arrow" src="/content/dam/hero-aem-website/in/rides-events-listing/events-sortby-grey.svg">`
    );
    let dropdown = $("#gallerydd .dropdown-menu li.active").data("value");
    let targetSlide = $("#" + dropdown);
    $(".gallery-container").hide();
    targetSlide.show();
    $(".gallery-container").removeClass('active');
    $(".gallery-container").each(function () {
      if ($(this).css('display') != 'none') {
        $(this).addClass('active');
      }
    });
    targetSlide.find(".slick-slider").slick("setPosition");
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }

    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }
    if (window.digitalData) {
      if (isClickedByUser) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: sortBy,
              URL: $(this).attr("href"),
              position: "RNE Gallery",
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
      }
    }

    isClickedByUser = true;
  });

  $(".sortby-mob-lists li").on("click", function () {
    $(".sortby-mob-lists li").removeClass("active");
    $(this).addClass("active");
    $("#galleryModal").modal("hide");
    let sortBy = $(this).text().trim();
    $(".header-sortby .dropdown-toggle").html(
      sortBy +
        `<img class="sortby-drop-arrow" src="/content/dam/hero-aem-website/in/rides-events-listing/events-sortby-grey.svg">`
    );
    let dropdown = $(".sortby-mob-lists li.active").data("value");
    let targetSlideMob = $("#" + dropdown);
    $(".gallery-container").hide();
    targetSlideMob.show();
    targetSlideMob.find(".slick-slider").slick("setPosition");
  });

  setTimeout(() => {
    $("#gallerydd .dropdown-menu li:first").trigger('click');
  }, 500);
  
});

$(document).ready(function () {
  try {
    if ($(".investors-dropdown").length) {
      const params = new Proxy(new URLSearchParams(window.location.search), {
        get: (searchParams, prop) => searchParams.get(prop),
      });
      const queryStringYear = params.key2;
      investorDropdown();
      calendarEvents();
      if (queryStringYear) {
        loadSelectedYear(queryStringYear);
      }
    }
  } catch (error) {
    console.error(error);
  }

  function investorDropdown() {
    $(
      ".investors-dropdown .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown"
    ).each(function (indx, dropdownElement) {
      const dropdownButton = $(dropdownElement).find(".dropdown-toggle");
      const dropdownMenu = $(dropdownElement).find(".dropdown-menu");
      if (dropdownMenu && dropdownMenu.children().length) {
        const firstEle = dropdownMenu.find("li a").first();
        let selectedYear = firstEle.text();
        let firstLevelSelectedId = firstEle.attr("href");
        dropdownButton.text(selectedYear);
        if ($(dropdownElement).closest(".downloadreportstabvariation").length) {
          updateYear(selectedYear, firstLevelSelectedId);
        }
        dropdownMenu.on("click", "li a", function (e) {
          selectedYear = $(this).text();
          const prevSelectedYear = dropdownButton.text();
          dropdownButton.text(selectedYear);
          firstLevelSelectedId = $(this).attr("href");
          if ($(dropdownElement).closest(".downloadreportstabvariation").length) {
            updateYear(selectedYear, firstLevelSelectedId);
          }
          if ($(dropdownElement).closest(".selectTabOnQuery").length > 0 && firstLevelSelectedId && prevSelectedYear != "") {
            const dropDownLinks = dropdownMenu.find("li a");
            const selectTabAttributeObj = toGetSelectedTab(prevSelectedYear, dropDownLinks);
            toMakeFirstLevelTabActive(firstLevelSelectedId, false, selectTabAttributeObj);
          }
          if (selectedYear != "" && firstLevelSelectedId) {
            const cmpInvFilingReportEle = $(firstLevelSelectedId).find(".block--company-filings-report");
            if (cmpInvFilingReportEle.length) {
              fetchInvestorFilingsReport(selectedYear, cmpInvFilingReportEle);
            }
          }
        });
      } else {
        dropdownButton.text("");
      }
    });
  }

  // on load for preselecting the first level tabs
  function toMakeFirstLevelTabActive(firstLevelSelectedId, isCheckParams = false, selectTabAttributeObj = {}) {
    let queryStringTab = selectTabAttributeObj.firstAttribute;
    if (isCheckParams) {
      const params = new Proxy(new URLSearchParams(window.location.search), {
        get: (searchParams, prop) => searchParams.get(prop),
      });
      queryStringTab = params.key1;
    }

    if (queryStringTab !== undefined && queryStringTab != "" && firstLevelSelectedId) {
      const tabElements = $(firstLevelSelectedId).find(".horizontalTabSelection a");
      const tabElements1 = $(firstLevelSelectedId).find(".verticalTabSelection li button");
      let loadedTab;
      let selectedTabIndex;
  
      if (tabElements.length > 0) {
        loadedTab = tabElements;
      } else {
        loadedTab = tabElements1;
      }
  
      if (loadedTab.length) {
        for (let i = 0; i < loadedTab.length; i++) {
          const tabElementAttr = loadedTab[i].getAttribute("data-tabid");
          if (tabElementAttr == queryStringTab) {
            selectedTabIndex = i;
            break;
          }
        }
        if (selectedTabIndex === undefined) {
          selectedTabIndex = 0;
        }
        loadedTab[selectedTabIndex].click();
        let selectedId;
        if (loadedTab[selectedTabIndex].tagName === 'A') {
          selectedId = loadedTab[selectedTabIndex].getAttribute("href");
        } else if (loadedTab[selectedTabIndex].tagName === 'BUTTON') {
          selectedId = loadedTab[selectedTabIndex].getAttribute("data-target");
        }
  
        if (selectedId) {
          toMakeSecondLevelTabActive(selectedId, isCheckParams, selectTabAttributeObj);
        }
      }
    }
  }

  // on load for preselecting the second level tabs
  function toMakeSecondLevelTabActive(selectedId, isCheckParams = false, selectTabAttributeObj = {}) {
    let queryStringSecondLevelTab = selectTabAttributeObj.secondAttribute;
    if (isCheckParams) {
      const params = new Proxy(new URLSearchParams(window.location.search), {
        get: (searchParams, prop) => searchParams.get(prop),
      });
      queryStringSecondLevelTab = params.key3;
    }

    if (queryStringSecondLevelTab != undefined && queryStringSecondLevelTab != "" && selectedId) {
      const secondLevelTabElements = $(selectedId).find(".verticalSecondLevelSelection ul li button");
      let selectedTabIndex;

      if (secondLevelTabElements.length) {
        for (let i = 0; i < secondLevelTabElements.length; i++) {
          const tabElementAttr = secondLevelTabElements[i].getAttribute("data-tabid");
          if (tabElementAttr == queryStringSecondLevelTab) {
            selectedTabIndex = i;
            break;
          }
        }

        if (selectedTabIndex === undefined) {
          selectedTabIndex = 0;
        }
        secondLevelTabElements[selectedTabIndex].click();
      }
    }
  }

  // to get the selected tab attribute
  function toGetSelectedTab(queryStringYear, dropDownLinks) {
    let selectTabAttributeObj = {
      firstAttribute: "",
      secondAttribute: ""
    };
    if (queryStringYear != "" && dropDownLinks && dropDownLinks.length) {
      let firstLevelSelectedId;
      for (let i = 0; i < dropDownLinks.length; i++) {
        if (dropDownLinks[i].text == queryStringYear) {
          firstLevelSelectedId = dropDownLinks[i].getAttribute("href");
          break;
        }
      }

      // for storing the first level active tab
      if (firstLevelSelectedId) {
        const tabElements = $(firstLevelSelectedId).find(".horizontalTabSelection a.active");
        const tabElements1 = $(firstLevelSelectedId).find(".verticalTabSelection li button.active");
        let loadedTab;

        if (tabElements.length > 0) {
          loadedTab = tabElements;
        } else {
          loadedTab = tabElements1;
        }

        if (loadedTab.length) {
          selectTabAttributeObj.firstAttribute = loadedTab.attr("data-tabid");

          // for storing the second level active tab
          let selectedId;
          if (loadedTab[0].tagName === 'A') {
            selectedId = loadedTab.attr("href");
          } else if (loadedTab[0].tagName === 'BUTTON') {
            selectedId = loadedTab.attr("data-target");
          }

          if (selectedId) {
            const secondLevelTabElements = $(selectedId).find(".verticalSecondLevelSelection ul li button.active");
            if (secondLevelTabElements.length) {
              selectTabAttributeObj.secondAttribute = secondLevelTabElements.attr("data-tabid");
            }
          }
        }
      }
    }
    return selectTabAttributeObj;
  }

  // on load to make the select year as active
  function loadSelectedYear(queryStringYear) {
    $(
      ".investors-dropdown .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown"
    ).each(function (indx, dropdownElement) {
      const dropdownButton1 = $(dropdownElement).find(".dropdown-toggle");
      const dropDownLinks = $(dropdownElement).find(".dropdown-menu li a");
      for (let i = 0; i < dropDownLinks.length; i++) {
        if (dropDownLinks[i].text == queryStringYear) {
          dropdownButton1.text(dropDownLinks[i].text);
          dropDownLinks[i].click();
          const firstLevelSelectedId = dropDownLinks[i].getAttribute("href");
          if ($(dropdownElement).closest(".selectTabOnQuery").length > 0 && firstLevelSelectedId) {
            toMakeFirstLevelTabActive(firstLevelSelectedId, true);
          }
          break;
        }
      }
    });
  }

  // to append the year to annual card respective href
  function updateYear(selectedYear, firstLevelSelectedId) {
    if (selectedYear != "" && firstLevelSelectedId) {
      $(firstLevelSelectedId).find(".banner-card a").each(function(indx, bannerTab) {
        const link = $(bannerTab).attr("href");
        const updatedLink = updateUrlParameter(link, "key2", selectedYear);
        $(bannerTab).attr("href", updatedLink);
      });
    }
  }

  function updateUrlParameter(link, key, value) {
    // remove the hash part before operating on the uri
    const i = link.indexOf('#');
    const hash = i === -1 ? ''  : link.substr(i);
    let uri = i === -1 ? link : link.substr(0, i);

    const re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    const separator = uri.indexOf('?') !== -1 ? "&" : "?";

    if (value === null) {
        // remove key-value pair if value is specifically null
        uri = uri.replace(new RegExp("([?&]?)" + key + "=[^&]*", "i"), '');
        if (uri.slice(-1) === '?') {
            uri = uri.slice(0, -1);
        }
        // replace first occurrence of & by ? if no ? is present
        if (uri.indexOf('?') === -1) uri = uri.replace(/&/, '?');
    } else if (uri.match(re)) {
        uri = uri.replace(re, '$1' + key + "=" + value + '$2');
    } else {
        uri = uri + separator + key + "=" + value;
    }
    return uri + hash;
  }

  // for handling calendar events and call recording
  function calendarEvents() {
    if ($(".block--cmp-tab-events").length) {
      const urlParams = new URLSearchParams(window.location.search);
      const has_year = urlParams.has("key2");
      const yearParams = urlParams.get("key2");
      const hash = window.location.hash;
      const reportAligner = $(
        ".block--company-calendar-events .report-aligner"
      );
      const eventsCallRecording = $(
        ".block--company-calendar-events .quarterly-report-container"
      );
      const quaterData = $(".block--company-calendar-events .select-year-div")
        .first()
        .data("quater");
      const reportsPath = $(".block--cmp-tab-events").data("path");
      let currentPagePath = $(".block--cmp-tab-events").data(
        "current-page-path"
      );
      let arr = [];
      let reportsYear;
      let investorData = quaterData;
      if (typeof quaterData != "object") {
        investorData = quaterData && JSON.parse(quaterData);
      }
      reportAligner &&
        reportAligner.each(function () {
          if ($(this).data("category")) {
            arr.push($(this).data("category"));
          }
        });
      eventsCallRecording &&
        eventsCallRecording.each(function () {
          if ($(this).data("category")) {
            arr.push($(this).data("category"));
          }
        });
      if (currentPagePath) {
        currentPagePath += "/_jcr_content.investors.json";
      } else {
        currentPagePath = "#";
      }
      if (arr.length) {
        arr = [...new Set(arr)];
      }
      const data = {
        investorsCategory: reportsPath,
        categoryName: arr,
      };
      $.ajax({
        type: "GET",
        data: data,
        traditional: true,
        url: currentPagePath,
        success: function (response) {
          let resp = response;
          if (typeof response != "object") {
            resp = JSON.parse(response);
          }
          if (resp) {
            if (investorData) resp = resp.concat(investorData);
            reportsYear = resp;
            if (arr.length > 0) {
              reportsYear = resp.filter((element) => {
                return arr.some((childArr) => {
                  return childArr === element.folderName;
                });
              });
            }
            console.log(reportsYear);
            const findYear = reportsYear.filter(
              (ele) => ele.year == yearParams
            );
            if (has_year && findYear.length > 0) {
              const yearsSection = $(
                ".investors-dropdown .block--cmp-tab-events .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown .dropdown-menu li a"
              );
              yearsSection.each(function () {
                if ($(this).text() == yearParams) {
                  $(this).trigger("click");
                }
              });
            } else {
              $(
                ".investors-dropdown .block--cmp-tab-events .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown .dropdown-menu li a"
              )
                .first()
                .trigger("click");
            }
            hash &&
              $("html, body").animate(
                {
                  scrollTop: $(hash).offset().top - 166,
                },
                "slow"
              );
          }
        },
        error: function (err) {
          console.log("error", err);
        },
      });

      $(
        ".investors-dropdown .block--cmp-tab-events .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown .dropdown-menu"
      ).on("click", "li a", function () {
        const selectedYear = $(this).text();
        const selectedId = $(this).attr("href");
        if (selectedId) {
          const reportAlignerEle = $(selectedId).find(
            ".block--company-calendar-events .report-aligner"
          );
          const quarterDropdown = reportAlignerEle
            .siblings(".block--cmp-select-quarter")
            .find(".dropdown-menu");
          const eventsCallRecordingEle = $(selectedId).find(
            ".block--company-calendar-events .quarterly-report-container"
          );
          reportAlignerEle &&
            reportAlignerEle.each(function () {
              let reports = $(this);
              let categorySection = $(this).data("category");
              categorySection &&
                sessionfunct(
                  reportsYear,
                  selectedYear,
                  categorySection,
                  reports
                );
            });
          eventsCallRecordingEle &&
            eventsCallRecordingEle.each(function () {
              let reports = $(this);
              let categorySection = $(this).data("category");
              categorySection &&
                sessionfunct(
                  reportsYear,
                  selectedYear,
                  categorySection,
                  reports
                );
            });
          eventsCallRecordingEle && callRecordings();
          populateQuarterDropdown(selectedYear, reportsYear, quarterDropdown);
        }
      });

      function populateQuarterDropdown(
        selectedYear,
        reportsYear,
        quarterDropdown
      ) {
        const filteredData = reportsYear
          ? reportsYear.filter((data) => data.year === selectedYear)
          : [];

        const uniqueQuarters = filteredData.length
          ? [...new Set(filteredData.map((data) => data.quarters))].sort(
              (a, b) => b.localeCompare(a)
            )
          : [];
        quarterDropdown.empty();
        uniqueQuarters.forEach((quarter) => {
          if (quarter) {
            let option = $("<li></li>").attr("value", quarter).text(quarter);
            quarterDropdown.append(option);
          }
        });

        const firstQEle = quarterDropdown.find("li").first();
        if (firstQEle.length) {
          quarterDropdown
            .closest(".select-year-div")
            .addClass("d-flex")
            .removeClass("d-none");
          firstQEle.addClass("active");
          quarterDropdown.siblings(".data-toggle").text(firstQEle.text());
          firstQEle.trigger("click");
        } else {
          quarterDropdown
            .closest(".select-year-div")
            .addClass("d-none")
            .removeClass("d-flex");
          const parentElement = quarterDropdown
            .closest(".events-wrapper")
            .find(".events-calender");
          parentElement.html("");
          const elements = `<div class="events-calender-wrapper events-calender-no-data">
          <div>
              <div class="events-calender-wrapper-desc">The data for selected year doesn't exist</div>
          </div>
        </div>`;
          parentElement.append(elements);
        }
      }

      $(
        ".block--company-calendar-events .block--cmp-select-quarter .dropdown-menu"
      ).on("click", "li", function () {
        const selectedyear = $(
          ".investors-dropdown .block--cmp-tab-events .investors-dropdown-tab-wrapper .investors-dropdown-container .dropdown .dropdown-toggle"
        ).text();
        const selectedQuater = $(this).text();
        const quarterDropdown = $(this).closest(".dropdown-menu");
        const parentElement = $(this)
          .closest(".events-wrapper")
          .find(".events-calender");
        parentElement.html("");
        let data = reportsYear.filter(
          (ele) => ele.year == selectedyear && ele.quarters == selectedQuater
        );
        data = data.sort(function (a, b) {
          let aa = a.event_date.split("-").reverse().join(),
            bb = b.event_date.split("-").reverse().join();
          return aa > bb ? -1 : bb > aa ? 1 : 0;
        });
        if (selectedQuater) {
          quarterDropdown.find("li").removeClass("active");
          $(this).addClass("active");
          quarterDropdown.siblings(".data-toggle").text(selectedQuater);

          data.forEach((ele) => {
            const elements = `<div class="events-calender-wrapper">
            <div>
                <div class="events-calender-wrapper-label">${ele.event}</div>
                <div class="events-calender-wrapper-desc">${ele.title}</div>
            </div>
            <div class="date-wrapper">
                <div class="events-calender-wrapper-date">${ele.event_date}</div>
                <div class="events-calender-wrapper-venue">${ele.venue}</div>
            </div>
          </div>`;
            parentElement.append(elements);
          });
        } else {
          const elements = `<div class="events-calender-wrapper events-calender-no-data">
          <div>
              <div class="events-calender-wrapper-desc">The data for selected year doesn't exist</div>
          </div>
        </div>`;
          parentElement.append(elements);
        }
      });

      /* Annual Report Data Fetch */
      function sessionfunct(reportsYear, yearParams, categoryParams, reports) {
        let reportsPDF = reportsYear
          ? reportsYear.filter(
              (ele) =>
                ele.folderName == categoryParams && ele.year === yearParams
            )
          : [];
        console.log(reportsPDF, "reportsPDF", categoryParams, yearParams);
        reportsPDF = reportsPDF.sort((a, b) => {
          if (
            a.quarter &&
            b.quarter &&
            parseInt(a.quarter) > parseInt(b.quarter)
          ) {
            return -1;
          }
        });
        reports.html("");
        if (reportsPDF.length > 0) {
          reports.closest(".events-wrapper").removeClass("min-height-zero");
          reportsPDF.forEach((ele, id) => {
            let data = "";

            if (reports.hasClass("report-aligner")) {
              data = `<div class="report-container">
              <div class="border-line"></div>
              <div class="report-details">
                <div class="report-name">${ele.title}</div>
                <div class="report-link">
                  <div class="report-download">
                    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/download-icon.png">
                    <a href=${ele.path}> Download </a>
                  </div>
                  <div class="report-size"> ${
                    ele.size && ele.size.toFixed(2)
                  } MB</div>
                </div>
              </div>
            </div>
            <div class="border-line-mobile"></div>`;
            } else {
              data = `<div class="quarterly-reports-wrapper">
              <div class="reports-quarterly-heading-container">
                <div class="reports-quarterly-heading">${ele.title}</div>
                ${
                  ele.description
                    ? '<div class="reports-quarterly-subheading">' +
                      ele.description +
                      "</div>"
                    : ""
                }
                <a class="d-flex align-items-center block--quarterly-download-link" href="${
                  ele.path
                }" target="_blank" download>
                    <div class="quarterly-download-wrapper">
                        <img class="quarterly-download-image-toolkit" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/download_red.svg">
                    </div>
                    <div class="single-reports-quarter-download">Download</div>
                </a>
              </div>
              <div class="quarterly-file-wrapper">
                  <div class="quarter-audio-wrapper-image" data-toggle="modal" data-target="#audioModal-${id}-${yearParams}">
                      <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
                        alt="audio" />
                      <span class="audio-label-text d-none">Audio Clip</span>
                  </div>
                  <div class="modal fade cmp-audio-model-dialog" id="audioModal-${id}-${yearParams}" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                      <div class="modal-dialog modal-dialog-centered" role="document">
                          <div class="modal-content">
                                <audio src="${ele.path}" id="audioFile">
                                  Audio is not supported.
                              </audio>
                              <div class="music_volume">
                                  <div class="quarterly-clickable-container">
                                      <div id="btnPlay" class="audio-btn-play"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_pause.png"></div>
                                      <div id="btnPause" class="audio-btn-pause"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_play.svg"></div>
                                      <label id="lblTime" class="label-text audio-lbl-time">00:00</label>
                                      <input type="range" step="any" id="seekbar" class="audio-seekbar">
                                      <label id="lblTimeDuration" class="label-text audio-lbl-time-duration"></label>
                                      <div id="btnMute" class="audio-btn-mute"><img  class="music-volume-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"></div>
                                  </div>
                                  <div id="btnClose" data-dismiss="modal" class="audio-btn-close"><img  class="music-close-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_close.svg"></div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
            </div>`;
            }
            reports.append(data);
          });
          reports.closest(".annual-report-container").removeClass("d-none");
          if (reports.find(".report-container").length > 1) {
            reports
              .parent()
              .parent()
              .parent()
              .find(".report-footer")
              .removeClass("d-none");
          } else {
            reports
              .parent()
              .parent()
              .parent()
              .find(".report-footer")
              .addClass("d-none");
          }
        } else {
          let data = `<div class="report-container">
          <div class="border-line"></div>
            <div class="report-details">
              <div class="report-name">The data for selected year doesn't exist</div>
            </div>
        </div>`;
          reports.append(data);
          reports
            .parent()
            .parent()
            .parent()
            .find(".report-footer")
            .addClass("d-none");
          reports.closest(".annual-report-container").addClass("d-none");
          reports.closest(".events-wrapper").addClass("min-height-zero");
        }
      }
      hash &&
        $("html, body").animate(
          {
            scrollTop: $(hash).offset().top - 166,
          },
          "slow"
        );
    }
  }
  function callRecordings() {
    if (
      $(".quarterly-call-container-fluid.block--company-calendar-events")
        .length > 0
    ) {
      const audiodefault = $(
        ".block--company-calendar-events .quarterly-reports-wrapper .reports-quarterly-heading-container a:first"
      ).attr("href");
      let audio;

      $(".block--company-calendar-events .quarter-audio-wrapper-image").on(
        "click",
        function (e) {
          const actionContainerEle = $(this)
            .siblings(".modal")
            .find(".quarterly-clickable-container");
          $(actionContainerEle)
            .find(".audio-btn-play img")
            .removeClass("d-none");
          $(actionContainerEle).find(".audio-btn-pause img").addClass("d-none");
          const audioEle = $(this).siblings(".modal").find("audio");
          if (audioEle.attr("src") === "undefined") {
            const audioSrc = $(this)
              .closest(".quarterly-reports-wrapper")
              .find(
                ".reports-quarterly-heading-container .block--quarterly-download-link"
              )
              .attr("href");
            if (audioSrc) {
              audioEle.attr("src", audioSrc);
            } else {
              audioEle.attr("src", audiodefault);
            }
          }

          audio = audioEle[0];

          audio.play();
          audio.addEventListener(
            "timeupdate",
            function () {
              updateTheTime(actionContainerEle);
            },
            false
          );
          audio.addEventListener(
            "durationchange",
            function () {
              setSeekBar(actionContainerEle);
            },
            false
          );
        }
      );

      $(
        ".block--company-calendar-events .quarterly-call-container .audio-btn-pause"
      ).click(function () {
        $(this).siblings(".audio-btn-play").find("img").removeClass("d-none");
        $(this).find("img").addClass("d-none");
        if (audio.paused) {
          audio.play();
        } else if (audio.ended) {
          audio.currentTime = 0;
          audio.play();
        }
      });

      $(
        ".block--company-calendar-events .music_volume .quarterly-clickable-container"
      ).on("click", function (clickEvent) {
        clickEvent.preventDefault();
        clickEvent.stopPropagation();
      });

      $(
        ".block--company-calendar-events .quarterly-call-container .audio-btn-play"
      ).on("click", function () {
        if (audio.play) {
          $(this)
            .siblings(".audio-btn-pause")
            .find("img")
            .removeClass("d-none");
          $(this).find("img").addClass("d-none");
          audio.pause();
        }
      });

      $(
        ".block--company-calendar-events .quarterly-call-container .audio-btn-mute"
      ).on("click", function () {
        if (audio.muted) {
          audio.muted = false;
          $(this)
            .find("img")
            .attr(
              "src",
              "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
            );
        } else {
          audio.muted = true;
          $(this)
            .find("img")
            .attr(
              "src",
              "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_mute_black.svg"
            );
        }
      });

      $(
        ".block--company-calendar-events .quarterly-call-container .audio-seekbar"
      ).on("change", function () {
        audio.currentTime = this.value;
      });

      // fires when page loads, it sets the min and max range of the video
      function setSeekBar(parentElement) {
        const seekbar = parentElement.find(".audio-seekbar");
        if (seekbar.length) {
          seekbar[0].min = 0;
          seekbar[0].max = audio.duration;
        }
      }

      function updateTheTime(parentElement) {
        let sec = audio.currentTime;
        sec = sec % 3600;
        let min = Math.floor(sec / 60);
        sec = Math.floor(sec % 60);
        if (sec.toString().length < 2) sec = "0" + sec;
        if (min.toString().length < 2) min = "0" + min;
        parentElement.find(".audio-lbl-time").text(`${min}:${sec}`);
        const durationMinutes = Math.floor(Math.round(audio.duration) / 60);
        const durationSeconds =
          Math.round(audio.duration) - durationMinutes * 60;
        parentElement
          .find(".audio-lbl-time-duration")
          .text(`${durationMinutes}:${durationSeconds}`);
        if (audio.currentTime === audio.duration) {
          parentElement.find(".audio-btn-pause img").removeClass("d-none");
          parentElement.find(".audio-btn-play img").addClass("d-none");
        }
        const seekbar = parentElement.find(".audio-seekbar");
        if (seekbar.length) {
          seekbar[0].min = audio.startTime;
          seekbar[0].max = audio.duration;
          seekbar[0].value = audio.currentTime;
        }
      }

      $(
        ".block--company-calendar-events .quarterly-call-container .cmp-audio-model-dialog"
      ).on("hide.bs.modal", function () {
        if (audio.play) {
          audio.pause();
        }
        audio.currentTime = 0;
        if (audio.muted) {
          audio.muted = false;
          $(this)
            .find(".audio-btn-mute img")
            .attr(
              "src",
              "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
            );
        }
        audio.removeAttribute("src");
      });
    }
  }

  function fetchInvestorFilingsReport(selectedYear, cmpInvFilingReportEle) {
    if (cmpInvFilingReportEle.length) {
      let fiYear = selectedYear ? selectedYear : "";
      const searchYear = fiYear.split('-')[0];
      cmpInvFilingReportEle.each(function (idx, cmpInvCalEventEle) {
        const searchPath = $(cmpInvCalEventEle).attr("data-search-path");
        if (!searchPath) {
          return;
        }
        const resourcePath = $(cmpInvCalEventEle).attr("data-resource-path");
        const categoryData = $(cmpInvCalEventEle).attr("data-category-set");
        const subHeading = $(cmpInvCalEventEle).attr("data-subheading");
        const downloadLabel = $(cmpInvCalEventEle).attr("data-download-label");
        let reqLink = `${resourcePath}.companyreportspolicies.json?searchRootPath=${searchPath}&searchTags=${categoryData}&searchYear=${searchYear}`;
        $.ajax({
          type: "GET",
          url: reqLink,
          dataType: "JSON",
          success: function (resp) {
            if (resp) {
              populateInvestorFilingsReportData(cmpInvCalEventEle, resp, categoryData, subHeading, downloadLabel);
            }
          },
          error: function (err) {
            console.error(err);
          },
        });
      });
    }
  }

  function populateInvestorFilingsReportData(cmpInvCalEventEle, resp, categoryData, subHeading, downloadLabel) {
    let categoryList = categoryData.split(",");
    if (categoryList.length) {
      $(cmpInvCalEventEle).empty();
      const eventElement = $("<div></div>").addClass("block--cmp-event-calendar-container");
      let quarterList = [];
      categoryList.forEach((dataAttribute) => {
        const data = resp[dataAttribute];
        if (data.length) {
          const quarters = data.map((item) => item.quarters);
          quarterList = quarterList.concat(quarters);
        }
      });
      const uniqueQuarters = quarterList.length ? [...new Set(quarterList)].filter(item => item).sort(
        (a, b) => b.localeCompare(a)
      ) : [];

      if (uniqueQuarters.length) {
        const quaterContainer = `<div class="select-year-div d-flex">
            <p> Select Quarter: </p>
            <div class="block--cmp-select-quarter dropdown">
              <button type="button" class="data-toggle" data-toggle="dropdown" data-display="static"></button>
              <ul class="dropdown-menu"></ul>
            </div>
          </div>
          <div class="cmp-calendar-events-wrapper"></div>`;
        eventElement.append(quaterContainer);
        const quarterDropdown = eventElement.find(".select-year-div .dropdown-menu");
        uniqueQuarters.forEach((quarter) => {
          if (quarter) {
            let option = $("<li></li>").attr("value", quarter).text(quarter);
            quarterDropdown.append(option);
          }
        });
        quarterDropdown.find("li").on("click", function (e) {
          const selectedQuaterText = $(this).text();
          const selectedQuater = $(this).attr("value");
          const parentElement = eventElement.find(".cmp-calendar-events-wrapper");
          parentElement.html("");
          if (selectedQuater) {
            quarterDropdown.find("li").removeClass("active");
            $(this).addClass("active");
            quarterDropdown.siblings(".data-toggle").text(selectedQuaterText);

            categoryList.forEach((dataAttribute) => {
              const data = resp[dataAttribute];
              if (data.length) {
                let reportsYear = data.filter(
                  (ele) => ele.quarters == selectedQuater
                ).sort(function (a, b) {
                  let aa = moment(a.articleDate, "DD MMM, YYYY").format("YYYY-MM-DD"),
                    bb = moment(b.articleDate, "DD MMM, YYYY").format("YYYY-MM-DD");
                  return aa > bb ? -1 : bb > aa ? 1 : 0;
                });

                if (reportsYear.length) {
                  const custElement = $("<div></div>");
                  if (dataAttribute.indexOf("investor-calendar") !== -1) {
                    custElement.addClass("block--cmp-calendar-wrapper");
                    reportsYear.forEach((ele) => {
                      const elements = `<div class="events-calender-wrapper">
                          <div>
                            <div class="events-calender-wrapper-label">${ele.tileSubtitle}</div>
                            <div class="events-calender-wrapper-desc">${ele.tileTitle}</div>
                          </div>
                          <div class="date-wrapper">
                            <div class="events-calender-wrapper-date">${moment(ele.articleDate, "DD MMM, YYYY").format("DD-MM-YYYY")}</div>
                            <div class="events-calender-wrapper-venue">${ele.venue}</div>
                          </div>
                        </div>`;
                      custElement.append(elements);
                    });
                  } else {
                    custElement.addClass("investors-aem-notices");
                    const subHeadingElement = `<div class="aem-notices-header">
                        <p>${subHeading}</p>
                      </div>`;
                    custElement.append(subHeadingElement);
                    reportsYear.forEach((ele) => {
                      const elements = `<div class="aem-notices">
                          <div class="aem-notices-header-section">
                            <div class="aem-notices-header-section">
                              <p class="aem-notices-header-text">${ele.tileTitle} -&nbsp;<span class="aem-notices-download-size">${ele.attachmentSize}</span></p>
                            </div>
                          </div>
                          <a class="aem-download-section" target="_blank" href="${ele.pdfPath}">
                            <div class="aem-download-icon">
                              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none">
                                <rect width="24" height="23.9922" transform="translate(0 0.582031)" fill="white"></rect>
                                <path d="M9.04712 7.57485V10.5712H7.02395H4.99609L8.52259 14.0918L12.0444 17.6172L15.5662 14.0918L19.0927 10.5712H17.0649H15.0417V7.57485V4.57854H12.0444H9.04712V7.57485Z" fill="#FF0000"></path>
                                <path d="M5.02148 20.5673V21.5742H12.0464H19.0713V20.5673V19.5604H12.0464H5.02148V20.5673Z" fill="#FF0000"></path>
                              </svg>
                            </div>
                            <p class="aem-download-size">${downloadLabel}</p>
                          </a>
                        </div>`;
                      custElement.append(elements);
                    });
                  }
                  parentElement.append(custElement);
                }
              }
            });
          } else {
            const elements = `<div class="events-calender-no-data">
                <p class="events-calender-wrapper-desc">The data for selected year doesn't exist</p>
              </div>`;
            parentElement.append(elements);
          }
        });

        const firstQEle = quarterDropdown.find("li").first();
        if (firstQEle.length) {
          firstQEle.addClass("active");
          quarterDropdown.siblings(".data-toggle").text(firstQEle.text());
          firstQEle.trigger("click");
        } else {
          quarterDropdown.closest(".select-year-div").addClass("d-none").removeClass("d-flex");
          const parentElement = eventElement.find(".cmp-calendar-events-wrapper");
          const elements = `<div class="events-calender-no-data">
              <p class="events-calender-wrapper-desc">The data for selected year doesn't exist.</p>
            </div>`;
          parentElement.html("").append(elements);
        }
      } else {
        const elements = `<div class="cmp-calendar-events-wrapper">
            <div class="events-calender-no-data">
              <p class="events-calender-wrapper-desc">The data for selected year doesn't exist.</p>
            </div>
          </div>`;
        eventElement.html("").append(elements);
      }

      $(cmpInvCalEventEle).append(eventElement);
    }
  }
});

$(document).ready(function () {
    try {
        if ($('.company-tab').length) {
            companyTab();
        }
    } catch (error) {
        console.error(error);
    }
});

function clickedShow(element, container, scrollSpeed = 100) {
    const zeroLeft = $(element).position().left + $(container).scrollLeft();
    const offsetLeft = $(container).width() - $(element).width();
    const scrollTo = zeroLeft - offsetLeft;
    $(container).animate({ scrollLeft: scrollTo }, scrollSpeed);
}

function yearHideForFaqsTab(element) {
    if ($('.selectTabOnQuery').length) {
        if (element.getAttribute("data-tabid") === "faqs" || element.getAttribute("data-tabid") === "details-of-kmps-under-reg-30") {
            $(".selectTabOnQuery .investors-dropdown-tab-wrapper .investors-dropdown-container").addClass("d-none");
        } else {
            $(".selectTabOnQuery .investors-dropdown-tab-wrapper .investors-dropdown-container").removeClass("d-none");
        }
    }
}

function companyTab() {
    $('.company-tab > .explore-tab-section > .bike-tab-section > .tab-wrapper > .nav-tabs').each(function (indx, cmpTabsElement) {
        $(cmpTabsElement).on('click', '.nav-item .nav-link', function (e) {
            clickedShow(this, cmpTabsElement);
            yearHideForFaqsTab(e.currentTarget);
        });
    });
}
$(document).ready(function() {
  $('.splender-feature-slider').slick({
      centerMode: true,
      slidesToShow: 3,
      slidesToScroll: 1,
      arrows: true,
      dots: false,
      speed: 300,
      centerPadding: '100px',
      infinite: true,
      autoplaySpeed: 2000,
      autoplay: false,
      responsive: [
        {
          breakpoint: 991,
          settings: {
            slidesToShow: 1.7,
            centerPadding: '5px',
          }
        },
        {
          breakpoint: 767,
          settings: {
            slidesToShow: 1.68,
            centerPadding: '5px',
          }
        }
      ]
    });

    $(".feature--tile").hover(
      function() {
        $(this).find(".tile--onhover").css("bottom", 0);
      },
      function() {
        $(this).find(".tile--onhover").css("bottom", "-100%");
      }
    );
});
$(document).ready(function () {
    const quickSlickSettings = {
      infinite: true,
      dots: false,
      autoplay: false,
      prevArrow: "<button type='button' class='slick-prev'><img src='/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/left-black-arrow.svg'></button>",
      nextArrow: "<button type='button' class='slick-next'><img src='/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/left-black-arrow.svg'></button>",
      responsive: [
        {
            breakpoint: 9999,
            settings: "unslick"
        },
          {
              breakpoint: 768,
              settings: {
                  slidesToShow: 5,
                  slidesToScroll: 5,
              }
          },
          {
              breakpoint: 421,
              settings: {
                  slidesToShow: 3,
                  slidesToScroll: 3,
              }
          },
          {
              breakpoint: 360,
              settings: {
                  slidesToShow: 3,
                  slidesToScroll: 3,
              }
          }
      ]
  };
  $('.help-main-box').slick(quickSlickSettings, 100);
  resetForm($('#requestCallBack'));
  $(window).on('resize', function() {
    if ($('.help-main-box') && !$('.help-main-box').hasClass('slick-initialized')) {
      $('.help-main-box').slick(quickSlickSettings, 100);
    }
  });
});
function resetForm(formID){
  formID.on('hidden.bs.modal', function(e) {
      formID
      .find("input,textarea,select").not('[type="button"]').not('[type="hidden"]')
      .val('')
      .end()
      .find("input[type=checkbox], input[type=radio]")
      .prop("checked", "")
      .end();
      $('label.error').remove();
      $('.send-otp-btn,.resend-otp-btn').removeClass('show');
      $('.invalid-otp-message') .hide();
      
  });
}

$(document).ready(function () {
  const exploreSlickSettings = {
    infinite: false,
    autoplay: true,
    dots: true,
    prevArrow: false,
    nextArrow: false,
    autoplaySpeed: 5000,
    centerMode: true,
    centerPadding: "0px",
    responsive: [
      {
        breakpoint: 9999,
        settings: "unslick",
      },
      {
        breakpoint: 991,
        settings: "unslick",
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
          width: "100%",
        },
      },
      // You can unslick at a given breakpoint now by adding:
      // settings: "unslick"
      // instead of a settings object
    ],
  };

  const exploreSlickSettingsvar = {
    rows: 1,
    slidesToShow: 3,
    infinite: true,
    pauseOnFocus: false,
    autoplay: true,
    dots: true,
    prevArrow: false,
    nextArrow: false,
    autoplaySpeed: 3000,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 991,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
          width: "100%",
        },
      },
      // You can unslick at a given breakpoint now by adding:
      // settings: "unslick"
      // instead of a settings object
    ],
  };
  $(".explore-card-section-new").slick(exploreSlickSettings, 500);
  $(window).on("resize", function () {
    if (
      $(".explore-card-section-new") &&
      !$(".explore-card-section-new").hasClass("slick-initialized")
    ) {
      $(".explore-card-section-new").slick(exploreSlickSettings, 500);
    }
  });

  $(".explore-card-section-slick").slick(exploreSlickSettingsvar, 500);
  $(window).on("resize", function () {
    if (
      $(".explore-card-section-slick") &&
      !$(".explore-card-section-slick").hasClass("slick-initialized")
    ) {
      $("explore-card-section-slick").slick(exploreSlickSettingsvar, 500);
    }
  });

  if ($('.generic-teaser-xpulse-bg .slick-track').height() > 0) {
    $('.generic-teaser-xpulse-bg .slick-track .bootstrap-generic-xpulse').css('height', `${$('.generic-teaser-xpulse-bg .slick-track').height() - 15}px`);
  }

  let titleMinHeight = 50.4;
  $(".explore-card-section-new .card-title").each(function () {
    if ($(this).height() > titleMinHeight) {
      titleMinHeight = $(this).height();
      $(".explore-card-section-new .card-title").css("height", titleMinHeight);
    }
  });

  let bodyMinHeight = 50.4;
  $(".explore-card-section-new .card-body").each(function () {
    $(".card-text").css("font-family", "var(--font-tstar-medium)");
    if ($(this).height() > bodyMinHeight) {
      bodyMinHeight = $(this).height() + 40;
      $(".explore-card-section-new .card-body").css("height", bodyMinHeight);
    }
  });
  
  $("#scooterBanner .volume-button").on("click", function () {
    let currentElement = $(this).parent().find("video")[0];
    if ($(window).width() < 768) {
      currentElement = $(this).parent().find("video")[1];
    }
    if (currentElement && currentElement.muted) {
      currentElement.muted = false;
      $(this).find(".volume-on").removeClass("d-none");
      $(this).find(".volume-on").addClass("d-block");
      $(this).find(".volume-off").removeClass("d-block");
      $(this).find(".volume-off").addClass("d-none");
    } else {
      currentElement.muted = true;
      $(this).find(".volume-on").removeClass("d-block");
      $(this).find(".volume-on").addClass("d-none");
      $(this).find(".volume-off").removeClass("d-none");
      $(this).find(".volume-off").addClass("d-block");
    }
  });

  $("#scooterBanner").on("slid.bs.carousel", function (e) {
    let videoEle = $(".carousel-item.active video");
    if (videoEle.length > 1) {
      let isDesktop = $(window).width() > 768;
      let isDesktopClass = isDesktop ? 'd-md-block' : 'd-md-none';
      videoEle.each(function () {
        let shouldPlay = $(this).hasClass(isDesktopClass);
        shouldPlay ? $(this)[0].play() : $(this)[0].pause();
      });
    }
  });

  if ($('.service-safe-hero-wrapp').length > 0) {
    $('.common-tabs-main .nav-item .nav-link').addClass('service-safe-hero-nav-links');
    $('.hero-exchange-content').addClass('service-banner-exchange-content');
    $('.hero-exchange .hero-exchange-wrapper .hero-exchange-content .hero-exchange-img img').addClass('ride-safe-ad-banner-img');
    $('.investor-explore ul.common-tabs-main .nav-item').addClass('service-genric-scroll-header-width');
    $('.explore-tab-section .slick-track').addClass('service-genric-scroll-header-wrap');
  }
});

  




$(document).ready(function() {
   $('.share-btn').on('click', function() {
    $('.share-options').toggleClass('active');
});
   });
$(document).ready(function() {
    $(".read-more-mobile").click(function() {
        $(this).closest(".row").find('.hide-content-mobile').toggleClass('show');
        $(this).closest(".row").find('.read-less-mobile').toggleClass('d-none');
        $(this).toggleClass('d-none');
    });
    $(".read-less-mobile").click(function() {
        $(this).closest(".row").find('.hide-content-mobile').toggleClass('show');
        $(this).closest(".row").find('.read-more-mobile').toggleClass('d-none');
        $(this).toggleClass('d-none');
    });
});

$(document).ready(function () {

  $(".card-header").on("click", function () {
    $(this).toggleClass("active");
    $(this).parent().siblings().find($(".card-header")).removeClass("active");
    $(this).find(".expanded-icon").toggleClass("d-none");
    $(this).find(".collapsed-icon").toggleClass("d-none");
  });
  
  let xtraxFaq = $('.faq-accordian');
  if (xtraxFaq && xtraxFaq.length > 0) {
    $('.faq-accordian .card-header:first').addClass('active');
    $('.faq-accordian .body-accord-faq:first').addClass('show');
    $('.hm-accordion').on('shown.bs.collapse', function () {
      var tabHeight = $('.card-header').height() + $('header').height();
      var panel = $(this).find('.collapse.show');
      $('html, body').animate({
        scrollTop: panel.offset().top - tabHeight - 165
      }, 800);
    });
  }

  if ($('#genuine-parts').length > 0) {
    $('.accordion--title').click(function (e) {
      let dropDown = $(this).closest('.accordion-card').find('.accordion--panel');
      $(this).closest('.genuine-parts-accordion').find('.accordion--panel').not(dropDown).slideUp();
      if ($(this).hasClass('active')) {
        $(this).removeClass('active');
      } else {
        $(this).closest('.genuine-parts-accordion').find('.accordion--title.active').removeClass('active');
        $(this).addClass('active');
      }
      dropDown.stop(false, true).slideToggle();
      e.preventDefault();
    });
    $('.accordion--title ').first().click()
  }
});

$(document).ready(function () { 
  let accordianContentHeading;
  let mobAccordianContentHeading;
  
  if ($(document).width() < 569) {
    $('.investors-content-wrap').addClass('d-none');
  } else {
    $('.investors-contact-mobile').addClass('d-none');
  }

  if($('#service-genuine-faq').length > 0){
    $('.faqs-accord-tile').css('border','1px solid #A5A5A5');
    $('.faq--slider-wrap .card').eq(0).addClass('active-faq-border-box');
    $('.faq--slider-wrap .card').eq(0).find('.card-head-faq').addClass('active');
    $('.faq--slider-wrap .card').eq(0).find('.collapse').addClass('show');
    $('.faq-card-tile-mobile.card').eq(0).addClass('active-faq-border-mob');
    $('.faq-card-tile-mobile.card').eq(0).find('.mob-head-faq').addClass('active');
    $('.faq-card-tile-mobile.card').eq(0).find('.collapse').addClass('show');
  }

  // Desktop View for FAQ
  $(".faq-click-tile").on("click", function () {
    $(".faqs-accord-tile").removeClass("active-faq-border-box");
    $('.faqs-accord-tile .collapse').removeClass('show');
    $('.card-head-faq').removeClass('active');
    $(this).parent().siblings().find($(".card-head-faq")).removeClass("active");
    $(this).toggleClass("active");
    $(this).parent().siblings().find($(".faq-click-tile")).removeClass("active");
  });

  $(".card-head-faq").on("click", function () {
    if($('#price-list').length > 0 && !accordianContentHeading) {
      accordianContentHeading = $('.card-head-faq .accordian-heading-faq p').html();
    }
    if ($(this).parent().parent().find('.collapse.show').length > 0 && 
          $(this).parent().parent().find('.faqs-accord-tile.card.active-faq-border-box').length > 0 &&
          $(this).find('.accordian-heading-faq p').html() == accordianContentHeading) {
        $(".faqs-accord-tile").removeClass("active-faq-border-box");
        $(this).parent().siblings().find($(".card-head-faq")).removeClass("active");
        $(document).find('.card-head-faq').removeClass('active');
      }
    else {
      $(document).find('.card-head-faq').removeClass('active');
      $('.faqs-accord-tile .collapse').removeClass('show');
      $(this).toggleClass("active");
    }
    accordianContentHeading = $(this).find('.accordian-heading-faq p').html();
    $(".faqs-accord-tile").removeClass("active-faq-border-box");
    $(this).parent().siblings().find($(".card-head-faq")).removeClass("active");
    $(".faqs-accord-tile").has(".active").addClass("active-faq-border-box");
  });

  $('.faq--slider-wrap').eq(0).addClass('reveal');
  $(".hollow-circle").click(handleClick);
  $(".submenu-faq-tile .faq-click-tile").click(handleClick);

  function handleClick() {
    $('.submenu-faq-tile').removeClass("faq-button-active");
    $(this).parent().addClass("faq-button-active");
    let clickedIndex = $(this).parent().index();
    $('.faq--slider-wrap').removeClass('reveal');
    $('.faq--slider-wrap').eq(clickedIndex).addClass('reveal');
  }


  // Mobile Accordian View for FAQ
  $(".mob-head-faq-mobile").on("click", function () {
    $(".faq-card-tile-mobile").removeClass("active-faq-border-mob");
    $('.faq-card-tile-mobile .collapse').removeClass('show');
    $('.mob-head-faq').removeClass('active');
    $(this).parent().siblings().find($(".mob-head-faq")).removeClass("active");
    $(this).toggleClass("active");
    $(this).parent().siblings().find($(".mob-head-faq-mobile")).removeClass("active");
  });

  $(".mob-head-faq").on("click", function () {
    if($('#price-list').length > 0 && !mobAccordianContentHeading) {
      mobAccordianContentHeading = $('.mob-head-faq .mob-sub-heading-faq p').html();
    }
    if ($(this).parent().parent().find('.collapse.show').length > 0 && 
          $(this).parent().parent().find('.faq-card-tile-mobile.card.active-faq-border-mob').length > 0 &&
          $(this).find('.mob-sub-heading-faq p').html() == mobAccordianContentHeading) {
            $(".faq-card-tile-mobile").removeClass("active-faq-border-mob");
        $(this).parent().siblings().find($(".mob-head-faq")).removeClass("active");
        $(document).find('.mob-head-faq').removeClass('active');
      }
    else {
      $(document).find('.mob-head-faq').removeClass('active');
      $(this).toggleClass("active");
    }
    mobAccordianContentHeading = $(this).find('.mob-sub-heading-faq p').html();
    $(".faq-card-tile-mobile").removeClass("active-faq-border-mob");
    $(this).parent().siblings().find($(".mob-head-faq")).removeClass("active");
    $(".faq-card-tile-mobile").has(".active").addClass("active-faq-border-mob");
  });

  $('.right--mob-content-section .faq--slider-wrap-mob').addClass('reveal');

  $(window).resize(function () {
    if ($(document).width() < 569) {
      $('.investors-contact-mobile').removeClass('d-none');
      $('.investors-content-wrap').addClass('d-none');
    } else {
      $('.investors-content-wrap').removeClass('d-none');
      $('.investors-contact-mobile').addClass('d-none');
    }
  })
    
});
$(document).ready(function () {
  if (
    document.getElementById("company-investors-faq") &&
    document.getElementById("company-investors-faq").children.length > 0
  ) {
    var accordianWrapper = document.getElementsByClassName(
      "investers-faq-accordian-wrapper"
    );
    var i;

    for (i = 0; i < accordianWrapper.length; i++) {
      //when one of the buttons are clicked run this function
      accordianWrapper[i].onclick = function () {
        //variables
        var accordianPanelClicked = this.nextElementSibling;
        var accordianPanel = document.getElementsByClassName(
          "investers-faq-accordian-panel"
        );
        var courseAccordionPlus = document.getElementsByClassName("add-icon");
        var courseAccordionminus =
          document.getElementsByClassName("minus-icon");

        /*if pannel is already open - minimize*/
        if (accordianPanelClicked.classList.contains("accordian-expand")) {
          //minifies current pannel if already open
          accordianPanelClicked.classList.add("accordian-collapse");
          accordianPanelClicked.classList.remove("accordian-expand");

          //toggle minus and add icon
          $(this)[0].children[1].classList.add("d-none");
          $(this)[0].children[2].classList.remove("d-none");
        } else {
          for (var j = 0; j < courseAccordionPlus.length; j++) {
            courseAccordionPlus[j].classList.remove("d-none");
          }
          for (var k = 0; k < courseAccordionminus.length; k++) {
            courseAccordionminus[k].classList.add("d-none");
          }

          //Goes through and removes 'activ' from the css, also minifies any 'panels' that might be open
          for (var l = 0; l < accordianPanel.length; l++) {
            $(this)[0].children[1].classList.remove("d-none");
            $(this)[0].children[2].classList.add("d-none");
            accordianPanel[l].style.maxHeight = null;
            accordianPanel[l].classList.remove("accordian-expand");
          }
          //opens the specified pannel
          accordianPanelClicked.classList.remove("accordian-collapse");
          accordianPanelClicked.classList.add("accordian-expand");

          //toggle minus and add icon
          $(this)[0].children[1].classList.remove("d-none");
          $(this)[0].children[2].classList.add("d-none");
        }
      }; //closing to the acc onclick function
    } //closing to the for loop.
  }
});

$(document).ready(function () {
$('.quick-view-modal').each(function () {
     $(this).find('.productmodal').find(".varient1 img").attr('src', $(this).find('.explore-360-tab-blk .nav-link.active').attr('data-imagepath'));
});
	$(".explore-360-main-blk .nav-link").on("click", function () {
        $(this).parents('.quick-view-modal').find(".varient1 img").attr('src', $(this).attr('data-imagepath'));
      });

      $('.explore-360-tab-blk .nav-link').on('click', function () {
        $(this).parents('.explore-360-tab-blk').find('.nav-link').removeClass('active');
        $(this).addClass('active');
      });

 });
$(document).ready(function () {

   var relativePath = $(".inthepress-container").attr('data-inthepress-component-realtivePath');
   var pressreleasesRelativePath = $(".pressreleases-container").attr('data-inthepress-component-realtivePath');
   var newsletterRelativePath = $(".newsletter-container").attr('data-inthepress-component-realtivePath');
   var annualreportRelativePath = $(".annualreport-container").attr('data-inthepress-component-realtivePath');

   if (relativePath != undefined) {
      var InThePressUrl = relativePath.replace('jcr:content', '_jcr_content');
      $.ajax({
         type: 'GET',
         cache: false,
         data: {
            "mediatype": "inthepress"
         },
         url: InThePressUrl,
         success: function (data) {
            let Data = data;
            if (typeof (Data) != 'object') {
               Data = JSON.parse(data);
            }
            init(Data);
         }
      });
   }
   if (pressreleasesRelativePath != undefined) {
      var PressReleasesUrl = pressreleasesRelativePath.replace('jcr:content', '_jcr_content');
      $.ajax({
         type: 'GET',
         cache: false,
         data: {
            "mediatype": "pressreleases"
         },
         url: PressReleasesUrl,
         success: function (data) {
            let _DataRelease = data;
            if (typeof (_DataRelease) != 'object') {
               _DataRelease = JSON.parse(data);
            }
            pressRelease(_DataRelease);
         }
      });
   }

   if (newsletterRelativePath != undefined) {
      var NewslettersUrl = newsletterRelativePath.replace('jcr:content', '_jcr_content');
      $.ajax({
         type: 'GET',
         cache: false,
         data: {
            "mediatype": "newsletters"
         },
         url: NewslettersUrl,
         success: function (data) {
            let newsletterData = data;
            if (typeof (newsletterData) != 'object') {
               newsletterData = JSON.parse(data);
            }
            newsLetter(newsletterData);
         }
      });
   }

   if (annualreportRelativePath!= undefined) {
      var AnnualReportsUrl = annualreportRelativePath.replace('jcr:content', '_jcr_content');
      $.ajax({
         type: 'GET',
         cache: false,
         data: {
            "mediatype": "annualreports"
         },
         url: AnnualReportsUrl,
         success: function (data) {
            let newsletterData = data;
            if (typeof (newsletterData) != 'object') {
               newsletterData = JSON.parse(data);
            }
            newsLetter(newsletterData);
         }
      });
   }

   function removeDuplicates(list) {
      let uniqueSet = new Set();
      $(list).filter(function (i, el) {
         let unique = $(el).text();
         if (uniqueSet.has(unique)) {
            return true;
         } else {
            uniqueSet.add(unique);
            return false;
         }
      }).remove();
   }
  
   function closeDropDowns(){
      $('#month--ul').removeClass("show");
      $('#year--ul').removeClass("show");
   }

   $("#year--btn").click(function () {
      if ($("#month--ul").hasClass("show")) {
         $("#month--ul").removeClass("show");
      }
      $(this).siblings("ul").toggleClass("show");
   })

   $("#month--btn").click(function () {
      if ($("#year--ul").hasClass("show")) {
         $("#year--ul").removeClass("show");
      }
      $(this).siblings("ul").toggleClass("show");
   })

   function init(Data) {
      let tableContent = $(".pressList ul");
      let yearList = $("#year--ul");
      let monthList = $("#month--ul");
      $.each(Data, function (i, element) {
         let publishedMonth = element.releaseDate.split("-")[1];
         let publishedYear = element.releaseDate.split("-")[2];
         yearList.append('<li>' + publishedYear + '</li>')
         monthList.append('<li>' + publishedMonth + '</li>')
         tableContent.append('<li data-year=' + publishedYear + ' data-month=' + publishedMonth + ' class="b2-text-std">' + '<a href=' + element.path + ' target="_blank" class="b1-bold-text-std">' + element.title + '</a>' + element.pressName + ' - ' + element.releaseDate  + '</li>')
      })

      removeDuplicates($("#year--ul li"));
      removeDuplicates($("#month--ul li"));

      $("#year--ul li").sort(function (a, b) {
         return parseInt($(b).text()) - parseInt($(a).text());
      }).appendTo("#year--ul");

      const monthListOrder = ['December', 'November', 'October', 'September', 'August', 'July', 'June', 'May', 'April', 'March', 'February', 'January'];
      $("#month--ul li").sort(function (a, b) {
         return monthListOrder.indexOf($(a).text()) - monthListOrder.indexOf($(b).text());
      }).appendTo("#month--ul");

      let yearReadyShow = $("#year--ul li:first-child").html()
      let monthReadyShow = $("#month--ul li:first-child").html()
      $("#year--btn").html(yearReadyShow);
      $("#month--btn").html(monthReadyShow);
      let tableReadyShow = $('.pressList ul li[data-year="' + yearReadyShow + '"][data-month="' + monthReadyShow + '"]');
      $(".pressyearBox .year").html(yearReadyShow);
      $(".pressyearBox .month").html(monthReadyShow);
      tableReadyShow.addClass("show");

      $(".pressList ul li a").click(closeDropDowns);
      function redirect() {
         let inputMonth = $(this).html();
         let existYear = $('#year--btn').html();
         let tableToShow = $('.pressList ul li[data-month="' + inputMonth + '"][data-year="' + existYear + '"]');
         $('#month--ul').removeClass("show");
         $("#month--btn").html($(this).html());
         $(".pressyearBox .month").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      }

      $("#year--ul li").click(function () {
         let inputYear = $(this).html();
         var arr1 = [];
         $("[data-year]").each(function (index) {
            if ($(this).attr('data-year') == inputYear) {
               arr1.push($(this).attr('data-month'))
            }
         });
         let uniqueChars = [...new Set(arr1)];
         let list = $("#month--ul");
         list.empty();
         let month = monthListOrder.filter(element => uniqueChars.includes(element));
         month.forEach(function (data) {
            list.append($('<li>', {
               html: data
            }));
         });
         $("#month--ul li").bind('click', redirect);
         let existMonth = $('#month--ul li:first-child').html();
         $("#month--btn").html(existMonth);
         $(".pressyearBox .month").html(existMonth);
         let tableToShow = $('.pressList ul li[data-year="' + inputYear + '"][data-month="' + existMonth + '"]')
         $('#year--ul').removeClass("show");
         $("#year--btn").html($(this).html());
         $(".pressyearBox .year").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      })

      $("#month--ul li").click(function () {
         let inputMonth = $(this).html();
         let existYear = $('#year--btn').html();
         let tableToShow = $('.pressList ul li[data-month="' + inputMonth + '"][data-year="' + existYear + '"]');
         $('#month--ul').removeClass("show");
         $("#month--btn").html($(this).html());
         $(".pressyearBox .month").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      })
      $("#year--ul li:first-child").trigger('click');
   }

   function pressRelease(_DataRelease) {
      let tableContent = $(".pressList ul");
      let yearList = $("#year--ul");
      let monthList = $("#month--ul");
      $.each(_DataRelease, function (i, element) {
         let publishedMonth = element.releaseDate.split("-")[1];
         let publishedYear = element.releaseDate.split("-")[2];
         yearList.append('<li>' + publishedYear + '</li>')
         monthList.append('<li>' + publishedMonth + '</li>')
         if (element.path.endsWith(".pdf")) {
            tableContent.append('<li data-year=' + publishedYear + ' data-month=' + publishedMonth + ' class="b2-text-std" >' + '<a href=' + element.path + ' target="_blank" class="b1-bold-text-std">' + element.title + '<img src="/content/dam/hero-aem-website/icons/pdf-icon.png"></a>' + element.pressName + ' - ' + element.releaseDate + '</li>')
         } else {
            tableContent.append('<li data-year=' + publishedYear + ' data-month=' + publishedMonth + ' class="b2-text-std" >' + '<div class="header--title b1-bold-text-std">' + element.title + '</div>' + element.pressName + ' - ' + element.releaseDate + '<div class="render--this" style="display:none">' + element.path + '</div></li>')
         }
      })

      removeDuplicates($("#year--ul li"));
      removeDuplicates($("#month--ul li"));

      $("#year--ul li").sort(function (a, b) {
         return parseInt($(b).text()) - parseInt($(a).text());
      }).appendTo("#year--ul");

      const monthListOrder = ['December', 'November', 'October', 'September', 'August', 'July', 'June', 'May', 'April', 'March', 'February', 'January'];
      $("#month--ul li").sort(function (a, b) {
         return monthListOrder.indexOf($(a).text()) - monthListOrder.indexOf($(b).text());
      }).appendTo("#month--ul");
      let yearReadyShow = $("#year--ul li:first-child").html()
      let monthReadyShow = $("#month--ul li:first-child").html()
      $("#year--btn").html(yearReadyShow);
      $("#month--btn").html(monthReadyShow);
      let tableReadyShow = $('.pressList ul li[data-year="' + yearReadyShow + '"][data-month="' + monthReadyShow + '"]');
      $(".pressyearBox .year").html(yearReadyShow);
      $(".pressyearBox .month").html(monthReadyShow);
      tableReadyShow.addClass("show");

      function goBack() {
         $('.in-press-section').css("display", "block");
         $('.render--div').remove();
      }

      $('.header--title').click(function () {
         closeDropDowns();
         $('.in-press-section').css("display", "none");
         let renderHtml = $(this).parent().find(".render--this").html();
         $('<div/>', {
            class: 'render--div container',
            html: '<h2>'+$(this).html()+'</h2>'+renderHtml + '<button id="go-back" class="btn btn-red-gradient ">Back</button>'
         }).insertAfter('.in-press-section');
         $("#go-back").bind('click', goBack);
      })

      $(".pressList ul li a").click(closeDropDowns);

      function redirect() {
         let inputMonth = $(this).html();
         let existYear = $('#year--btn').html();
         let tableToShow = $('.pressList ul li[data-month="' + inputMonth + '"][data-year="' + existYear + '"]');
         $('#month--ul').removeClass("show");
         $("#month--btn").html($(this).html());
         $(".pressyearBox .month").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      }

      $("#year--ul li").click(function () {
         let inputYear = $(this).html();
         var arr1 = [];
         $("[data-year]").each(function (index) {
            if ($(this).attr('data-year') == inputYear) {
               arr1.push($(this).attr('data-month'))
            }
         });
         let uniqueChars = [...new Set(arr1)];
         let list = $("#month--ul");
         list.empty();
         let month = monthListOrder.filter(element => uniqueChars.includes(element));
         month.forEach(function (data) {
            list.append($('<li>', {
               html: data
            }));
         });
         $("#month--ul li").bind('click', redirect);
         let existMonth = $('#month--ul li:first-child').html();
         $("#month--btn").html(existMonth);
         $(".pressyearBox .month").html(existMonth);
         let tableToShow = $('.pressList ul li[data-year="' + inputYear + '"][data-month="' + existMonth + '"]')
         $('#year--ul').removeClass("show");
         $("#year--btn").html($(this).html());
         $(".pressyearBox .year").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      })

      $("#month--ul li").click(function () {
         let inputMonth = $(this).html();
         let existYear = $('#year--btn').html();
         let tableToShow = $('.pressList ul li[data-month="' + inputMonth + '"][data-year="' + existYear + '"]');
         $('#month--ul').removeClass("show");
         $("#month--btn").html($(this).html());
         $(".pressyearBox .month").html($(this).html());
         $('.pressList ul li').removeClass("show");
         tableToShow.addClass("show");
      })
      $("#year--ul li:first-child").trigger('click');
   }

   function newsLetter(newsletterData){
      let tableContent = $(".pressList ul");
      let yearList = $("#year--ul");
      let quarterList = $("#month--ul");
      if($('#newsletter').length>0){
         $.each(newsletterData, function (i, element) {
            let publishedYear = element.year;
            let publishedQuarter = element.quater
            yearList.append('<li>' + publishedYear + '</li>')
            quarterList.append('<li>' + publishedQuarter + '</li>')
            tableContent.append('<li data-year='+element.year+' data-quater='+element.quater+'><div class="img-wrapper"><img src='+element.iconPath+' alt="newsletter-icon"></div> <div class="content-wrapper"><h3>'+element.title+'</h3><a href='+element.path+'>'+element.description+' <span><img src="/content/dam/hero-aem-website/in/icons/board-nav-arrow.png" alt=""></span></a></div></li>')
         })
      }
      else if($('#annual-report').length>0){
         $.each(newsletterData, function (i, element) {
            let publishedYear = element.year;
            yearList.append('<li>' + publishedYear + '</li>')
            tableContent.append('<li data-year='+element.year+'><div class="img-wrapper"><img src='+element.iconPath+' alt="newsletter-icon"></div> <div class="content-wrapper"><h3>'+element.title+'</h3><a href='+element.path+'>'+element.description+' <span><img src="/content/dam/hero-aem-website/in/icons/board-nav-arrow.png" alt=""></span></a></div></li>')
         })
      }

      removeDuplicates($("#year--ul li"));
      removeDuplicates($("#month--ul li"));

      $("#year--ul li").sort(function (a, b) {
         return parseInt($(b).text()) - parseInt($(a).text());
      }).appendTo("#year--ul");

      QuaterListOrder = ['Q4','Q3','Q2','Q1'];

      let yearReadyShow = $("#year--ul li:first-child").html()
      let quaterReadyShow = $("#month--ul li:first-child").html()
      let tableReadyShow;
      if($('#newsletter').length>0){
          tableReadyShow = $('.pressList ul li[data-year="' + yearReadyShow + '"][data-quater="' + quaterReadyShow + '"]');
      }
      else if($('#annual-report').length>0){
          tableReadyShow = $('.pressList ul li[data-year="' + yearReadyShow + '"]');
      }
      $("#year--btn").html(yearReadyShow);
      $("#month--btn").html(quaterReadyShow);
      tableReadyShow.addClass("d-flex");

      function redirect() {
         let inputQuater = $(this).html();
         let existYear = $('#year--btn').html();
         let tableToShow = $('.pressList ul li[data-quater="' + inputQuater + '"][data-year="' + existYear + '"]');
         $('#month--ul').removeClass("show");
         $("#month--btn").html($(this).html());
         $(".pressyearBox .month").html($(this).html());
         $('.pressList ul li').removeClass("d-flex media-separator-lines");
         tableToShow.addClass("d-flex");
         $('li.d-flex:last-child').addClass("media-separator-lines");
      }
      
      $("#year--ul li").click(function () {
         let inputYear = $(this).html();
         let tableToShow;
         if($('#newsletter').length>0){
            var arr1 = [];
            $("[data-year]").each(function (index) {
               if ($(this).attr('data-year') == inputYear) {
                  arr1.push($(this).attr('data-quater'))
               }
            });
            let uniqueChars = [...new Set(arr1)];
            let list = $("#month--ul");
            list.empty();
            let quater =  QuaterListOrder.filter(element => uniqueChars.includes(element));
            quater.forEach(function (data) {
               list.append($('<li>', {
                  html: data
               }));
            });
            $("#month--ul li").bind('click', redirect);
            let existQuater = $('#month--ul li:first-child').html();
            $("#month--btn").html(existQuater);
            $(".pressyearBox .month").html(existQuater);
            tableToShow = $('.pressList ul li[data-year="' + inputYear + '"][data-quater="' +existQuater+ '"]')
         }
         else if($('#annual-report').length>0){
            tableToShow = $('.pressList ul li[data-year="' + inputYear + '"]')
         }
         $('#year--ul').removeClass("show");
         $("#year--btn").html($(this).html());
         $(".pressyearBox .year").html($(this).html());
         $('.pressList ul li').removeClass("d-flex media-separator-lines");
         tableToShow.addClass("d-flex");
         $('li.d-flex:last-child').addClass("media-separator-lines");
      })
      $("#year--ul li:first-child").trigger('click');
   }
})

$(document).ready(function () {
  let datepicked = document.querySelector('#countdown');
  if (datepicked) {
    let countDownDate = new Date(datepicked.dataset.date).getTime();
    let x = setInterval(function () {
      let now = new Date().getTime();
      let distance = countDownDate - now;

      let days = Math.floor(distance / (1000 * 60 * 60 * 24));
      let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      let seconds = Math.floor((distance % (1000 * 60)) / 1000);
      let timerEle = document.getElementById("timer");

      if (timerEle) {
        timerEle.innerHTML = days + " Days : " + hours + " Hrs : "
          + minutes + " Mins : " + seconds + " Sec ";
  
          if (days <= 1) {
            timerEle.innerHTML = days + " Day : " + hours + " Hrs : "
            + minutes + " Mins : " + seconds + " Sec ";
          }
      }

      if (distance < 0) {
        clearInterval(x);
        if (timerEle) {
          timerEle.innerHTML = "0 Day : 00 Hrs : 00 Mins : 00 Sec";
        }
      }
    }, 1000);

    if ($('.hdbcstages').length) {
      $('#scooterBanner').css("margin-top", '0');
      $('.home-main-section').css("margin-top", '93px');
    }
    window.onscroll = function () { myFunction() };
    var header = document.getElementById("timerSticky");
    var sticky = header.offsetTop;

    function myFunction() {
      if (window.pageYOffset > sticky) {
        header.classList.add("sticky");
      } else {
        header.classList.remove("sticky");
      }
    }
  }
});

$(document).ready(function () {
   var $gallery = new SimpleLightbox('.gallery a', {captionClass: "caption-overlay-image"});
});
$(document).ready(function(){
    $('#videoList ul a:first-child li').addClass("active");

    $("#videoList li").on("click",function(){
        $("#videoList li").removeClass("active");
       $(this).addClass("active");
    })
  });

  
$(document).ready(function () {
  const imageSlickSettings = {
    infinite: false,
    autoplay: true,
    dots: true,
    prevArrow: false,
    nextArrow: false,
    autoplaySpeed: 5000,
    centerMode: true,
    centerPadding: "0px",
    slidesToShow: 1,
    slidesToScroll: 1,
    width: "100%",
  };
  $(".image-slick").slick(imageSlickSettings, 1000);
  if ($(".slick-dots li").length <= 1) {
    $(".slick-dots li").css("display", "none");
  }
});

$(document).ready(function () {
    try {
        if (!$(".mission-card-section-slider").length) {
            return;
        }
        missionCardSlider();
    } catch (error) {
        console.log(error);
    }
    function missionCardSlider() {
        $(".mission").each(function (indx, missionElement) {
            const missionCardSliderElement = $(missionElement).find(".mission-card-section-slider");
            const missionSlickSettings = {
                infinite: false,
                autoplay: true,
                dots: true,
                prevArrow: false,
                nextArrow: false,
                autoplaySpeed: 5000,
                centerMode: true,
                centerPadding: '0px',
                responsive: [
                    {
                        breakpoint: 9999,
                        settings: "unslick"
                    },
                    {
                        breakpoint: 991,
                        settings: "unslick"
                    },
                    {
                        breakpoint: 600,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    },
                    {
                        breakpoint: 480,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            width: "100%"
                        }
                    }
                    // You can unslick at a given breakpoint now by adding:
                    // settings: "unslick"
                    // instead of a settings object
                ]
            }

            if ($(missionElement).find(".block--company-mission").length) {
                missionSlickSettings.responsive = [
                    {
                        breakpoint: 9999,
                        settings: "unslick"
                    },
                    {
                        breakpoint: 767,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                ];
            }

            missionCardSliderElement.slick(missionSlickSettings, 500);
            $(window).on('resize', function () {
                if (missionCardSliderElement.length && !missionCardSliderElement.hasClass('slick-initialized')) {
                    missionCardSliderElement.slick(missionSlickSettings, 500);
                }
            });
        });
    }
});
$('.right--content-section .content--slider-wrap:first').addClass('reveal');
if($('.ref-wrap').length>0){
  $('.ref-wrap:first').removeClass('d-none');
}
$(".hollow-circle").click(handleClick);
$(".submenu--tile p").click(handleClick)

function handleClick() {
  $('.submenu--tile').removeClass("button-active")
  $(this).parent().addClass("button-active");
  let clickedIndex = $(this).parent().index();
  $('.content--slider-wrap').removeClass('reveal');
  $('.content--slider-wrap').eq(clickedIndex).addClass('reveal');
  if($('.ref-wrap').length>0){
    $('.ref-wrap').addClass('d-none');
    $('.ref-wrap').eq(clickedIndex).removeClass('d-none');
  }
  $('.content--slider-wrap').slick('setPosition');
  $('.functional-rep').slick('unslick');
  $('.content--slider-wrap .mobile').slick('setPosition');
}

function handleCenter() {
  $('.submenu--tile').removeClass('button-active');
  $('.submenu--tile').each(function () {
    if ($(this).hasClass('slick-current')) {
      $(this).addClass('button-active');
      let clickedIndex = $(this).index();
      $('.content--slider-wrap').removeClass('reveal');
      $('.content--slider-wrap').eq(clickedIndex).addClass('reveal');
    }
  });
}

const slickSettings = {
  autoplay: false,
  autoplaySpeed: 3000,
  dots: false,
  arrows: true,
  prevArrow: "<img class='a-left control-c next slick-prev' src='/content/dam/hero-aem-website/brand/design/icons/href-right-icon.svg'>",
  nextArrow: "<img class='a-right control-c next slick-next' src='/content/dam/hero-aem-website/brand/design/icons/href-right-icon.svg'>",
  infinite: true,
  slidesToShow: 4,
  slidesToScroll: 1,
  responsive: [{
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 769,
      settings: "unslick"
    }
  ]
}

$(window).resize(function () {
  if ($(this).width() > 768) {
    $('.content--slider-wrap').slick("resize");
  }
})

$('.content--slider-wrap').slick(slickSettings);

$('.content--slider-wrap .slick-track').each(function () {
  if ($(this).find('.img-tile').length < 4) {
    $(this).addClass("d-flex");
  }
});

$('.bottom--content-wrap .left--sub-menu').slick({
  mobileFirst: true,
  slidesToScroll: 1,
  slidesToShow: 1,
  infinite: false,
  prevArrow: "<img class='a-left control-c next slick-prev' src='/content/dam/hero-aem-website/brand/design/icons/href-right-icon.svg'>",
  nextArrow: "<img class='a-right control-c next slick-next' src='/content/dam/hero-aem-website/brand/design/icons/href-right-icon.svg'>",
  centerMode: true,
  variableWidth: true,
  responsive: [{
    breakpoint: 769,
    settings: "unslick"
  }]
});

$('.functional-rep-content.mobile').slick({
  slidesToScroll: 1,
  slidesToShow: 1,
  infinite: false,
  arrows: false,
  dots: true,
});

$('.left--sub-menu.slick-initialized').on('afterChange', function () {
  let centerSlide = $('.left--sub-menu.slick-initialized').find('.slick-center');
  centerSlide.addClass('button-active');
  handleCenter();
})

$('.left--sub-menu .slick-arrow').click(handleCenter);
$(document).ready(function () {
    $("#addressList").change(function () {
        const selectedAdd = this.value;
        let x = document.querySelectorAll(".corpaorateOffice");
        $(".corpaorateOffice").hide();
        for (let i = 0; i < x.length; i++) {
            var attadd = x[i].attributes.titleid.nodeValue;
            if (attadd.includes(selectedAdd)) {
                x[i].classList.add('showAdd');
            } else {
                x[i].classList.remove('showAdd');
            }
        }
    });

    function contactZone() {
        var i;
        var x = document.querySelectorAll(".contact-title");
        var text = [];
        for (i = 0; i < x.length; i++) {
            text[i] = x[i].textContent;
        }
        var linkText, html = "";
        for (i = 0; i < text.length; i++) {
            linkText = text[i];
            html += "<option value=" + linkText + ">" + linkText + "</option>";
        }
        $('#addressList').append(html);
        $('#addressList').trigger('change');
    }
    contactZone();

    $('.address-col-val#phoneNumber').each(function () {
        let arr = []
        let element = $(this);
        arr = $(this)[0].innerText.split(",")
        if (arr.length > 0) {
            $(this)[0].innerHTML = ''
            arr.forEach(function (ele) {
                element.append("<a href=Tel:" + ele + ">" + ele + "</a>")
            }

            )
        }
    })
})


$(document).ready(function () {
  if ($(".media-component").length > 0) {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let url = defaultservlet + ".statelist.html";
    let captchText = "";
    let currentForm = $("#media--forms form");
    createCaptcha(currentForm);
    function preventFutureDates() {
      let today = new Date();
      let dd = String(today.getDate()).padStart(2, "0");
      let mm = String(today.getMonth() + 1).padStart(2, "0");
      let yyyy = today.getFullYear();
      today = yyyy + "-" + mm + "-" + dd;
      $("#media--forms input[type='date']").attr("max", today);
    }
    let title = $("title").text();
    let category = window.location.pathname.split("/")[2];
    let splitedUrl = window.location.origin.split("//");
    let splitedDomain = splitedUrl[1].split(".");
    let siteCategory;
    if (splitedDomain[1] === "heromotocorp") {
      siteCategory = "corporate";
    }
    if (splitedDomain[1] === "dealers") {
      siteCategory = "dealer";
    }

    function getOS() {
      var userAgent = window.navigator.userAgent,
        platform =
          window.navigator?.userAgentData?.platform ||
          window.navigator.platform,
        macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
        windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
        iosPlatforms = ["iPhone", "iPad", "iPod"],
        os = null;
  
      if (macosPlatforms.indexOf(platform) !== -1) {
        os = "Mac OS";
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = "iOS";
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = "Windows";
      } else if (/Android/.test(userAgent)) {
        os = "Android";
      } else if (/Linux/.test(platform)) {
        os = "Linux";
      }
  
      return os;
    }
  
    function getPageDetails(isErrorPage = false) {
      let pagePath = window.location.pathname;
      let slug = pagePath.split("/");
      let actualSlug = slug[1].replace(".html", "");
      let primary_category = window.location.origin;
      let fullSplit = primary_category.split("//");
      let pcSplit = fullSplit[1].split(".");
      let title = $("title").text();
      let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
      let sub1 = "";
      let sub2 = "";
      let sub3 = "";
      let sub4 = "";
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
        sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
          sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
          sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
          sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
      } else {
        if (slug[2]) sub1 = slug[2].replace(".html", "");
        if (slug[3]) sub2 = slug[3].replace(".html", "");
        if (slug[4]) sub3 = slug[4].replace(".html", "");
        if (slug[5]) sub4 = slug[5].replace(".html", "");
      }
      return {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: isErrorPage,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      };
    }

    const formSelect = document.querySelector(".media-forms");
    let formFields = document.querySelectorAll(
      "#media--forms input, #media--forms textarea, #media--forms .dropdown-select"
    );
    let startEventSent = false;
    formFields.forEach((key) => {
      key.addEventListener("focus", () => {
        if (!startEventSent) {
          window.digitalData.push({
            event: "Form Start",
            formDetails: {
              formfield: key.name,
              formname: $(formSelect).find("form").attr("class"),
              formtype: $(formSelect).find("section").attr("id"),
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
        startEventSent = true;
      });
    });

    function preventPastDates() {
      let today = new Date();
      let dd = String(today.getDate()).padStart(2, "0");
      let mm = String(today.getMonth() + 1).padStart(2, "0");
      let yyyy = today.getFullYear();
      today = yyyy + "-" + mm + "-" + dd;
      $("#media--forms input[type='date']").attr("min", today);
    }

    function defaultDate(getTestDate) {
      if (getTestDate == 0) {
        var today = new Date();
        var defaultDate = new Date();
        defaultDate.setDate(today.getDate() + 10);
        $("#expected-date").val(defaultDate.toISOString().substring(0, 10));
      } else {
        $("#expected-date").val(getTestDate);
        $("#expected-date").attr("min", getTestDate);
      }
    }

    if ($("section#suggestions").length > 0) {
      preventFutureDates();
    }

    if ($("section#test-ride").length > 0) {
      preventPastDates();
      defaultDate(0);
    }

    $("#testride-date").on("change", function () {
      let inputTestDate = $(this).val();
      defaultDate(inputTestDate);
    });

    $("#email").keyup(function () {
      $("#email").siblings(".error--message").hide();
      if ($(this).val().length >= 3) {
        let email = $(this).val();
        if (validateEmail(email)) {
          $("#email").siblings(".validate--msg").hide();
        } else {
          $("#email").siblings(".validate--msg").show();
        }
      } else {
        $("#email").siblings(".validate--msg").hide();
      }
    });

    function validateEmail(email) {
      var re =
        /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(email).toLowerCase());
    }

    let stateName = "";

    $("#txtComplaint").keyup(function () {
      let textLength = $(this).val().length;
      if (textLength > 2000) {
        $(this).val($(this).val().substring(0, 2000));
      }
    });

    function sortAscending(a, b) {
      return $(b).text().toUpperCase() < $(a).text().toUpperCase() ? 1 : -1;
    }

    $("#testride").change(function () {
      if (this.checked) {
        $("#test--date").show();
        $("#test--date input").attr("required", true);
      } else {
        var today = new Date();
        var defaultDate = new Date();
        defaultDate.setDate(today.getDate() + 10);
        $("#expected-date").val(defaultDate.toISOString().substring(0, 10));
        $("#test--date input").val("");
        $("#test--date").hide();
        $("#test--date input").attr("required", false);
      }
    });

    $("#media--forms textarea").keyup(function () {
      $(this).siblings(".error--message").hide();
    });

    $("#media--forms input").keyup(function () {
      $(this).siblings(".error--message").hide();
    });

    $("input#pin").on("input", function () {
      if (this.value.length > 6) {
        this.value = this.value.slice(0, 6);
      }
    });

    $("input#age").on("input", function () {
      if (this.value.length > 2) {
        this.value = this.value.slice(0, 2);
      }
    });

    $(document).on("change", '#media--forms input[type="date"]', function () {
      $(this).siblings(".error--message").hide();
    });

    // DropDowns
    function populateDropdown(url, selector, keyword, selectedVal) {
      if (url) {
        fetch(url)
          .then(function (response) {
            if (!response.ok) {
              // make the promise be rejected if we didn't get a 2xx response
              throw new Error("Not 2xx response", {
                cause: response,
              });
            } else {
              return response.text();
            }
          })
          .then(function (html) {
            selector[0].innerHTML = html;
            let form = $(selector).closest("form");
            if (keyword == "state") {
              //sort in ascending order
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="statename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let dealerstatelist = form
                .find('[name="dealerstate"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu ");
              dealerstatelist[0].innerHTML = html;
            }

            if (keyword == "city") {
              let cityField = form.find('[name="cityname"]');
              let abbrCity = cityField.attr("data-default-label");
              cityField[0].disabled = false;
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrCity = selectedVal;
                form.find('[name="cityNameVal"]').val(selectedVal);
              }
              cityField.text(abbrCity);
              $("button[name='cityname']").siblings("ul").find("li:first").trigger("click");
            }
            if (keyword == "dealercity") {
              let dealerCityField = form.find('[name="dealercity"]');
              let dealerNameField = form.find('[name="dealername"]');
              let abbrCity = dealerCityField.attr("data-default-label");
              let abbrName = dealerNameField.attr("data-default-label");
              dealerCityField[0].disabled = false;
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrCity = selectedVal;
                form.find('[name="dealerCityNameVal"]').val(selectedVal);
                abbrName = dealerNameField.text().trim();
                form.find('[name="dealerVal"]').val(form.find('[name="dealerVal"]').val());
                dealerNameField.attr("disabled", false);
              }
              if (abbrName == dealerNameField.attr("data-default-label")) {
                dealerNameField[0].disabled = true;
                form.find('[name="dealerVal"]').val("");
              }
              dealerCityField.text(abbrCity);
              dealerNameField.text(abbrName);
              $("button[name='dealercity']").siblings("ul").find("li:first").trigger("click");
            }
            if (keyword == "dealer") {
              //sort in ascending order
              let dealerField = form.find('[name="dealername"]');
              dealerField[0].disabled = false;
              dealerField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(dealerField.parents(".cust-drop-down").find(".cust-dropdown-menu"));
              abbrDealer = dealerField.attr("data-default-label");
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrDealer = selectedVal;
                form.find('[name="dealerVal"]').val(form.find('[name="dealerVal"]').val());
              } else {
                form.find('[name="dealerVal"]').val("");
              }
              dealerField.text(abbrDealer);
              $("button[name='dealername']").siblings("ul").find("li:first").trigger("click");
            }
          });
      }
    }

    if ($("#media--forms form").length >= 1) {
      $("#media--forms form").each(function (item) {
        if ($('button[name="statename"]').length) {
          let statelist = $(this)
            .find('[name="statename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          populateDropdown(
            defaultservlet + ".statelist.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        } else {
          let statelistDistrict = $(this)
            .find('[name="statenameDistrict"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          populateDropdown(
            defaultservlet + ".districtstatelist.html",
            statelistDistrict,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        }

        let vehiclelist = $(this)
          .find('[name="vehiclemodelname"]')
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");
        populateDropdown(
          defaultservlet + ".vehiclelist.html",
          vehiclelist,
          "vehicle",
          window && window.locations ? locations.State : null,
          false
        );
      });
    }

    $("#media--forms .cust-dropdown-menu").on("click", "li", function () {
      const subCategoryButton = $('button[name="complaintsubcategory"]');
      $(this).parents().siblings(".error--message").hide();
      let selectionGroup = $(this).parents(".cust-drop-down");
      var button = selectionGroup.find(".dropdown-select");
      button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
      var form = $(this).closest("form");
      selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
      $(this).parents("ul").siblings(".btn-drop").addClass("active");
      $(this).addClass("active");
      if ("vehiclemodelname" == button.attr("name")) {
        form.find('[name="vehicleNameVal"]').val($(this).attr("data-model-name"));
      } else if ("existingvehiclemodelname" == button.attr("name")) {
        form
          .find('[name="existingvehicleNameVal"]')
          .val($(this).text().trim().toLowerCase().replace(/ /g, "_"));
      } else if ("statename" == button.attr("name")) {
        let cityField = form.find('[name="cityname"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var cityPath = defaultservlet + ".citylist." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "city", cityValue, true);
        form.find('[name="stateNameVal"]').val(button.text());
        form.find('[name="cityNameVal"]').val("");
      } else if ("statenameDistrict" == button.attr("name")) {
        let cityField = form.find('[name="cityname"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var cityPath = defaultservlet + ".districtlist." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "city", cityValue, true);
        form.find('[name="stateNameVal"]').val(button.text());
        form.find('[name="cityNameVal"]').val("");
      } else if ("dealerstate" == button.attr("name")) {
        let cityField = form.find('[name="dealercity"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        stateName = $(this).attr("value");
        var cityPath = defaultservlet + ".dealercities." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "dealercity", cityValue);
        form.find('[name="dealerNameVal"]').val(button.text());
        form.find('[name="dealerCityNameVal"]').val("");
      } else if ("dealercity" == button.attr("name")) {
        let dealerName = form.find('[name="dealerVal"]');
        let dealerField = form.find('[name="dealername"]');
        let list = dealerName.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var dealerNamePath =
          defaultservlet + ".dealercodes." + stateName + "." + $(this).attr("value") + ".html";
        if ($("#suggestions").length) {
          dealerNamePath =
            defaultservlet +
            ".dealercodesasc." +
            stateName +
            "." +
            $(this).attr("value") +
            ".html";
        }
        let dealerValue;
        if (dealerField.text().trim() !== dealerField.attr("data-default-label")) {
          dealerValue = dealerField.text().trim();
        }
        populateDropdown(dealerNamePath, list, "dealer", dealerValue);
        form.find('[name="dealerCityNameVal"]').val(button.text());
      } else if ("dealername" == button.attr("name")) {
        form.find('[name="dealerVal"]').val($(this).attr("value"));
      } else if ("complaintstream" == button.attr("name")) {
        if ($(this).text().toLowerCase().replace(/\s/g, "") == "sales") {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        subCategoryButton[0].disabled = true;
        $('button[name="complaintcategory"]').attr("disabled", false);

        let complaintCatrgoryField = $('button[name="complaintcategory"]');
        let complaintSubCatrgoryField = $('button[name="complaintsubcategory"]');
        let abbrComplaint = complaintCatrgoryField.attr("data-default-label");
        let abbrSubComplaint = complaintSubCatrgoryField.attr("data-default-label");

        complaintCatrgoryField.text(abbrComplaint);
        complaintSubCatrgoryField.text(abbrSubComplaint);

        let complaintText = $(this).text().toLowerCase().replace(/\s/g, "");

        if (complaintText === "retailfinance") {
          $("#sug-tel, #sug-reg, #sug-odo, #sug-mal").hide();
          $("#sub-cat-form").removeClass("d-none");
          $(
            "#sug-email input, #sug-dstate input,#sug-dcity input,#sug-dname input,#sug-mal #malfunction-date"
          ).attr("required", false);
          $("#sub-cat-form input").attr("required", true);
          $(
            "#sug-email span sup, #sug-dstate span sup,#sug-dcity span sup,#sug-dname span sup"
          ).hide();
        } else {
          $("#sug-tel, #sug-reg, #sug-odo, #sug-mal").show();
          $("#sub-cat-form").addClass("d-none");
          $(
            "#sug-email input, #sug-dstate input,#sug-dcity input,#sug-dname input,#sug-mal #malfunction-date"
          ).attr("required", true);
          $("#sub-cat-form input").attr("required", false);
          $(
            "#sug-email span sup, #sug-dstate span sup,#sug-dcity span sup,#sug-dname span sup"
          ).show();
        }

        $('button[name="complaintcategory"]').siblings("input").attr("value", "");

        $('button[name="complaintsubcategory"]').siblings("input").attr("value", "");

        $('button[name="complaintstream"]').siblings("input").attr("value", complaintText);
        $("button[name='complaintcategory'] ~ ul li").removeClass("show");
        $("button[name='complaintcategory'] ~ ul li").each(function () {
          let dataCategory = $(this).data("category").toLowerCase().replace(/\s/g, "");
          if (dataCategory === complaintText) {
            $(this).addClass("show");
          }
        });
      } else if ("complaintcategory" == button.attr("name")) {
        let categoryValue = $('button[name="complaintstream"]')
          .text()
          .toLowerCase()
          .replace(/\s/g, "");

        let complaintText = $(this).text().toLowerCase().replace(/\s/g, "");

        let complaintSubCatrgoryField = $('button[name="complaintsubcategory"]');
        let abbrSubComplaint = complaintSubCatrgoryField.attr("data-default-label");
        complaintSubCatrgoryField.text(abbrSubComplaint);

        $('button[name="complaintcategory"]').siblings("input").attr("value", complaintText);

        if (categoryValue != "sales") {
          $("#vin-number").removeClass("d-none");
          $("#vin-number input").attr("required", true);
        } else {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        if (categoryValue === "retailfinance") {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        subCategoryButton[0].disabled = false;

        $('button[name="complaintsubcategory"]').siblings("input").attr("value", "");
        let complaintsubText = $(this).text().toLowerCase().replace(/\s/g, "");
        $("button[name='complaintsubcategory'] ~ ul li").removeClass("show");
        $("button[name='complaintsubcategory'] ~ ul li").each(function () {
          let dataSubCategory = $(this).data("subcategory").toLowerCase().replace(/\s/g, "");
          if (dataSubCategory === complaintsubText) {
            $(this).addClass("show");
          }
        });
      } else if ("category-name" == button.attr("name")) {
        let category = $(this).text().replace(/\s+/g, "").toLowerCase();
        $('button[name="category-name"]').siblings("input").attr("value", category);
        if (category == "globalbusiness") {
          $("#state-og").hide();
          $("#state-og input").attr("required", false);
          $("#city-og").hide();
          $("#city-og input").attr("required", false);
          $("#text--state").show();
          $("#text--state input").attr("required", true);
          $("#text--city").show();
          $("#text--city input").attr("required", true);
        } else {
          $("#state-og").show();
          $("#state-og input").attr("required", true);
          $("#city-og").show();
          $("#city-og input").attr("required", true);
          $("#text--state").hide();
          $("#text--state input").attr("required", false);
          $("#text--city").hide();
          $("#text--city input").attr("required", false);
        }
      } else if ("gender" == button.attr("name")) {
        let gender = $(this).text().replace(/\s+/g, "").toLowerCase();
        $('button[name="gender"]').siblings("input").attr("value", gender);
      } else if ("cityname" == button.attr("name")) {
        form.find('[name="cityNameVal"]').val(button.text());
      } else if ("complaintsubcategory" == button.attr("name")) {
        let complaintSubText = $(this).text().toLowerCase().replace(/\s/g, "");
        $('button[name="complaintsubcategory"]')
          .siblings("input")
          .attr("value", complaintSubText);
      }
    });

    // Cta Clicks
    let originalText = [];
    $("button.dropdown-select").each(function () {
      originalText.push($(this).text().trim());
    });

    $("#media--forms input[name='submit']").click(function () {
      const streamValue = $('input[name="complaintstreamVal"]').val();
      let title = $("title").text();
      let errorFields = [];
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      let validation = true;
      $("#media--forms .error--message").css("display", "none");
      $(".invalid-otp-message").addClass("d-none");
      if ($("#cpatchaTextBox").length > 0 && $("#cpatchaTextBox").val() != captchText) {
        validation = false;
        errorFields.push($("#cpatchaTextBox").attr("name"));
        $(".invalid-otp-message").removeClass("d-none");
      }
      $("#media--forms input[required]").each(function () {
        if ($(this).val() == "") {
          $(this).siblings("span").css("display", "block");
          errorFields.push($(this).attr("name"));
          validation = false;
        }
      });
      $("#media--forms textarea[required]").each(function () {
        if ($(this).val() == "") {
          $(this).siblings("span.error--message").css("display", "block");
          errorFields.push($(this).attr("name"));
          validation = false;
        }
      });
      $("#media--forms input[name='mobileno']").each(function () {
        let mobileNumber = $(this).val();
        if (mobileNumber == "") {
          $("input[name='mobileno']").siblings(".validate--msg").hide();
          $("input[name='mobileno']").siblings(".error--message").show();
          errorFields.push($(this).attr("name"));
          validation = false;
        } else {
          $("#media--forms input[name='mobileno']").siblings(".validate--msg").hide();
          let invalidArr = [
            "1234567890",
            "0000000000",
            "1111111111",
            "2222222222",
            "3333333333",
            "4444444444",
            "5555555555",
            "6666666666",
            "7777777777",
            "8888888888",
            "9999999999",
            "0123456789",
          ];
          if ($(this).val().length < 10) {
            $(this).siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
          if ($.inArray($(this).val(), invalidArr) != -1) {
            $(this).siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
        }
      });
      $("#media--forms input[type='email']").each(function () {
        let email = $(this).val();
        if ($(this).is("[required]")) {
          if (email == "") {
            $("#media--forms input[type='email']").siblings(".validate--msg").hide();
            $("#media--forms input[type='email']").siblings(".error--message").show();
            errorFields.push($(this).attr("name"));
            validation = false;
          } else {
            if (!validateEmail(email)) {
              $("#media--forms input[type='email']").siblings(".validate--msg").show();
              $("#media--forms input[type='email']").siblings(".error--message").hide();
              errorFields.push($(this).attr("name"));
              validation = false;
            }
          }
        } else {
          if (email != "") {
            if (!validateEmail(email)) {
              $("#media--forms input[type='email']").siblings(".validate--msg").show();
              $("#media--forms input[type='email']").siblings(".error--message").hide();
              errorFields.push($(this).attr("name"));
              validation = false;
            }
          }
        }
      });
      let currentForm = $(this).closest("form");
      if (validation) {
        mediaSubmitForm(currentForm, streamValue);
      } else {
        let fields = errorFields
          .filter((value, index, self) => self.indexOf(value) === index)
          .join("|");
        window.digitalData.push({
          event: "Form Error",
          formDetails: {
            formerrorfields: fields,
            formname: $(formSelect).find("form").attr("class"),
            formtype: $(formSelect).find("section").attr("id"),
          },
          page: getPageDetails(),
        });
        console.log("fields required");
      }
      let errorMessages = $(
        "#media--forms input[required],#media--forms textarea[required]"
      ).filter(function () {
        return !this.value;
      });
      if (errorMessages.length > 0) {
        $("html, body").animate(
          {
            scrollTop: errorMessages.first().parent().offset().top - 166,
          },
          "slow"
        );
      } else {
        $("html, body").animate(
          {
            scrollTop: 0,
          },
          "slow"
        );
      }
    });
    async function mediaSubmitForm(currentForm, streamValue) {
      let firstName = "";
      let lastName = "";
      let title = $("title").text();
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      $(".media-loader-div").removeClass("d-none");
      if ($("#suggestions").length) {
        firstName = $('[name="firstname"]').val().trim();
        lastName = $('[name="lastname"]').val().trim();
        if (streamValue === "retailfinance") {
          var dataObj = {
            body: {
              FirstName: $('[name="firstname"]').val().trim(),
              LastName: $('[name="lastname"]').val().trim(),
              CellularPhone: $('[name="mobileno"]').val().trim(),
              EmailAddress: $("#email").val().trim(),
              CustomerAddress: $("#address-1").val().trim(),
              Address: $("#address-2").val().trim(),
              Model: $('[name="vehicleNameVal"]').val().trim(),
              VehicleRegistrationNumber: $("#vehicle-reg-no").val().trim(),
              OdometerReading: $("#odometer").val().trim(),
              MalfunctionDate: "",
              DealerCode: "",
              AreaOffice: "",
              Category: "Retail Finance",
              SubCategory: $('[name="complaintcategory"]').text(),
              HHMLVINNumber: "",
              BriefAboutComplaint: $("#txtComplaint").val().trim(),
              SubSubCategory: $('[name="complaintsubcategory"]').text(),
              OwnedById: "",
              SRType: "Complaints",
              SRNumber: "TXN19121514",
              Status: "Open",
              CompRepFlag: "",
              HomePhone: "",
              PartnerName: "",
              ReportedDate: "",
              Source: "Corporate Website",
              Priority: "3-Medium",
              Location: "",
            },
          };
        } else {
          var dataObj = {
            first_name: $('[name="firstname"]').val().trim(),
            last_name: $('[name="lastname"]').val().trim(),
            mobile: $('[name="mobileno"]').val().trim(),
            telephone: $('[name="telephone"]').val().trim(),
            email: $("#email").val().trim(),
            address_1: $("#address-1").val().trim(),
            address_2: $("#address-2").val().trim(),
            district: $('[name="cityNameVal"]')
              .val()
              .replaceAll("&amp;", "and")
              .replaceAll("&", "and")
              .trim(),
            state: $('[name="stateNameVal"]')
              .val()
              .replaceAll("&amp;", "and")
              .replaceAll("&", "and")
              .trim(),
            town: $("#town").val().trim(),
            pin: $("#pin").val().trim(),
            vehicle_name: $('[name="vehicleNameVal"]').val().trim(),
            vehicle_reg_no: $("#vehicle-reg-no").val().trim(),
            odometer_reading: $("#odometer").val().trim(),
            malfunction_date: $("#malfunction-date").val().trim(),
            dealer_state: $('[name="dealerNameVal"]').val().trim(),
            dealer_city: $('[name="dealerCityNameVal"]').val().trim(),
            dealer: $('[name="dealerVal"]').val().trim(),
            complaint_stream: $('[name="complaintstream"]').text(),
            complaint_category: $('[name="complaintcategory"]').text(),
            vin_number: $('[name="vin-number"]').val().trim(),
            complaint: $("#txtComplaint").val().trim(),
          };
        }
      } else if ($("#corporate-enq").length) {
        firstName = $("#fullname-enquiries").val().trim();
        var dataObj = {
          full_name: $("#fullname-enquiries").val().trim(),
          designation: $("#designation-enquiries").val().trim(),
          category: $("#category-now").val().trim(),
          company: $('[name="company-enquiries"]').val(),
          address: $("#address-enq").val().trim(),
          state: $('[name="stateNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          state_global: $('[name="state-text-enquiries"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          city: $('[name="cityNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          city_global: $('[name="city-text-enquiries"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          phone_number: $("#phone-enquiries").val().trim(),
          mobile_number: $("#mobile-enquiries").val().trim(),
          email: $("#email").val().trim(),
          requirements: $("#txtReq").val().trim(),
          addt_info: $("#txtInfo").val().trim(),
        };
      } else if ($("#test-ride").length) {
        firstName = $("#firstname").val().trim();
        lastName = $("#lastname").val().trim();
        var dataObj = {
          first_name: $("#firstname").val().trim(),
          last_name: $("#lastname").val().trim(),
          mobile_number: $("#number").val().trim(),
          tel_number: $("#tel-number").val().trim(),
          email: $("#email").val().trim(),
          vehicle_name: $('[name="vehicleNameVal"]').val().trim(),
          state: $('[name="stateNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          district: $('[name="cityNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          city: $("#town").val().trim(),
          existing_vehicle: $('[name="existingvehicleNameVal"]').val().trim(),
          testride_date: $("#testride-date").val().trim(),
          dealer_state: $('[name="dealerNameVal"]').val().trim(),
          dealer_city: $('[name="dealerCityNameVal"]').val().trim(),
          dealer: $('[name="dealerVal"]').val().trim(),
          enquiry: $("#txtEnquiry").val().trim(),
          expected_purchase_date: $("#expected-date").val().trim(),
          gender: $('[name="genderVal"]').val().trim(),
          age: $("#age").val().trim(),
          occupation: $('[name="occupation"]').text().trim(),
          intended_usage: $('[name="intendedusage"]').text().trim(),
        };
      }

      console.log("dataObj", dataObj);

      let customURL = $('[name="action_url"]').val();

      if (streamValue === "retailfinance") {
        customURL = customURL.replace("suggestions.html", "suggestionsRFM.html");
      }

      $.ajax({
        url: customURL,
        type: "POST",
        data: JSON.stringify(dataObj),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          $(".media-loader-div").addClass("d-none");
          let response = JSON.parse(JSON.stringify(resp));
          if (response.status == "success" || response.ComplaintNumber) {
            if ($("#suggestions").length > 0) {
              successFunc(response);
              let ticketNumber = getTicketNumber(response.responseString);
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
              if (window.digitalData) {
                window.digitalData = {
                  event: "Suggestions Form Submitted",
                  FormDetails: {
                    CustomerState: $('[name="stateNameVal"]')
                      .val()
                      .replaceAll("&amp;", "and")
                      .replaceAll("&", "and")
                      .trim(),
                    CustomerCity: $("#town").val().trim(),
                    CustomerPincode: $("#pin").val().trim(),
                    SelectedVehicle: $('[name="vehicleNameVal"]').val().trim(),
                    DealerTown: $('[name="dealerCityNameVal"]').val().trim(),
                    ComplaintStream: $('[name="complaintstream"]').text(),
                    ComplaintCategory: $('[name="complaintcategory"]').text(),
                    RequestID: ticketNumber,
                    FormName: "Suggestions Form",
                    FromType: "Suggestions Form",
                  },
                  page: {
                    siteType: "AEM",
                    siteCategory: siteCategory,
                    fullReferringUrl: document.referrer,
                    pageName: title,
                    pageUrl: window.location.href,
                    path: window.location.pathname,
                    category: category ? category : "",
                  },
                };
              }
            }
            if ($("#corporate-enq").length > 0) {
              successFunc(response);
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
            }
            if ($("#test-ride").length > 0) {
              successFunc(response);
              let ticketNumber = "";
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
              if (window.digitalData) {
                window.digitalData = {
                  event: "Product Enquiry Form Submitted",
                  FormDetails: {
                    CustomerState: $('[name="stateNameVal"]')
                      .val()
                      .replaceAll("&amp;", "and")
                      .replaceAll("&", "and")
                      .trim(),
                    CustomerCity: $("#town").val().trim(),
                    SelectedVehicle: $('[name="vehicleNameVal"]').val().trim(),
                    DealerName: $('[name="dealerVal"]').val().trim(),
                    DealerState: $('[name="dealerNameVal"]').val().trim(),
                    DealerTown: $('[name="dealerCityNameVal"]').val().trim(),
                    ExpectedPurchaseDate: $("#expected-date").val().trim(),
                    TestRideDate: $("#testride-date").val().trim(),
                    RequestID: ticketNumber,
                    FormName: "Product Enquiry Form",
                    FromType: "Product Enquiry Form",
                    Gender: $('[name="genderVal"]').val().trim(),
                    Age: $("#age").val().trim(),
                    IntendedUsage: $('[name="intendedusage"]').text().trim(),
                  },
                  page: {
                    siteType: "AEM",
                    siteCategory: siteCategory,
                    fullReferringUrl: document.referrer,
                    pageName: title,
                    pageUrl: window.location.href,
                    path: window.location.pathname,
                    category: category ? category : "",
                  },
                };
              }
            } else {
              $(currentForm).find(".book-test-submit").removeAttr("disabled");
            }
          } else {
            $(".media-component .addressPan").addClass("d-none");
            $(".media-component .query--para").addClass("d-none");
            $(".media-component .form--note").addClass("d-none");
            $(".server-fail-msg").removeClass("d-none");
          }
        },
        error: function (error) {
          $(".media-loader-div").addClass("d-none");
          $(".media-component .addressPan").addClass("d-none");
          $(".media-component .query--para").addClass("d-none");
          $(".media-component .form--note").addClass("d-none");
          $(".server-fail-msg").removeClass("d-none");
          console.log("error: invalid input", error);
        },
      });
    }

    function getTicketNumber(response) {
      let ticketNo = response;
      let match = ticketNo.match(/(\d{5}-\d{4}-\d{4})/);
      if (match && match[0]) {
        return $("#ticketNo").text(match[0]);
      } else {
        return "";
      }
    }

    function successFunc(response) {
      $(".server-success-msg").removeClass("d-none");
      $(".media-component .query--para").addClass("d-none");
      $(".media-component .form--note").addClass("d-none");
      $(".media-component .addressPan").addClass("d-none");
    }

    $("#media--forms input[name='reset']").click(function () {
      $("#media--forms .error--message").css("display", "none");
      $("input.campaign-input").val("");
      $("input[type='hidden']").val("");
      $(".form--wrap textarea").val("");
      $('input[type="checkbox"]').prop("checked", false);
      $("#email").siblings(".error--message").hide();
      $("button.dropdown-select").removeClass("active");
      $("button.dropdown-select").each(function (index) {
        $(this).text(originalText[index]);
      });
      $("#sub-cat-form").addClass("d-none");
      $("html, body").animate(
        {
          scrollTop: 0,
        },
        "slow"
      );
    });

    // CAPTCHA CODE
    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }
    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }
    $(".refresh").on("click", function () {
      createCaptcha($(this).parents("form"));
    });
    function createCaptcha(currentForm) {
      sessionStorage.setItem("tempID", generateId());
      var captchaData = {
        reqID: sessionStorage.getItem("tempID"),
      };
      $.ajax({
        url: defaultservlet + ".captcha.html",
        type: "POST",
        data: captchaData,
        success: function (resp) {
          $(currentForm).find("#captcha-img").remove();
          createCaptchaImage(resp);
          captchText = resp;
        },
        error: function () {},
      });
    }
    function createCaptchaImage(resp) {
      var canv = document.createElement("canvas");
      canv.id = "captcha-img";
      canv.width = 200;
      canv.height = 50;
      var context = canv.getContext("2d");

      context.font = "bold 20px Arial";
      const spaceWidth = canv.width - context.measureText(resp).width - 40;
      const wordSpace = Math.floor(spaceWidth / resp.length);
      let left = 10;
      for (let i = 0; i < resp.length; i++) {
        const deg = (Math.random() * 30 * Math.PI) / 180;
        const x = left;
        const y = canv.height / 2 + Math.random() * 10;

        context.translate(x, y);
        context.rotate(deg);

        context.fillStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.fillText(resp[i], 0, 0);

        context.rotate(-deg);
        context.translate(-x, -y);

        left += context.measureText(resp[i]).width + wordSpace + Math.floor(Math.random() * 5);
      }

      const strokeLength = resp.length * Math.round(Math.random() + 1) + 3;
      for (let i = 0; i < strokeLength; i++) {
        context.strokeStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.beginPath();
        context.moveTo(Math.random() * 100, Math.random() * 50);
        //context.lineTo(Math.random() * 100, Math.random() * 50);
        const x = Math.random() * 100;
        const y = Math.random() * 50;
        context.moveTo(x, y);
        //context.lineTo(x + 1, y + 1);
        context.stroke();
      }
      if ($("#captcha").length > 0) {
        document.getElementById("captcha").appendChild(canv); // adds the canvas to the body element
      }
    }
  }
});

$(document).ready(function () { 
  if ($(document).width() > 768) {
    $('.hdbc-gallery-section .d-desktop').simpleLightbox();
  }else {
    $('.hdbc-gallery-section .d-mobile').simpleLightbox();
}

  if ($(document).width() < 768) {
    console.log('Longer', $(document).width(), $(window).height());
    if($(window).height() < 650) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-five-half');
    }else if($(window).height() < 725 && $(window).height() >= 650) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-six');
    }else if($(window).height() < 775 && $(window).height() >= 725) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-six');
    } else if ($(window).height() < 775 && $(window).height() >= 725) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-seven-half');
    } else if ($(window).height() < 850 && $(window).height() >= 775) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-eight-half');
    } else if ($(window).height() < 950 && $(window).height() >= 850) {
      $('.hdbc-gallery-tile').addClass('hdbc-gallery-tile-update-nine-half');
    }
  }
  
$('.bottom-hdbc--content-section .content-hdbc--slider-wrap:first').addClass('reveal');
$(".hdbc-submenu--tile p").click(handleClick)

function handleClick() {
  $('.hdbc-submenu--tile').removeClass("button-hdbc-active")
  $(this).parent().addClass("button-hdbc-active");
  let clickedIndex = $(this).parent().index();
  $('.content-hdbc--slider-wrap').removeClass('reveal');
  $('.content-hdbc--slider-wrap').eq(clickedIndex).addClass('reveal');
  // $('.content-hdbc--slider-wrap').slick('setPosition');
  // $('.functional-rep').slick('unslick');
  // $('.content-hdbc--slider-wrap .mobile').slick('setPosition');
}

function handleCenter() {
  $('.hdbc-submenu--tile').removeClass('button-hdbc-active');
  $('.hdbc-submenu--tile').each(function () {
    if ($(this).hasClass('slick-current')) {
      $(this).addClass('button-hdbc-active');
      let clickedIndex = $(this).index();
      $('.content-hdbc--slider-wrap').removeClass('reveal');
      $('.content-hdbc--slider-wrap').eq(clickedIndex).addClass('reveal');
    }
  });
}

const slickSettingsGallery = {
  rows: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 2,
  slidesToShow: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 3,
  autoplay: false,
  autoplaySpeed: 3000,
  dots: true,
  arrows: false,
  infinite: true,
  slidesToScroll: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 3,
  responsive: [{
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
      }
    },
    {
      breakpoint: 769,
      settings: {
        rows: 2,
        slidesToShow: 3,
        slidesToScroll: 3,
      }
    },
    {
      breakpoint: 426,
      settings: {
        rows: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 3,
        slidesToShow: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 2,
        slidesToScroll: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 1 : 2,
      }
    }
  ]
}

$(window).resize(function () {
  if ($(this).width() > 768) {
    $('.content-hdbc--slider-wrap').slick("resize");
  }
})


$('#default .content-hdbc--slider-wrap').slick(slickSettingsGallery);

$('.content-hdbc--slider-wrap .slick-track').each(function () {
  if ($(this).find('.hdbc-gallery-tile').length < 4) {
    $(this).addClass("d-flex");
  }
});

const slickSettingsInThePress = {
  rows: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 3 : 2,
  slidesToShow: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 2 : 3,
  autoplay: false,
  autoplaySpeed: 3000,
  dots: true,
  arrows: false,
  infinite: true,
  slidesToScroll: $('.single-photo-mobile').length > 0 && $(document).width() < 569 ? 2 : 3,
  responsive: [{
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
      }
    },
    {
      breakpoint: 769,
      settings: {
        rows: 2,
        slidesToShow: 3,
        slidesToScroll: 3,
      }
    },
    {
      breakpoint: 426,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2,
      }
    }
  ]
}

$('#inthepressimages .content-hdbc--slider-wrap').slick(slickSettingsInThePress);

$('.bottom--hdbc-wrapper .top--hdbc-sub-menu').slick({
  mobileFirst: true,
  slidesToScroll: 1,
  slidesToShow: 1,
  infinite: false,
  prevArrow: "<img class='a-left control-c next slick-prev' src='/content/dam/hero-aem-website/brand/design/icons/slider-right-white-arrow-icon.svg'>",
  nextArrow: "<img class='a-right control-c next slick-next' src='/content/dam/hero-aem-website/brand/design/icons/left-slider-white-arrow-icon.svg'>",
  centerMode: true,
  variableWidth: true,
  responsive: [{
    breakpoint: 769,
    settings: "unslick"
  }]
});

$('.functional-rep-content.mobile').slick({
  slidesToScroll: 1,
  slidesToShow: 1,
  infinite: false,
  arrows: false,
  dots: true,
});

$('.top--hdbc-sub-menu.slick-initialized').on('afterChange', function () {
  let centerSlide = $('.top--hdbc-sub-menu.slick-initialized').find('.slick-center');
  centerSlide.addClass('button-hdbc-active');
  handleCenter();
})

$('.top--hdbc-sub-menu .slick-arrow').click(handleCenter);
})




$(document).ready(function () {

  const audiodefault = $('.radio-jingles-wrap .content-hdbc--slider-wrap .hdbc-gallery-tile a:first').attr('href');
  let audio;
  let volumeRange = document.getElementById('volume');
  let seekbar = document.getElementById('seekbar');

  
  $('.radio-jingles-wrap .hdbc-gallery-tile').on('click', function(){
      $('.radio-jingles-wrap #btnPlay img').removeClass('d-none');
      $('.radio-jingles-wrap #btnPause img').addClass('d-none');
      $('.radio-jingles-wrap #btnMute img').removeClass('d-none');
      $('.radio-jingles-wrap #btnVolume img').addClass('d-none');
      console.log('Audio', document.getElementById("anchorAudioTag"), $(this).find("a").attr('href'))
      if ($(this).find("audio").attr('src') === 'undefined') {
      document.getElementById("audioFileTag").setAttribute('src', audiodefault);
      } else {
      document.getElementById("audioFileTag").setAttribute('src', $(this).find("a").attr('href'));
      }
      
      audio = document.getElementById("audioFileTag");
      
      audio.play();
      audio.addEventListener('timeupdate', UpdateTheTime, false);
      audio.addEventListener('durationchange', SetSeekBar, false);
      if (audio.muted) {
          audio.muted = false;
          volumeRange.value = audio.volume;
      }
      volumeRange.value = audio.volume;
  });

  $('.radio-jingles-wrap #btnPause').click(function () {
    $('#btnPlay img').removeClass('d-none');
    $('#btnPause img').addClass('d-none');
    if (audio.paused) {
        audio.play();
    } else if (audio.ended) {
        audio.currentTime = 0;
        audio.play();
    }
  });

  $('.radio-jingles-wrap .music_volume .quarterly-clickable-container').click(function (clickEvent) {
    clickEvent.preventDefault();
    clickEvent.stopPropagation();
  })

  $('.radio-jingles-wrap #btnPlay').click(function () {
      
    console.log('Audio', audio);
    if (audio.play) {
      $('#btnPause img').removeClass('d-none');
      $('#btnPlay img').addClass('d-none');
      audio.pause();
    }
  })

  $('.radio-jingles-wrap #btnMute').click(function () {
      if (!audio.muted) {
          $('#btnVolume img').removeClass('d-none');
          $('#btnMute img').addClass('d-none');
          audio.muted = true;
          volumeRange.value = 0;
      }
  })

  $('.radio-jingles-wrap #btnVolume').click(function () {
      if (audio.muted) {
          $('#btnMute img').removeClass('d-none');
          $('#btnVolume img').addClass('d-none');
          audio.muted = false;
          volumeRange.value = audio.volume;
      }
    })

    $('.radio-jingles-wrap #galleryRadioDownload').click(function () {
      window.open($(this).parent().parent().parent().find('#audioFileTag').attr('src'));
    })

  $('.radio-jingles-wrap #volume').change(function () {
    var myVol = volumeRange.value;
      audio.volume = myVol;
      if (myVol == 0) {
          audio.muted = true;
      } else {
          audio.muted = false;
      }
  });

  $('.radio-jingles-wrap #seekbar').change(function () {
    audio.currentTime = seekbar.value;
  });

  // fires when page loads, it sets the min and max range of the video
  function SetSeekBar() {
      seekbar.min = 0;
      seekbar.max = audio.duration;
  }

  function UpdateTheTime() {
      var sec = audio.currentTime;
      sec = sec % 3600;
      var min = Math.floor(sec / 60);
      sec = Math.floor(sec % 60);
      if (sec.toString().length < 2) sec = "0" + sec;
      if (min.toString().length < 2) min = "0" + min;
      document.getElementById('lblTime').innerHTML = min + ":" + sec;
      const durationMinutes = Math.floor(Math.round(audio.duration) / 60);
      const durationSeconds = Math.round(audio.duration) - durationMinutes * 60;
      document.getElementById('lblTimeDuration').innerHTML = durationMinutes + ":" + durationSeconds;
      if (audio.currentTime === audio.duration) {
        $('#btnPause img').removeClass('d-none');
        $('#btnPlay img').addClass('d-none');
      }
      seekbar.min = audio.startTime;
      seekbar.max = audio.duration;
      seekbar.value = audio.currentTime;
  }

  $(".radio-jingles-wrap #audioModalRadio").on('hide.bs.modal', function(){
    if (audio.play) {
      audio.pause();
    }
    audio.removeAttribute('src');
  });
});

$(document).ready(function () { 
    
  $('.service-maintenance-container .content-maintain--slider-wrap:first').addClass('reveal');
  
  const slickSettingsGallery = {
    rows: $(document).width() < 769 ? 2 : 1,
    slidesToShow: $(document).width() < 769 ? 2 : 5,
    autoplay: false,
    autoplaySpeed: 3000,
    dots: true,
    arrows: true,
    infinite: false,
    prevArrow: "<img class='a-left-maintainance control-c next slick-prev' src='/content/dam/hero-aem-website/service-journey-assets/hero-genuine-parts/left-arrow-maintain.png'>",
    nextArrow: "<img class='a-right-maintainance control-c next slick-next' src='/content/dam/hero-aem-website/service-journey-assets/hero-genuine-parts/right-arrow-maintain.png'>",
    slidesToScroll: 1,
  }
  
  $(window).resize(function () {
    if ($(this).width() > 768) {
      $('.content-maintain--slider-wrap').slick("resize");
    }
  })
  
  $('.content-maintain--slider-wrap').slick(slickSettingsGallery);
  $('.content-maintain--slider-wrap .slick-track').each(function () {
    if ($(this).find('.service-maintain-tile').length < 6) {
      $(this).addClass("d-flex");
    }
  });
  
  $('.functional-rep-content.mobile').slick({
    slidesToScroll: 1,
    slidesToShow: 1,
    infinite: false,
    arrows: false,
    dots: true,
  });

  $('.service-maintenance-container .content-maintain--slider-wrap').on('afterChange', function() {
    $('.content-maintain--slider-wrap').slick("setPosition");
  });

  })


$(document).ready(function () {

  var videos = $("video");

    videos.on("play", function() {
        videos.not(this).each(function() {
            this.pause();
        });
    });

  $('.d-desktop-video-hdbc').simpleLightbox();
    
  $('.hdbc-video--slider-wrap:first').addClass('reveal');

  const slickVideosHdbc = {
    rows: 1,
    slidesToShow: 3,
    autoplay: false,
    autoplaySpeed: 3000,
    dots: true,
    arrows: true,
    prevArrow: "<img class='a-left-hdbc control-c next slick-prev' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    nextArrow: "<img class='a-right-hdbc control-c next slick-next' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    infinite: false,
    slidesToScroll: 1,
    responsive: [{
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 769,
        settings: {
          rows: 1,
          slidesToShow: 2,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 576,
        settings: {
          rows: 1,
          slidesToShow: 1,
          slidesToScroll: 1,
        }
      }
    ]
  }
  
  $('.hdbc-video--slider-wrap').slick(slickVideosHdbc);

  $('.hdbc-video--slider-wrap').on('afterChange', function (event, slick, currentSlide) { 
    const slideLength = $('.hdbc-video--slider-wrap .slick-slide').length;
    if(currentSlide === 0) {
        $('.hdbc-video--slider-wrap .a-left-hdbc').addClass('slick-arrow-hidden');
    }
    else {
        $('.hdbc-video--slider-wrap .a-left-hdbc').removeClass('slick-arrow-hidden');
    }  

    if ($(window).width() > 769) {
      if(currentSlide === slideLength - 3) {
        $('.hdbc-video--slider-wrap .a-right-hdbc').addClass('slick-arrow-hidden');
      }
      else {
        $('.hdbc-video--slider-wrap .a-right-hdbc').removeClass('slick-arrow-hidden');
      } 
    } else if ($(window).width() < 769 && $(window).width() > 426) {
      if(currentSlide === slideLength - 2) {
        $('.hdbc-video--slider-wrap .a-right-hdbc').addClass('slick-arrow-hidden');
      }
      else {
        $('.hdbc-video--slider-wrap .a-right-hdbc').removeClass('slick-arrow-hidden');
      } 
    } 
    else if ($(window).width() < 427) {
      if(currentSlide === slideLength - 1) {
        $('.hdbc-video--slider-wrap .a-right-hdbc').addClass('slick-arrow-hidden');
      }
      else {
        $('.hdbc-video--slider-wrap .a-right-hdbc').removeClass('slick-arrow-hidden');
      } 
    }
  })
  
  $('.hdbc-video--slider-wrap .slick-track').each(function () {
    if ($(this).find('.hdbc--video-gallery-tile').length < 4) {
      $(this).addClass("d-flex");
    }
  });

  
  $('.hdbc-video--slider-wrap .a-left-hdbc').addClass('slick-arrow-hidden');
})
/*==SLICK OPTIONS==*/
$(document).ready(function () {
	$('.img-slick-carousel').slick({
		slidesToShow: 2,
		slidesToScroll: 1,
		infinite: false,
		dots: true,
		variableWidth: true,
		adaptiveHeight: true,
		responsive: [
			{
				breakpoint: 600,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1
				}
			},
		]
	});
});

$(window).on('scroll', function () {
	var threshold = 150;
	var btnwrapper = $('#scooter-banner-slide-mob');
	if ((btnwrapper.data('animation') && $(window).scrollTop() > threshold)) {
		btnwrapper.addClass('pos-sticky');
	} else {
		btnwrapper.removeClass('pos-sticky');
	}
	let sticky = btnwrapper;
	if (sticky.length) {
		let footer = $('.footer');
		let stickyTop = sticky.offset().top;
		let stickyBottom = stickyTop + sticky.outerHeight();
		let footerTop = footer.offset().top;
		let footerHeight = footer.outerHeight();
		let scrollTop = $(this).scrollTop();
		if (stickyBottom >= footerTop && scrollTop < footerTop + footerHeight - $(window).height()) {
			sticky.css('opacity', '0');
			setTimeout(function () {
				sticky.css('visibility', 'hidden');
			}, 300);
		} else {
			sticky.css('visibility', 'visible');
			setTimeout(function () {
				sticky.css('opacity', '1');
			}, 50);
		}
	}
});

$(document).ready(function () {
  let bseBtn = $("#bse-btn");
  let nseBtn = $("#nse-btn");

  let bseContent = $("#bse");
  let nseContent = $("#nse");

  bseBtn.addClass("active-stock");

  bseBtn.click(function () {
    bseContent.removeClass("hidden");
    nseContent.addClass("hidden");
    bseBtn.addClass("active-stock");
    nseBtn.removeClass("active-stock");
  });

  nseBtn.click(function () {
    bseContent.addClass("hidden");
    nseContent.removeClass("hidden");
    bseBtn.removeClass("active-stock");
    nseBtn.addClass("active-stock");
  });

  $(".investor-calendar").click(function (event) {
    event.stopPropagation();
    let dropdown = $(this)
      .parent()
      .find(".investor-events-calender-wrapper-mailoptions");
    if (dropdown.hasClass("d-none")) {
      $(".investor-events-calender-wrapper-mailoptions").addClass("d-none");
      dropdown.removeClass("d-none");
    } else {
      $(".investor-events-calender-wrapper-mailoptions").addClass("d-none");
    }
  });

  $(".investor-events-mailoptions").click(function (event) {
    let mailOptions = $(this);
    let options = mailOptions.attr("aria-label");
    let subject = encodeURIComponent(
      mailOptions.closest(".banner-headline").find("p:first-child").text()
    );

    let icalSubject = mailOptions
      .closest(".banner-headline")
      .find("p:first-child")
      .text();

    let eventdate = mailOptions
      .closest(".banner-headline")
      .find(".investor-meet-date")
      .text();

    let location = encodeURIComponent(
      mailOptions.closest(".banner-headline").find("p:first-child")
    );

    let gmailDateISOString = new Date(eventdate)
      .toISOString()
      .replace(/[^a-zA-Z0-9]/g, "");

    let formatedEventDate = encodeURIComponent(
      new Date(eventdate).toISOString()
    );

    let yahoodateISOString = dateFormatFunct(eventdate)
      .toISOString()
      .replace(/[^a-zA-Z0-9]/g, "");

    let hrefLink = `https://outlook.office.com/calendar/0/deeplink/compose?body=${subject}&enddt=&location=${location}&path=%2Fcalendar%2Faction%2Fcompose&rru=addevent&startdt=${formatedEventDate}&subject=${subject}`;
    switch (options) {
      case "outlook":
        window.open(
          `https://outlook.office.com/calendar/0/deeplink/compose?body=${subject}&enddt=&location=${location}&path=%2Fcalendar%2Faction%2Fcompose&rru=addevent&startdt=${formatedEventDate}&subject=${subject}`
        );
        break;
      case "gmail":
        window.open(
          `https://calendar.google.com/calendar/render?action=TEMPLATE&dates=${gmailDateISOString}/${gmailDateISOString}&details=${subject}&location=${location}&text=${subject}`
        );
        break;
      case "ical":
        createFile(icalSubject, eventdate, eventdate, location);
        break;
      case "yahoo":
        window.open(
          `https://calendar.yahoo.com/?desc=${subject}&dur=&et=${yahoodateISOString}&in_loc=${location}&st=${yahoodateISOString}&title=${subject}&v=60`
        );
        break;
      case "default":
        console.log("no events");
        break;
    }
  });

  function createFile(subject, today, today) {
    var eventDate = {
      start: today,
      end: today,
    };
    makeIcsFile(eventDate, subject, subject);
  }

  function convertDate(date) {
    var event = new Date(dateFormatFunct(date)).toISOString();
    event = event.split("T")[0];
    event = event.split("-");
    event = event.join("");
    return event;
  }

  function makeIcsFile(date, summary, description) {
    var event =
      "BEGIN:VCALENDAR\n" +
      "CALSCALE:GREGORIAN\n" +
      "METHOD:PUBLISH\n" +
      "PRODID:-//Test Cal//EN\n" +
      "VERSION:2.0\n" +
      "BEGIN:VEVENT\n" +
      "UID:test-1\n" +
      "DTSTART;VALUE=DATE:" +
      convertDate(date.start) +
      "\n" +
      "DTEND;VALUE=DATE:" +
      convertDate(date.end) +
      "\n" +
      "SUMMARY:" +
      summary +
      "\n" +
      "DESCRIPTION:" +
      description +
      "\n" +
      "END:VEVENT\n" +
      "END:VCALENDAR";
    window.open("data:text/calendar;charset=utf8," + escape(event));
  }

  function dateFormatFunct(eventdate) {
    let today = new Date(eventdate);
    let tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    return tomorrow;
  }

  var investorsURL = window.location.href;

  if (investorsURL.includes("/en-in/investors")) {
    $(".slider-content").addClass("investors-banner-text");
    $(".scooter-banner-slide").addClass("investors-banner-img");
  }

  $("#harley-carousel .scroll-down-btn").on('click', function () {
    let bannerHeight = $("#harley-carousel").height()
    $("html, body").animate({ scrollTop: bannerHeight - 10 }, "slow");
  })
});
$(document).ready(function () {
    if ($('#dealer-screen-page').length > 0) {
        $('.header-main,.footer').remove();
    }

    $('#dealer-screen-page .slide--wrap').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        speed: 800,
        arrows: false,
        autoplaySpeed: 10000,
        dots: false,
        pauseOnHover:false
    });

    $('#dealer-screen-page .slide-item').each(function () {
        let numItems = $(this).find('.item').length;
        let autoplay = 0;
        if (numItems >= 1) {
            autoplay = Math.ceil(numItems / 4) * 10000;
        }
        if (autoplay > 0) {
            $(this).attr('data-autoplay-ms', autoplay);
        }
    });

    $('#dealer-screen-page .slide--wrap').on('beforeChange', function (event, slick, currentSlide, nextSlide) {
        var $currentSlide = $(slick.$slides[currentSlide]);
        var $nextSlide = $(slick.$slides[nextSlide]);

        let slide = slick.$slides.eq(nextSlide);
        let autoplay = slide.data('autoplay-ms');
        if (autoplay) {
            slick.options.autoplaySpeed = autoplay;
        } else {
            slick.options.autoplaySpeed = 10000;
        }

        if ($currentSlide.find('.item-wrap').length) {
            $currentSlide.find('.item-wrap').slick('unslick');
        }

        if ($nextSlide.find('.item-wrap').length) {
            $nextSlide.find('.item-wrap').slick({
                infinite: true,
                slidesToShow: 4,
                slidesToScroll: 4,
                autoplay: true,
                speed: 800,
                autoplaySpeed: 10000,
                arrows: false,
                pauseOnHover:false,
                dots: false
            });
        }
    });
})


$(document).ready(function(){
  $('.scrollToTop').click(function(){
      $("html, body").animate({
          scrollTop: 0
        }, 500);
  })

  $(window).scroll(function() {
      if($(window).width()>769){
          if ($(window).scrollTop() > 0) {
              $('.scrollToTop').addClass('reveal');
            } else {
              $('.scrollToTop').removeClass('reveal');
            }
      }
    });

  var banner = $('.hero-carousel');
var products = $('.merchandproductcategory');

  if(banner && banner.length >0 && products && products.length > 0){

      $('.slider-content').addClass(function() {
            return "explore-collection-cta-container";
      })
    $('.slider-content').removeClass(function() {
            return "slider-content";
      })

    $('.carousel-indicators').addClass(function (){
         return "hero-slider-indicators";
    })
  }
})




$('.products-list').slick({
   slidesToShow: 1,
   slidesToScroll: 1,
   autoplay: false,
   autoplaySpeed: 2000,
   mobileFirst: true,
   // arrows: true,
   infinte: true,
   prevArrow: "<button type='button' class='slick-prev'></button>",
   nextArrow: "<button type='button' class='slick-next'></button>",
   dots: false,
   responsive: [
      {
         breakpoint: 769,
         settings: "unslick"
      }
   ]
});

$(document).ready(function(){
   $('#women .merchandise-content').addClass("flex-row-reverse");
   if($(window).width()<768){
       $('#women .merchandise-content').removeClass("flex-row-reverse");
   }

   $("a[href$='men']").on("click", function(event) {
       event.preventDefault();
       var target = $(this).attr("href");
       $("html, body").animate({
         scrollTop: $(target).offset().top - 50
       }, 500);
     });

   var descriptionHeight = $('#men-merchandise-desc').height();
    if(descriptionHeight > 108){
     $('#men-merchandise-desc').addClass("hide");
        $('#show-desc-men').on("click", function(event) {
            event.preventDefault();
        $('#men-merchandise-desc').removeClass('hide');
            $('#show-desc-men').css('display', 'none');
        });
    }
    if(descriptionHeight <= 108) {
$('#show-desc-men').css('display', 'none');
    }


    var womenDescriptionHeight = $('#women-merchandise-desc').height();
    console.log(womenDescriptionHeight);
    if(womenDescriptionHeight > 108){
     $('#women-merchandise-desc').addClass("hide");
        $('#show-desc-women').on("click", function(event) {
            event.preventDefault();
        $('#women-merchandise-desc').removeClass('hide');
            $('#show-desc-women').css('display', 'none');
        });
    }
    if(womenDescriptionHeight <= 108) {
$('#show-desc-women').css('display', 'none');
    }
})
$(document).ready( function(){
    $('.lights-on-image').addClass("d-none");
    let switchStatus = false;
    $("#xoomswitchButton").on('change', function() {
        if ($(this).is(':checked')) {
            switchStatus = $(this).is(':checked');
            $('.lights-on-image').removeClass("d-none");
            $('.lights-off-image').removeClass("d-block");
            $('.lights-off-image').addClass('d-none');
            $('.lights-on-image').addClass('d-block');
        }
        else {
        switchStatus = $(this).is(':checked');
        $('.lights-on-image').removeClass("d-block")
        $('.lights-on-image').addClass('d-none');
        $('.lights-off-image').addClass('d-block');
        }
    });

    $(window).resize(function () {
        if ($(document).width() < 500) {
            $('.xoom-lights-heading-wrapper').addClass("d-none")
            $('.xoom-lights-alt-heading-wrapper').addClass('d-block');
        }
    })
});
$(document).ready(function(){
   
    $('.gallery-wrap-mobile .slider--wrap').slick({
        infinite: false,
        arrows: false,
        dots: true,
        slidesToShow: 1.26,
        slidesToScroll: 1,
      });
    
    });
$(document).ready(function () {
  if ($(".investor-download-reports").length > 0) {
    var reportsYear;
    var urlParams = new URLSearchParams(window.location.search);
    var has_year = urlParams.has("year");
    var yearParams = urlParams.get("year");
    var reportAligner = $(".report-aligner");
    let arr = [];
    let quaterData = $(".select-year-div").data("quater");
    var investorData = quaterData;
    var hash = window.location.hash;
    if (typeof quaterData != "object") {
      investorData = quaterData && JSON.parse(quaterData);
    }
    reportAligner &&
      reportAligner.each(function () {
        if ($(this).data("category")) {
          arr.push($(this).data("category"));
        }
      });
    var eventsCallRecording = $(".quarterly-report-container");
    eventsCallRecording &&
      eventsCallRecording.each(function () {
        if ($(this).data("category")) {
          arr.push($(this).data("category"));
        }
      });
    let reportsPath = $("#reports-category").data("path");
    let data = {
      investorsCategory: reportsPath,
      categoryName: arr,
    };
    $.ajax({
      type: "GET",
      data: data,
      traditional: true,
      url: "/content/hero-aem-website/in/en-in/investors/_jcr_content.investors.json",
      success: function (response) {
        let resp = response;
        if (typeof response != "object") {
          resp = JSON.parse(response);
        }
        if (resp) {
          if (investorData) resp = resp.concat(investorData);
          reportsYear = resp;
          if (arr.length > 0) {
            reportsYear = resp.filter((element) => {
              return arr.some((childArr) => {
                return childArr === element.folderName;
              });
            });
          }
          console.log(reportsYear);
          years(reportsYear);
          quaterReportOptions(reportsYear);
          let findYear = reportsYear.filter((ele) => ele.year == yearParams);
          if (has_year && findYear.length > 0) {
            let yearsSection = $("#years-lists ul li.calendar-year");
            yearsSection.each(function () {
              if ($(this).text() == yearParams) {
                $(this).trigger("click");
              }
            });
            $("#years-lists ul").addClass("d-none");
            $("#select-quarter").trigger("change");
          } else {
            reportAligner &&
              reportAligner.each(function () {
                let reports = $(this);
                let categorySection = $(this).data("category");
                categorySection &&
                  sessionfunct(
                    reportsYear,
                    $("#years-lists").val(),
                    categorySection,
                    reports
                  );
              });
            eventsCallRecording &&
              eventsCallRecording.each(function () {
                let reports = $(this);
                let categorySection = $(this).data("category");
                categorySection &&
                  sessionfunct(
                    reportsYear,
                    $("#years-lists").val(),
                    categorySection,
                    reports
                  );
              });
            eventsCallRecording && callRecordings();
            $("#years-lists ul li.calendar-year").first().trigger("click");
            $("#years-lists ul").addClass("d-none");
            $("#select-quarter").trigger("change");
          }
          hash &&
            $("html, body").animate(
              {
                scrollTop: $(hash).offset().top - 166,
              },
              "slow"
            );
        }
      },
      error: function (err) {
        console.log("error", err);
      },
    });

    function years(resp) {
      let data = resp;
      let yearsArr = [];
      data.forEach(function (ele) {
        if (ele.year) {
          yearsArr.push(ele.year);
        }
      });
      let years = yearsArr.filter(
        (item, index) => yearsArr.indexOf(item) === index
      );
      let sortedYears = years.sort((a, b) => (a > b ? -1 : 1));
      let selectYears = $("#years-lists ul");
      sortedYears.forEach(function (ele) {
        let yearOptions = `<li class="calendar-year" value="${ele}">${ele}</li>`;
        selectYears.append(yearOptions);
      });
    }

    $("#years-lists").click(function () {
      $(this).find("ul").toggleClass("d-none");
    });

    $("#years-lists").on("click", "li.calendar-year", function () {
      $("#years-lists p").text($(this).text());
      let selectedYear = $(this).text();
      reportAligner &&
        reportAligner.each(function () {
          let reports = $(this);
          let categorySection = $(this).data("category");
          categorySection &&
            sessionfunct(reportsYear, selectedYear, categorySection, reports);
        });
      eventsCallRecording &&
        eventsCallRecording.each(function () {
          let reports = $(this);
          let categorySection = $(this).data("category");
          categorySection &&
            sessionfunct(reportsYear, selectedYear, categorySection, reports);
        });
      eventsCallRecording && callRecordings();
      populateQuarterDropdown(selectedYear, reportsYear);
      $("#select-quarter").trigger("change");
    });

    /* Annual Page Report */

    // $(".report-category-link").click((event) => {
    //   event.preventDefault();
    //   let url = event.currentTarget.getAttribute("href");
    //   let reportYear = $("#years-lists p").text();
    //   window.location.href = `${url}?year=${reportYear}`;
    // });

    let quarterSelect = $("#select-quarter");

    function quaterReportOptions(reportsYear) {
      let selected = $("#years-lists p").text();
      console.log(selected, "selected");
      let quaterOptions = reportsYear.filter((ele) => ele.year == selected);
      if (quaterOptions) {
        let quarters = [
          ...new Set(quaterOptions.map((data) => data.quarters)),
        ].sort((a, b) => {
          let aQuarter = parseInt(a.replace(/[^\d]/g, ""));
          let bQuarter = parseInt(b.replace(/[^\d]/g, ""));
          return aQuarter - bQuarter;
        });
        quarters.forEach((quarter) => {
          quarter &&
            quarterSelect.append(
              `<option value="${quarter}">${quarter}</option>`
            );
        });
      } else {
        let quarters = [
          ...new Set(reportsYear.map((data) => data.quarters)),
        ].sort((a, b) => {
          let aQuarter = parseInt(a.replace(/[^\d]/g, ""));
          let bQuarter = parseInt(b.replace(/[^\d]/g, ""));
          return aQuarter - bQuarter;
        });
        quarters.forEach((quarter) => {
          quarter &&
            quarterSelect.append(
              `<option value="${quarter}">${quarter}</option>`
            );
        });
      }
    }

    function populateQuarterDropdown(selectedYear, reportsYear) {
      let filteredData = reportsYear.filter(
        (data) => data.year === selectedYear
      );

      let uniqueQuarters = [
        ...new Set(filteredData.map((data) => data.quarters)),
      ].sort((a, b) => b.localeCompare(a));
      let quarterDropdown = $("#select-quarter");
      quarterDropdown.empty();
      uniqueQuarters.forEach((quarter) => {
        if (quarter) {
          let option = $("<option></option>")
            .attr("value", quarter)
            .text(quarter);
          quarterDropdown.append(option);
        }
      });
    }

    $("#select-quarter").on("change", function () {
      let selectedyear = $("#years-lists p").text();
      let selectedQuater = $(this).val();
      let parentElement = $(".events-calender");
      parentElement.html("");
      let data = reportsYear.filter(
        (ele) => ele.year == selectedyear && ele.quarters == selectedQuater
      );
      data = data.sort(function (a, b) {
        var aa = a.event_date.split("-").reverse().join(),
          bb = b.event_date.split("-").reverse().join();
        return aa > bb ? -1 : bb > aa ? 1 : 0;
      });
      if (selectedQuater) {
        data.forEach((ele) => {
          let elements = "";
          elements = `<div class="events-calender-wrapper">
          <div>
              <div class="events-calender-wrapper-label">${ele.event}</div>
              <div class="events-calender-wrapper-desc">${ele.title}</div>
          </div>
          <div class="date-wrapper">
              <div class="events-calender-wrapper-date">${ele.event_date}</div>
              <div class="events-calender-wrapper-venue">${ele.venue}</div>
          </div>
      </div>`;
          parentElement.append(elements);
        });
        parentElement.closest(".events-container").removeClass("d-none");
      } else {
        let elements = "";
        elements = `<div class="events-calender-wrapper">
        <div>
            <div class="events-calender-wrapper-label">The data for selected year doesn't exist</div>
        </div>
    </div>`;
        parentElement.append(elements);
        parentElement.closest(".events-container").addClass("d-none");
      }
    });

    /* Annual Report Data Fetch */

    function sessionfunct(reportsYear, yearParams, categoryParams, reports) {
      let reportsPDF = reportsYear.filter(
        (ele) => ele.folderName == categoryParams && ele.year === yearParams
      );
      console.log(reportsPDF, "reportsPDF");
      reportsPDF = reportsPDF.sort((a, b) => {
        if (
          a.quarter &&
          b.quarter &&
          parseInt(a.quarter) > parseInt(b.quarter)
        ) {
          return -1;
        }
      });
      reports.html("");
      if (reportsPDF.length > 0) {
        reportsPDF.forEach((ele) => {
          let data = "";

          if (reports.hasClass("report-aligner")) {
            data = `<div class="report-container">
            <div class="border-line"></div>
            <div class="report-details">
              <div class="report-name">${ele.title}</div>
              <div class="report-link">
                <div class="report-download"><img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/download-icon.png"><a href=${
                  ele.path
                }> Download </a></div>
                <div class="report-size"> ${
                  ele.size && ele.size.toFixed(2)
                } MB</div>
              </div>
            </div>
          </div>
          <div class="border-line-mobile"></div>`;
          } else {
            data = `  <div class="quarterly-reports-wrapper">
            <div class="reports-quarterly-heading">${ele.title}</div>
            <div class="quarterly-file-wrapper">
                <div class="report-size-text">${ele.description}</div>
                <div class="quarter-audio-wrapper-image" data-toggle="modal" data-target="#audioModal"><img
                    src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/audio.png"
                    alt="audio" />
                    <span class="audio-label-text">Audio Clip</span>
                    <div class="modal fade" id="audioModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                                  <audio src="${ele.path}" id="audioFile">
                                    Audio is not supported.
                                </audio>
                                <div class="music_volume">
                                    <div class="quarterly-clickable-container">
                                        <div id="btnPlay"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_pause.png"></div>
                                        <div id="btnPause"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_play.svg"></div>
                                        <label id="lblTime" class="label-text">00:00</label>
                                        <input type="range" step="any" id="seekbar">
                                        <label id="lblTimeDuration" class="label-text"></label>
                                        <div id="btnMute"><img  class="music-volume-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume.svg"></div>
                                    </div>
                                    <div id="btnClose" data-dismiss="modal" ><img  class="music-close-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_close.svg"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <a class="d-flex align-items-center" href="${ele.path}" target="_blank" download>
                    <div class="quarterly-download-wrapper">
                        <img class="quarterly-download-image-toolkit" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/download-svg.svg">
                    </div>
                    <div class="single-reports-quarter-download">Download</div>
                </a>
            </div>
        </div>`;
          }
          reports.append(data);
        });
        reports.closest(".annual-report-container").removeClass("d-none");
        if (reports.find(".report-container").length > 1) {
          reports
            .parent()
            .parent()
            .parent()
            .find(".report-footer")
            .removeClass("d-none");
        } else {
          reports
            .parent()
            .parent()
            .parent()
            .find(".report-footer")
            .addClass("d-none");
        }
      } else {
        let data = `<div class="report-container">
      <div class="border-line"></div>
        <div class="report-details">
          <div class="report-name">The data for selected year doesn't exist</div>
        </div>
      </div>`;
        reports.append(data);
        reports
          .parent()
          .parent()
          .parent()
          .find(".report-footer")
          .addClass("d-none");
        reports.closest(".annual-report-container").addClass("d-none");
      }
    }
    hash &&
      $("html, body").animate(
        {
          scrollTop: $(hash).offset().top - 166,
        },
        "slow"
      );
  }

  function callRecordings() {
    if ($(".quarterly-call-container-fluid").length > 0) {
      const audiodefault = $(
        ".quarterly-reports-wrapper .quarterly-file-wrapper a:first"
      ).attr("href");
      let audio;
      let volumeRange = document.getElementById("volume");
      let seekbar = document.getElementById("seekbar");

      $(".quarter-audio-wrapper-image").on("click", function () {
        $(".quarterly-call-container #btnPlay img").removeClass("d-none");
        $(".quarterly-call-container #btnPause img").addClass("d-none");
        if ($(this).find("audio").attr("src") === "undefined") {
          document
            .getElementById("audioFile")
            .setAttribute("src", audiodefault);
        } else {
          document
            .getElementById("audioFile")
            .setAttribute("src", $(this).find("audio").attr("src"));
        }

        audio = document.getElementById("audioFile");

        audio.play();
        audio.addEventListener("timeupdate", UpdateTheTime, false);
        audio.addEventListener("durationchange", SetSeekBar, false);
        volumeRange.value = audio.volume;
      });

      $(".quarterly-call-container #btnPause").click(function () {
        $("#btnPlay img").removeClass("d-none");
        $("#btnPause img").addClass("d-none");
        if (audio.paused) {
          audio.play();
        } else if (audio.ended) {
          audio.currentTime = 0;
          audio.play();
        }
      });

      $(".music_volume .quarterly-clickable-container").click(function (
        clickEvent
      ) {
        clickEvent.preventDefault();
        clickEvent.stopPropagation();
      });

      $(".quarterly-call-container #btnPlay").click(function () {
        if (audio.play) {
          $("#btnPause img").removeClass("d-none");
          $("#btnPlay img").addClass("d-none");
          audio.pause();
        }
      });

      $(".quarterly-call-container #btnMute").click(function () {
        if (audio.muted) {
          audio.muted = false;
          volumeRange.value = audio.volume;
        } else {
          audio.muted = true;
          volumeRange.value = 0;
        }
      });

      $(".quarterly-call-container #volume").change(function () {
        var myVol = volumeRange.value;
        audio.volume = myVol;
        if (myVol == 0) {
          audio.muted = true;
        } else {
          audio.muted = false;
        }
      });

      $(".quarterly-call-container #seekbar").change(function () {
        audio.currentTime = seekbar.value;
      });

      // fires when page loads, it sets the min and max range of the video
      function SetSeekBar() {
        seekbar.min = 0;
        seekbar.max = audio.duration;
      }

      function UpdateTheTime() {
        var sec = audio.currentTime;
        sec = sec % 3600;
        var min = Math.floor(sec / 60);
        sec = Math.floor(sec % 60);
        if (sec.toString().length < 2) sec = "0" + sec;
        if (min.toString().length < 2) min = "0" + min;
        document.getElementById("lblTime").innerHTML = min + ":" + sec;
        const durationMinutes = Math.floor(Math.round(audio.duration) / 60);
        const durationSeconds =
          Math.round(audio.duration) - durationMinutes * 60;
        document.getElementById("lblTimeDuration").innerHTML =
          durationMinutes + ":" + durationSeconds;
        if (audio.currentTime === audio.duration) {
          console.log("Coming??");
          $("#btnPause img").removeClass("d-none");
          $("#btnPlay img").addClass("d-none");
        }
        seekbar.min = audio.startTime;
        seekbar.max = audio.duration;
        seekbar.value = audio.currentTime;
      }

      $(".quarterly-call-container #audioModal").on(
        "hide.bs.modal",
        function () {
          audio.removeAttribute("src");
        }
      );

      if ($(window).width() < 569) {
        $(".quarterly-mobile-img").removeClass("d-none");
        $(".quarterly-desktop-img").addClass("d-none");
      } else {
        $(".quarterly-desktop-img").removeClass("d-none");
        $(".quarterly-mobile-img").addClass("d-none");
      }
      $(window).resize(function () {
        if ($(window).width() < 569) {
          $(".quarterly-mobile-img").removeClass("d-none");
          $(".quarterly-desktop-img").addClass("d-none");
        } else {
          $(".quarterly-desktop-img").removeClass("d-none");
          $(".quarterly-mobile-img").addClass("d-none");
        }
      });
    }
  }
});

$(document).ready(function () {
  $(".events-calender-wrapper-cal").click(function (event) {
    event.stopPropagation();
    let dropdown = $(this)
      .parent()
      .find(".events-calender-wrapper-mailoptions");
    if (dropdown.hasClass("d-none")) {
      $(".events-calender-wrapper-mailoptions").addClass("d-none");
      dropdown.removeClass("d-none");
    } else {
      $(".events-calender-wrapper-mailoptions").addClass("d-none");
    }
  });

  $(".mailoptions").click(function (event) {
    let mailOptions = $(this);
    let options = mailOptions.attr("aria-label");
    let subject = encodeURIComponent(
      mailOptions
        .closest(".events-calender-wrapper")
        .find(".events-calender-wrapper-desc")
        .text()
    );
    let icalSubject = mailOptions
      .closest(".events-calender-wrapper")
      .find(".events-calender-wrapper-desc")
      .text();
    let eventdate = mailOptions
      .closest(".events-calender-wrapper")
      .find(".events-calender-wrapper-date")
      .text();
    let location = encodeURIComponent(
      mailOptions
        .closest(".events-calender-wrapper")
        .find(".events-calender-wrapper-label")
        .text()
    );
    let gmailDateISOString = new Date(eventdate)
      .toISOString()
      .replace(/[^a-zA-Z0-9]/g, "");

    let formatedEventDate = encodeURIComponent(
      new Date(eventdate).toISOString()
    );

    let yahoodateISOString = dateFormatFunct(eventdate)
      .toISOString()
      .replace(/[^a-zA-Z0-9]/g, "");

    let hrefLink = `https://outlook.office.com/calendar/0/deeplink/compose?body=${subject}&enddt=&location=${location}&path=%2Fcalendar%2Faction%2Fcompose&rru=addevent&startdt=${formatedEventDate}&subject=${subject}`;
    switch (options) {
      case "outlook":
        window.open(
          `https://outlook.office.com/calendar/0/deeplink/compose?body=${subject}&enddt=&location=${location}&path=%2Fcalendar%2Faction%2Fcompose&rru=addevent&startdt=${formatedEventDate}&subject=${subject}`
        );
        break;
      case "gmail":
        window.open(
          `https://calendar.google.com/calendar/render?action=TEMPLATE&dates=${gmailDateISOString}/${gmailDateISOString}&details=${subject}&location=${location}&text=${subject}`
        );
        break;
      case "ical":
        createFile(icalSubject, eventdate, eventdate, location);
        break;
      case "yahoo":
        window.open(
          `https://calendar.yahoo.com/?desc=${subject}&dur=&et=${yahoodateISOString}&in_loc=${location}&st=${yahoodateISOString}&title=${subject}&v=60`
        );
        break;
      case "default":
        console.log("no events");
        break;
    }
  });

  function createFile(subject, today, today) {
    var eventDate = {
      start: today,
      end: today,
    };
    makeIcsFile(eventDate, subject, subject);
  }
  function convertDate(date) {
    var event = new Date(dateFormatFunct(date)).toISOString();
    event = event.split("T")[0];
    event = event.split("-");
    event = event.join("");
    return event;
  }
  function makeIcsFile(date, summary, description) {
    var event =
      "BEGIN:VCALENDAR\n" +
      "CALSCALE:GREGORIAN\n" +
      "METHOD:PUBLISH\n" +
      "PRODID:-//Test Cal//EN\n" +
      "VERSION:2.0\n" +
      "BEGIN:VEVENT\n" +
      "UID:test-1\n" +
      "DTSTART;VALUE=DATE:" +
      convertDate(date.start) +
      "\n" +
      "DTEND;VALUE=DATE:" +
      convertDate(date.end) +
      "\n" +
      "SUMMARY:" +
      summary +
      "\n" +
      "DESCRIPTION:" +
      description +
      "\n" +
      "END:VEVENT\n" +
      "END:VCALENDAR";
    window.open("data:text/calendar;charset=utf8," + escape(event));
  }

  function dateFormatFunct(eventdate) {
    let today = new Date(eventdate);
    let tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    return tomorrow;
  }

});

$(document).ready(function () {
    $(".annual-report-container .report-footer").click(async function (e) {
        const pdfUrls = $(this).parent().find("a[href$='.pdf']").map(function () {
            return $(this).attr("href");
        }).get();
        let zip = new JSZip();
        let count = 0;
        let zipFilename = $('.annual-report-container .annual-report-header').text().toLowerCase().replace(/\s/g, '') + ".zip";
        if (pdfUrls.length > 0) {
            pdfUrls.forEach(function (url) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        throw err; // or handle the error
                    }
                    zip.file(url.replace(/.*\//g, ""), data, {
                        binary: true,
                        createFolders: true
                    });
                    count++;
                    if (count == pdfUrls.length) {
                        zip.generateAsync({
                            type: "blob"
                        })
                        .then(function (blob) {
                            saveAs(blob, zipFilename);
                        });
                    }
                });
            });
        }
    });
})



$(document).ready(function () { 

  if ($(document).width() < 569) {
    $('.contact-desktop-view').addClass('d-none');
    $('.contact--slider-wrap').addClass('reveal');
  } else {
    $('.contact-mobile-view').addClass('d-none');
    $('.contact--slider-wrap').eq(0).addClass('reveal');
  }

  $(".card-head-mobile").on("click", function () {
    $(this).toggleClass("active");
    $(this).parent().siblings().find($(".card-head-mobile")).removeClass("active");
  });
  $(".investor-left-contact-arrow").click(handleClick);
  $(".submenu-contact-tile p").click(handleClick)

  function handleClick() {
    $('.submenu-contact-tile').removeClass("contact-button-active")
    $(this).parent().addClass("contact-button-active");
    let clickedIndex = $(this).parent().index();
    $('.contact--slider-wrap').removeClass('reveal');
    $('.contact--slider-wrap').eq(clickedIndex).addClass('reveal');
  }

  $(window).resize(function () {
    if ($(document).width() < 569) {
      $('.contact-mobile-view').removeClass('d-none');
      $('.contact-desktop-view').addClass('d-none');
      $('.contact--slider-wrap').addClass('reveal');
    } else {
      $('.contact-desktop-view').removeClass('d-none');
      $('.contact-mobile-view').addClass('d-none');
      $('.contact--slider-wrap').eq(0).addClass('reveal');
    }
  })
});
$(document).ready(function () {

  $('.service-delivers-section picture.bg-img').addClass('d-none');
  $('.service-delivers-section picture.bg-img').first().removeClass('d-none');
  $('.deliver--slider-wrap').eq(0).addClass('reveal');

  $(".card-head-mobile").on("click", function () {
    $(this).toggleClass("active");
    $(this).parent().siblings().find($(".card-head-mobile")).removeClass("active");
  });

  $(".submenu-deliver-tile").eq(0).addClass("deliver-button-active");
  $(".left--service-deliver").find(".submenu-deliver-tile.deliver-button-active .border_top").addClass("border_top-active")
  $(".submenu-deliver-tile p").click(handleClick)

  function handleClick() {
    let clickedIndex = $(this).parent().index();
    $('.submenu-deliver-tile').removeClass("deliver-button-active");
    $('.border_top').removeClass("border_top-active");
    $(this).parent().addClass("deliver-button-active");
    $(this).siblings().addClass("border_top-active");
    $('.deliver--slider-wrap').removeClass('reveal');
    $('.deliver--slider-wrap').eq(clickedIndex).addClass('reveal');
    $('.service-delivers-section picture.bg-img').addClass('d-none');
    $('.service-delivers-section picture.bg-img').eq(clickedIndex).removeClass('d-none');
  }
});
$(document).ready(function () {
  if ($(window).width() < 569) {
    $('.inv-credit-mobile-img').removeClass('d-none');
    $('.inv-credit-desktop-img').addClass("d-none");
  } else {
    $('.inv-credit-desktop-img').removeClass("d-none");
    $('.inv-credit-mobile-img').addClass('d-none');
  }
  $(window).resize(function () {
    if ($(window).width() < 569) {
      $('.inv-credit-mobile-img').removeClass('d-none');
      $('.inv-credit-desktop-img').addClass("d-none");
    } else {
      $('.inv-credit-desktop-img').removeClass("d-none");
      $('.inv-credit-mobile-img').addClass('d-none');
    }
  });

  // company investor table
  if ($('.block--company-investor-table-container').length) {
    const browserVal = getBrowser();
    const scrollElement = $('.block--company-investor-table-container .divided-scroll-wrapper');
    if (browserVal === 'Firefox') {
      scrollElement.addClass('firefox-browser-scrollbar');
    } else {
      scrollElement.removeClass('firefox-browser-scrollbar');
    }
    $('.block--company-investor-table-container').each(function (a, cmpInvsContainerElement) {
      const tableElement = $(cmpInvsContainerElement).find('table');
      const pagerContainerElement = $(cmpInvsContainerElement).find('.block--cmp-invs-table-pager-container');
      if (tableElement.length) {
        const pagerArrowsContainerElement = pagerContainerElement.find('.cmp-invs-table-pager-arrow');
        const pagerNumberContainerElement = pagerContainerElement.find('.cmp-invs-table-pager-number');
        const tableRowDataElements = tableElement.find('tbody');
        const itemsPerPage = tableElement.data('items-per-page') ? parseInt(tableElement.data('items-per-page')) : 1;
        const totalItemsCount = tableRowDataElements.length;
        const noOfPage = Math.ceil(totalItemsCount / itemsPerPage);
        if (noOfPage < 2) {
          pagerContainerElement.addClass('d-none');
        } else {
          const pagerObject = {
            itemsPerPage: itemsPerPage,
            noOfPage: noOfPage,
            tableRowDataElements: tableRowDataElements,
            tableElement: tableElement
          };

          pagerNumberContainerElement.html('');
          for (let itemIndex = 0; itemIndex < noOfPage; itemIndex++) {
            const pagerButton = `<button type="button" class="pager-number-button${itemIndex == 0 ? ' pager-active' : ''}" tabindex="${itemIndex == 0 ? -1 : 0}" data-value="${itemIndex}">${itemIndex + 1}</button>`;
            pagerNumberContainerElement.append(pagerButton);
          }

          pagerNumberContainerElement.find('.pager-number-button').on('click', function (e) {
            if (!$(this).hasClass('pager-active')) {
              const posVal = $(this).data('value');
              pagerAction(posVal, pagerObject, pagerNumberContainerElement, pagerArrowsContainerElement);
              tableElement.find('thead')[0].scrollIntoView();
            }
          });

          pagerArrowsContainerElement.on('click', function (e) {
            if (!$(this).hasClass('disabled')) {
              const preVal = pagerNumberContainerElement.find('.pager-active').data('value');
              const posVal = $(this).hasClass('pager-left-arrow') ? parseInt(preVal) - 1 : parseInt(preVal) + 1;
              pagerAction(posVal, pagerObject, pagerNumberContainerElement, pagerArrowsContainerElement);
              tableElement.find('thead')[0].scrollIntoView();
            }
          });

          pagerAction(0, pagerObject, pagerNumberContainerElement, pagerArrowsContainerElement);
        }
      } else {
        pagerContainerElement.addClass('d-none');
      }
    });
  }

  function pagerAction(posVal, pagerObject, pagerNumberContainerElement, pagerArrowsElement) {
    if (!pagerObject || !pagerNumberContainerElement || pagerNumberContainerElement.children().length < 2 || !pagerArrowsElement) {
      return;
    }

    const initalPosVal = pagerObject.itemsPerPage * posVal;
    const pagerNumberElements = pagerNumberContainerElement.find('.pager-number-button');
    pagerNumberElements.removeClass('pager-active').attr('tabindex', '0');
    $(pagerNumberElements[posVal]).addClass('pager-active').attr('tabindex', '-1');

    pagerArrowsElement.removeClass('disabled').attr('tabindex', '0');
    if (posVal == 0) {
      $(pagerArrowsElement[0]).addClass('disabled').attr('tabindex', '-1');
    }
    if (posVal == (pagerObject.noOfPage - 1)) {
      $(pagerArrowsElement[1]).addClass('disabled').attr('tabindex', '-1');
    }

    pagerObject.tableRowDataElements.each(function (itemIndex, rowsElement) {
      if (itemIndex < initalPosVal) {
        $(rowsElement).hide();
      } else if (itemIndex < (initalPosVal + pagerObject.itemsPerPage)) {
        $(rowsElement).show();
      } else {
        $(rowsElement).hide();
      }
    });

    if (pagerObject.itemsPerPage % 2 != 0 && posVal % 2 != 0) {
      pagerObject.tableElement.addClass('odd-no-elements');
    } else {
      pagerObject.tableElement.removeClass('odd-no-elements');
    }
  }

  function getBrowser() {
    let browser;
    if ((navigator.userAgent.indexOf("Opera") != -1) || (navigator.userAgent.indexOf('OPR') != -1)) {
      browser = 'Opera';
    } else if (navigator.userAgent.indexOf("Edg") != -1) {
      browser = 'Edge';
    } else if (navigator.userAgent.indexOf("Chrome") != -1) {
      browser = 'Chrome';
    } else if (navigator.userAgent.indexOf("Safari") != -1) {
      browser = 'Safari';
    } else if (navigator.userAgent.indexOf("Firefox") != -1) {
      browser = 'Firefox';
    } else if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) //IF IE > 10
    {
      browser = 'IE';
    } else {
      browser = 'unknown';
    }

    return browser;
  }
});

$(document).ready(function () {
  $('.xtrack-scrollToTop ').click(function () {
    $("html, body").animate({
      scrollTop: 0
    }, 500);
  })

  $(window).scroll(function () {
    if ($(window).scrollTop() > 0) {
      $('.xtrack-scrollToTop').addClass('reveal');
    } 
    else {
      $('.xtrack-scrollToTop').removeClass('reveal');
    }
  });

  $('.xtracks-social .slider--wrap').slick({
    infinite: true,
    dots: true,
    arrows: true,
    prevArrow: "<img class='social-arrow-left control-c next slick-prev' src='/content/dam/hero-aem-website/in/xtracks/arrow-prev.png'>",
    nextArrow: "<img class='social-arrow-right control-c next slick-next' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    autoPlay: false,
    slidesToShow: 3,
    slidesToScroll: 3,
    responsive: [
      {
        breakpoint: 767,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        }
      },
      {
        breakpoint: 500,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      },
    ]
  });

  let socialFeed = $('.xtracks-social');
  if (socialFeed && socialFeed.length > 0) {
    $('.carousel-indicators').addClass(function () {
      return "hero-xtrack-slider-indicators";
    });
    // $('.hero-carousel').append("<img id='xtrack-carrousel-img' src='/content/dam/hero-aem-website/in/xtracks/banners/Rides-Team-Logo-1.png'/>");
    $('#scooterBanner .carousel-inner .carousel-item .scooter-banner-slide .slider-content').addClass('button-aligner');
  }

  $('nav.newsabhead ul li.breadcrumb-item a').click(function (event) {
    let thisRef = $(this).attr("href");
    if (socialFeed && socialFeed.length > 0) {
      if (thisRef.startsWith("#")) {
        event.preventDefault();
        $("html, body").animate({
          scrollTop: $(thisRef).offset().top - 145
        }, 500);
      }
    }
  })
})
$(document).ready(function () { 
    $('.xpulse-img-width-resize').attr({
      "data-aos": "fade-right",     
    });
    $('.xpulse-stage-fade-left').attr({
      "data-aos": "fade-left",     
    });

  if ($('.xtrac-gallery-section').length) {
    AOS.init({
      duration: 1200,
      disable: 'mobile'
    })
  }


    $('#videoHeading p').css('-webkit-text-stroke', '2px #ed1c24');
    $('.xtrac-photo-outer-wrapper').addClass('choose-wrapper-none');
    
    $('.d-desktop-image-xtrac').simpleLightbox();

    $('.d-desktop-video-xtrac').simpleLightbox();

    $("#videoHeading p").click(function () {
      $('.image-hover-enlarge-img').addClass("gallery-click-hover");
      $('#photoHeading p').css('-webkit-text-stroke', '2px #000');
      $('#videoHeading p').css('-webkit-text-stroke', '2px #ed1c24');
      $('.xtrac-video-outer-wrapper').removeClass("d-none");
      $('.xtrac-photo-outer-wrapper').addClass("choose-wrapper-none");
    })

    $("#photoHeading p").click(function () {
      $('.image-hover-enlarge-img').removeClass("gallery-click-hover");
        $('#videoHeading p').css('-webkit-text-stroke', '2px #000');
        $('#photoHeading p').css('-webkit-text-stroke', '2px #ed1c24');
        $('.xtrac-photo-outer-wrapper').removeClass("choose-wrapper-none");
        $('.xtrac-video-outer-wrapper').addClass("d-none");
    })
  
    
  $('.content-video-xtrac--slider-wrap:first').addClass('reveal');
  $('.content-photo-xtrac--slider-wrap:first').addClass('reveal');
  
  const slickPhotosXtrac = {
    rows: 1,
    slidesToShow: 3,
    autoplay: false,
    autoplaySpeed: 3000,
    dots: true,
    arrows: true,
    prevArrow: "<img class='a-left-xtrac control-c next slick-prev' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    nextArrow: "<img class='a-right-xtrac control-c next slick-next' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    infinite: false,
    slidesToScroll: 1,
    responsive: [{
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 769,
        settings: {
          rows: 1,
          slidesToShow: 2,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 426,
        settings: {
          rows: 1,
          slidesToShow: 1,
          slidesToScroll: 1,
        }
      }
    ]
  }

  const slickVideosXtrac = {
    rows: 1,
    slidesToShow: 3,
    autoplay: false,
    autoplaySpeed: 3000,
    dots: true,
    arrows: true,
    prevArrow: "<img class='a-left-xtrac control-c next slick-prev' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    nextArrow: "<img class='a-right-xtrac control-c next slick-next' src='/content/dam/hero-aem-website/in/xtracks/arrow-next.png'>",
    infinite: false,
    slidesToScroll: 1,
    responsive: [{
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 769,
        settings: {
          rows: 1,
          slidesToShow: 2,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 426,
        settings: {
          rows: 1,
          slidesToShow: 1,
          slidesToScroll: 1,
        }
      }
    ]
  }
  
  $('.content-video-xtrac--slider-wrap').slick(slickVideosXtrac);
  $('.content-photo-xtrac--slider-wrap').slick(slickPhotosXtrac);

  $('.content-video-xtrac--slider-wrap').on('afterChange', function (event, slick, currentSlide) { 
    const slideLength = $('.content-video-xtrac--slider-wrap .slick-slide').length;
    if(currentSlide === 0) {
        $('.xtrac-video-outer-wrapper .a-left-xtrac').addClass('slick-arrow-hidden');
    }
    else {
        $('.xtrac-video-outer-wrapper .a-left-xtrac').removeClass('slick-arrow-hidden');
    }  

    if ($(document).width() > 769) {
      if(currentSlide === slideLength - 3) {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    } else if ($(document).width() < 769 && $(document).width() > 426) {
      if(currentSlide === slideLength - 2) {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    } 
    else if ($(document).width() < 427) {
      if(currentSlide === slideLength - 1) {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-video-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    }
  })

  $('.content-photo-xtrac--slider-wrap').on('afterChange', function (event, slick, currentSlide) {
    const slideLength = $('.content-photo-xtrac--slider-wrap .slick-slide').length;
    if(currentSlide === 0) {
        $('.xtrac-photo-outer-wrapper .a-left-xtrac').addClass('slick-arrow-hidden');
    }
    else {
        $('.xtrac-photo-outer-wrapper .a-left-xtrac').removeClass('slick-arrow-hidden');
    }  

    if ($(document).width() > 769) {
      if(currentSlide === slideLength - 3) {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    } else if ($(document).width() < 769 && $(document).width() > 426) {
      if(currentSlide === slideLength - 2) {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    } 
    else if ($(document).width() < 427) {
      if(currentSlide === slideLength - 1) {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').addClass('slick-arrow-hidden');
      }
      else {
        $('.xtrac-photo-outer-wrapper .a-right-xtrac').removeClass('slick-arrow-hidden');
      } 
    }
  })
  
  $('.content-video-xtrac--slider-wrap .slick-track').each(function () {
    if ($(this).find('.xtarc--video-gallery-tile').length < 4) {
      $(this).addClass("d-flex");
    }
  });
  $('.content-photo-xtrac--slider-wrap .slick-track').each(function () {
    if ($(this).find('.xtarc--photo-gallery-tile').length < 4) {
      $(this).addClass("d-flex");
    }
  });

  
  $('.xtrac-video-outer-wrapper .a-left-xtrac').addClass('slick-arrow-hidden');
  $('.xtrac-photo-outer-wrapper .a-left-xtrac').addClass('slick-arrow-hidden');
  })
$(document).ready(function () {
  let bike_engine_container = $("#engine");
  if (bike_engine_container.length > 0) {
    let data = bike_engine_container.data("jsonvalue");
    let jsonData = data;
    if (typeof data != "object"){
      jsonData = data && JSON.parse(data);
    }
    let bike_model_name = $("#bike-model-name");
    let bike_engine_dropdown = [];
    let bike_model_dropdown = [];
    jsonData.forEach(function (ele) {
      if (ele["BS IV / BS VI"]) {
        bike_engine_dropdown.push(ele["BS IV / BS VI"]);
      }
      if (ele["MODEL"]) {
        bike_model_dropdown.push(ele["MODEL"]);
      }
    });

    let filtered_engine_dropdown = bike_engine_dropdown.filter(
      (item, index) => bike_engine_dropdown.indexOf(item) === index
    );

    let filtered_model_dropdown = bike_model_dropdown.filter(
      (item, index) => bike_model_dropdown.indexOf(item) === index
    );
    bike_model_name.append(`<option>BIKE/ SCOOTER MODEL</option>`);
    bike_engine_container.html("");
    filtered_engine_dropdown.forEach(function (params) {
      let options = "";
      if (params) {
        options = `<option value=${params}>${params}</option>`;
      }
      bike_engine_container.append(options);
    });
    filtered_model_dropdown.forEach(function (params) {
      let options = "";
      if (params) {
        options = `<option value=${params}>${params}</option>`;
      }
      bike_model_name.append(options);
    });

    bike_engine_container.on("change", function () {
      console.log($(this).val());
      // bike_model_name.trigger('change');
      let option_value = $(this).val();
      let model_name = jsonData.filter(
        (ele) => ele["BS IV / BS VI"] == option_value
      );
      let arr = [];
      model_name.forEach(function (ele) {
        if (ele["MODEL"]) {
          arr.push(ele["MODEL"]);
        }
      });
      arr = arr.filter((item, index) => arr.indexOf(item) === index);
      bike_model_name.html("");
      bike_model_name.append(`<option>BIKE/ SCOOTER MODEL</option>`);
      arr.forEach(function (params) {
        let options = "";
        if (params) {
          options = `<option>${params}</option>`;
        }
        bike_model_name.append(options);
      });
      bike_model_name.trigger("change");
    });

    bike_model_name.on("change", function () {
      let bike_name = $(this).val();
      let option_value = bike_engine_container.val();
      let updated_data = jsonData.filter((ele) => ele.MODEL == bike_name);
      console.log(updated_data);
      if (updated_data.length > 0) {
        table(updated_data);
      } else {
        table(jsonData.filter((ele) => ele["BS IV / BS VI"] == option_value));
      }
    });

    bike_engine_container.trigger("change");

    function table(json_data) {
      let container = $("#geniue-oil-table");
      container.html("");
      // Create the table element
      let table = $("<table>");

      // Get the keys (column names) of the first object in the JSON data
      let cols = Object.keys(json_data[0]);

      // Create the header element
      let thead = $("<thead>");
      let tr = $("<tr>");

      // Loop through the column names and create header cells
      $.each(cols, function (i, item) {
        let th = $("<th>");
        th.text(item); // Set the column name as the text of the header cell
        tr.append(th); // Append the header cell to the header row
      });
      thead.append(tr); // Append the header row to the header
      table.append(tr); // Append the header to the table

      // Loop through the JSON data and create table rows
      $.each(json_data, function (i, item) {
        let tr = $("<tr>");

        // Get the values of the current object in the JSON data
        let vals = Object.values(item);

        // Loop through the values and create table cells
        $.each(vals, (i, elem) => {
          let td = $("<td>");
          td.text(elem); // Set the value as the text of the table cell
          tr.append(td); // Append the table cell to the table row
        });
        table.append(tr); // Append the table row to the table
      });
      container.append(table); // Append the table to the container element
    }
  }
});

$(document).ready(function () {
    let indvFeaturesWrap = $('#hero-connected .indv-features--wrap');
    let textWrap = $('#hero-connected .text-tile-wrap');
    let featureWrap = $('#hero-connected .phone--content .feature--wrap');
    let intervalID;

    indvFeaturesWrap.first().find('.indv-feature:first-child h3').click();

    $('#hero-connected .btn--wrap button').click(function () {
        $('#hero-connected .btn--wrap button').removeClass("btn--active");
        $(this).addClass("btn--active");
        let btnIndex = $(this).index();
        indvFeaturesWrap.not(indvFeaturesWrap.eq(btnIndex)).addClass("fade-out");
        textWrap.not(textWrap.eq(btnIndex)).addClass("fade-out");
        featureWrap.not(featureWrap.eq(btnIndex)).addClass("fade-out");
        indvFeaturesWrap.not(indvFeaturesWrap.eq(btnIndex)).css("height", 0);
        indvFeaturesWrap.eq(btnIndex).removeClass("fade-out");
        indvFeaturesWrap.eq(btnIndex).css("height", "auto");
        textWrap.eq(btnIndex).removeClass("fade-out");
        textWrap.eq(btnIndex).css("height", "auto");
        featureWrap.eq(btnIndex).removeClass("fade-out");
        featureWrap.eq(btnIndex).css("height", "auto");
        indvFeaturesWrap.eq(btnIndex).find('.indv-feature:first-child h3').click();

        // Reset Interval
        clearInterval(intervalID);
        intervalID = setInterval(clickSequentially, 2000);
    });

    function headerClick(event) {
        event.stopPropagation();
        let h3 = $(this);
        let indvFeature = h3.closest('.indv-feature');
        let indvFeaturesWrap = indvFeature.closest('.indv-features--wrap');
        let index = indvFeature.index();
        let top;
        if ($(window).width() >= 768) {
            top = index * 68;
        } else {
            top = index * 45.2;
        }
        let activeFeatureWrap = featureWrap.not('.fade-out');
        let activeIndex = activeFeatureWrap.find('.feature-tile').index();
        let slideDistance = (activeIndex - index) * 100;

        activeFeatureWrap.css('transform', `translateX(${slideDistance}%)`);

        let featureTiles = activeFeatureWrap.find('.feature-tile');
        featureTiles.each(function (i) {
            if (i === index) {
                $(this).addClass('visible');
            } else {
                $(this).removeClass('visible');
            }
        });

        let observer = new IntersectionObserver(function (entries) {
            entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                    $(entry.target).addClass('visible');
                } else {
                    $(entry.target).removeClass('visible');
                }
            });
        }, { threshold: 0.5 });


        indvFeaturesWrap.find('.indv-feature h3').removeClass('feature--active');
        h3.addClass('feature--active');
        indvFeaturesWrap.css('--after-top', top + 'px');

        clearInterval(intervalID);
        intervalID = setInterval(clickSequentially, 2000);

        textWrap.each(function (i) {
            if (!$(this).hasClass('fade-out')) {
                $(this).find('.text-tile').addClass('fade-out')
                let textTile = $(this).find('.text-tile').eq(index);
                textTile.removeClass('fade-out');
            } else {
                let textTiles = $(this).find('.text-tile');
                textTiles.addClass('fade-out');
            }
        });
    }

    function clickSequentially() {
        let activeIndvFeaturesWrap = indvFeaturesWrap.not('.fade-out');
        let currentIndex = activeIndvFeaturesWrap.find('.indv-feature h3.feature--active').parent().index();
        let nextIndex = currentIndex + 1;
        if (nextIndex >= activeIndvFeaturesWrap.find('.indv-feature h3').length) {
            nextIndex = 0;
        }
        let nextH3 = activeIndvFeaturesWrap.find('.indv-feature h3').eq(nextIndex);
        nextH3.trigger('click', { preventDefault: true });
    }

    intervalID = setInterval(clickSequentially, 2000);
    $('#hero-connected .indv-feature h3').click(headerClick)
    $('#hero-connected .btn--wrap button:first-child').click();
    $('#hero-connected .indv-feature:first-child h3').click();

    // Button Slider

    $('#hero-connected .button-slider').slick({
        slidesToShow: 3,
        slidesToScroll: 1,
        variableWidth: true,
        infinite: false,
        prevArrow: '<div class="btn-slick-prev position-absolute"> < </div>',
        nextArrow: '<div class="btn-slick-next position-absolute"> > </div>'
    }).on('afterChange', function (event, slick, currentSlide) {
        let slider = $(this);
        let prevArrow = slider.find('.btn-slick-prev');
        let nextArrow = slider.find('.btn-slick-next');
        if (currentSlide === 0) {
            prevArrow.removeClass('this--active');
            nextArrow.show();
        } else if (currentSlide === slick.slideCount - slick.options.slidesToShow) {
            prevArrow.addClass('this--active');
            nextArrow.hide();
        } else {
            prevArrow.addClass('this--active');
            nextArrow.show();
        }
    });

    if ($('.btn--wrap button').length > 3) {
        $('.btn--wrap').addClass('btn--padding');
    }
    $('#hero-connected .button-slider .btn-slick-next').addClass('this--active');
});
$(document).ready(function () {
  let vid = document.getElementById("heroX");

  function playVid() {
    vid.play();
  }

  function pauseVid() {
    vid.pause();
  }
  function endedListner() {
    $("#heroX").fadeOut();

    if ($(".buttons .video.active").hasClass("Book")) {
        $("html, body").animate(
            {
              scrollTop: $(".booktestride").offset().top - $('header .product-header-main').height(),
            },
            1000
          );
    }
    setTimeout(function () {
      $("#heroX source").attr("src", "");
      $("#heroX")[0].load();
      $(".playerButtons .play")
        .removeClass("paused")
        .find("img")
        .attr("images/ico-play.svg");
      $(".playerButtons").hide();
      $("#heroX").fadeIn();
      $("#heroX").off("ended");
      $(".buttons .video").removeClass("active");
    }, 300);
  }
  $(".interact").addClass("active");
  $(".buttons .video").on("click", function (e) {
    e.preventDefault();
    var videoFile = $(this).attr("href");
    $(this).addClass("active");
    $(".interact").removeClass("active");
    $("#heroX").fadeOut();
    $(".playerButtons").css({ display: "flex" });
    setTimeout(function () {
      $("#heroX source").attr("src", videoFile);
      $("#heroX")[0].load();
      $("#heroX").prop("muted", false);
      $(".playerButtons .play")
        .removeClass("paused")
        .find("img")
        .attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-pause.svg");
      $(".playerButtons .mute").find("img").attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-mute.svg");
      $("#heroX").fadeIn();
      $("#heroX").on("ended", endedListner);
    }, 300);
    // if ($(this).hasClass('showPause')) {
    //     $('.playerButtons').fadeIn();
    // }
    // else {
    //     $('.playerButtons').fadeOut();
    // }
  });
  $(".playerButtons .play").on("click", function () {
    if ($(this).hasClass("paused")) {
      playVid();
      $(this)
        .removeClass("paused")
        .find("img")
        .attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-pause.svg");
    } else {
      pauseVid();
      $(this).addClass("paused").find("img").attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-play.svg");
    }
  });
  $("#heroX").prop("muted", true);

  $(".playerButtons .mute").click(function () {
    if ($("#heroX").prop("muted")) {
      $("#heroX").prop("muted", false);
      $(this).find("img").attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-mute.svg");
    } else {
      $("#heroX").prop("muted", true);
      $(this).find("img").attr("src", "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/ico-unmute.svg");
    }
  });
});

$(document).ready(function () {
  var defaultusername=$('.campaign-login #defaultuser').val();
  var defaultpassword=$('.campaign-login #defaultpassword').val();
  
  $('.campaign-login #defaultpassword').val('');
  $('.campaign-login #defaultuser').val('');
  
  const harleysession = sessionStorage.getItem('harleyadminlogin');
  if(harleysession){
    $('.campaign-login').addClass('d-none');
        $('.campaign-hlogin.campaign-container').removeClass('d-none');
        $('.campaign-hlogin.campaign-container').addClass('d-block');
  }
  $('.campaign-login .book-test-submit').click(function() {
    
    if((defaultusername==$('.campaign-login #username').val() && defaultpassword==$('.campaign-login #password').val())){
        sessionStorage.setItem('harleyadminlogin', true);
        $('.campaign-login').addClass('d-none');
        $('.campaign-hlogin.campaign-container').removeClass('d-none');
        $('.campaign-hlogin.campaign-container').addClass('d-block');
        $('body,html').stop().animate({
          scrollTop: 0
      });
    }
    else{
      $('.campaign-login .errorpassword').removeClass('d-none');
    }
  })

  $('.campaign-login #username, .campaign-login #password').on('input' , function(){
    $('.campaign-login .errorpassword').addClass('d-none');
    $('.campaign-login .book-test-submit').removeAttr('disabled');
  })


})
$(document).ready(function () {
  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }

  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }

  $(".nps--toclick").click(function () {
    if (window.digitalData) {
      window.digitalData.push({
        event: "NPS feedback initiated",
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: {
          pagename: title,
          server: window.location.hostname,
          fullURL: window.location.href,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          isErrorPage: false,
          pageType: "AEM",
          language: "en",
          country: countryCode,
          platform: getOS(),
          custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
          loggedIn: isSignedIn(),
          previousPageValue: document.referrer,
        },
      });
    }
    $('<div class="grey-bg-2"></div>').appendTo("body").fadeIn(300);
    $("#feedback-modal").addClass("transitioning-div-visible");

        // Disable Scroll
        $('html, body').css({
            overflow: 'hidden',
            height: '100%'
        });
        if ($('#vertical-sticky-mob').length) {
            $('#vertical-sticky-mob').css('z-index', 1);
        }
        if ($(window).width() >= 768) {
            $(this).addClass('transitioning-div-visible-448');
        }
        if ($(window).width() < 768) {
            $(this).css({
                opacity: 0,
            })
            $('#nps-feedback').css({
                width: '100%',
                right: 0,
            });
        }

    });

  $(".ratings-inner-wrap .rating-tile").click(function () {
    $(this).addClass("rating-selected");
    let clickIndex = $(this).index();
    let selectedRating = clickIndex + 1;
    if (window.digitalData) {
      window.digitalData.push({
        event: "NPS rating selected",
        feedbackDetails: {
          rating: selectedRating.toString(),
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: {
          pagename: title,
          server: window.location.hostname,
          fullURL: window.location.href,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          isErrorPage: false,
          pageType: "AEM",
          language: "en",
          country: "in",
          platform: getOS(),
          custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
          loggedIn: isSignedIn(),
          previousPageValue: document.referrer,
        },
      });
    }
    $(".ratings-select").addClass("d-none");
    $(".suggestion-select").removeClass("d-none");
    $(".suggestion-select .suggestions-wrap").eq(clickIndex).removeClass("d-none");
  });

  $(".reason-wrap .reason-tile").click(function () {
    let button = $(".suggestions-wrap #manual-sub-btn");
    button.removeAttr("disabled");
    $(this).toggleClass("tile--active");
    if ($(".reason-wrap .reason-tile.tile--active").length === 0) {
      button.attr("disabled", "disabled");
    }
  });

  $(".suggestions-wrap input.btn").click(function () {
    $(".suggestions-wrap").addClass("d-none");
    $(".suggestion-select").addClass("d-none");
    $("#feedback-modal .close").removeClass("d-none");
    $("#feedback-modal .close").addClass("thankyou-close");
    $(".thankyou-final").removeClass("d-none");
    serviceFormSubmit();
  });

  $("#feedback-modal .close").click(function () {
    let button = $(".suggestions-wrap #manual-sub-btn");
    let gradientDiv = $(".grey-bg-2");
    gradientDiv.fadeOut(800, function () {
      gradientDiv.remove();
      if ($(".ratings-select").hasClass("d-none")) {
        $(".ratings-select").removeClass("d-none");
      }
      $(".reason-tile").removeClass("tile--active");
      $(".suggestion-select,.suggestions-wrap,.thankyou-final").addClass("d-none");

            // Enable Scroll
            $('html, body').css({
                overflow: '',
                height: ''
            });
            button.attr("disabled", "disabled");
        }); 
        $('#feedback-modal').removeClass('transitioning-div-visible');
        $('.nps--toclick').removeClass("transitioning-div-visible-448");
        if ($(this).hasClass('thankyou-close')) {
            $('#nps-feedback').addClass('animate-close');
            setTimeout(function () {
                $('#nps-feedback').addClass('d-none');
            }, 500);
        }

        if ($(window).width() < 768) {
            $('.nps--toclick').css({
                opacity: 1,
            })
            $('#nps-feedback').css({
                width: '',
                right: '',
            });
        }
        if ($('#vertical-sticky-mob').length) {
            $('#vertical-sticky-mob').css('z-index', 6);
        }
    });

    // API Integration

    async function serviceFormSubmit() {
        var npsObj = {
            rating: $('.rating-selected').index() + 1,
            feedback1: $('.reason-tile.tile--active:nth(0) p').text().trim() || '',
            feedback2: $('.reason-tile.tile--active:nth(1) p').text().trim() || '',
            feedback3: $('.reason-tile.tile--active:nth(2) p').text().trim() || '',
            feedback4: $('.reason-tile.tile--active:nth(3) p').text().trim() || '',
            source: getOS()
        };

        let npsURL = $("#nps-feedback").attr("data-component-relativePath");
        var npsPath = npsURL.replace(
            "jcr:content",
            "_jcr_content"
        );

    $.ajax({
      url: npsPath,
      type: "POST",
      data: JSON.stringify(npsObj),
      dataType: "json",
      contentType: "application/json",
      success: function (resp) {
        console.log("nps success");
        sessionStorage.setItem("npsSumbitted", "yes");
        if (window.digitalData) {
          window.digitalData.push({
            event: "NPS feedback submitted",
            feedbackDetails: {
              rating: npsObj.rating.toString(),
              reasons:
                npsObj.feedback1 +
                "|" +
                npsObj.feedback2 +
                "|" +
                npsObj.feedback3 +
                "|" +
                npsObj.feedback4,
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: {
              pagename: title,
              server: window.location.hostname,
              fullURL: window.location.href,
              category: sub1,
              categoryLevel1: sub2,
              categoryLevel2: sub3,
              categoryLevel3: sub4,
              isErrorPage: false,
              pageType: "AEM",
              language: "en",
              country: "in",
              platform: getOS(),
              custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
              loggedIn: isSignedIn(),
              previousPageValue: document.referrer,
            },
          });
        }
      },
      error: function (error) {
        console.log(error);
      },
    });
  }

    // NPS Visibility

    let npsSub = sessionStorage.getItem("npsSumbitted");
    if(npsSub != 'yes'){
        let inactivityTime = 10000;
        let fadeTimer;
        let fadeThreshold = 0.15;
    
        fadeTimer = setTimeout(function () {
            $('#nps-feedback').addClass('fade-in');
        }, inactivityTime);
    
        $(window).on('scroll', function () {
            clearTimeout(fadeTimer);
    
            let scrollPosition = $(window).scrollTop() / ($(document).height() - $(window).height());
    
            if (!$('#nps-feedback').hasClass('fade-in')) {
                if (scrollPosition > fadeThreshold) {
                    $('#nps-feedback').addClass('fade-in');
                } else {
                    fadeTimer = setTimeout(function () {
                        $('#nps-feedback').addClass('fade-in');
                    }, inactivityTime);
                }
            }
        });
    }
});
$(document).ready(function () {
  if ($(".mocktest").length > 0) {
    var randomQuestionArr = [];
    var timeoutFunc;
    function customValidationMockTest($form) {
      //for email
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      // mock test form
      $form.validate({
        ignore: [],
        rules: {
          name: {
            required: true,
          },
          email: {
            required: true,
            emailOnly: true,
          },
        },
        messages: {
          name: {
            required: $('[name="mockTestFullName"]').data("validation-msg-req"),
          },
          email: {
            required: $('[name="mockTestEmail"]').data("validation-msg-req"),
            emailOnly: $('[name="mockTestEmail"]').data(
              "validation-msg-format"
            ),
          },
        },
      });
    }
    if ($("#mockTestCredential").length > 0) {
      customValidationMockTest($("#mockTestCredential"));
    }

    $("#mockTestCredentialSubmit").on("click", function () {
      let currentForm = $(this).closest("form");

      //Data to API
      let mockTestFullName = $("#mockTestCredential #mockTestFullName").val();
      let mockTestEmail = $("#mockTestCredential #mockTestEmail").val();

      var mocktestFormData = {
        mockTestFullName: mockTestFullName,
        mockTestEmail: mockTestEmail
      };

      var mocktestRelativePath = $("#mocktestregister").attr(
        "data-component-relativePath"
      );

      var mocktestFormPath = mocktestRelativePath.replace(
        "jcr:content",
        "_jcr_content"
      );
      
      $.ajax({
        url: mocktestFormPath,
        type: "POST",
        data: JSON.stringify(mocktestFormData),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          let jsonResp = resp;
          if (typeof jsonResp != "object") {
            jsonResp = JSON.parse(resp);
          }
        },
        error: function (error) { },
      });

      if (currentForm.valid()) {
        alert("You have 15 minutes to complete test!");
        $(this).closest(".content--wrap").addClass("d-none");
        $("#mockTestContainer").removeClass("d-none");
        let jsonData = $("#mockTestCredential").data("mock-test-json");
        let arr = [];
        if (jsonData.length)
          while (arr.length < 15) {
            var r = Math.floor(Math.random() * (jsonData.length - 1 + 1)) + 1;
            if (arr.indexOf(r) === -1) arr.push(r);
          }
        randomQuestionArr =
          jsonData &&
          jsonData.filter((element) => {
            return arr.some((childArr) => {
              return childArr === element.id;
            });
          });
        let ques = $("#mockTest .mocktestQuestions");
        ques.html("");
        randomQuestionArr &&
          randomQuestionArr.forEach((ele, index) => {
            let elements = "";
            elements = `<div class="form-wrap-mocktest">
        <div class="d-flex mb-3">
        <h4 class="mocktest-questions mb-3">
            ${++index}) ${ele.question} 
        </h4>
        ${
          ele.Question_image_Path &&
          `<img src="${ele.Question_image_Path}" alt="" width="auto" height="100px" class="pl-4"/>`
        }
        </div>
        <div class="row">
            <div class="col-6 anwsers mb-2">
                <input type="radio" name="${
                  ele.id
                }" value="option_1" class="mt-1">
                <span class="pl-1">${ele.option_1}</span>
            </div>
            <div class="col-6 anwsers  mb-2">
                <input type="radio" name="${
                  ele.id
                }" value="option_2" class="mt-1">
                <span class="pl-1">${ele.option_2}</span>
            </div>
            <div class="col-6 anwsers  mb-2">
                <input type="radio" name="${
                  ele.id
                }" value="option_3" class="mt-1">
                <span class="pl-1">${ele.option_3}</span>
            </div>
            <div class="col-6 anwsers  mb-2">
                <input type="radio" name="${
                  ele.id
                }" value="option_4" class="mt-1">
                <span class="pl-1">${ele.option_4}</span>
            </div>
            <div class="correct-answer" data-value="${
              ele.correct_answer
            }"></div>
        </div>
        </div>`;
            ques.append(elements);
          });
        timeoutFunc = setTimeout(mocktestTimeout, 900000);
      }
    });
    function mocktestTimeout() {
      alert("Time is up, your result is being processed.");
      $("#mockTestSubmit").trigger("click");
    }

    $("#mockTestSubmit").on("click", function () {
      clearTimeout(timeoutFunc);
      let $inputs = $(".mocktestQuestions :radio:checked");
      let data = [];
      let count = 0;
      $inputs &&
        $inputs.each(function () {
          let iscorrect =
            $(this).val() ===
            $(this).closest(".row").find(".correct-answer").data("value");
          iscorrect && count++;
          let correctAnswer = {
            id: $(this).attr("name"),
            answer: $(this).val(),
            correct_answer: $(this)
              .closest(".row")
              .find(".correct-answer")
              .data("value"),
            iscorrect: iscorrect,
          };
          data.push(correctAnswer);
        });
      console.log(data, "data");
      let thankyouMsg = $("#mocktest-thankyou");
      $("#mockTestContainer").addClass("d-none");
      thankyouMsg &&
        $("html, body").animate(
          {
            scrollTop: thankyouMsg.offset().top - 166,
          },
          "slow"
        );
      thankyouMsg.removeClass("d-none");
      let resultJson = [];
      randomQuestionArr &&
        randomQuestionArr.forEach((ele) => {
          data &&
            data.forEach((child) => {
              if (child.id == ele.id) {
                let correct_ans = ele.correct_answer;
                let submitted_ans = child.answer;
                let jsonData = {
                  id: ele.id,
                  question: ele.question,
                  correctAnswer: ele[correct_ans],
                  answer: ele[submitted_ans],
                  iscorrect: child.iscorrect,
                };
                resultJson.push(jsonData);
              }
            });
        });
      console.log(resultJson);
      let report =
        resultJson.length > 0
          ? `<div class="my-2"> Attempted Question:- ${resultJson.length}</div>
    <div class="mb-2">Submitted Answer:- ${resultJson.length}</div>
    <div class="mb-3">Correct Answers:- ${count}</div>`
          : `<div class="my-2"> You have not attempted any questions. Please try again.</div>`;
      $("#mocktest-results").append(report);
      if (resultJson.length == 0) {
        $("#mocktest-thankyou .h3-bold-heading-std").addClass("d-none");
      }

      $(".mocktest .mock-test-heading").addClass("d-none");
      $(".mocktest .success-heading").removeClass("d-none");
      resultJson &&
        resultJson.forEach((ele, index) => {
          let element = "";
          element = `<div class="form-wrap-mocktest">
            <div class="d-flex">
                <h4 class="mocktest-questions mb-3">
                    ${++index}) ${ele.question}
                </h4>
            </div>
            <div class="row">
                ${
                  !ele.iscorrect
                    ? `<div class="col-12 anwsers mb-2">
                    <span class="ans-label"> Correct answer : &nbsp;</span>
                    <span class="correctanswer ans-label">${ele.correctAnswer}</span>
                </div>
                <div class="col-12 results  mb-2">
                    <span class="ans-label"> Submitted answer : </span>
                    <span class="wronganswer ans-label">${ele.answer}</span>
                </div>`
                    : ` <div class="col-12 results  mb-2">
                    <span class="ans-label"> Submitted answer : </span>
                    <span class="correctanswer ans-label">${ele.correctAnswer}</span>
                </div>`
                }
            </div>
        </div>`;
          $("#mocktest-results-percentage").append(element);
        });
    });
  }
});


$(document).ready(function () {
  $(".downloadapp .carousel").hover(function () {
    $(".carousel").carousel("cycle");
  });
});


$(document).ready(function () {
    let html = $("html");
    let wrapper = $(".vertical-wrapper");
    let stickyMob = $('#horizontal-sticky-mob');
    let arrow = stickyMob.find('.arrow');
    let submenu = $('.submenu');
    let arrowImg = arrow.find('img');

    $('#vertical-sticky .sticky-vertical-tile').hover(function () {
        $(this).addClass('this-hovered');
        $(this).find('a').css({ 'display': 'block', 'visibility': 'visible' });
    }, function () {
        $(this).removeClass('this-hovered');
        $(this).find('a').css({ 'display': 'none', 'visibility': 'hidden' });
    });

    $("#click-to-expand").click(function () {
        if (wrapper.hasClass("expanded")) {
            $(this).css("transform", "rotate(0)")
            wrapper.animate({
                opacity: 0,
                marginTop: wrapper.outerHeight() + "px"
            }, 500, function () {
                wrapper.removeClass("expanded");
                wrapper.css("display", "none").css("marginTop", 0);
                html.css("overflow-y", "auto");
            });
            $("body > .grey-background").fadeOut(500, function () {
                $(this).remove();
            });
            if ($('#horizontal-sticky-mob').length) {
                $('#horizontal-sticky-mob').css('z-index', 6);
            }
            if($('#nps-feedback').length){
                $('#nps-feedback').css('z-index', 10);
            }
        } else {
            $(this).css("transform", "rotate(45deg)")
            wrapper.css({
                display: "flex",
                opacity: 0,
                marginTop: wrapper.outerHeight() + "px"
            }).addClass("expanded").animate({
                opacity: 1,
                marginTop: 0
            }, 500);
            html.css("overflow-y", "hidden");
            $("<div class='grey-background'></div>").appendTo("body").fadeIn(500);
            if ($('#horizontal-sticky-mob').length) {
                $('#horizontal-sticky-mob').css('z-index', 4);
            }
            if($('#nps-feedback').length){
                $('#nps-feedback').css('z-index', 1);
            }
        }
    });

    $(window).scroll(function () {
        let sticky = $('#horizontal-sticky');
        if (sticky.length) {
            let footer = $('.footer');
            let stickyTop = sticky.offset().top;
            let stickyBottom = stickyTop + sticky.outerHeight();
            let footerTop = footer.offset().top;
            let footerHeight = footer.outerHeight();
            let scrollTop = $(this).scrollTop();
            if (stickyBottom >= footerTop && scrollTop < footerTop + footerHeight - $(window).height()) {
                sticky.css('opacity', '0');
                setTimeout(function () {
                    sticky.css('visibility', 'hidden');
                }, 300);
            } else {
                sticky.css('visibility', 'visible');
                setTimeout(function () {
                    sticky.css('opacity', '1');
                }, 50);
            }
        }
    });

    arrow.click(function () {
        if (submenu.hasClass('open')) {
            submenu.removeClass('open').stop().animate({ bottom: -100 + "%" }, 400);
            arrowImg.css({ 'transform': 'rotate(0deg)' });
            if($('#vertical-sticky-mob').length){
                $('#vertical-sticky-mob').css('z-index', 6);
            }
            if($('#nps-feedback').length){
                $('#nps-feedback').css('z-index', 10);
            }
        } else {            
            submenu.addClass('open').stop().animate({ bottom: stickyMob.outerHeight() }, 400);
            arrowImg.css({ 'transform': 'rotate(180deg)' });
            if($('#vertical-sticky-mob').length){
                $('#vertical-sticky-mob').css('z-index', 1);
            }
            if($('#nps-feedback').length){
                $('#nps-feedback').css('z-index', 1);
            }
        }
        return false;
    });
});
$(document).ready(function () {
  let jsonObj = {};
  let ownerManualFolder = $('#owners-manual').data('ownerfolder')
  let ownerManualFolderImages = $('#owners-manual').data('ownerfolderimages')
  $("#manual--form-wrap .cust-dropdown-menu").on(
    "click",
    "li",
    function () {
      if ($('.owners-manual-bottom-wrap').is(':visible')) {
        $('.owners-manual-bottom-wrap').addClass('d-none');
      }
      let selectionGroup = $(this).parents(".cust-drop-down");
      let button = selectionGroup.find(".dropdown-select");
      button.text($(this).find('a')[0].innerHTML.replaceAll('&amp;', '&'));
      selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
      $(this).parents("ul").siblings(".btn-drop").addClass("active");
      $(this).addClass("active");
      if ("emmision" === button.attr("name")) {
        let emmisionNameVal = $(this).text();
        if (emmisionNameVal == "BS IV & Earlier") {
          $('.owners-manual-bottom-wrap .product-img-wrap').addClass('d-none');
          $('#manual-section-mobile .content-wrap-top img').addClass('d-none');
        }
        else {
          $('.owners-manual-bottom-wrap .product-img-wrap').removeClass('d-none');
          $('#manual-section-mobile .content-wrap-top img').removeClass('d-none');
        }
        let categoryNameVal = $('[name="categoryNameVal"]').val()
        $('[name="emmisionsNameVal"]').val($(this).text());
        $('[name="category"]').prop("disabled", false);
        generateModelDropdown(jsonObj, emmisionNameVal, categoryNameVal);

        $('#manual-search-btn').addClass('btn-disabled');
        if ($('[name="category"]').hasClass('active')) {
          $('[name="category"]').removeClass('active');
          $('[name="category"]').text("Select Your Category");
          $('[name="categoryModelNameVal"]').val('')
        }

        if ($('[name="vehicle-model"]').hasClass('active')) {
          $('[name="vehicle-model"]').prop("disabled", true);
          $('[name="vehicle-model"]').removeClass('active');
          $('[name="vehicle-model"]').text("Select Your Vehicle Model");
          $('[name="vehicleModelNameVal"]').val('')
        }

        if ($('[name="year"]').hasClass('active')) {
          $('[name="year"]').prop("disabled", true);
          $('[name="year"]').removeClass('active');
          $('[name="year"]').text("Select Year");
          $('[name="yearModelNameVal"]').val('')
        }

        if ($('[name="month"]').hasClass('active')) {
          $('[name="month"]').prop("disabled", true);
          $('[name="month"]').removeClass('active');
          $('[name="month"]').text("Select Month");
          $('[name="monthNameVal"]').val('')
        }
      }
      else if ("category" == button.attr("name")) {
        let categoryNameVal = $(this).text();
        $('[name="categoryNameVal"]').val(categoryNameVal);
        $("#model-dropdown").empty();
        let emmisionNameVal = $('[name="emmisionsNameVal"]').val();
        $('[name="vehicle-model"]').prop("disabled", false);
        generateModelDropdown(jsonObj, emmisionNameVal, categoryNameVal);

        $('#manual-search-btn').addClass('btn-disabled');
        if ($('[name="vehicle-model"]').hasClass('active')) {
          $('[name="vehicle-model"]').removeClass('active');
          $('[name="vehicle-model"]').text("Select Your Vehicle Model");
          $('[name="vehicleModelNameVal"]').val('')
        }

        if ($('[name="year"]').hasClass('active')) {
          $('[name="year"]').prop("disabled", true);
          $('[name="year"]').removeClass('active');
          $('[name="year"]').text("Select Year");
          $('[name="yearModelNameVal"]').val('')
        }

        if ($('[name="month"]').hasClass('active')) {
          $('[name="month"]').prop("disabled", true);
          $('[name="month"]').removeClass('active');
          $('[name="month"]').text("Select Month");
          $('[name="monthNameVal"]').val('')
        }

      }
      else if ("vehicle-model" == button.attr("name")) {
        let vehicleNameVal = $(this).text();
        $('[name="vehicleModelNameVal"]').val(vehicleNameVal);
        $('[name="year"]').prop("disabled", false);
        generateYearDropdown(jsonObj, vehicleNameVal);
      }
      else if ("year" == button.attr("name")) {
        let yearNameVal = $(this).text();
        let vehicleModelNameVal = $('[name="vehicleModelNameVal"]').val();
        $('[name="yearModelNameVal"]').val(yearNameVal);
        $('[name="month"]').prop("disabled", false);
        generateMonthDropdown(jsonObj, yearNameVal, vehicleModelNameVal);
      }
      else if ("month" == button.attr("name")) {
        let monthVal = $(this).text();
        $('[name="monthNameVal"]').val(monthVal);
        $('#manual-search-btn').removeClass("btn-disabled")
      }
    })

  function getData() {
    let jsonData = $('#owners-manual').data('ownersmanual');
    if (typeof jsonData != "object") {
      jsonObj = $.parseJSON(jsonData);
    } else {
      jsonObj = jsonData
    }

    // Generate emmissions dropdown
    let uniqueStatus = [...new Set(jsonObj.map(item => item.Model_Status))];
    generateDropDown(uniqueStatus, 'emission-dropdown');

    // Generate categories dropdown
    let uniqueCategories = [...new Set(jsonObj.map(item => item.Category))];
    generateDropDown(uniqueCategories, 'category-dropdown');

  }

  function generateDropDown(uniqueValues, dropdownId, selectedValue = null) {
    let listItems = uniqueValues.map(value => {
      let activeClass = selectedValue && value == selectedValue ? "active" : "";
      return '<li class="font-montserrat-regular font-weight-500 ' + activeClass + '"><a href="javascript:void(0)">' + value + '</a></li>';
    });
    $('#' + dropdownId).html(listItems.join(''));
  }

  function generateModelDropdown(jsonObj, emmisionNameVal, selectedCategory) {
    if (emmisionNameVal && selectedCategory) {
      let filteredModels = jsonObj.filter(item => item.Model_Status === emmisionNameVal && item.Category === selectedCategory);
      let uniqueModels = [...new Set(filteredModels.map(item => item.Model_Name))];
      generateDropDown(uniqueModels, 'vehicle-dropdown');
    }
  }

  function generateYearDropdown(jsonObj, selectedModel) {
    if (selectedModel) {
      let selectedEmission = $('[name="emmisionsNameVal"]').val();
      let filteredYears = jsonObj.filter(item => item.Model_Name === selectedModel && item.Model_Status === selectedEmission);
      let uniqueYears = [...new Set(filteredYears.map(item => item.Year))];
      let sortedYears = uniqueYears.sort().reverse();
      generateDropDown(sortedYears, 'year-dropdown');
    }
    $('#year-dropdown li:first-child').trigger('click');
  }

  function generateMonthDropdown(jsonObj, yearNameVal, vehicleModelNameVal) {
    if (yearNameVal && vehicleModelNameVal) {
      let filteredData = jsonObj.filter(item => item.Year === yearNameVal && item.Model_Name === vehicleModelNameVal);
      let uniqueMonths = [...new Set(filteredData.map(item => item.Month))];
      generateDropDown(uniqueMonths, 'month-dropdown');
    }
    $('#month-dropdown li:first-child').trigger('click');
  }

  $("#manual-search-btn").on("click", function (event) {
    if (!$('.owners-manual-bottom-wrap').is(':visible')) {
      $('.owners-manual-bottom-wrap').removeClass('d-none');
    }
    event.preventDefault();
    let selectedCategory = $('[name="categoryNameVal"]').val();
    let selectedEmission = $('[name="emmisionsNameVal"]').val();
    let selectedVehicleModel = $('[name="vehicleModelNameVal"]').val();
    let selectedYear = $('[name="yearModelNameVal"]').val();
    let selectedMonth = $('[name="monthNameVal"]').val();

    let filteredData = jsonObj.filter(
      (item) =>
        item.Category === selectedCategory &&
        item.Model_Status === selectedEmission &&
        item.Model_Name === selectedVehicleModel &&
        item.Year === selectedYear &&
        item.Month === selectedMonth
    );

    if (filteredData.length > 0) {
      let modelCategory = filteredData[0]["Model Category"];
      let englishVersion = filteredData[0]["English_Version"];
      let hindiVersion = filteredData[0]["Hindi_Version"];
      $('#manual-section-desktop .content--details h6').text(modelCategory);
      $('#manual-section-mobile .product--details-mob h6').text(modelCategory);
      filteredData[0]["Model_Image"] &&  $('#manual-section-desktop .product-img-wrap img').attr('src', `${ownerManualFolderImages}/${filteredData[0]["Model_Image"]}`)
      filteredData[0]["Model_Image"] &&  $('#manual-section-mobile .content-wrap-top img').attr('src', `${ownerManualFolderImages}/${filteredData[0]["Model_Image"]}`)
      $('#manual-section-desktop .download-tile').show();
      $('#manual-section-mobile .download-tile-mob').show();
      if (englishVersion == 'Not_Applicable' || englishVersion == 'To_be_shared_soon') {
        $('#manual-section-desktop .download-tile').eq(0).hide();
        $('#manual-section-desktop .download-tile').eq(0).find('a').attr('href', ownerManualFolder + '/' + hindiVersion);
        $('#manual-section-mobile .download-tile-mob').eq(0).hide();
        $('#manual-section-mobile .download-tile-mob').eq(0).find('a').attr('href', ownerManualFolder + '/' + hindiVersion)
      }
      else if (hindiVersion == 'Not_Applicable' || hindiVersion == 'To_be_shared_soon') {
        $('#manual-section-desktop .download-tile').eq(1).hide();
        $('#manual-section-desktop .download-tile').eq(0).find('a').attr('href', ownerManualFolder + '/' + englishVersion)
        $('#manual-section-mobile .download-tile-mob').eq(1).hide();
        $('#manual-section-mobile .download-tile-mob').eq(0).find('a').attr('href', ownerManualFolder + '/' + englishVersion)
      }
      else {
        $('#manual-section-desktop .download-tile').eq(0).find('a').attr('href', ownerManualFolder + '/' + englishVersion);
        $('#manual-section-desktop .download-tile').eq(1).find('a').attr('href', ownerManualFolder + '/' + hindiVersion);
        $('#manual-section-mobile .download-tile-mob').eq(0).find('a').attr('href', ownerManualFolder + '/' + englishVersion);
        $('#manual-section-mobile .download-tile-mob').eq(1).find('a').attr('href', ownerManualFolder + '/' + hindiVersion);
      }
    } else {
      $('.owners-manual-bottom-wrap').addClass('d-none');
    }
  });

  if ($('#owners-manual').length > 0) {
    getData();
  }
})

$(document).ready(function () {
    var today = new Date().toISOString().split('T')[0];
    //$('input[type="date"]').attr('min', today);

    // Modal 
    $('a[data-target="#serviceEnroll"]').click(function (e) {
        e.preventDefault();
        $('#serviceEnroll').modal('show');
    });

    // Tab Functionality
    let tabs = $('#service-form .two-tab-wrap .service-form-tab');
    tabs.click(function () {
        tabs.removeClass('tab-active');
        $(this).addClass('tab-active');
        let clickIndex = $(this).index();
        $('#service-form  .input-form-wrap').addClass('d-none').eq(clickIndex).removeClass('d-none');
    });
    tabs.first().click();

    // Submenu Clicks
    $("#service-form  .cust-dropdown-menu").on("click", "li", function () {
        let selectionGroup = $(this).parents(".cust-drop-down");
        let button = selectionGroup.find(".dropdown-select");
        button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
        button.addClass("btn--active");
        let form = $(this).closest("form");
        selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
        $(this).addClass("active");

        if ("enrollmentname" == button.attr("name")) {
            form.find('[name="enrollmentNameVal"]').val($(this).attr("value"));
            let value = $(this).attr("value").replace(/[^a-zA-Z0-9]+/g, '').trim().toLowerCase();
            $('[name="ttcenterNameVal"]').val('');
            $('.input-form-wrap').each(function (i, obj) {
                if (!$(obj).hasClass('d-none')) {
                    $(this).find('#ttcenter-type').prop("disabled", false);
                    $(this).find('#ttcenter-type').removeClass('btn--active');
                    $(this).find('#ttcenter-type').text("Select Training Centre");
                    if (value == "ridesafeprogram") {
                        $(this).find('#drive-check').removeClass('d-none');
                        $(this).find('#license-check').removeClass('d-none');
                        $(this).find('ul[aria-labelledby="ttcenterDropdown"] li').removeClass('d-none');
                    }
                    else if (value == "ridesafeawarenessprogram") {
                        $(this).find('#drive-check').addClass('d-none');
                        $(this).find('#license-check').addClass('d-none');
                        $(this).find('ul[aria-labelledby="ttcenterDropdown"] li').removeClass('d-none');
                    }
                    else if (value == "learntoride") {
                        $(this).find('#drive-check').addClass('d-none');
                        $(this).find('#license-check').removeClass('d-none');
                        $(this).find('ul[aria-labelledby="ttcenterDropdown"] li').addClass('d-none');
                        $(this).find('ul[aria-labelledby="ttcenterDropdown"] li.show-on-condition').removeClass('d-none')
                    }
                }
            });
        }
        else if ("ttcenter" == button.attr("name")) {
            form.find('[name="ttcenterNameVal"]').val($(this).attr("value"));
        }
    })

    // Checkboxes
    $('input[name="drive-radio"]').change(function () {
        var checkedValue = $('input[name="drive-radio"]:checked').val();
        $('input[name="hiddenDriveValue"]').val(checkedValue);
    });

    $('input[name="license-radio"]').change(function () {
        var checkedValue = $('input[name="license-radio"]:checked').val();
        $('input[name="hiddenLicenseValue"]').val(checkedValue);
    });

    $('input[name="drive-radio--group"]').change(function () {
        let checkedValueGroup = $('input[name="drive-radio--group"]:checked').val();
        $('input[name="hiddenDriveValue"]').val(checkedValueGroup);
    });

    $('input[name="license-radio--group"]').change(function () {
        let checkedValueGroup = $('input[name="license-radio--group"]:checked').val();
        $('input[name="hiddenLicenseValue"]').val(checkedValueGroup);
    });

    // Validations
    function serviceFormValidations($form) {

        // Validators
        jQuery.validator.addMethod("numbersOnly", function (value) {
            return /^[0-9]+$/i.test(value);
        });
        jQuery.validator.addMethod("validNumber", function (value) {
            const disallowedNumbers = [
                "0123456789",
                "1111111111",
                "2222222222",
                "3333333333",
                "4444444444",
                "5555555555",
                "6666666666",
                "7777777777",
                "8888888888",
                "9999999999",
                "0000000000",
                "1234567890",
                "1010101010",
                "2020202020",
                "3030303030",
                "4040404040",
                "5050505050",
            ];
            if (disallowedNumbers.indexOf(value) !== -1) {
                return false;
            }
            if (value.length < 10) {
                return false;
            } else {
                return true;
            }
        });
        jQuery.validator.addMethod("indianNumber", function (value) {
            return /^[6789]\d{9}$/i.test(value);
        });
        jQuery.validator.addMethod("charactersOnly", function (value) {
            return /^[a-zA-Z&\s]+$/i.test(value);
        });
        jQuery.validator.addMethod("emailOnly", function (value) {
            return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
        });
        jQuery.validator.addMethod("onlyFutureDates", function (value) {
            let pickedDate = Date.parse(value.replace(/-/g, " "));
            let todaysDate = new Date();
            return !(pickedDate <= todaysDate);
        });
        jQuery.validator.addMethod("know2ride", function (value) {
            let driveValueParent = $("input[name='hiddenDriveValue']").parent();
            let licenseValueParent = $("input[name='hiddenLicenseValue']").parent();

            if (!driveValueParent.hasClass('d-none') && !licenseValueParent.hasClass('d-none')) {
                let driveValue = $("input[name='hiddenDriveValue']").val();
                let licenseValue = $("input[name='hiddenLicenseValue']").val();

                if (driveValue === 'no' && licenseValue === 'yes') {
                    return false;
                }
            } else if (driveValueParent.hasClass('d-none') && licenseValueParent.hasClass('d-none')) {
                return true; 
            }

            return true;
        });
        jQuery.validator.addMethod("gotLic", function (value) {
            let driveValueParent = $("input[name='hiddenDriveValue']").parent();
            let licenseValueParent = $("input[name='hiddenLicenseValue']").parent();
            let driveValue = $("input[name='hiddenDriveValue']").val();
            let licenseValue = $("input[name='hiddenLicenseValue']").val();

            if (driveValueParent.hasClass('d-none') && licenseValueParent.hasClass('d-none')) {
                return true;
            }

            if ((driveValue === 'yes' && licenseValue === 'no') || licenseValue === 'no') {
                return false;
            }

            return true;
        });
        jQuery.validator.addMethod("notZero", function (value) {

            return parseInt(value) > 0;
        });

        $form.validate({
            ignore: [],
            rules: {
                fullname: {
                    required: true,
                    charactersOnly: true,
                },
                mobileno: {
                    required: true,
                    numbersOnly: true,
                    validNumber: true,
                    indianNumber: true,
                },
                email: {
                    required: true,
                    emailOnly: true
                },
                hiddenDriveValue: {
                    required: true,
                },
                hiddenLicenseValue: {
                    required: true,
                    gotLic: true,
                    know2ride: true
                },
                dateEnroll: {
                    required: true,
                    min: false,
                },
                ttcenterNameVal: {
                    required: true,
                },
                organisationfullname: {
                    required: true
                },
                participantsNo: {
                    notZero: true,
                    required: true,
                },
                contactpersonname: {
                    required: true
                }
            },
            messages: {
                fullname: {
                    charactersOnly: $('[name="fullname"]').data("validation-msg-format"),
                    required: $('[name="fullname"]').data("validation-msg-req")
                },
                mobileno: {
                    required: $('[name="mobileno"]').data("validation-msg-req"),
                    numbersOnly: "Please enter numbers only",
                    validNumber: "Please enter a valid number",
                    indianNumber: "Please enter a valid number"
                },
                email: {
                    required: $('[name="email"]').data("validation-msg-req"),
                    emailOnly: $('[name="email"]').data("validation-msg-format")
                },
                enrollmentNameVal: {
                    required: $('[name="enrollmentNameVal"]').data("validation-msg-req"),
                },
                hiddenDriveValue: {
                    required: $('[name="hiddenDriveValue"]').data("validation-msg-req")
                },
                hiddenLicenseValue: {
                    required: $('[name="hiddenLicenseValue"]').data("validation-msg-req"),
                    know2ride: $('[name="hiddenLicenseValue"]').data("condition-msg"),
                    gotLic: $('[name="hiddenLicenseValue"]').data("condition2-msg"),
                },
                dateEnroll: {
                    required: $('[name="dateEnroll"]').data("validation-msg-req"),
                },
                organisationfullname: {
                    required: $('[name="organisationfullname"]').data("validation-msg-req")
                },
                participantsNo: {
                    notZero: $('[name="participantsNo"]').data("condition-msg"),
                    required: $('[name="participantsNo"]').data("validation-msg-req"),
                },
                ttcenterNameVal: {
                    required: $('[name="ttcenterNameVal"]').data("validation-msg-req")
                },
                contactpersonname: {
                    required: $('[name="contactpersonname"]').data("validation-msg-req"),
                }
            }
        })
    }

    if ($("#service-form").length > 0) {
        serviceFormValidations($(".service-enrollment-form"));
        serviceFormValidations($(".service-enrollment-form--group"));
    }

    async function serviceFormSubmit(currentForm) {
        var serviceEnrollObj = {
            enrolltype: currentForm.attr('id') == "individual" ? "Individual" : "Group",
            fullname: currentForm.find('input[name="' + (currentForm.attr('id') == "individual" ? "fullname" : "contactpersonname") + '"]').val(),
            mobileno: currentForm.find('input[name="mobileno"]').val(),
            email: currentForm.find('input[name="email"]').val(),
            enrollmentNameVal: currentForm.find('input[name="enrollmentNameVal"]').val(),
            dateEnroll: currentForm.find('input[name="dateEnroll"]').val(),
            ttcenterNameVal: currentForm.find('input[name="ttcenterNameVal"]').val(),
            driveRadio: currentForm.find('#drive-check').hasClass("d-none") ? null : "yes",
            licenseRadio: currentForm.find('#license-check').hasClass("d-none") ? null : "yes",
            organisationfullname: currentForm.find('input[name="organisationfullname"]').val() || "",
            participantsNo: currentForm.find('input[name="participantsNo"]').val() || ""
        };
        console.log("serviceObj", serviceEnrollObj);

        // API Integration

        let safetyProgramURL = $("#service-form").attr("data-component-relativePath");
        var safetyProgramPath = safetyProgramURL.replace(
            "jcr:content",
            "_jcr_content"
        );
        $.ajax({
            url: safetyProgramPath,
            type: "POST",
            data: JSON.stringify(serviceEnrollObj),
            dataType: "json",
            contentType: "application/json",
            success: function (resp) {
                $('.thank-you-success').removeClass('d-none');
                $('.service-form-wrap').css('z-index', "-1");
            },
            error: function (error) { },
        });
    }



    $('#service-form input[name="submit"]').click(function () {
        $('input[type="date"]').removeClass('error');
        let closestForm = $(this).parent().siblings("form");

        if ($("input[name='hiddenDriveValue']", closestForm).parent().hasClass('d-none')) {
            closestForm.find("input[name='hiddenDriveValue']").rules("remove", "required");
        }
        if ($("input[name='hiddenLicenseValue']", closestForm).parent().hasClass('d-none')) {
            closestForm.find("input[name='hiddenLicenseValue']").rules("remove", "required");
        }

        if (closestForm.valid()) {
            serviceFormSubmit(closestForm);
            let formerrorList = closestForm.data("validator").errorList;
            let fieldlist = "";
            $.each(formerrorList, function (key, value) {
                if ("" !== fieldlist) {
                    fieldlist = fieldlist + "|";
                }
                fieldlist = fieldlist + formerrorList[key].element.name;
            });
        }
    });

    $('#serviceEnroll, #serviceEnroll .close').click(function(){
        if ($('#serviceEnroll').hasClass("show")) {
            $('.thank-you-success').addClass('d-none');
            $('.service-form-wrap').css('z-index', "1");
        }
    });
})
$(document).ready(function () {
  let jsonObj = {};
  let accessoriesImageFolder = $("#accessories").data("accessoriesimages");
  const bikeImagePath = $("#accessories").data("accessoriesimagepath");
  let randomNo = `_${Math.floor(100000 + Math.random() * 900000)}`;
  if ($("#accessories").length > 0) {
    getData();
  }
  function getData() {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let base_url = defaultservlet + "/_jcr_content.accessories.json";
    $.ajax({
      url: base_url,
      type: "GET",
      data: { accessoriesPath: accessoriesImageFolder, random: randomNo },
      success: function (resp) {
        jsonObj = resp;
        if (typeof jsonObj != "object") {
          jsonObj = $.parseJSON(jsonObj);
        }
        let bikeType = [...new Set(jsonObj.map((item) => item.type))];
        let modBikeType = bikeType.filter(
          (item) =>
            !["all models", "all scooters", "all bikes", ""].includes(
              item.toLowerCase()
            )
        );
        generateDropDown(modBikeType, "bike-type-dropdown");
      },
      error: function () {},
    });
  }

  function generateDropDown(uniqueValues, dropdownId, selectedValue = null) {
    let listItems = uniqueValues.map((value) => {
      let activeClass = selectedValue && value == selectedValue ? "active" : "";
      return (
        '<li class="font-montserrat-regular font-weight-500 ' +
        activeClass +
        '"><a href="javascript:void(0)">' +
        value +
        "</a></li>"
      );
    });
    $("#" + dropdownId).html(listItems.join(""));
  }

  function generateModelDropdown(jsonObj, bikeType) {
    const allModelsType = bikeType == "BIKE" ? "all bikes" : "all scooters";
    if (bikeType) {
      $(".accessorie-items").addClass("d-none");
      let filteredModels = jsonObj.filter(
        (item) =>
          item.type === bikeType || item.type.toLowerCase() == allModelsType
      );
      let uniqueModels = [...new Set(filteredModels.map((item) => item.model))];
      let arrModels = [];
      for (let i = 0; i < uniqueModels.length; i++) {
        let a = uniqueModels[i].split(",");
        for (let j = 0; j < a.length; j++) {
          let finalModel = a[j].trim();
          arrModels.push(finalModel);
        }
      }
      //let modarrModels = arrModels.filter(item=>!['HF 100','HF DELUX'].includes(item));
      //arrModels = [...new Set(arrModels)]
      let uniqueArray = arrModels.filter(
        (item) =>
          ![
            "all bike model",
            "all models",
            "all scooters",
            "all bike models",
            "all scooter model",
          ].includes(item.toLowerCase())
      );
      const uniqueValues = uniqueArray.filter((item, index, arr) => {
        const lowercaseItem = item.toLowerCase();
        return (
          index === arr.findIndex((val) => val.toLowerCase() === lowercaseItem)
        );
      });
      generateDropDown(uniqueValues, "model-dropdown");
    }
  }

  function generateCategoryDropdown(jsonObj, bikeType, modelType) {
    if (bikeType && modelType) {
      $(".accessorie-items").addClass("d-none");
      let allModelType =
        bikeType.toLowerCase() == "bike" ? "all bike model" : "all scooters";
      let filteredModels = jsonObj.filter(
        (item) =>
          (item.type === bikeType && item.model === modelType) ||
          item.model.includes(modelType) ||
          item.model.toLowerCase() == allModelType ||
          item.type.toLowerCase() == "all models" ||
          item.model.toLowerCase() == "all bike models"
      );
      let uniqueModels = [
        ...new Set(filteredModels.map((item) => item.category)),
      ];
      const uniqueValues = uniqueModels.filter((item, index, arr) => {
        const lowercaseItem = item.toLowerCase();
        return (
          index === arr.findIndex((val) => val.toLowerCase() === lowercaseItem)
        );
      });
      generateDropDown(uniqueValues, "category-dropdown");
    }
  }

  $("#accessories--form-wrap .dropdown-menu").on("click", "li", function () {
    let selectionGroup = $(this).parents(".cust-drop-down");
    let button = selectionGroup.find(".dropdown-select");
    button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
    selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
    $(this).parents("ul").siblings(".btn-drop").addClass("active");
    $(this).addClass("active");
    if ("bike" === button.attr("name").toLowerCase()) {
      let bikeType = $(this).text();
      $('[name="bikeType"]').val($(this).text());
      // if (bikeType.toLowerCase() == 'bike') {
      //   $('.accessorie-items').removeClass('d-none');
      // } else {
      //   $('.accessorie-items').addClass('d-none');
      // }
      if ($('[name="model"]').hasClass("active")) {
        $('[name="model"]').removeClass("active");
        $('[name="model"]').text("Select Model");
      }
      if ($('[name="category"]').hasClass("active")) {
        $('[name="category"]').removeClass("active");
        $('[name="category"]').text("Select Category");
      }
      generateModelDropdown(jsonObj, bikeType);
      $('[name="model"]').prop("disabled", false);
      $('[name="category"]').prop("disabled", true);
    } else if ("model" === button.attr("name")) {
      modelType = $(this).text();
      $('[name="modelNameVal"]').val($(this).text());
      bikeType = $('[name="bikeType"]').val();
      if ($('[name="category"]').hasClass("active")) {
        $('[name="category"]').removeClass("active");
        $('[name="category"]').text("Select Category");
      }
      generateCategoryDropdown(jsonObj, bikeType, modelType);
      $('[name="category"]').prop("disabled", false);
    } else if ("category" === button.attr("name")) {
      generateBikeImage(jsonObj, modelType, bikeType);
    }
  });

  function generateBikeImage(jsonObj, bikeModel, bikeType) {
    const buttonTag = document.querySelector('button[name="category"]');
    const buttonValue = buttonTag.textContent.toLowerCase();

    let allModelType =
      bikeType.toLowerCase() == "bike" ? "all bike model" : "all scooters";
    const bikeImagepath =
      bikeImagePath +
      "/" +
      bikeModel.replaceAll(" ", "").toLowerCase() +
      ".jpg";
    $(".accessorie-items").empty();
    let bikeModels = jsonObj.filter(
      (item) =>
        item.category.toLowerCase() == buttonValue &&
        (item.model === bikeModel ||
          item.model.includes(bikeModel) ||
          item.model.toLowerCase() == allModelType ||
          item.type.toLowerCase() == "all models" ||
          item.model.toLowerCase() == "all bike models")
    );
    let bikeImage = [...new Set(bikeModels.map((item) => item.images))];
    $(".accessorie-items").removeClass("d-none");
    $("#accessories-bike-image").empty();
    if (bikeModels.length > 0) {
      for (let i = 0; i < bikeModels.length; i++) {
        $(".accessorie-items").prepend(
          '<div class="accessories-image-wrapper"><a href="' +
            bikeModels[i].eshop +
            '"><img id="theImg" class="accessorie-img" src="' +
            accessoriesImageFolder +
            "/" +
            bikeModels[i].images +
            '" /><p class="b1-text-std text-center">' +
            bikeModels[i].description +
            "</p></div>"
        );
      }
    }
    $("#accessories-bike-image").append(
      '<img class="bike-image" src="' + bikeImagepath + '"/>'
    );
  }
});

$(document).ready(function () {
    let termsTitle = $("#termsTitle").val();
    let privacyTitle = $("#privacyTitle").val();
    let privacyHeading = $("#privacyHeading").val();
    let termsHeading = $("#termsHeading").val()
    let termsLogoimage = $("#termsLogoimage").val()
    let privacyLogoimage = $("#privacyLogoimage").val()
    let mobileData;
    let mobileNumberValidationMsg = $("#mobileNumberValidationMsg").val();
    let isMobileFormSubmitted = false;
    $("#dse-tab-button1").click(function (e) {
        let mobileNo = $('#dse-mobile-value').val();
        if(!mobilePatternValidate(mobileNo)){
            $('#dse-mobile-error').removeClass("d-none");
            $('#dse-mobile-error').html(mobileNumberValidationMsg);
            return;
        }
        mobileData = mobileNo;
        $('#dse-mobile-error').addClass("d-none");
        $('#dse-tab-button1').addClass("d-none");
        $('#dse-tab-button2').removeClass("d-none");
        $('#dse-tab-button3').addClass("d-none");
        $('#dse-tab-title').html(termsTitle);
        $('#dse-app-title').html(termsHeading);
        $('#dse-logo-img').html(termsLogoimage);
        $('#dse-tab-pill1').removeClass("active");
        $('#dse-tab-pill2').addClass("active");
        $('#dse-tab-pill3').removeClass("active");
        $('#dse-tab-content1').addClass("d-none");
        $('#dse-tab-content2').removeClass("d-none");
        $('#dse-tab-content3').addClass("d-none");
        $('.tab-footer-text').addClass("d-none");
        AddScrollForTabContent();
        
    });
    $("#dse-tab-button2").click(function (e) {
        $('#dse-tab-button1').addClass("d-none");
        $('#dse-tab-button3').removeClass("d-none");
        $('#dse-tab-button2').addClass("d-none");
        $('#dse-tab-title').html(privacyTitle);
        $('#dse-app-title').html(privacyHeading);
        $('#dse-logo-img').html(privacyLogoimage);
        $('#dse-tab-pill1').removeClass("active");
        $('#dse-tab-pill2').removeClass("active");
        $('#dse-tab-pill3').addClass("active");
        $('#dse-tab-content1').addClass("d-none");
        $('#dse-tab-content2').addClass("d-none");
        $('#dse-tab-content3').removeClass("d-none");
        $('.tab-footer-text').addClass("d-none");
        AddScrollForTabContent();
        $('#dse-consent-form .tab-content').animate({ scrollTop: 0 }, 0);
    });
    $("#dse-tab-button3").click(function (e) {
        const device_details = getOS();
        let dataObj ={
            "data": {
                        "mobile": mobileData,
                        "source": "Walk in RFM",
                        "hmcl_lead_id": "",
                        "hmcl_enquiry_id": "",
                        "device_id": "",
                        "device_details": device_details,
                        "otp_verified": "Yes",
                        "finance_name": "",
                        "tnc": "Yes",
                        "sharing_info": "Yes",
                        "free_field_1": "",
                        "free_field_2": ""
                    }
        }
        $.ajax({
            url: $("#defaultservlet").val()+"/_jcr_content.dse-app.html",
            type: "POST",
            data: JSON.stringify(dataObj),
            dataType: "json",
            contentType: "application/json",
            success: function (resp) {
              console.log("success", resp)
              if(resp['success'] == true && resp['data']?.['status']){
                $('#dse-consent-form .dse-tab').addClass("d-none");
                $('#dse-consent-form .dse-tab-success').removeClass("d-none");
                if(resp['data']['status'] == 3 && resp['data']['message'] == 'Limit Reached')
                {
                  $('#dse-success-saved').addClass("d-none");
                  $('#dse-success-limited').removeClass("d-none");
                }
              }
              else{
                $('#dse-consent-form .dse-tab').addClass("d-none");
                $('#dse-consent-form .dse-tab-error').removeClass("d-none");
              }
            },
            error: function (error) {
              console.log("error: ", error);
              $('#dse-consent-form .dse-tab').addClass("d-none");
              $('#dse-consent-form .dse-tab-error').removeClass("d-none");
            },
          });
        
    });
    $("#dse-condition-scroll").click(function (e) {
        let height = $('#dse-consent-form .tab-content')[0].scrollHeight;
        $('#dse-consent-form .tab-content').animate({ scrollTop: height }, 1000);
    });

    $('#dse-consent-form .tab-content').scroll(function (e) {
        let height = $('#dse-consent-form .tab-content')[0].scrollHeight;
        let currentHeight = $('#dse-consent-form .tab-content').scrollTop() + $('#dse-consent-form .tab-content').height();
        let calHeight = height - currentHeight;
        //scroll reaching end
        if(calHeight < 1){
            $("#dse-consent-form .tab-scroll").addClass('d-none');
            $("#dse-consent-form .button-block").removeClass('d-none');
        }
        else{
            $("#dse-consent-form .tab-scroll").removeClass('d-none');
            $("#dse-consent-form .button-block").addClass('d-none');
        }
            
    });

    function AddScrollForTabContent(){
        if($("#dse-consent-form .tab-content")[0].scrollHeight > $("#dse-consent-form .tab-content")[0].clientHeight){
            $("#dse-consent-form .tab-scroll").removeClass('d-none');
            $("#dse-consent-form .button-block").addClass('d-none');
            let navHt = $("#dse-consent-form .navbar").outerHeight(true);
            let headerHt = $("#dse-consent-form .tab-header").outerHeight(true);
            let footerHt = $("#dse-consent-form .tab-footer").outerHeight(true);
            let totalHt = $("#dse-consent-form .dse-tab").outerHeight(true);
            let contentHt = totalHt - (navHt+headerHt+footerHt);
            $("#dse-consent-form .tab-content").css('max-height', contentHt+'px')
        }
        else{
            $("#dse-consent-form .tab-scroll").addClass('d-none');
            $("#dse-consent-form .button-block").removeClass('d-none');
        }
    }
    function mobilePatternValidate(value) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      }
});
function onMobileChange(value){
    value = value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    $('#dse-mobile-value').val(value);
    if(value == '')
        $('#dse-tab-button1').prop("disabled", true);
    else
        $('#dse-tab-button1').prop("disabled", false);
    //"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');"
}
function getOS() {
    var userAgent = window.navigator.userAgent,
      platform =
        window.navigator?.userAgentData?.platform ||
        window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }

$(document).ready(function () {
  $(".premia-horizonal-accordion .bike").first().addClass("active");
  $(".premia-horizonal-accordion .bike").on("mouseenter", function () {
    if ($(window).width() > 768) {
      $(this).addClass("active").siblings().removeClass("active");
    }
  });
});

$(document).ready(function () {
  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;

    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }

    return os;
  }
  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }

  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }

  $(".premia-horizonal-accordion .explore-cta").click(function () {
    let ctaLocation = ''
    if($(this).attr('href').includes('KarizmaXMR')){
        ctaLocation = 'Karizma category-dropdown'
    }
    if($(this).attr('href').includes('x440')){
        ctaLocation = 'Harley category-dropdown'
    }
    if (window.digitalData) {
      window.digitalData.push({
        event: "linkClicked",
        web: {
          webInteraction: {
            name: $(this).text() || "",
            URL: $(this).attr("href") || "NA",
            position: ctaLocation || "",
          },
        },
        productDetails:{
          productName : "NA",
          variant: "NA", // selected variant
          colour: "NA", // selected color
          dealer: "NA", // selected dealer name
        },
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  });
});

$(document).ready(function () {
  if ($("#price-promise").length > 0) {
    let csvPath = $("#price-promise").data("csvpath");
    if (window.location.hash) {
      $(".pp-bookservice-btn").addClass("d-none");
      $(".termscondition").addClass("d-none");
    }
    $('[data-toggle="tooltip"]').tooltip();
    var customers = new Array();
    let defaultservlet = document.getElementById("defaultservlet").value;
    $(".accordion--title").click(function (e) {
      let dropDown = $(this)
        .closest(".accordion-card")
        .find(".accordion--panel");
      $(this)
        .closest(".pp-parts-accordion")
        .find(".accordion--panel")
        .not(dropDown)
        .slideUp();
      if ($(this).hasClass("active")) {
        $(this).removeClass("active");
      } else {
        $(this)
          .closest(".pp-parts-accordion")
          .find(".accordion--title.active")
          .removeClass("active");
        $(this).addClass("active");
      }
      dropDown.stop(false, true).slideToggle();
      // e.preventDefault();
    });
    let sum = 0;
    let form = $("#pp--form-wrap");
    let statelist = form
      .find('[name="statename"]')
      .parents(".cust-drop-down")
      .find(".cust-dropdown-menu ");
    populateDropdown(
      defaultservlet + ".statelist.html",
      statelist,
      "state",
      window && window.locations ? locations.State : null,
      false
    );

    function populateDropdown(url, selector, keyword, selectedVal) {
      if (url && selector[0] !== undefined) {
        fetch(url)
          .then(function (response) {
            if (!response.ok) {
              // make the promise be rejected if we didn't get a 2xx response
              throw new Error("Not 2xx response", { cause: response });
            } else {
              return response.text();
            }
          })
          .then(function (html) {
            selector[0].innerHTML = html;
            let form = $(selector).closest("form");
            if (keyword == "state") {
              //sort in ascending order
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="statename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let state;
              let abbrState = form
                .find('[name="statename"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  state = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrState = selectedVal;
                  form.find('[name="stateNameVal"]').val(selectedVal);
                }
              }
              form.find('[name="statename"]').text(abbrState);
              let cityField = form.find('[name="cityname"]');
              let cityValue =
                null != (window && window.locations) ? locations.City : "";
              if (
                cityField.text().trim() !== cityField.attr("data-default-label")
              ) {
                cityValue = cityField.text().trim();
              }
              let citylist = cityField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu ");
              if (state) {
                cityField[0].disabled = false;
                populateDropdown(
                  url.substr(0, url.indexOf(".")) +
                    ".citylist." +
                    state +
                    ".html",
                  citylist,
                  "city",
                  cityValue
                );
              } else {
                cityField[0].disabled = true;
                cityField.text(
                  form.find('[name="cityname"]').attr("data-default-label")
                );
                let dealerField = form.find('[name="dealername"]');
                $(".address-input").addClass("d-none");
                dealerField[0].disabled = true;
                dealerField.text(
                  form.find('[name="dealername"]').attr("data-default-label")
                );
                cityField.removeClass("active");
                dealerField.removeClass("active");
              }
            }
            if (keyword == "city") {
              //sort in ascending order
              let cityField = form.find('[name="cityname"]');
              let dealerField = form.find('[name="dealername"]');
              cityField[0].disabled = false;
              cityField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  cityField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let abbrCity;
              let abbrDealer;
              abbrCity = cityField.attr("data-default-label");
              abbrDealer = dealerField.attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  abbrCity = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrCity = selectedVal;
                  form.find('[name="cityNameVal"]').val(selectedVal);
                  abbrDealer = dealerField.text().trim();
                  form
                    .find('[name="dealerNameVal"]')
                    .val(form.find('[name="dealerNameVal"]').val());
                } else {
                  cityField.removeClass("active");
                  $("#pp-search-btn").addClass("btn-disabled");
                }
              }
              cityField.text(abbrCity);
              if (abbrDealer == dealerField.attr("data-default-label")) {
                dealerField[0].disabled = true;
                $(".address-input").addClass("d-none");
                form.find('[name="dealerNameVal"]').val("");
                dealerField.removeClass("active");
              }
              dealerField.text(abbrDealer);
            }
            if (keyword == "dealer") {
              //sort in ascending order
              let dealerField = form.find('[name="dealername"]');
              dealerField[0].disabled = false;
              abbrDealer = dealerField.attr("data-default-label");
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrDealer = selectedVal;
                form
                  .find('[name="dealerNameVal"]')
                  .val(form.find('[name="dealerNameVal"]').val());
              } else {
                form.find('[name="dealerNameVal"]').val("");
                $(".address-input").addClass("d-none");
              }
              dealerField.text(abbrDealer);
            }
          })
          .catch(function (err) {
            console.warn("Something went wrong.", err);
          });
      }
    }
    $("#pp--form-wrap .cust-dropdown-menu").on("click", "li", function () {
      let selector;
      let selectionGroup = $(this).parents(".cust-drop-down");
      var button = selectionGroup.find(".dropdown-select");
      button.addClass("active");
      button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
      var form = $(this).closest("form");
      // selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
      if ("vehiclename" == button.attr("name")) {
        form.find('[name="vehicleModelNameVal"]').val($(this).attr("value"));
      } else if ("statename" == button.attr("name")) {
        let cityField = form.find('[name="cityname"]');
        let dealerField = form.find('[name="dealername"]');
        stateName = $(this).text();
        if (!$(this).hasClass("active")) {
          selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
          $(this).addClass("active");
          cityField.text(cityField.attr("data-default-label"));
          dealerField.text(dealerField.attr("data-default-label"));
          cityField.removeClass("active");
          dealerField.removeClass("active");
          let dropDownSelector = cityField
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu");
          cityField[0].disabled = true;
          dealerField[0].disabled = true;
          selector = "pricepromisecities";
          let dataObj = {
            state: button.text(),
          };
          populateCityDealers(selector, dataObj, dropDownSelector);
          form.find('[name="stateNameVal"]').val(button.text());
          form.find('[name="cityNameVal"]').val("");
          form.find('[name="dealerNameVal"]').val("");
          form.find('[name="dealerNameVal"]').removeAttr("data-vas");
        }
      } else if ("cityname" == button.attr("name")) {
        let dealerName = form.find('[name="dealerNameVal"]');
        let dealerField = form.find('[name="dealername"]');
        if (!$(this).hasClass("active")) {
          selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
          $(this).addClass("active");
          dealerField.removeClass("active");
          dealerField.text(dealerField.attr("data-default-label"));
          let dropDownSelector = dealerName
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          dealerField[0].disabled = true;
          selector = "pricepromisedealers";
          let dataObj = {
            state: form.find('[name="statename"]').text(),
            city: button.text(),
          };
          populateCityDealers(selector, dataObj, dropDownSelector);
          form.find('[name="cityNameVal"]').val(button.text());
          form.find('[name="dealerNameVal"]').val("");
          form.find('[name="dealerNameVal"]').removeAttr("data-vas");
        }
      } else if ("dealername" == button.attr("name")) {
        selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
        $(this).addClass("active");
        form.find('[name="dealerNameVal"]').val($(this).attr("value"));
        form
          .find('[name="dealerNameVal"]')
          .attr("data-vas", $(this).data("service-price"));
      } else if ("nos" == button.attr("name")) {
        let nosVal = $(this).attr("value");
        form.find('[name="nosNameVal"]').val(nosVal);
        form.find('[name="tosNameVal"]').parent().find("li").addClass("d-none");
        form
          .find('[name="tos"]')
          .text(form.find('[name="tos"]').attr("data-default-label"));
        form.find('[name="tosNameVal"]').val("");
        form.find('[name="tos"]').removeClass("active");
        $("#pp-search-btn").addClass("btn-disabled");
        form.find('[name="tos"]').attr("disabled", false);
        if (nosVal == "FSC") {
          form
            .find('[name="tosNameVal"]')
            .parent()
            .find(".Free_Service")
            .removeClass("d-none");
        } else {
          form
            .find('[name="tosNameVal"]')
            .parent()
            .find(".Paid_Service")
            .removeClass("d-none");
        }
      } else if ("tos" == button.attr("name")) {
        form.find('[name="tosNameVal"]').val($(this).attr("value"));
        $("#pp-search-btn").removeClass("btn-disabled");
      }
      let inputField = form.find("input");
      inputField.each(function () {
        let inputVal = $(this).val();
        if (!inputVal) {
          $("#pp-search-btn").addClass("btn-disabled");
          return false;
        } else {
          $("#pp-search-btn").removeClass("btn-disabled");
        }
      });
    });

    function populateCityDealers(selector, dataObj, dropDownSelector) {
      $.ajax({
        url: `${defaultservlet}/_jcr_content.${selector}.json`,
        type: "POST",
        data: JSON.stringify(dataObj),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          let jsonResp = resp;
          if (typeof jsonResp != "object") {
            jsonResp = JSON.parse(resp);
          }
          let uniqueValues;
          if (selector == "pricepromisecities") {
            dropDownSelector
              .closest("form")
              .find('[name="cityname"]')[0].disabled = false;
            uniqueValues =
              jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.getDealerCities.Row;
            generateCityDropDown(dropDownSelector, uniqueValues, "city");
          } else if (selector == "pricepromisedealers") {
            dropDownSelector
              .closest("form")
              .find('[name="dealername"]')[0].disabled = false;
            uniqueValues =
              jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.getDealers.Row;
            generateCityDropDown(dropDownSelector, uniqueValues, "dealer");
          }
        },
        error: function (err) {
          console.log(err);
        },
      });
    }

    function generateCityDropDown(
      dropDownSelector,
      uniqueValues,
      dropdownvalue
    ) {
      let listItems = uniqueValues.map((value) => {
        return `<li class="font-montserrat-regular font-weight-500" value="${
          value["Dealer Code"]
        }" data-service-price="${
          value["service_price_list"]
        }"><a href="javascript:void(0)">${
          dropdownvalue == "city" ? value["city"] : value["Dealer Name"]
        }</a></li>`;
      });
      dropDownSelector.html(listItems.join(""));
    }
    $.ajax({
      url: csvPath,
      type: "GET",
      success: function (resp) {
        var rows = resp.split("\n");
        for (var i = 0; i < rows.length; i++) {
          var cells = rows[i].split(",");
          if (cells.length > 1) {
            var customer = {};
            customer.Model = cells[0];
            customer.VAS = cells[1];
            customer.Dealer = cells[2];
            customer.Price = cells[3];
            customers.push(customer);
          }
        }
      },
    });
    $("#pp-search-btn").on("click", function () {
      $(".pp-description-text-bikename").text(
        $("#price-promise [name='vehiclename']").text()
      );
      let dataObj = {
        dealerCode: $("#price-promise #dealer").val(),
        serviceNature: $("#price-promise [name='nosNameVal']").val(),
        serviceType: $("#price-promise [name='tosNameVal']").val(),
        model: $("#price-promise [name='vehicleModelNameVal']").val(),
      };
      $.ajax({
        url: defaultservlet + "/_jcr_content.pricepromiseparts.json",
        type: "POST",
        data: JSON.stringify(dataObj),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          $(".pp-total-amount-summary").addClass("d-none");
          let jsonResp = resp;
          if (typeof jsonResp != "object") {
            jsonResp = JSON.parse(resp);
          }
          let sparParts =
            jsonResp.PWSESSIONRS[0].PWPROCESSRS.PWDATA.get_pmp_parts.Row;
          let natureOfService = $("#price-promise [name='nosNameVal']").val();
          if (natureOfService == "FSC") {
            sparParts = sparParts.filter(
              (ele) => !(ele.job_code == "202001" && natureOfService == "FSC")
            );
          }

          let amountArr = [];
          $(".pp-total-amount-summary .accordion--list").html("");
          $(".accordion-card .accordion--list").html("");
          var ischecked = $(
            ".accordion-content-wrap .control-group input:checkbox"
          ).is(":checked");
          if (ischecked) {
            $(".accordion-content-wrap .control-group input:checked").trigger(
              "click"
            );
          }
          var istermsConditon = $(
            ".termscondition .control-group input:checkbox"
          ).is(":checked");
          if (istermsConditon) {
            $(".termscondition .control-group input:checkbox").trigger("click");
          }
          $(".accordion-card .accordion--list").parent().addClass("d-none");
          sparParts.forEach((ele, index) => {
            if (
              ele.mandatory_flag == "Y" &&
              ele.category == "Parts" &&
              !(ele.level_service == "Non Mandatory")
            ) {
              sparePartsList(ele, index);
              summaryList(ele, index);
            } else if (
              ele.mandatory_flag == "Y" &&
              ele.category == "Parts" &&
              ele.level_service == "Non Mandatory"
            ) {
              ele.category = "Add-On-Parts";
              sparePartsList(ele, index);
              summaryListAddOnService(ele, index);
            } else if (ele.category == "Labour") {
              ele.mandatory_flag = "Y";
              sparePartsList(ele, index);
              summaryList(ele, index);
              if (ele.job_code == "600003" || ele.job_code == "202001") {
                ele.mrp && amountArr.push(parseFloat(ele.mrp));
              }
            }
          });
          let modelName = $(
            "#price-promise [name='vehicleModelNameVal']"
          ).val();
          let serviceList = $("#price-promise #dealer")[0].dataset.vas;
          let vasList = serviceList && customers.filter(
            (ele) =>
              ele.Dealer.toLowerCase() == serviceList.trim().toLowerCase() &&
              ele.Model.toLowerCase() == modelName.trim().toLowerCase()
          );
          vasList.forEach((ele, index) => {
            ele.category = "Value-Add-Services";
            ele.mrp = ele.Price;
            ele.desc_text = ele.VAS;
            sparePartsList(ele, index);
            summaryListAddOnService(ele, index);
          });
          $(".spare-section").removeClass("d-none");
          sum = 0;
          amountArr &&
            amountArr.forEach((num) => {
              sum += num;
            });
          $(".pp-total-amount .total-amount span").text(sum.toFixed(2));
          $("#pp-total-Price-list .pp-total-amount-summary-amount span").text(
            sum.toFixed(2)
          );
          let accr = $(".accordion-card .accordion--list")
            .parent()
            .not(".d-none");
          accr.children().first().trigger("click");
          $("html, body").animate(
            {
              scrollTop: $(".spare-section").offset().top - 166,
            },
            800
          );
        },
        error: function (err) {
          console.log(err);
        },
      });
    });

    function sparePartsList(ele, index) {
      let sparePartsList = `<div class="accordion--panel ${
        ele.category == "Labour" &&
        !(ele.job_code == "600003" || ele.job_code == "202001")
          ? "d-none"
          : ""
      }">
      <div class="accordion-content-wrap">
        <div class="checkbox--wrap">
          <div class="control-group">
            <label class="control control-checkbox">
              ${ele.desc_text ? ele.desc_text : ele.job_description}
              <input type="checkbox" ${
                ele.category == "Labour" &&
                (ele.job_code == "600003" || ele.job_code == "202001")
                  ? "disabled checked"
                  : ""
              } data-amt-target="${ele.category}_${index}"
              data-job-code="${ele.job_code ? ele.job_code : ""}"/>
              <div class="control_indicator"></div>
            </label>
          </div>
        </div>
        <div class="pp-cost">₹ <span>${ele.mrp}</span></div>
      </div>
      </div>`;
      $(`#${ele.category}`).removeClass("d-none");
      $(`#${ele.category} .accordion--list`).append(sparePartsList);
    }

    function summaryList(ele, index) {
      let summaryList = `<div class="pp-total-amount-summary-text ${
        ele.job_code == "600003" || ele.job_code == "202001" ? "" : "d-none"
      }" id="${ele.category}_${index}">
      <p class="pp-total-amount-summary-label b1-bold-text-std">${
        ele.desc_text ? ele.desc_text : ele.job_description
      }</p>
      <p class="pp-total-amount-summary-amount b1-bold-text-std">₹ <span>${
        ele.mrp
      }</span></p>
      </div>`;
      if (ele.job_code == "600003" || ele.job_code == "202001") {
        $(`#pp-total-${ele.category}-list`).removeClass("d-none");
        $("#pp-total-Price-list").removeClass("d-none");
      }
      $(`#pp-total-${ele.category}-list .accordion--list`).append(summaryList);
    }

    function summaryListAddOnService(ele, index) {
      let summaryList = `<div class="pp-total-amount-summary-text d-none" id="${
        ele.category
      }_${index}">
      <p class="pp-total-amount-summary-label b1-bold-text-std">${
        ele.desc_text ? ele.desc_text : ele.job_description
      }</p>
      <p class="pp-total-amount-summary-amount b1-bold-text-std">₹ <span>${
        ele.mrp
      }</span></p>
      </div>`;
      $("#pp-total-Price-list").removeClass("d-none");
      $(`#pp-total-${ele.category}-list .accordion--list`).append(summaryList);
    }

    $(document).on(
      "change",
      ".accordion-content-wrap .control-group input:checkbox",
      function (e) {
        var ischecked = $(this).is(":checked");
        let parentEle = $(this).closest(".accordion-card");
        let amt = $(this)
          .closest(".accordion-content-wrap")
          .find(".pp-cost span")
          .text();
        let parsedAmt = parseFloat(amt);
        let totalAmt = $(".pp-total-amount .total-amount span");
        let totalAmt_2 = $(
          "#pp-total-Price-list .pp-total-amount-summary-amount span"
        );
        let amtlist = $(this).data("amt-target");
        let summaryListParentEle = $(`#${amtlist}`).closest(
          ".pp-total-amount-summary"
        );
        if (ischecked) {
          sum += parsedAmt;
          totalAmt.text(sum.toFixed(2));
          totalAmt_2.text(sum.toFixed(2));
          $(`#${amtlist}`).removeClass("d-none");
          summaryListParentEle.removeClass("d-none");
        } else if (!ischecked) {
          sum -= parsedAmt;
          totalAmt.text(sum.toFixed(2));
          totalAmt_2.text(sum.toFixed(2));
          $(`.pp-total-amount-summary #${amtlist}`).addClass("d-none");
          if (!parentEle.find("input:checkbox").is(":checked")) {
            summaryListParentEle.addClass("d-none");
          }
        }
        let selectedJobCode = $(this).data("job-code");
        if (selectedJobCode) {
          let jobCode = $(`#Labour [data-job-code="${selectedJobCode}"]`);
          let partJobCode = $(`#Parts [data-job-code="${selectedJobCode}"]`);
          let vasJobCode = $(
            `#Add-On-Parts [data-job-code="${selectedJobCode}"]`
          );

          if (
            (partJobCode.is(":checked") || vasJobCode.is(":checked")) &&
            !jobCode.is(":checked")
          ) {
            jobCode.removeAttr("disabled");
            jobCode.trigger("click");
            $(jobCode).closest(".accordion--panel ").removeClass("d-none");
            jobCode.attr("disabled", "true");
          } else if (
            !(partJobCode.is(":checked") || vasJobCode.is(":checked")) &&
            jobCode.is(":checked")
          ) {
            jobCode.removeAttr("disabled");
            jobCode.trigger("click");
            $(jobCode).closest(".accordion--panel ").addClass("d-none");
            jobCode.attr("disabled", "true");
          }
        }
      }
    );

    $(document).on(
      "change",
      ".termscondition .control-group input:checkbox",
      function (e) {
        var ischecked = $(this).is(":checked");
        if (ischecked) {
          $(".total-amount-section .pp-bookservice-btn").removeClass(
            "disabled"
          );
        } else {
          $(".total-amount-section .pp-bookservice-btn").addClass("disabled");
        }
      }
    );

    $(document).on("click", ".bookinglist-toggle-button", function (e) {
      if ($(".total-amount-section").hasClass("mobile-total-amount-section")) {
        $(this).removeClass("bookinglist-toggle-button-top");
        $(".termscondition").removeClass("termscondition-shadow");
        $(".total-amount-section").removeClass("mobile-total-amount-section");
      } else {
        $(this).addClass("bookinglist-toggle-button-top");
        $(".termscondition").addClass("termscondition-shadow");
        $(".total-amount-section").addClass("mobile-total-amount-section");
      }
    });

    $(document).on("click", ".pp-terms-show-hide", function (e) {
      let termsList = $(this).find("ul");
      if (termsList.hasClass("d-none")) {
        $(".pp-terms-arrow").addClass("pp-terms-rotate");
        termsList.removeClass("d-none");
        $(".total-amount-section").animate(
          {
            scrollTop: termsList.offset().top,
          },
          800
        );
      } else {
        $(".pp-terms-arrow").removeClass("pp-terms-rotate");
        termsList.addClass("d-none");
      }
    });

    $(document).on("click", ".terms", function (e) {
      let terms = $(".pp-terms-show-hide");
      if ($(window).width() < 768) {
        $(".bookinglist-toggle-button").trigger("click");
        terms.trigger("click");
        terms.animate(
          {
            scrollTop: terms.offset().top,
          },
          800
        );
      } else {
        $("html, body").animate(
          {
            scrollTop: terms.offset().top - 166,
          },
          800
        );
      }
    });
  }
});

$("document").ready(async function () {
  let stateCityData = {};
  let variantData = [];
  let dealerDataArray = [];
  let exShowroomPrice;  

  if ($('.festive-page-wrapper').length > 0 && $('#prebook-wrapper').length > 0) {
    const loaderImageVal = $('#prebook-wrapper').data('loader-icon');
    const loaderElement = `<div id="festive-loader" class="festive-prebook-loader d-none">
                              <img src="${loaderImageVal}"></div>
                          </div>`
    $(document.body).append(loaderElement);
  }

  function getPageDetails() {
    let slug = window.location.pathname.replace(".html", "").split("/");
    let fullSplit = window.location.origin.split("//");
    let pcSplit = fullSplit[1].split(".");
    return {
      siteType: "AEM",
      pageURL: window.location.href,
      path: window.location.pathname,
      fullURL: window.location.href,
      hostName: window.location.origin,
      fullReferringUrl: document.referrer,
      pagename: document.title,
      PageTitle: document.title,
      product: document.title,
      category: slug[2] || "",
      categorylevel1: slug[3] || "",
      categorylevel2: slug[4] || "",
      categorylevel3: slug[5] || "",
      siteCategory: pcSplit[0] || "",
    };
}

  if ($("#prebook-wrapper").length) {
    function checkMagentoForm() {
      let form = $("#frmPayment");
      var allInputsHaveValue = true;
      form.find("input[type!='hidden']").each(function () {
        if ($(this).val() === "" || !$(this).valid()) {
          allInputsHaveValue = false;
          return allInputsHaveValue;
        }
      });
      if (allInputsHaveValue) {
        $(".campaign--footer").removeClass("d-none");
        $("#festpaynowcheck").removeAttr("disabled");
      } else {
        $("#festpaynowcheck").prop("checked", false);
        $("#fest-sub-btn").prop("disabled", true);
        $("#festpaynowcheck").prop("disabled", "true");
      }
      return allInputsHaveValue;
    }
    function sortAscending(a, b) {
      return $(b).text().toUpperCase() < $(a).text().toUpperCase() ? 1 : -1;
    }

    const premium_models = [
      "xtreme_200s",
      "xpulse_200_4v",
      "xpulse_200",
      "xtreme_160r_4v",
      "xtreme_160r",
      "xpulse_200t_4v",
      "xtreme_200s_4v",
    ];
    let currentURL = window.location.href;

    if (currentURL.includes("festive-prebook-status")) {
      $("#prebook-wrapper .prebook-header").addClass("d-none");
      $("#prebook-wrapper .festive-accordion").addClass("d-none");
      //$("#prebook-wrapper .festive-sub-fail").removeClass("d-none");
      $("#prebook-wrapper .festive-sub-success").addClass("d-none");
      $("#festive-switch").removeClass("d-none").addClass("d-flex");

      const urlParams = new URL(currentURL);
      const orderId = urlParams.searchParams.get('orderId');
      const paymentStatusHash = urlParams.searchParams?.get('request');
      const status = urlParams.searchParams?.get('status')?.toLowerCase();
      let success = false;
            
      if(orderId && paymentStatusHash && status){
        let paymentDetails = await updateOrder(orderId, paymentStatusHash);
        let orderSuccess = paymentDetails?.data?.updateOrder?.order?.success;
        let message = paymentDetails?.data?.updateOrder?.order?.message;
      
        if (orderSuccess && status == "success") {
          success = true;
        } else if (status == "aborted") {
          success = false;
        } else if (
          status == "success" &&
          message.includes("The payment of this order is already processed.")
        ) {
          success = true;
        } else {
          success = false;
        }        
        success ? renderOrderSuccess(orderId) : renderOrderFail(orderId);
      }
      else {
        renderOrderFail();
      }
    }

    customValidation($("#doc--form"));

    $('#doc--form [name="fullname"]').on("input", function () {
      $("#magento-form-submit #fesname").val($(this).val());
    });

    $('#doc--form [name="mobileno"]').on("input", function () {
      $("#magento-form-submit #fesmobile").val($(this).val());
      $("#magento-form-submit #fescmobile").val($(this).val());
    });

    $('#doc--form [name="email"]').on("input", function () {
      $("#magento-form-submit #fesemail").val($(this).val());
    });

    $('#doc--form [name="address2"]').on("input", function () {
      $("#magento-form-submit #address2").val($(this).val());
    });

    $("#fest-sub-btn").on("click", async function () {
      // magneto click trigger on submit button trigger
      //$("#magento-form-submit .btn-payment").trigger("click");

      /* Cart Call */
      await fetchCart();
      const cartId = sessionStorage.getItem('cartId');
      const dealerData = sessionStorage.getItem("__dealer_data");
      const dealerOptionId = sessionStorage.getItem("dealerOptionId");
      if(!dealerOptionId) productDetails();

      if(cartId && dealerData && dealerOptionId && exShowroomPrice) {
        await addToCart(cartId);
        await addAddressToCart(cartId);
        if ($(".festive-email-error").hasClass("d-none")) {
          await addPaymentToCart(cartId);
        }
      }

    });
    $("#festpaynowcheck").change(function () {
      if ($(this).is(":checked")) {
        let selectForm = $("#doc--form");
        if (selectForm.valid()) {
          $("#fest-sub-btn").removeAttr("disabled");
        } else {
          $("#fest-sub-btn").attr("disabled", "true");
        }
      } else {
        $("#fest-sub-btn").attr("disabled", "true");
      }
    });
    // Adding Container to the form on mobile devices

    function applyStyles() {
      let screenWidth = $(window).width();
      var $campaignRightContent = $(".campaign-right-content");

      if (screenWidth < 992) {
        if (
          !$campaignRightContent.parent().hasClass("cust-container-student")
        ) {
          $campaignRightContent.wrap(
            '<div class="cust-container-student"></div>'
          );
        }

        $(".campaign-right-content").css({
          "box-shadow": "0px 10px 40px rgba(120, 120, 120, 0.15)",
          "backdrop-filter": "blur(13.1579px)",
          "margin-top": "16px",
        });
      } else {
        if ($campaignRightContent.parent().hasClass("cust-container-student")) {
          $campaignRightContent.unwrap();
        }
        $campaignRightContent.css({
          "box-shadow": "",
          "backdrop-filter": "",
          "margin-top": "",
        });
      }
    }

    applyStyles();

    $(window).resize(function () {
      applyStyles();
    });

    // Ends

    $(".mobile-number").on("keyup", function () {
      let form = $(this).parents("form");
      toggleCheckboxSbtn(form);
      if ($(this).val().length == 10 && $(this).valid()) {
        $(this)
          .parent(".cust-form-group")
          .find(".send-otp-btn")
          .addClass("show");
        let form = $(this).parents("form");
        toggleCheckboxSbtn(form);
      } else {
        $(this)
          .parents("form")
          .find(".test-drive-otp-link")
          .removeClass("show");
        $(this).parents("form").find(".otp-field").prop("disabled", true);
      }
    });
    $("[name='email']").on("keyup", function () {
      let form = $(this).parents("form");
      toggleCheckboxSbtn(form);
      if (!$('.festiveprebookform .festive-email-error').hasClass('d-none')) {
        $('.festiveprebookform .festive-email-error').addClass('d-none');
      }
    });
    $("[name='fullname']").on("keyup", function () {
      $(this).valid();
      let form = $(this).parents("form");
      toggleCheckboxSbtn(form);
    });
    function toggleCheckboxSbtn(form) {
      var allInputsHaveValue = true;
      form.find("input[type!='hidden']").each(function () {
        if ($(this).val() === "" || !$(this).valid()) {
          allInputsHaveValue = false;
          return allInputsHaveValue;
        }
      });
      if (allInputsHaveValue) {
        $(".campaign--footer").removeClass("d-none");
        $("#festpaynowcheck").removeAttr("disabled");
      } else {
        $("#festpaynowcheck").prop("checked", false);
        $("#fest-sub-btn").prop("disabled", true);
        $("#festpaynowcheck").prop("disabled", "true");
      }
      return allInputsHaveValue;
    }
    async function isValidOtp(mobile, otp) {
      const url = "/content/hero-commerce/in/en/products/product-page/performance/jcr:content.login-with-otp.json";
      $('#festive-loader').removeClass('d-none');

      try{
        let jsonData = await apicall(url,'POST',{ phoneCode: "+91", mobile, otp });
        $('#festive-loader').addClass('d-none');
        return jsonData?.success ? jsonData?.success : false;
      }
      catch(e){
        $('#festive-loader').addClass('d-none');
        console.error(e);
      }
    }
    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }
    function hashCode(s) {
      var h = 0,
        l = s.length,
        i = 0;
      if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
      return h;
    }
    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }
    
    async function sendOtp(currentForm, token) {    
      const url =
        "/content/hero-commerce/in/en/products/product-page/performance/jcr:content.one-app-send-otp.json";
      let jsonData = await apicall(url, "POST", {
        mobile: $(currentForm).find('[name="mobileno"]').val(),
        source: "DIY Finance",
      });

      if (jsonData) {
        if (window.digitalData) {
          window.digitalData = {
            event: "OTP Success",
            form: {
              formname: "festive prebook form",
              formtype: "prebook form",
            },
            page: {
              siteType: "AEM",
              pageURL: window.location.href,
              path: window.location.pathname,
              fullURL: window.location.href,
              hostName: window.location.origin,
              fullReferringUrl: document.referrer,
              pagename: document.title,
            },
          };
        }
      } else {
        $(currentForm).find(".invalid-otp-message").show();
        if (window.digitalData) {
          window.digitalData = {
            event: "OTP fails",
            form: {
              formname: "festive prebook form",
              formtype: "prebook form",
            },
            page: {
              siteType: "AEM",
              pageURL: window.location.href,
              path: window.location.pathname,
              fullURL: window.location.href,
              hostName: window.location.origin,
              fullReferringUrl: document.referrer,
              pagename: document.title,
            },
          };
        }
      }
    }
    
    $(".send-otp-btn").on("click", async function () {
      var currentForm = $(this).parents("form");
      // $(currentForm).find(".resend-otp-btn").addClass("show");
      $(currentForm).find(".otp-value").removeAttr("disabled");
      $(currentForm).find(".otp-value").val("");
      $(currentForm).find(".otp-form").removeClass("valid--otp");
      $(currentForm).find(".otp-value").focus();
      if (window.digitalData && window._satellite) {
        window.digitalData = {
          form: {
            formname: "festive prebook form",
            formtype: "prebook form",
          },
          page: {
            siteType: "AEM",
            pageURL: window.location.href,
            path: window.location.pathname,
            fullURL: window.location.href,
            hostName: window.location.origin,
            fullReferringUrl: document.referrer,
            pagename: document.title,
          },
        };
        _satellite.track("OTP Requested");
      }
      setTimeout(() => {
        $(currentForm).find(".send-otp-btn").addClass("show");
      }, 1000);
      if ($("#prebook-wrapper").length) {
        // $(this).text("Resend OTP");
        $(currentForm).find(".otp-form").removeClass("d-none");
        let timerVal = 30;
        let interval = setInterval(() => {
          timerVal--;
          if (timerVal === 0) {
            clearInterval(interval);
            $(".send-otp-btn").text("Resend OTP");
            $(this).removeClass("pe-none-tracker");
          } else {
            $(this).addClass("pe-none-tracker");
            if (timerVal < 10) {
              $(".send-otp-btn").text(`00:0${timerVal}`);
            } else {
              $(".send-otp-btn").text(`00:${timerVal}`);
            }
          }
        }, 1000);
        $(".invalid-otp-message").hide();
      } else {
        $(this).removeClass("show");
      }
      ;
      // let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
      // grecaptcha.ready(function () {
      //   grecaptcha.execute(sitKey).then(function (token) {
      //     sendOtp(currentForm, token);
      //   });
      // });
      await sendOtp(currentForm);
    });

    $(".resend-otp-btn").on("click", async function () {
      $(".invalid-otp-message").hide();
      var currentForm = $(this).parents("form");
      $(currentForm).find(".otp-value").removeAttr("disabled");
      //sendOtp(currentForm);
      let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
      if (window.digitalData && window._satellite) {
        window.digitalData = {
          form: {
            formname: "festive prebook form",
            formtype: "prebook form",
          },
          page: {
            siteType: "AEM",
            pageURL: window.location.href,
            path: window.location.pathname,
            fullURL: window.location.href,
            hostName: window.location.origin,
            fullReferringUrl: document.referrer,
            pagename: document.title,
          },
        };
        _satellite.track("OTP Requested");
      }
      // grecaptcha.ready(function () {
      //   grecaptcha.execute(sitKey).then(function (token) {
      //     sendOtp(currentForm, token);
      //   });
      // });

      await sendOtp(currentForm);

      $(this).attr("data-attempt", parseInt($(this).attr("data-attempt")) + 1);
      let attempts = $(this).attr("data-attempt");
      if (attempts == 3) {
        $(this).removeClass("show");
      }
    });
    $(".otp-value").on("keyup", async function () {
      $(".invalid-otp-message").hide();
      let form = $(this).parents("form");
      $(this).parent().removeClass("valid--otp");
      if ($(this).val().length == 6) {
        let mobNumber;
        if ($(".modal-comp #number")?.val()?.length > 0)
          mobNumber = $(".modal-comp #number").val();
        else mobNumber = $("#number").val();
        let otpEntered = $(this).val();
        if (await isValidOtp(mobNumber, otpEntered)) {
          console.log(">>>>>>>>> OTP Validated :true >>>>>>>>>");
          let validated = toggleCheckboxSbtn(form);

          $(this).parent().addClass("valid--otp");
          $(".otp-value").attr("disabled", "true");
          if (validated) {
            form.find("input").each(function (index) {
              if ($(this).attr("name") !== "otp") {
                let inputValue = $(this).val();
                form
                  .parent()
                  .parent()
                  .siblings()
                  .find(".grey-text span")
                  .eq(index)
                  .text(inputValue);
              }
            });
            // $(".accordion-card")
            //   .eq(2)
            //   .find(".accordion--title")
            //   .removeClass("pe-none");
            // $(".accordion-card").eq(2).find(".accordion--title").click();
            form
              .parent()
              .parent()
              .siblings()
              .find(".grey-text")
              .removeClass("d-none");
          }

          $(".invalid-otp-message").hide();
          if (window.digitalData && window._satellite) {
            window.digitalData = {
              festiveForm: {
                vehicleName: sessionStorage.getItem("vehicleName") || "",
                variant: sessionStorage.getItem("variantName") || "",
                color: sessionStorage.getItem("vehicleColor") || "",
                state: sessionStorage.getItem("selectedState") || "",
                city: sessionStorage.getItem("selectedCity") || "",
                dealerName: sessionStorage.getItem("dealerName") || "",
                dealerAddress: sessionStorage.getItem("dealerAddress") || "",
              },
              page: {
                siteType: "AEM",
                pageURL: window.location.href,
                path: window.location.pathname,
                fullURL: window.location.href,
                hostName: window.location.origin,
                fullReferringUrl: document.referrer,
                pagename: document.title,
                PageTitle: document.title,
              },
            };
            _satellite.track("Festive Contact Verified");
          }
        } else {
          $(this).parent().removeClass("valid--otp");
          $(this).parent().addClass("invalid--otp");
          $(".invalid-otp-message").show();
          if (window.digitalData && window._satellite) {
            window.digitalData = {
              form: {
                formname: "festive prebook form",
                formtype: "prebook form",
                formerrorfields: "incorrect-otp",
              },
              page: {
                siteType: "AEM",
                pageURL: window.location.href,
                path: window.location.pathname,
                fullURL: window.location.href,
                hostName: window.location.origin,
                fullReferringUrl: document.referrer,
                pagename: document.title,
              },
            };
            _satellite.track("formError");
          }
        }
      } else {
        $(this).parent().removeClass("valid--otp");
      }
    });

    const vehicleForm = $("#vehicle-form");
    const locationForm = $("#location-form");
    const defaultservlet = document.getElementById("defaultservlet").value;

    let vehicleList = vehicleForm
      .find('[name="vehiclename"]')
      .parents(".cust-drop-down")
      .find(".cust-dropdown-menu ");

    let stateList = locationForm
      .find('[name="statename"]')
      .parents(".cust-drop-down")
      .find(".cust-dropdown-menu ");

    /* Populate Vehicle dropdown */
    populateDropdownCommercePreBook(
      $("#prebook-wrapper").data("prebookproducts"),
      vehicleList,
      "vehicle",
      window && window.locations ? locations.State : null,
      false
    );

    // populateDropdownPreBook(
    //   defaultservlet + ".statelist.html",
    //   stateList,
    //   "state",
    //   window && window.locations ? locations.State : null,
    //   false
    // );

    function checkForms(form) {
      var allHiddenInputsHaveValue = true;
      form.find("input").each(function () {
        if ($(this).val() === "") {
          allHiddenInputsHaveValue = false;
          return false;
        }
      });
      return allHiddenInputsHaveValue;
    }

    $(".festive-accordion .accordion--title").click(function (e) {
      let dropDown = $(this)
        .closest(".accordion-card")
        .find(".accordion--panel");
      $(this)
        .closest(".festive-accordion")
        .find(".accordion--panel")
        .not(dropDown)
        .slideUp();
      if ($(this).hasClass("active")) {
        $(this).removeClass("active");
      } else {
        $(this)
          .closest(".festive-accordion")
          .find(".accordion--title.active")
          .removeClass("active");
        $(this).addClass("active");
      }
      dropDown.stop(false, true).slideToggle();
      e.preventDefault();
    });

    $(".festive-accordion .accordion--title").first().click();

    function checksAccordianforVehicle(checkState, checkDealer) {
      let cityButton = $('[name="cityname"]');
      let stateButton = $('[name="statename"]');
      // Snippet for resetting State and City Dropdown and accordian

      let stateCityAccord = $(".accordion-card").eq(1).find(".accordion--title");

      if (checkState && (!stateCityAccord.find(".grey-text").hasClass('d-none') || !stateCityAccord.hasClass('pe-none'))) {
        cityButton.text(cityButton.attr("data-default-label"));
        $("[name=cityNameVal]").val("");
        stateButton.text(stateButton.attr("data-default-label"));
        $("[name=stateNameVal]").val("");
        stateCityAccord.addClass('pe-none');
        stateCityAccord.find(".grey-text").addClass('d-none');
      }

      if (!checkState && (!stateCityAccord.find(".grey-text").hasClass('d-none') || !stateCityAccord.hasClass('pe-none'))) {
        stateCityAccord.find(".grey-text").addClass('d-none');
      }

      // Snippet for resetting Dealer Dropdown and accordian

      let dealerAccord = $(".accordion-card").eq(2).find(".accordion--title");

      if (checkDealer && (!dealerAccord.find(".grey-text").hasClass('d-none') || !dealerAccord.hasClass('pe-none'))) {
        dealerAccord.addClass('pe-none');
        dealerAccord.find(".grey-text").addClass('d-none');
        $("#dealer-locator-container").empty();
      }
    }

    $(".festive-accordion .cust-dropdown-menu").on("click", "li", async function () {
      let selectionGroup = $(this).parents(".cust-drop-down");
      let button = selectionGroup.find(".dropdown-select");
      let variantButton = $('[name="variantname"]');
      let colorButton = $('[name="colorname"]');
      let cityButton = $('[name="cityname"]');
      let form = $(this).closest("form");

      button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
      $(this).parent().find('li').removeClass("active");
      $(this).addClass("active");

      if ("vehiclename" == button.attr("name")) {
        button.addClass("active");
        $("#magento-form-submit #fessku").val("");
        checkMagentoForm();
        variantButton.removeClass("active");
        variantButton.text(variantButton.attr("data-default-label"));
        $("[name=variantNameVal]").val("");
        $("[name=colorNameVal]").val("");
        colorButton.removeClass("active");
        colorButton.text(colorButton.attr("data-default-label"));
        form.find('[name="vehicleNameVal"]').val($(this).attr("value"));

        const festButton = $("#fest-sub-btn");

        let list = variantButton
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");

        const productSku = $(this).attr("value");
        const category = $(this).data("category");
        // console.log(productSku);
        // console.log(category);

        checksAccordianforVehicle(true, true);

        /* Get Product variant and color Data */
        variantData = await productDetails(category, productSku);
        //console.log(variantData);

        const categoryCheck = getPrebookCategory();
        //console.log(`categoryCheck: ${categoryCheck}`);        
        if(categoryCheck == 'hf-100'){
          festButton.val(festButton.data("hf100"));
        } else if (categoryCheck == 'prebook-category3') {
          festButton.val(festButton.data("premia"));
        } else if (categoryCheck == 'prebook-category2') {
          festButton.val(festButton.data("mid"));
        } else if (categoryCheck == 'prebook-category1') {
          festButton.val(festButton.data("normal"));
        }

        const variantDataHtml = variantData.map(variant => {
          return `<li class="font-montserrat-regular font-weight-500" value="${variant.value_index}">
			              <a href="javascript:void(0)">${variant.label}</a>
		              </li>`;
        }).join("");

        // variantPath =
        //   defaultservlet +
        //   ".modelsdata." +
        //   $(this).attr("value") +
        //   ".ap.adoni" +
        //   ".html";        

        let variantValue =
          null != (window && window.locations) ? locations.State : "";

        populateDropdownCommercePreBook(
          variantDataHtml,
          list,
          "variant",
          variantValue,
          true
        );

        variantButton[0].disabled = false;
        colorButton[0].disabled = true;

        if (checkForms(form)) {
          form.find("input").each(function (index) {
            let inputValue = $(this).parent().find("button").text();
            form
              .parent()
              .parent()
              .siblings()
              .find(".grey-text span")
              .eq(index)
              .text(inputValue);
          });
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .removeClass("d-none");
          $(".accordion-card")
            .eq(1)
            .find(".accordion--title")
            .removeClass("pe-none");
          $(".accordion-card").eq(1).find(".accordion--title").click();
        } else {
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .addClass("d-none");
        }
      } else if ("variantname" == button.attr("name")) {
        button.addClass("active");
        $("#magento-form-submit #fessku").val("");
        checkMagentoForm();
        colorButton.removeClass("active");
        colorButton.text(colorButton.attr("data-default-label"));
        $("[name=colorNameVal]").val("");
        form
          .find('[name="variantNameVal"]')
          .val($(this).attr("value").toLowerCase());
        colorButton[0].disabled = false;
        let list = colorButton
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");

        checksAccordianforVehicle(true, true);

        let modal = $('[name="vehicleNameVal"]').val();
        let variant = $('[name="variantNameVal"]').val();
        
        const colorsData = variantData.find(variantItem => variantItem?.value_index == variant).colors;
        const colorsDataHtml = colorsData.map(colorItem => {
          return `<li class="font-montserrat-regular font-weight-500 " value="${colorItem.sku}">
			              <a href="javascript:void(0)">${colorItem.label}</a>
		              </li>`;
        }).join("");

        //console.log(colorsDataHtml);
        
        // colorPath =
        //   defaultservlet + ".colorsdata." + modal + "." + variant + ".html";

        let colorValue =
          null != (window && window.locations) ? locations.State : "";

        populateDropdownCommercePreBook(colorsDataHtml, list, "color", colorValue, true);

        if (checkForms(form)) {
          form.find("input").each(function (index) {
            let inputValue = $(this).parent().find("button").text();
            form
              .parent()
              .parent()
              .siblings()
              .find(".grey-text span")
              .eq(index)
              .text(inputValue);
          });
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .removeClass("d-none");
          $(".accordion-card")
            .eq(1)
            .find(".accordion--title")
            .removeClass("pe-none");
          $(".accordion-card").eq(1).find(".accordion--title").click();
        } else {
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .addClass("d-none");
        }
      } else if ("colorname" == button.attr("name")) {
        
        checksAccordianforVehicle(true, true);

        button.addClass("active");
        form.find('[name="colorNameVal"]').val($(this).attr("value"));
        if (checkForms(form)) {
          form.find("input").each(function (index) {
            let inputValue = $(this).parent().find("button").text();
            form
              .parent()
              .parent()
              .siblings()
              .find(".grey-text span")
              .eq(index)
              .text(inputValue);
          });
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .removeClass("d-none");
          $(".accordion-card")
            .eq(1)
            .find(".accordion--title")
            .removeClass("pe-none");
          $(".accordion-card").eq(1).find(".accordion--title").click();

          let colorValue = $("[name=colorNameVal]").val();
          
          /* Set selected variant code in session storage */
          let productData = sessionStorage.getItem("__product_data");
          if(productData){
            productData = JSON.parse(productData);
            productData.itemSku = colorValue;
            productData = JSON.stringify(productData);
            sessionStorage.setItem("__product_data", productData);
          }
          
          const states = await getPrebookCommerceStateCityList();
          populateDropdownCommercePreBook(
            states,
            stateList,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
          
          $("#magento-form-submit #fessku").val(colorValue.trim());
          checkMagentoForm();
        }
      } else if ("statename" == button.attr("name")) {
        button.addClass("active");
        $("#magento-form-submit #fescity").val("");
        checkMagentoForm();
        cityButton.removeClass("active");
        cityButton.text(cityButton.attr("data-default-label"));
        $("[name=cityNameVal]").val("");
        form.find('[name="stateNameVal"]').val($(this).attr("value"));

        let list = cityButton
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");

        cityPath =
          defaultservlet + ".dealercities." + $(this).attr("value") + ".html";
          
        checksAccordianforVehicle(false, true);

        const stateCode = $(this).attr("value");
        const cities = await getPrebookCommerceStateCityList(stateCode);

        let cityValue =
          null != (window && window.locations) ? locations.City : "";

        populateDropdownCommercePreBook(cities, list, "city", cityValue, true);

        cityButton[0].disabled = false;
      } else if ("cityname" == button.attr("name")) {
        button.addClass("active");
        $("#dealer-address").addClass("d-none");

        form.find('[name="cityNameVal"]').val($(this).attr("value"));
        let selectedState = $('[name="stateNameVal"]').val();
        let selectedCity = $('[name="cityNameVal"]').val();

        sessionStorage.setItem(
          "__selected_location",
          JSON.stringify({ state: selectedState, city: selectedCity })
        );
        
        checksAccordianforVehicle(false, true);

        let state = $('[name="statename"]').text();
        let city = $('[name="cityname"]').text();

        $("#magento-form-submit #fesstate").val(selectedState);
        $("#magento-form-submit #fescity").val($(this).attr("value"));
        $("#magento-form-submit #fesstreet1").val(`${city},${state}`);
        $("#magento-form-submit #fesstreet2").val(`${city},${state}`);
        $("#magento-form-submit #fespostcode").val("000000");
        $("#magento-form-submit #fesdealer").val("");
        $("#magento-form-submit #fesdealer").val("");
        checkMagentoForm();
        dealerPath =
          defaultservlet +
          ".dealerdata." +
          selectedState +
          "." +
          $(this).attr("value") +
          ".html";

        //getDealers(dealerPath);
        await getCommerceDealers(selectedState, selectedCity);

        if (checkForms(form)) {
          form.find("input").each(function (index) {
            let inputValue = $(this).parent().find("button").text();
            form
              .parent()
              .parent()
              .siblings()
              .find(".grey-text span")
              .eq(index)
              .text(inputValue);
          });
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .removeClass("d-none");
          $(".accordion-card")
            .eq(2)
            .find(".accordion--title")
            .removeClass("pe-none");
          $(".accordion-card").eq(2).find(".accordion--title").click();
        } else {
          form
            .parent()
            .parent()
            .siblings()
            .find(".grey-text")
            .addClass("d-none");
        }
      }
    });

    function populateDropdownCommercePreBook(
      html,
      selector,
      keyword,
      selectedVal
    ) {
      if (html && selector[0] !== undefined) {
        selector[0].innerHTML = html;
        let form = $(selector).closest("form");
        if (keyword == "vehicle") {
          form
            .find('[name="vehiclename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            //.sort(sortAscending)
            .appendTo(
              form
                .find('[name="vehiclename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
            );
          let vehicle;
          let abbrVehicle = form
            .find('[name="vehicle"]')
            .attr("data-default-label");
          if (selectedVal) {
            if (
              $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value")
            ) {
              vehicle = $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value");
              abbrVehicle = selectedVal;
              form.find('[name="vehicleNameVal"]').val(selectedVal);
            }
          }
        }

        if (keyword == "variant") {
          form
            .find('[name="variantname"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="variantname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
            );

          let variant;
          let abbrVariant = form
            .find('[name="variantname"]')
            .attr("data-default-label");
          if (selectedVal) {
            if (
              $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value")
            ) {
              variant = $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value");
              abbrVariant = selectedVal;
              form.find('[name="variantNameVal"]').val(selectedVal);
            }
          }
        }
        if (keyword == "color") {
          form
            .find('[name="colorname"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="colorname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
            );

          let color;
          let abbrColor = form
            .find('[name="colorname"]')
            .attr("data-default-label");
          if (selectedVal) {
            if (
              $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value")
            ) {
              color = $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value");
              abbrColor = selectedVal;
              form.find('[name="colorNameVal"]').val(selectedVal);
            }
          }
        }

        if (keyword == "state") {
          form
            .find('[name="statename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
            );
          let state;
          let abbrState = form
            .find('[name="vehicle"]')
            .attr("data-default-label");
          if (selectedVal) {
            if (
              $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value")
            ) {
              state = $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value");
              abbrState = selectedVal;
              form.find('[name="stateNameVal"]').val(selectedVal);
            }
          }
        }

        if (keyword == "city") {
          form
            .find('[name="cityname"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="cityname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
            );
          let city;
          let abbrCity = form
            .find('[name="vehicle"]')
            .attr("data-default-label");
          if (selectedVal) {
            if (
              $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value")
            ) {
              city = $(selector[0])
                .children("li:contains(" + selectedVal.toLowerCase() + ")")
                .attr("value");
              abbrCity = selectedVal;
              form.find('[name="cityNameVal"]').val(selectedVal);
            }
          }
        }
        //});
      }
    }
    
    /* function populateDropdownPreBook(url, selector, keyword, selectedVal) {
      if (url && selector[0] !== undefined) {
        fetch(url)
          .then(function (response) {
            if (!response.ok) {
              throw new Error("Not 2xx response", { cause: response });
            } else {
              return response.text();
            }
          })
          .then(function (html) {
            selector[0].innerHTML = html;
            let form = $(selector).closest("form");
            if (keyword == "vehicle") {
              form
                .find('[name="vehiclename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="vehiclename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let vehicle;
              let abbrVehicle = form
                .find('[name="vehicle"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  vehicle = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrVehicle = selectedVal;
                  form.find('[name="vehicleNameVal"]').val(selectedVal);
                }
              }
            }

            if (keyword == "variant") {
              form
                .find('[name="variantname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="variantname"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );

              let variant;
              let abbrVariant = form
                .find('[name="variantname"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  variant = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrVariant = selectedVal;
                  form.find('[name="variantNameVal"]').val(selectedVal);
                }
              }
            }
            if (keyword == "color") {
              form
                .find('[name="colorname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="colorname"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );

              let color;
              let abbrColor = form
                .find('[name="colorname"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  color = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrColor = selectedVal;
                  form.find('[name="colorNameVal"]').val(selectedVal);
                }
              }
            }

            if (keyword == "state") {
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="statename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let state;
              let abbrState = form
                .find('[name="vehicle"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  state = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrState = selectedVal;
                  form.find('[name="stateNameVal"]').val(selectedVal);
                }
              }
            }

            if (keyword == "city") {
              form
                .find('[name="cityname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="cityname"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let city;
              let abbrCity = form
                .find('[name="vehicle"]')
                .attr("data-default-label");
              if (selectedVal) {
                if (
                  $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value")
                ) {
                  city = $(selector[0])
                    .children("li:contains(" + selectedVal.toLowerCase() + ")")
                    .attr("value");
                  abbrCity = selectedVal;
                  form.find('[name="cityNameVal"]').val(selectedVal);
                }
              }
            }
          });
      }
    } */

    function handleItemClick() {
      // Remove the 'selected-border' class from all items with class 'dealer-locator-info'
      $(".dealer-locator-info").removeClass("selected-border");

      // Add the 'selected-border' class to the clicked item
      $(this).addClass("selected-border");
      const dealerName = $(this).find(".dealer-locator-name").text();
      const dealerCode = $(this).find(".dealer-locator-code").text();

      const selectedDealer = dealerDataArray.find(item => item.code == dealerCode);
      exShowroomPrice = selectedDealer ? selectedDealer.ex_showroom_price : '';
      orp = selectedDealer ? selectedDealer.orp : '';

      if (dealerCode && dealerName) {
        sessionStorage.setItem(
          "__dealer_data",
          JSON.stringify({
            selectedDealerCode: dealerCode.toString(),
            selectedDealerName: dealerName,
            exShowroomPrice: exShowroomPrice,
            orp: orp,
          })
        );
      }

      $("#magento-form-submit #fesdealer").val(dealerCode.trim());
      $("#dealer-address").find("span").eq(0).text(dealerName);
      $("#dealer-address").removeClass("d-none");
      $(".accordion-card")
        .eq(3)
        .find(".accordion--title")
        .removeClass("pe-none");
      checkMagentoForm();
      $(".accordion-card").eq(3).find(".accordion--title").click();
    }

    function getDealers(dealerPath) {
      $.ajax({
        type: "GET",
        url: dealerPath,
        success: function (response) {
          const $responseHtml = $(response);
          const $dealerItems = $responseHtml.filter(".near-you-common-div");

          // Clear the content of the dealer locator container
          $("#dealer-locator-container").empty();

          // Append each sorted dealer item to the container
          $dealerItems.each(function () {
            // Extract the desired information
            const dealerName = $(this).find(".near-you-h3").text();
            const dealerCode = $(this).find(".near-you-d").text();

            // const phoneNumber = $(this)
            //   .find(".near-you-no-p a")
            //   .eq(0)
            //   .text()
            //   .trim(); // Trim whitespace

            const phoneNumbers = [];

            // Loop through all phone number links and extract them
            $(this)
              .find(".near-you-no-p a")
              .each(function () {
                const phoneNumber = $(this).text().trim().replace(/,/g, ""); // Remove commas
                phoneNumbers.push(phoneNumber);
              });

            const address = $(this).find(".near-you-p").eq(0).text();

            // Create a new element with the desired structure
            const $dealerItem = $("<div class='dealer-locator-info'></div>");

            const $dealerContact = $(
              "<div class='dealer-locator-contact'></div>"
            );
            const $dealerAddress = $(
              "<div class='dealer-locator-address'></div>"
            );

            $dealerContact.append(
              "<p class='dealer-locator-name'>" + dealerName + "</p>"
            );

            if (phoneNumbers.length > 0) {
              $dealerContact.append(
                "<p class='dealer-locator-phone'>" +
                  phoneNumbers.join(", ") +
                  "</p>"
              );
            }
            $dealerContact.append(
              "<p class='dealer-locator-code d-none'>" + dealerCode + "</p>"
            );

            $dealerAddress.append(
              "<p class='dealer-locator-address'>" + address + "</p>"
            );
            $dealerItem.append($dealerContact);
            $dealerItem.append($dealerAddress);
            $dealerItem.on("click", handleItemClick);

            // Append the dealer item to the dealer locator container
            $("#dealer-locator-container").append($dealerItem);
          });
          $(
            "#dealer-locator-container:has(.dealer-locator-info:only-child) .dealer-locator-info"
          ).css("flex", "0.45");
        },
        error: function (err) {
          console.log("Error: ", err);
        },
      });
    }

    /* Get dealers from Commercce */
    async function getCommerceDealers(state, city) {
      $('#festive-loader').removeClass('d-none');
      try{
        $("#dealer-locator-container").empty();
        //get selected variant sku from session storage
        const sku = JSON.parse(sessionStorage.getItem("__product_data")).itemSku;
        let jsonData = await apicall(
          "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.dealers-stock-info.json",
          "POST",
          { sku, state, city }
        );
        $('#festive-loader').addClass('d-none');
        let dealerData = jsonData?.data?.dealers?.items;
        dealerDataArray = dealerData;
        //console.log(dealerDataArray);      
        dealerData
        .map((item) => {
          return `<div class="dealer-locator-info">
                    <div class="dealer-locator-contact">
                      <p class="dealer-locator-name">${item.name}</p>
                      <p class="dealer-locator-phone">${item.phone}</p>
                      <p class="dealer-locator-code d-none">${item.code}</p>
                    </div>
                    <div class="dealer-locator-address">
                      <p class="dealer-locator-address">
                        ${item.address_line_1} ${item.address_line_2} ${item.zip_code} 
                      </p>
                    </div>
                  </div>`;
        })
        .forEach((item) => {
          //console.log(item);
          let $dealerItem = $(item);        
          $dealerItem.on("click", handleItemClick);
          $("#dealer-locator-container").append($dealerItem);
        });
      }
      catch(e){
        $('#festive-loader').addClass('d-none');
        console.error(e);
      }      
    }
    

    function customValidation($form) {
      // for mobile no fields
      jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      });
      //for allow numbers only
      jQuery.validator.addMethod("numbersOnly", function (value) {
        return /^[0-9]+$/i.test(value);
      });
      //for allow only character
      jQuery.validator.addMethod("charactersOnly", function (value) {
        return /^[a-zA-Z&\s]+$/i.test(value);
      });
      //for email
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      jQuery.validator.addMethod("validNumber", function (value) {
        const disallowedNumbers = [
          "0123456789",
          "1111111111",
          "2222222222",
          "3333333333",
          "4444444444",
          "5555555555",
          "6666666666",
          "7777777777",
          "8888888888",
          "9999999999",
          "0000000000",
          "1234567890",
          "1010101010",
          "2020202020",
          "3030303030",
          "4040404040",
          "5050505050",
        ];
        if (disallowedNumbers.indexOf(value) !== -1) {
          return false;
        }
        if (value.length < 10) {
          return false;
        } else {
          return true;
        }
      });

      //   jQuery.validator.addMethod("indianNumber", function (value) {
      //     return /^[6789]\d{9}$/i.test(value);
      //   });
      //   book-test-drive-form
      $form.validate({
        ignore: [],
        rules: {
          fullname: {
            required: true,
            charactersOnly: true,
          },
          mobileno: {
            required: true,
            numbersOnly: true,
            mobilenoOnly: true,
            validNumber: true,
          },
          otp: {
            required: true,
            numbersOnly: true,
          },
          vehicleNameVal: {
            required: true,
          },
          stateNameVal: {
            required: true,
          },
          cityNameVal: {
            required: true,
          },
          dealerNameVal: {
            required: true,
          },
          email: {
            required: true,
            emailOnly: true,
          },
        },
        messages: {
          fullname: {
            required: $('[name="fullname"]').data("validation-msg-req"),
            charactersOnly: $('[name="fullname"]').data(
              "validation-msg-format"
            ),
          },
          mobileno: {
            required: $('[name="mobileno"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            mobilenoOnly: $('[name="mobileno"]').data("validation-msg-format"),
            validNumber: $('[name="mobileno"]').data("validation-msg-format"),
          },
          otpenter: {
            required: $('[name="otp"]').data("validation-msg-req"),
            numbersOnly: "Please enter valid OTP",
          },
          vehicleNameVal: {
            required: $('[name="vehicleNameVal"]').data("validation-msg-req"),
          },
          stateNameVal: {
            required: $('[name="stateNameVal"]').data("validation-msg-req"),
          },
          cityNameVal: {
            required: $('[name="cityNameVal"]').data("validation-msg-req"),
          },
          email: {
            emailOnly: $('[name="email"]').data("validation-msg-format"),
          },
        },
      });
    }
  }

  async function productDetails(category, productSku) {
    $('#festive-loader').removeClass('d-none');
    const response = await fetch(
      `/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.product.${category}.${productSku}.DEL.DELHI.json`
    );

    try{
      const jsonData = await response.json();
      $('#festive-loader').addClass('d-none');
      const productData = jsonData?.data?.products?.items[0];
      const typeOfCC = parseFloat(productData?.type_of_cc);
      const dealerOptionId = productData?.options?.find(
        (option) => option.title == "Dealer"
      ).option_id;

      //Set Session storage with default product data
      sessionStorage.setItem(
        "__product_data",
        JSON.stringify({
          category: category,
          parentSku: productSku,
          productName: productData?.name,
          typeOfCC: typeOfCC,
          dealerOptionId: dealerOptionId
        })
      );  
      sessionStorage.setItem("dealerOptionId", dealerOptionId);
      return jsonData?.data?.products?.items[0]?.variant_to_colors;
    }
    catch(e){
      $('#festive-loader').addClass('d-none');
      console.error(e);
    }
  }

  /* Get state city list based on the delected model */
  async function getPrebookCommerceStateCityList(stateCode) {
    const model = JSON.parse(sessionStorage.getItem('__product_data')).productName;
    if (!stateCode) {
      try{
        $('#festive-loader').removeClass('d-none');
        let jsonData = await apicall(
          "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.state-and-city.json",
          "POST",
          { model: model }
        );
        stateCityData = jsonData;
        $('#festive-loader').addClass('d-none');
        return jsonData.data.statecityModel
          .sort((state1, state2) => state1.label.localeCompare(state2.label))
          .map(
            (item) =>
              `<li class="font-montserrat-regular font-weight-500" value="${
                item.code
              }">
                    <a href="javascript:void(0)">${item.label.toUpperCase()}</a>
                </li>`
          )
          .join("");
      }
      catch(e){
        $('#festive-loader').addClass('d-none');
        console.error(e);
      }
    } else if (stateCityData) {
      return stateCityData.data.statecityModel
        .find((state) => state.code == stateCode)
        .cities.sort((city1, city2) => city1.label.localeCompare(city2.label))
        .map(
          (item) =>
            `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${
              item.code
            }">
                    <a href="javascript:void(0)">${item.label.toUpperCase()}</a>
              </li>`
        )
        .join("");
    }
  }

  /* Method to fetch Cart from Commerce */
  async function fetchCart() {
    $('#festive-loader').removeClass('d-none');
    try{
      const url =
        "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.cart.json";
      let response = await apicall(url, "POST");
      let cartId = response?.data?.customerCart?.id;
      sessionStorage.setItem('cartId',cartId);
      $('#festive-loader').addClass('d-none');
    }
    catch(e){
      $('#festive-loader').addClass('d-none');
      console.error(e);
    }
  }

  /* Method to add Product Details to Cart */
  async function addToCart(cartId) {
    $('#festive-loader').removeClass('d-none');
    const url =
      "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.add-to-cart.json";
    const productData = JSON.parse(sessionStorage.getItem("__product_data"));
    const dealerData = JSON.parse(sessionStorage.getItem("__dealer_data"));
    const body = {
      cart_id: cartId,
      cart_items: [
        {
          parent_sku: productData.parentSku,
          custom_price: exShowroomPrice,
          data: {
            quantity: 1,
            sku: productData.itemSku,
          },
          customizable_options: [
            {
              id: sessionStorage.getItem("dealerOptionId"),
              value_string: dealerData.selectedDealerCode,
            },
          ],
        },
      ],
    };

    try{
      if(exShowroomPrice) await apicall(url, "POST", body);
      $('#festive-loader').addClass('d-none');
    }
    catch(e){
      $('#festive-loader').addClass('d-none');
      console.error(e);
    }
  }

  /*Method to Add Customer Address and Contact Details to Cart */
async function addAddressToCart(cartId) {
  $('#festive-loader').removeClass('d-none');
  const selectedLoc = JSON.parse(sessionStorage.getItem("__selected_location"));
  const url =
    "/content/hero-commerce/in/en/checkout/jcr:content.add-address-to-cart.json";
  const body = {
    cart_id: cartId,
    shipping_addresses: [
      {
        address: {
          firstname: $('#doc--form [name="fullname"]').val(),
          city: selectedLoc.city,
          postcode: "",
          region: selectedLoc.state,
          address_email: $('#doc--form [name="email"]').val(),
          telephone: "",
          street: ["", ""],
          company: "Hero Corp",
          save_in_address_book: false,
          country_code: "IN",
        },
      },
    ],
    billing_address: {
      same_as_shipping: true,
    },
    shipping_methods: [
      {
        carrier_code: "bikeshipping",
        method_code: "bikeshipping",
      },
    ],
  };

  try{
    const responseDetails = await apicallAddAddressToCart(url, "POST", body);
    if(responseDetails?.error) {
      $('.festive-email-error').html(responseDetails.error);
      $('.festive-email-error').removeClass('d-none');
    }
    if(!responseDetails) {
      $('.festive-email-error').html("Something went wrong");
      $('.festive-email-error').removeClass('d-none');
    }
    $('#festive-loader').addClass('d-none');
  }
  catch(e){
    $('#festive-loader').addClass('d-none');
    console.error(e);
  }
}

/* Method to add Payment data to cart */
async function addPaymentToCart(cartId) {
  $('#festive-loader').removeClass('d-none');
  const prebookCategory = getPrebookCategory();
  const url =
    "/content/hero-commerce/in/en/checkout/jcr:content.add-payment-method.json";
  const body = {
    cart_id: cartId,
    payment_method: {
      code: "partialpay",
    },
    product_sku: prebookCategory,
  };

  try{
    if(prebookCategory) {
      await apicall(url, "POST", body);
      await placeOrder(cartId);
    }
    $('#festive-loader').addClass('d-none');
  }
  catch(e){
    $('#festive-loader').addClass('d-none');
    console.error(e);
  }
}

  /* Method to Place Commerce Order  */
  async function placeOrder(cartId) {
    const url =
      "/content/hero-commerce/in/en/checkout/jcr:content.place-order.json";
    const body = {
      cart_id: cartId,
      return_url: $('#order-status-url').data("orderstatusurl"),
      cancel_url: $('#order-status-url').data("orderstatusurl"),
    };
    const placeOrderResponse = await apicall(url, "POST", body);
    if (placeOrderResponse?.data?.placeOrder?.order?.payment_url) {
      let buttonText = $("#fest-sub-btn").val() || "";
      let payAmount = parseInt(buttonText.match(/\d+/)[0]);
      sessionStorage.setItem("payAmount", payAmount);
      if (window.digitalData && window._satellite) {
        window.digitalData = {
          event: "Festive Checkout",
          festiveForm: {
            vehicleName: sessionStorage.getItem("vehicleName") || "",
            variant: sessionStorage.getItem("variantName") || "",
            color: sessionStorage.getItem("vehicleColor") || "",
            state: sessionStorage.getItem("selectedState") || "",
            city: sessionStorage.getItem("selectedCity") || "",
            dealerName: sessionStorage.getItem("dealerName") || "",
            dealerAddress: sessionStorage.getItem("dealerAddress") || "",
            paymentAmount: sessionStorage.getItem("payAmount") || "",
          },
          page: getPageDetails(),
        };
        _satellite.track("Festive Checkout");
      }

      const paymentGateWayRedirectURL = placeOrderResponse.data.placeOrder.order.payment_url;
      window.location.href = paymentGateWayRedirectURL;
    }
    
  }

  async function apicallAddAddressToCart(url, method, body) {
    let options = {
      method: method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    };
    try{
      let response = await fetch(url, options);
      let jsonData = await response.json();
      return jsonData;
    }
    catch(e){
      console.error(e);
    }
  }

  async function apicall(url, method, body) {
    let options = {
      method: method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    };
    try {
      let response = await fetch(url, options);
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);
      else {
        let jsonData = await response.json();
        return jsonData;
      }
    } catch (e) {
      console.error(e);
    }
  }

  async function updateOrder(orderId, paymentStatusHash) {
    $('#festive-loader').removeClass('d-none');
    const url =
      "/content/hero-commerce/in/en/thank-you/jcr:content.update-order.json";
    const options = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        payment_hash: paymentStatusHash,
        commerce_order_number: orderId,
      }),
    };
    try {
      let response = await fetch(url, options);
      $('#festive-loader').addClass('d-none');
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      else {
        return response.json();
      }
    } catch (error) {
      $('#festive-loader').addClass('d-none');
      console.log(error);  
    }
  }    

  function getPrebookCategory(){
    let productData = sessionStorage.getItem("__product_data");
    if(productData){
      productData = JSON.parse(productData);
      let ccType =  productData.typeOfCC;
      let category = productData.category;
      let productSku = productData.parentSku;
      ccType = Math.ceil(parseFloat(ccType)/10) * 10;
      console.log(`CC Type: ${ccType}`);

      if(productSku == 'hf-100'){
        return "hf-100";
      }
      else if(category == 'premia' || ccType >= 160){
        return "prebook-category3";
      }
      else if(category == 'scooters' || (ccType >= 125 && ccType < 160)){
        return "prebook-category2";
      }
      else if (ccType < 125){
        return "prebook-category1";
      }
    }
    return "";
  }  


  function renderOrderSuccess(orderId) {
    console.log("Payment success");        
    $("#prebook-wrapper .festive-accordion").addClass("d-none");
    $("#prebook-wrapper .festive-sub-success").removeClass("d-none");
    $("#prebook-wrapper .festive-sub-fail").addClass("d-none");

    if (window.digitalData) {
      window.digitalData = {
        event: "Festive Payment Success",
        festiveForm: {
          vehicleName: sessionStorage.getItem("vehicleName") || "",
          variant: sessionStorage.getItem("variantName") || "",
          color: sessionStorage.getItem("vehicleColor") || "",
          state: sessionStorage.getItem("selectedState") || "",
          city: sessionStorage.getItem("selectedCity") || "",
          dealerName: sessionStorage.getItem("dealerName") || "",
          dealerAddress:
            sessionStorage.getItem("dealerAddress") || "",
          paymentAmount: sessionStorage.getItem("payAmount") || "",
          leadID: "festive-" + orderId || "",
          orderID: orderId || "",
        },
        page: {
          siteType: "AEM",
          pageURL: window.location.href,
          path: window.location.pathname,
          fullURL: window.location.href,
          hostName: window.location.origin,
          fullReferringUrl: document.referrer,
          pagename: document.title,
          PageTitle: document.title,
        },
      };
    }
}

  function renderOrderFail(orderId) {
    console.log("Payment fail");
    $("#prebook-wrapper .festive-accordion").addClass("d-none");
    $("#prebook-wrapper .festive-sub-success").addClass("d-none");
    $("#prebook-wrapper .festive-sub-fail").removeClass("d-none");

    if (window.digitalData) {
      window.digitalData = {
        event: "Festive Payment Failure",
        festiveForm: {
          vehicleName: sessionStorage.getItem("vehicleName") || "",
          variant: sessionStorage.getItem("variantName") || "",
          color: sessionStorage.getItem("vehicleColor") || "",
          state: sessionStorage.getItem("selectedState") || "",
          city: sessionStorage.getItem("selectedCity") || "",
          dealerName: sessionStorage.getItem("dealerName") || "",
          dealerAddress:
            sessionStorage.getItem("dealerAddress") || "",
          paymentAmount: sessionStorage.getItem("payAmount") || "",
          orderID: orderId || "",
        },
        page: {
          siteType: "AEM",
          pageURL: window.location.href,
          path: window.location.pathname,
          fullURL: window.location.href,
          hostName: window.location.origin,
          fullReferringUrl: document.referrer,
          pagename: document.title,
          PageTitle: document.title,
        },
      };
    }
  }

});

function getPageDetails() {
    let slug = window.location.pathname.replace(".html", "").split("/");
    let fullSplit = window.location.origin.split("//");
    let pcSplit = fullSplit[1].split(".");
    return {
      siteType: "AEM",
      pageURL: window.location.href,
      path: window.location.pathname,
      fullURL: window.location.href,
      hostName: window.location.origin,
      fullReferringUrl: document.referrer,
      pagename: document.title,
      PageTitle: document.title,
      product: document.title,
      category: slug[2] || "",
      categorylevel1: slug[3] || "",
      categorylevel2: slug[4] || "",
      categorylevel3: slug[5] || "",
      siteCategory: pcSplit[0] || "",
    };
}

let festiveprebookpreform = $(".festiveprebookform #prebook-wrapper");

$(festiveprebookpreform.find('#vehicle-form .cust-form-group:last ul')).on("click", "li", function () {
    sessionStorage.setItem("vehicleName",festiveprebookpreform.find('[name="vehiclename"]').text() || "");
    sessionStorage.setItem("variantName",festiveprebookpreform.find('[name="variantname"]').text() || "");
    sessionStorage.setItem("vehicleColor", $(this).find('a').text() || "");
    if (window.digitalData && window._satellite) {
        window.digitalData = {
          festiveForm: {
            vehicleName: sessionStorage.getItem("vehicleName") || "",
            variant: sessionStorage.getItem("variantName") || "",
            color:  sessionStorage.getItem("vehicleColor") || "",
          },
          page: getPageDetails(),
        };
        _satellite.track("Festive Vehicle Details Submitted");
      }
});

$(festiveprebookpreform.find('#location-form .cust-form-group:last ul')).on("click", "li", function () {
    sessionStorage.setItem("selectedState",festiveprebookpreform.find('[name="statename"]').text() || "");
    sessionStorage.setItem("selectedCity", $(this).find('a').text() || "");
    if (window.digitalData && window._satellite) {
        window.digitalData = {
          festiveForm: {
            vehicleName: sessionStorage.getItem("vehicleName") || "",
            variant: sessionStorage.getItem("variantName") || "",
            color:  sessionStorage.getItem("vehicleColor") || "",
            state:  sessionStorage.getItem("selectedState") || "",
            city:  sessionStorage.getItem("selectedCity") || "",
          },
          page: getPageDetails(),
        };
        _satellite.track("Festive Location Details Submitted");
    }
});

$("#dealer-locator-container").on("click", ".dealer-locator-info", function () {
    sessionStorage.setItem("dealerName", $(this).find('.dealer-locator-name').text() || "");
    sessionStorage.setItem("dealerAddress", $(this).find('.dealer-locator-address').text() || "");
    if (window.digitalData && window._satellite) {
        window.digitalData = {
          festiveForm: {
            vehicleName: sessionStorage.getItem("vehicleName") || "",
            variant: sessionStorage.getItem("variantName") || "",
            color:  sessionStorage.getItem("vehicleColor") || "",
            state:  sessionStorage.getItem("selectedState") || "",
            city:  sessionStorage.getItem("selectedCity") || "",
            dealerName: sessionStorage.getItem("dealerName") || "",
            dealerAddress: sessionStorage.getItem("dealerAddress") || ""
          },
          page: getPageDetails(),
        };
        _satellite.track("Festive Dealer Details Submitted");
    }
});

$(document).ready(function () {

   $(".check-status-anchor").click(function () {
    if (window.digitalData && window._satellite) {
        window.digitalData = {
            CTADetails: {
              location: document.title,
              text: $(this).text() || "",
            },
            page: getPageDetails(),
        };
        _satellite.track("CTA Button Click");
    }
   });

});
$('document').ready(function () {

    const festiveModalSlick = {
        arrows: false,
        dots: true,
        autoplay: true,
        autoplaySpeed: 2500,
        infinite: false,
        centerMode: false,
        responsive: [{
            breakpoint: 9999,
            settings: {
                slidesToShow: 3,
                slidesToScroll: 1,
            }
        },
        {
            breakpoint: 1200,
            settings: {
                slidesToShow: 3,
                slidesToScroll: 1,
            }
        },
        {
            breakpoint: 900,
            settings: {
                slidesToShow: 2,
                slidesToScroll: 1,
            }
        },
        {
            breakpoint: 480,
            settings: {
                slidesToShow: 1.5,
                slidesToScroll: 1,
            }
        },
            // You can unslick at a given breakpoint now by adding:
            // settings: "unslick"
            // instead of a settings object
        ],
    };

    $('.product-card-slider').slick(festiveModalSlick);

    if ($('.festivehub-landing').length > 0) {

        const sitekey = window.aemConfigs.apiEndpoints.googleCaptchaSiteKey;
        const scriptStart = document.createElement('script');
        scriptStart.src = 'https://www.google.com/recaptcha/api.js';
        scriptStart.async = true;
        document.head.appendChild(scriptStart);

        const scriptEnd = document.createElement('script');
        scriptEnd.src = 'https://www.google.com/recaptcha/api.js?render=' + sitekey;
        scriptEnd.async = true;
        document.head.appendChild(scriptEnd);

        let key = '63C09AE37D4254AD7D13A7HGF$F88411';
        let iv = '1234567890123456';
        let requestCampaignID = "";

        $("#offer-cta-input, .card-btn.explore-card-btn").on("click", function (e) {
            let productValue = $(this).parent().data('productsku');
            if(productValue) {
                productValue = productValue.replaceAll('-', '_').replaceAll('splendor_plus_xtec_2', 'splendor_xtec_2').replaceAll('_plus', 'plus').replaceAll('pleasureplus_xtec', 'pleasure');
                $(".festive-test-drive-form li[value='" + productValue + "']").click();
            }
            let sessionCampaignId = sessionStorage.getItem("festivecampaignID");
            let sessionCampaignDropdown = sessionStorage.getItem("festivecampaignDropdown");
            let dropdownSessionVal = false;
            if (sessionCampaignId) {
                requestCampaignID = decryptData(sessionCampaignId, key, iv);
            }

            if (sessionCampaignDropdown) {
                sessionCampaignDropdown = JSON.parse(sessionCampaignDropdown);
                if ($('#vehicleDropdown').text().trim() == sessionCampaignDropdown.vehicle && $('#stateDropdown').text().trim() == sessionCampaignDropdown.state && $('#cityDropdown').text().trim() == sessionCampaignDropdown.city) {
                    dropdownSessionVal = true;
                }

            }

            if (requestCampaignID.length > 0 && dropdownSessionVal) {
                let skippedButton = $('.festive-test-drive-form .festive-test-submit');
                navigationStepper(skippedButton);
            } else {
                $('.stepper-container .content').removeClass('active-content');
                $('.stepper-container .content#step1').addClass('active-content');
                $('.festive-test-drive-form').trigger("reset");
                $('.festive-test-submit').removeClass("active");
                $('.otp-form').removeClass('valid--otp');
                $('.otp-festive').removeClass('valid').prop('disabled', 'disabled');
                $('.festive-send-otp-btn').text('Send OTP').removeClass('show');
                $('.festive-test-drive-form .form-checkbox-mark').click();
                $('.festive-test-drive-form .form-checkbox-mark').toggleClass('active');
            }

            sendFormOfferCTA($(this));
        });

        // callStateCityApi();

        function isSignedIn() {
            let isSignedIn = "No";
            if (sessionStorage.getItem("data")) isSignedIn = "Yes";
            return isSignedIn;
        }

        function hashCode(s) {
            var h = 0,
                l = s.length,
                i = 0;
            if (l > 0)
                while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
            return h;
        }

        function isValidOtp(mobile, otp) {
            const reqId = sessionStorage.getItem("tempID");
            return (
                otp.toString() ===
                (Math.abs(hashCode(mobile + reqId)) % 1000000)
                    .toString()
                    .padStart(6, "0")
            );
        }

        function generateId(len) {
            var arr = new Uint8Array((len || 40) / 2);
            window.crypto.getRandomValues(arr);
            return Array.from(arr, dec2hex).join("");
        }

        function dec2hex(dec) {
            return dec.toString(16).padStart(2, "0");
        }

        function decryptData(encryptedData, key, iv) {
            var base64DecodedData = atob(encryptedData);
            var decryptedBytes = CryptoJS.AES.decrypt(base64DecodedData, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
            var decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);
            return decryptedText;
        }

        function getEncryptString(data) {
            const getKey = "63C09AE37D4254AD7D13A7HGF$F88411";
            const getIv = "1234567890123456";
            const getData = data;

            var authpass = CryptoJS.AES.encrypt(getData, CryptoJS.enc.Utf8.parse(getKey), {
                mode: CryptoJS.mode.CBC,
                iv: CryptoJS.enc.Utf8.parse(getIv),
            });
            var token = base64(authpass);
            return token;
        }

        function base64(data) {
            var wordArray = CryptoJS.enc.Utf8.parse(data);
            var final = CryptoJS.enc.Base64.stringify(wordArray);
            return final;
        }

        async function hashedValue(message) {
            const hashBuffer = await crypto.subtle.digest(
                "SHA-256",
                new TextEncoder().encode(message)
            );
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
            return hashValue;
        }

        async function sendOtp(currentForm, token) {
            checkStepperProgress();
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let otpField = currentForm.find('[name="otp"]');
            sessionStorage.setItem("tempID", generateId());
            var otpdata = {
                phoneNum: $(currentForm).find('[name="mobileno"]').val(),
                pageType: "campaignpage",
                vehicleName: "",
                reqID: sessionStorage.getItem("tempID"),
                token: token
            };
            const phCodemobNumber = "+91" + otpdata.phoneNum;
            let hashedMobile = await hashedValue(phCodemobNumber);
            localStorage.setItem("analyticsHashedMobile", hashedMobile);

            const phCodemobNumberMeta = "91" + otpdata.phoneNum;
            let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
            localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

            $.ajax({
                url: defaultservlet + ".sendotp.html",
                type: "POST",
                data: otpdata,
                success: function (resp) {
                    getOTPevents('success');
                },
                error: function () {
                    getOTPevents('fails');
                },
            });
        }

        $(".mobile-number").on("keyup", function () {
            if ($(this).val().length == 10 && $(this).valid()) {
                $(this).parent(".cust-form-group").find(".festive-send-otp-btn").addClass("show");
            } else {
                $(this).parent(".cust-form-group").find(".festive-send-otp-btn").removeClass("show");
                $(this).parents("form").find(".otp-festive").prop("disabled", true);
            }
        });

        $(".festive-test-drive-form [name='fullname'], .festive-test-drive-form [name='mobileno']").on('focus', function () {
            $('.pre-stepper-wrap').addClass('animate fadeOutStepper');

            const analyticsValues = {
                formfield: $(this).attr('name'),
                formname: "Festive Offer Join Us Form",
                formtype: "static",
            }

            sendFormStartEvent(analyticsValues);
        });

        $(".festive-test-drive-form [name='vehiclename'], .festive-test-drive-form [name='statename'], .festive-test-drive-form [name='cityname']").on('click', function () {
            $('.pre-stepper-wrap').addClass('animate fadeOutStepper')

            const analyticsValues = {
                formfield: $(this).attr('name'),
                formname: "Festive Offer Join Us Form",
                formtype: "static",
            }

            sendFormStartEvent(analyticsValues);
        });

        function checkStepperProgress() {

            let countFilledInputs = 0;

            if ($(".festive-test-drive-form [name='fullname']").val().length >= 3) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='fullname']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $(".festive-test-drive-form [name='fullname']").parent().find('.cust-title').removeClass('isfilled');
            }
            if ($(".festive-test-drive-form [name='mobileno']").val().length == 10 && !($(".festive-test-drive-form [name='otp']").attr("disabled") == "disabled")) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='mobileno']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $(".festive-test-drive-form [name='mobileno']").parent().find('.cust-title').removeClass('isfilled');
            }
            if ($(".festive-test-drive-form [name='otp']").val().length == 6 && $(".festive-test-drive-form [name='otp']").parent().hasClass('valid--otp')) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='otp']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $(".festive-test-drive-form [name='otp']").parent().find('.cust-title').removeClass('isfilled');
            }
            if (!($('.festive-test-drive-form [name="vehiclename"]').text().includes('Select Vehicle'))) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='vehiclename']").parent().parent().find('.cust-title').addClass('isfilled');
            }
            if (!($('.festive-test-drive-form [name="statename"]').text().includes('Select your State'))) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='statename']").parent().parent().find('.cust-title').addClass('isfilled');
            }
            if (!($('.festive-test-drive-form [name="cityname"]').text().includes('Select your City'))) {
                countFilledInputs++;
                $(".festive-test-drive-form [name='cityname']").parent().parent().find('.cust-title').addClass('isfilled');
            }
            if (countFilledInputs > 0 && countFilledInputs <= 6) {
                $('.step .progress-line').eq(0).css("background", `linear-gradient(to right, #fff ${(countFilledInputs - 1) * (10) + (30)}%, transparent ${(countFilledInputs - 1) * (10) + (30)}%`);
            }

            if (countFilledInputs == 6 && $('.form-checkbox-mark.active').length > 0) {
                $('.festive-test-submit').addClass('active');
            } else {
                $('.festive-test-submit').removeClass('active');
            }

            return countFilledInputs;
        }

        $("[name='fullname'], [name='mobileno'], [name='otp']").on('input', function () {
            checkStepperProgress();
        });

        $(".festivehub-landing .festive-send-otp-btn").on("click", function () {
            getOTPevents('request');
            var currentForm = $(this).parents("form");
            $(currentForm).find(".otp-festive").attr("disabled", false);
            $(currentForm).find(".otp-festive").val('');
            $(currentForm).find(".otp-form").removeClass('valid--otp');

            let timerVal = 30;
            let interval = setInterval(() => {
                timerVal--;
                if (timerVal === 0) {
                    clearInterval(interval);
                    $(".festive-send-otp-btn").text("Resend OTP");
                } else {
                    if (timerVal < 10) {
                        $(".festive-send-otp-btn").text(`00:0${timerVal}`);
                        $(this).removeClass("no-click");
                    } else {
                        $(this).addClass("no-click");
                        $(".festive-send-otp-btn").text(`00:${timerVal}`);
                    }
                }
            }, 1000);
            setTimeout(() => {
                $(this).addClass('show');
            }, 1000)

            $(this).removeClass("show");
            grecaptcha.ready(function () {
                grecaptcha.execute(sitekey).then(function (token) {
                    sendOtp(currentForm, token);
                });
            });

        });


        $(".festivehub-landing .form-checkbox-mark").on("click", function () {
            $(this).toggleClass('active');
            checkStepperProgress();
        })

        $(".festive-test-drive-parent .cust-dropdown-menu, .book-test-ride-campaign .cust-dropdown-menu"
        ).on("click", "li", function () {
            let selectionGroup = $(this).parents(".cust-drop-down");
            var button = selectionGroup.find(".dropdown-select");
            button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
            var form = $(this).closest("form");
            selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
            $(this).addClass("active");
            if ("vehiclename" == button.attr("name")) {
                setTimeout(function () {
                    if ($('.festive-test-drive-form [name="vehicleNameVal"]').val()) {
                        $('.festive-test-drive-form [name="vehicleNameVal"]').parent().children('label').remove()
                    }
                }, 500);
                form.find('[name="vehicleNameVal"]').val($(this).find('a').text());
                $('.festive-test-drive-form #vehicleDropdown').html($(this).find('a').text());
                $('.festive-test-drive-form #vehicleDropdown').addClass('selected-vals');
                checkStepperProgress();
            } else if ("statename" == button.attr("name")) {
                let cityField = form.find('[name="cityname"]');
                let list = cityField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu ");
                stateName = $(this).find('a').text();

                setTimeout(function () {
                    if ($('.festive-test-drive-form [name="stateNameVal"]').val()) {
                        $('.festive-test-drive-form [name="stateNameVal"]').parent().children('label').remove()
                    }
                }, 500);

                // var cityPath = "/bin/statecitylist";

                let cityValue = form.find('[name="cityNameVal"]').val();
                populateCityPopupDropdown(list, stateName, cityValue);
                form.find('[name="stateNameVal"]').val(button.text());
                form.find('[name="cityNameVal"]').val("");
                $('.festive-test-drive-form #stateDropdown').html($(this).find('a').text());
                $('.festive-test-drive-form #stateDropdown').addClass('selected-vals');
                checkStepperProgress();
            } else if ("cityname" == button.attr("name")) {

                setTimeout(function () {
                    if ($('.festive-test-drive-form [name="cityNameVal"]').val()) {
                        $('.festive-test-drive-form [name="cityNameVal"]').parent().children('label').remove()
                    }
                }, 500);

                form.find('[name="cityNameVal"]').val(button.text());
                $('.festive-test-drive-form #cityDropdown').html(button.text().replace(/(<([^>]+)>)/ig, ''));
                $('.festive-test-drive-form #cityDropdown').addClass('selected-vals');
                checkStepperProgress();
            }
        });

        $(".otp-festive").on('paste', async function (event) {
            // Get the clipboard data
            var clipboardData = event.originalEvent.clipboardData || window.clipboardData;
            var pastedData = clipboardData.getData('text');

            $(this).val(pastedData).trigger("input");

            if ($(this).val().length == 6) {
                let mobNumber = $('.festive-test-drive-form').find('[name="mobileno"]').val();
                let otpEntered = $(this).val();
                if (isValidOtp(mobNumber, otpEntered)) {
                    $(this).parent().removeClass('invalid--otp').addClass('valid--otp');
                    const phCodemobNumber = "+91" + mobNumber;
                    let hashedMobile = await hashedValue(phCodemobNumber);
                    localStorage.setItem("analyticsHashedMobile", hashedMobile);

                    const phCodemobNumberMeta = "91" + mobNumber;
                    let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
                    localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);
                    checkStepperProgress();

                    getOTPevents('verified');
                }
                else {
                    $(this).parent().removeClass('valid--otp');
                    $(this).parent().addClass('invalid--otp');
                    checkStepperProgress();
                }
            }
            else {
                $(this).parent().removeClass('valid--otp');
                $(this).parent().removeClass('invalid--otp');
            }
        });

        $(".otp-festive").on("keyup input", async function (event) {
            var pastedData;

            var clipboardData = event.originalEvent.clipboardData || window.clipboardData;

            if (clipboardData) {
                pastedData = clipboardData.getData('text');
                $(".otp-festive").val(pastedData).trigger("input");
            }

            if ($(this).val().length == 6) {
                let mobNumber = $('.festive-test-drive-form').find('[name="mobileno"]').val();
                let otpEntered = $(this).val();
                if (isValidOtp(mobNumber, otpEntered)) {
                    $(this).parent().removeClass('invalid--otp').addClass('valid--otp');
                    const phCodemobNumber = "+91" + mobNumber;
                    let hashedMobile = await hashedValue(phCodemobNumber);
                    localStorage.setItem("analyticsHashedMobile", hashedMobile);

                    const phCodemobNumberMeta = "91" + mobNumber;
                    let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
                    localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);
                    checkStepperProgress();

                    getOTPevents('verified');
                }
                else {
                    $(this).parent().removeClass('valid--otp');
                    $(this).parent().addClass('invalid--otp');
                    checkStepperProgress();
                }
            }
            else {
                $(this).parent().removeClass('valid--otp');
                $(this).parent().removeClass('invalid--otp');
            }
        });

        function navigationStepper(currentButton) {
            let currentStep = currentButton.attr('data-next');
            $(`#step${currentStep}`).removeClass('active-content');
            $('.step').eq(currentStep - 1).removeClass('active');

            currentStep = parseInt(currentStep) + 1;

            if (currentStep == 3) {
                $('.claim-offer-modal-content .festive-offer-cross-button').addClass('d-none');
                $('.thanks-wrapper .sub-text span').html($('.influencer-radio.active .influencer-text').text());
            }

            $(`#step${currentStep}`).addClass('active-content');
            $('.step').eq(currentStep - 1).addClass('active');
        }

        if ($(".festive-test-drive-form").length > 0) {
            customValidation($(".festive-test-drive-form"));
        }

        function customValidation($form) {
            // for mobile no fields
            jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
                return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
            });
            //for allow numbers only
            jQuery.validator.addMethod("numbersOnly", function (value) {
                return /^[0-9]+$/i.test(value);
            });
            //for allow only character
            jQuery.validator.addMethod("alphabetsOnly", function (value) {
                return /^[A-Za-z]+$/i.test(value);
            });
            jQuery.validator.addMethod("otpverified", function (value) {
                return isValidOtp($form.find('[name="mobileno"]').val(), $form.find('[name="otp"]').val());
            });
            //   festive-test-drive-form
            $form.validate({
                ignore: [],
                rules: {
                    fullname: {
                        required: true,
                        alphabetsOnly: true,
                    },
                    mobileno: {
                        required: true,
                        numbersOnly: true,
                        mobilenoOnly: true,
                    },
                    otp: {
                        required: true,
                        numbersOnly: true,
                        otpverified: true,
                    },
                    vehicleNameVal: {
                        required: true,
                    },
                    stateNameVal: {
                        required: true,
                    },
                    cityNameVal: {
                        required: true,
                    },
                    captcha: {
                        required: ".ignore-validation:visible",
                    }
                },
                messages: {
                    fullname: {
                        required: $('.festive-test-drive-form [name="fullname"]').data("validation-msg-req"),
                        alphabetsOnly: $('.festive-test-drive-form [name="fullname"]').data(
                            "validation-msg-format"
                        ),
                    },
                    mobileno: {
                        required: $('.festive-test-drive-form [name="mobileno"]').data("validation-msg-req"),
                        numbersOnly: $('.festive-test-drive-form [name="mobileno"]').data("validation-msg-req"),
                        mobilenoOnly: $('.festive-test-drive-form [name="mobileno"]').data("validation-msg-req"),
                    },
                    otp: {
                        required: $('.festive-test-drive-form [name="otp"]').data("validation-msg-req"),
                        numbersOnly: $('.festive-test-drive-form [name="otp"]').data("validation-msg-format"),
                        otpverified: $('.festive-test-drive-form [name="otp"]').data("validation-msg-format"),
                    },
                    vehicleNameVal: {
                        required: $('.festive-test-drive-form [name="vehicleNameVal"]').data("validation-msg-req")
                    },
                    stateNameVal: {
                        required: $('.festive-test-drive-form [name="stateNameVal"]').data("validation-msg-req"),
                    },
                    cityNameVal: {
                        required: $('.festive-test-drive-form [name="cityNameVal"]').data("validation-msg-req"),
                    },
                    captcha: {
                        required: $('.festive-test-drive-form [name="captcha"]').data("validation-msg-req"),
                    }
                },
            });
        }

        function populateCityPopupDropdown(listSelector, selectedState, cityName) {
            if (cityName != "") {
                let form = $(listSelector).closest("form");
                let cityField = form.find('[name="cityname"]');
                cityField.text(
                    form.find('[name="cityname"]').attr("data-default-label")
                );
            }

            if (listSelector[0] !== undefined) {
                let newList = JSON.parse(sessionStorage.getItem("offerStateCityList"));

                listSelector.empty();

                let matchedCity = newList.filter(state => state.label == selectedState);

                if (matchedCity.length > 0) {

                    const [{ cities }] = matchedCity;
                    cities?.forEach(function (listData, index) {
                        const appendHtml = `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${listData.label}">
                                                <a href="javascript:void(0)">${listData.label}</a>
                                            </li>`;
                        $(listSelector).append(appendHtml);
                    })
                    $('[name="cityname"]').removeAttr("disabled");
                } else {
                    throw new Error("Selected state not found in data");
                }
            }
        }

        function getQueryParams(search) {
            let params = {};
            let definitions = search.split("&");
            definitions.forEach(function (val, key) {
                let parts = val.split("=", 2);
                if (parts[1] != undefined && parts[1].length > 1) {
                    params[parts[0]] = decodeURIComponent(parts[1]);
                }
            });
            return {
                utm_source: params["utm_source"],
                utm_medium: params["utm_medium"],
                utm_term: params["utm_term"],
                utm_content: params["utm_content"],
                utm_campaign: params["utm_campaign"],
            };
        }

        async function bookridesubmit(currentForm, currentBtn) {
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let category = window.location.pathname.split("/")[2];
            $(currentForm).find(".festive-test-submit").attr("disabled", "disabled");
            let vehicleName = $('.festive-test-drive-form').find('[name="vehiclename"]').text();
            var validationType = "otp";
            let _utmContent = $("#utmcontent").data("utmcontent");
            let _getParams = getQueryParams(window.location.search.slice(1));
            let _utmsource = $("#utmsource").data("utmsource");
            let pageTitle = document.title;
            let source;

            source = _getParams.utm_source
                ? _getParams.utm_source
                : _utmsource
                    ? `AEM-${getOS()}-${_utmsource}`
                    : `AEM-${getOS()}-${category}-${pageTitle}-${validationType}`;
            var dataObj = {
                vehicle_purchase_plan: '',
                mx_Interested_in_Buying_Used_Vehicle: '',
                bike_model: vehicleName,
                name: $(currentForm).find('[name="fullname"]').val().trim(),
                mobile: $(currentForm).find('[name="mobileno"]').val(),
                otp: validationType == "otp" ? $(currentForm).find('[name="otp"]').val() : "",
                captcha:
                    validationType == "captcha" ? $(currentForm).find('[name="captcha"]').val() : "",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "&")
                    .replaceAll("&", "&"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "&")
                    .replaceAll("&", "&"),
                reqID: sessionStorage.getItem("tempID"),
                dealer_code: null,
                variation_type: "festive-influencer-campaign",
                dealer_name: "",
                topic: null,
                suggestion: null,
                section: null,
                source: source,
                enqsource: "",
                utm_source: _getParams.utm_source,
                utm_medium: _getParams.utm_medium,
                utm_term: _getParams.utm_term,
                utm_content: _utmContent ? _utmContent : _getParams.utm_content,
                utm_campaign: _getParams.utm_campaign,
                source_campaign: $('.festive-test-submit').data('utm-label'),

            };

            let analyticsValue = {
                formname: "Festive Offer Join Us Form",
                formtype: "static",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                influencername: "NA",
                preferredlanguage: "NA"
            }

            let errorAnalyticsValue = {
                formname: "Festive Offer Join Us Form",
                formtype: "static",
                errorfields: "API",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and")
            }

            let sessionDropdownVals = {
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                vehicle: vehicleName
            }

            try {
                $.ajax({
                    url: defaultservlet + ".generatelead.html",
                    type: "POST",
                    data: JSON.stringify(dataObj),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (resp) {
                        if (resp && JSON.parse(JSON.stringify(resp)).login == "true") {
                            $(currentForm).find(".festive-test-submit").removeAttr("disabled");
                        } else {
                            $(currentForm).find(".festive-test-submit").removeAttr("disabled");
                        }
                        if (resp?.RelatedId) {
                            let encRelatedID = getEncryptString(resp.RelatedId);
                            sessionStorage.setItem('festivecampaignID', encRelatedID);
                            sessionStorage.setItem('festivecampaignDropdown', JSON.stringify(sessionDropdownVals));
                            sendFormSuccessEvent(analyticsValue);
                        }
                        navigationStepper(currentBtn);
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                    error: function (error) {
                        console.log('Error', error);
                        $(currentForm).find(".festive-test-submit").removeAttr("disabled");
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                        sendFormErrorEvent(errorAnalyticsValue);
                    },
                });
            }
            catch (e) {
                console.log('Error', e);
                $(currentForm).find(".festive-test-submit").removeAttr("disabled");
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                sendFormErrorEvent(errorAnalyticsValue);
            }

        }

        $(".festive-test-submit").on("click", function (e) {
            $('.festive-loader').removeClass('d-none');
            $('.festive-loader .festive-loader-icon').addClass('animate fadeInUpStand');
            let currentForm = $(this).closest("form");
            let currentBtn = $(this);
            const checkValidation = checkStepperProgress();
            if (currentForm.valid() && checkValidation == 6 && $('.form-checkbox-mark.active').length > 0) {
                submitClicked = true;
                bookridesubmit(currentForm, currentBtn);
            } else {
                let formerrorList = currentForm.data("validator").errorList;
                let fieldlist = "";
                $.each(formerrorList, function (key, value) {
                    if ("" !== fieldlist) {
                        fieldlist = fieldlist + "|";
                    }
                    fieldlist = fieldlist + formerrorList[key].element.name;
                });
                if (!fieldlist.includes("otp") && $('#otp').val() === '') {

                    fieldlist = fieldlist + '|' + 'otp'
                }
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                let errorAnalyticsValue = {
                    formname: "Join Us Form",
                    formtype: "static",
                    errorfields: fieldlist,
                    city: $(currentForm)
                        .find('[name="cityname"]')
                        .text()
                        .replaceAll("&amp;", "and")
                        .replaceAll("&", "and")
                        .trim(),
                    state: $(currentForm)
                        .find('[name="statename"]')
                        .text()
                        .replaceAll("&amp;", "and")
                        .replaceAll("&", "and")
                        .trim()
                }
                sendFormErrorEvent(errorAnalyticsValue);
            }
        });

        $('.submit-influencer-btn').on("click", function (e) {
            $('.festive-loader').removeClass('d-none');
            $('.festive-loader .festive-loader-icon').addClass('animate fadeInUpStand');
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let currentBtn = $(this);

            let sessionCampaignId = sessionStorage.getItem("festivecampaignID");
            let requestCampaignID = "";
            requestCampaignID = decryptData(sessionCampaignId, key, iv);

            var dataObj = {
                variation_type: "festive-update-lead",
                leadId: requestCampaignID,
                mx_Language: $('.language-options .lang-content-options.active-option-checks input').attr('value'),
                mx_Influencer_Name: $(".left-module .influencer-radio.active .influencer-text").text()
            };

            let analyticsValue = {
                formname: "Influencer Form",
                formtype: "static",
                city: $('.festive-test-drive-form')
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $('.festive-test-drive-form')
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                influencername: $(".left-module .influencer-radio.active .influencer-text").text(),
                preferredlanguage: $('.language-options .lang-content-options.active-option-checks input').attr('value')
            }

            try {
                $.ajax({
                    url: defaultservlet + ".updatelead.html",
                    type: "POST",
                    data: JSON.stringify(dataObj),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (resp) {
                        if (resp?.Status == "Success") {
                            sessionStorage.removeItem("festivecampaignID");
                            sendFormSuccessEvent(analyticsValue);
                            navigationStepper(currentBtn);
                        }
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                    error: function (error) {
                        console.log('Error', error);
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                });
            }
            catch (e) {
                console.log('Error', e);
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
            }
        })

        $('.final-cta-campaign').on("click", function (e) {
            const analyticsValues = {
                name: $(this).data('cta-val'),
                URL: $(this).data('url') ? $(this).data('url') : 'NA',
                position: $(this).data('cta-position'),
            }
            sendLinkCkickEvent(analyticsValues);
            let urlRedirector = $(this).data('url');
            if (urlRedirector) {
                window.location.href = urlRedirector;
            }
        })

        $(".influencer-radio .thumbnail-img, .influencer-radio .influencer-options").on("click", function (e) {
            $('.influencer-radio').removeClass('active');
            $(this).parent().addClass('active');
            $(this).parent().find('.influencer-options').prop("checked", true);
        });

        $(".language-options .lang-content-options").on("click", function (e) {
            $('.lang-content-options').removeClass('active-option-checks');
            $(this).addClass('active-option-checks');
            $(this).find('.options').prop("checked", true);
        });

        $('.festive-test-drive-form .form-checkbox-mark').click();
        $('.festive-test-drive-form .form-checkbox-mark').toggleClass('active');
        $('.influencer-radio').eq(0).find('.influencer-options').prop("checked", true);


        // Analytics Changes

        function checkDuplicateArray(arr, eventName) {
            const index = arr.findIndex(obj => obj?.event == eventName);

            return index;
        }

        function getPageDetails(isErrorPage = false) {
            let pagePath = window.location.pathname;
            let slug = pagePath.split("/");
            let actualSlug = slug[1].replace(".html", "");
            let primary_category = window.location.origin;
            let fullSplit = primary_category.split("//");
            let pcSplit = fullSplit[1].split(".");
            let title = $("title").text();
            let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
            let countryCode = "in";
            if (countryRegrex && countryRegrex.length > 1) {
                countryCode = countryRegrex[1];
            }
            let sub1 = "";
            let sub2 = "";
            let sub3 = "";
            let sub4 = "";
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
                sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
                if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
                    sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
                if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
                    sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
                if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
                    sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
            } else {
                if (slug[2]) sub1 = slug[2].replace(".html", "");
                if (slug[3]) sub2 = slug[3].replace(".html", "");
                if (slug[4]) sub3 = slug[4].replace(".html", "");
                if (slug[5]) sub4 = slug[5].replace(".html", "");
            }
            return {
                pagename: title,
                server: window.location.hostname,
                fullURL: window.location.href,
                category: sub1,
                categoryLevel1: sub2,
                categoryLevel2: sub3,
                categoryLevel3: sub4,
                isErrorPage: isErrorPage,
                pageType: "AEM",
                language: "en",
                country: countryCode,
                platform: getOS(),
                custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
                loggedIn: isSignedIn(),
                previousPageValue: document.referrer,
            };
        }

        function sendLinkCkickEvent(webValue) {
            if (window.digitalData) {
                const pageData = {
                    event: "linkClicked",
                    web: {
                        webInteraction: webValue,
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                }
                window.digitalData.push(pageData);
            }
        }

        function sendFormSuccessEvent(formValues) {
            if (window.digitalData) {
                const pageData = {
                    event: "Form Success",
                    formDetails: formValues,
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                }
                window.digitalData.push(pageData);
            }
        }

        function sendFormErrorEvent(formValues) {
            if (window.digitalData) {
                const pageData = {
                    event: "Form Error",
                    formDetails: formValues,
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                }
                window.digitalData.push(pageData);
            }
        }

        function sendFormStartEvent(formValues) {
            if (window.digitalData) {
                const pageData = {
                    event: "Form Start",
                    formDetails: formValues,
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                }

                const isEventPresent = checkDuplicateArray(window.digitalData, "Form Start");
                if (isEventPresent == -1) {
                    window.digitalData.push(pageData);
                }
            }
        }

        function getOTPevents(otpState) {
            if (otpState == 'request') {
                if (window.digitalData) {
                    const pageData = {
                        event: "OTP Requested",
                        formDetails: {
                            formname: "Festive Offer Join Us Form",
                            formtype: "static",
                        },
                        user: {
                            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                        },
                        page: getPageDetails()
                    };
                    window.digitalData.push(pageData);
                    _satellite.track("OTP Requested");
                }
            }
            if (otpState == 'success') {
                if (window.digitalData) {
                    const pageData = {
                        event: "OTP Success",
                        formDetails: {
                            formname: "Festive Offer Join Us Form",
                            formtype: "static",
                        },
                        user: {
                            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                        },
                        page: getPageDetails()
                    }
                    window.digitalData.push(pageData);
                }
            }
            if (otpState == 'fails') {
                if (window.digitalData) {
                    const pageData = {
                        event: "OTP Fails",
                        formDetails: {
                            formname: "Festive Offer Join Us Form",
                            formtype: "static",
                        },
                        user: {
                            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                        },
                        page: getPageDetails()
                    }
                    window.digitalData.push(pageData);
                }
            }
            if (otpState == 'verified') {
                if (window.digitalData) {
                    const pageData = {
                        event: "OTP Verified",
                        formDetails: {
                            formname: "Festive Offer Join Us Form",
                            formtype: "static",
                        },
                        user: {
                            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                        },
                        page: getPageDetails()
                    }
                    window.digitalData.push(pageData);
                }
            }
        }

        function sendFormOfferCTA(selectorNode) {
            if (window.digitalData && window._satellite) {
                window.digitalData.push({
                    CTADetails: {
                        location: "Check offers",
                        text: selectorNode.val() || selectorNode.text()?.trim() || "",
                        product: $("#vehicleDropdown").text().trim() || "",
                        state: $("#stateDropdown").text().trim() || "",
                        city: $("#cityDropdown").text().trim() || "",
                    },
                    page: {
                        siteType: "AEM",
                        pageURL: window.location.href,
                        path: window.location.pathname,
                        fullURL: window.location.href,
                        hostName: window.location.origin,
                        fullReferringUrl: document.referrer,
                        pagename: document.title,
                        PageTitle: document.title,
                    },
                });
                _satellite.track("CTA Button Click");
            }
        }
    }
})

$(document).ready(async function () {
  if ($('#festive-hub-landing').length) {

    if (window.innerWidth > 569) {
      $('.form-wrap-cta-offer').attr('data-aos', 'fade-up');
    }

    let sticky_offset;

    let locState;
    let locCity;

    const utmSourceModel = getUTMModelName($.urlParam('utm_model'));


    AOS.init({
      easing: 'ease-out-back',
      duration: 1000
    });

    if (window.innerWidth < 569) {
      var original_position_offset = $('.festive-offer-cta').offset();
      sticky_offset = original_position_offset.top;
      $('.festive-offer-cta').css({ 'position': 'fixed', 'bottom': '0', 'width': '100%', 'background': '#FFFFFF', 'padding': '16px 0', 'z-index': '2' });
    }

    const festiveOfferSlick = {
      infinite: false,
      autoplay: false,
      dots: true,
      prevArrow: window.innerWidth < 569 ? false : "<img class='a-left control-c next slick-prev' src='/content/dam/hero-aem-website/in/festive-hub/offer_arrow_left.png'>",
      nextArrow: window.innerWidth < 569 ? false : "<img class='a-right control-c next slick-next' src='/content/dam/hero-aem-website/in/festive-hub/festive-slick-arrow.png'>",
      autoplaySpeed: 2500,
      responsive: [{
        breakpoint: 9999,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 900,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
        }
      },
      {
        breakpoint: 576,
        settings: {
          slidesToShow: 1.2,
          slidesToScroll: 1,
        }
      },
      ],
    };

    if (window.innerWidth > 569 && $(".festive-offer-card-wrap .festive-card-comp").length < 5) {
      $(".festive-offer-card-wrap .festive-card-content").addClass('w-100');
    } else if (window.innerWidth < 569) {
      $(".festive-offer-card-wrap").slick(festiveOfferSlick);
    } else {
      $(".festive-offer-card-wrap").slick(festiveOfferSlick);
    }

    // AOS.refresh();
    const cityPlaceHolder = $('#cityDropdown').text().trim();
    const cityPopulPlaceHolder = $('#claimCityDropdown').text().trim();
    const defaultservlet = document.getElementById("defaultservlet").value;
    let modelListArray;

    function generateUtmClick() {
      $(".festive-offer-section ul li[value='" + utmSourceModel + "']").click();
      $("#festive-hub-landing li[value='del']").click();
      $("#festive-hub-landing li[value='DELHI']").click();
    }

    function initialClickLocation() {
      if (utmSourceModel) {
        generateUtmClick();
      }
      else {
        $("#festive-hub-landing li[value='xtreme_125r']").click();
        $("#festive-hub-landing li[value='del']").click();
        $("#festive-hub-landing li[value='DELHI']").click();
      }
    }

    $("#claim-offers-form2 .invalid-otp-message, #claim-offers-form2 .invalid-city-message, #claim-offers-form2 .invalid-state-message, #claim-offers-form2 .invalid-vehicle-message").hide();


    function checkNodeCityList(cityValue) {
      let nodeCityTarget = $('.node-city-offers').find(`[data-city-val='${cityValue}'] .node-city-val`).text();
      let nodeApiVal = $('.node-city-offers').find(`[data-city-val='${cityValue}'] .node-api-val`).text();
      if (cityValue == nodeCityTarget && nodeApiVal.length > 0) {
        return nodeApiVal;
      }
    }

    $(
      ".festive-offer-wrap .cust-dropdown-menu"
    ).on("click", "li", async function () {

      let vehicleVal;
      let stateVal;
      let cityVal;

      $('#searchCityOffer').val('');
      let selectionGroup = $(this).parents(".cust-drop-down");
      let button = selectionGroup.find(".dropdown-select");
      let form = $(this).closest("form");
      selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
      $(this).addClass("active");
      if ("vehiclename" == button.attr("name")) {
        form.find('[name="vehicleNameVal"]').val($(this).attr("value"));
        $('#vehicleDropdown').html(`${$(this).text()} <img class=""
      src="/content/dam/hero-aem-website/in/festive-hub/dropdown-festive-arrow.png">`);

        vehicleVal = $('.festive-offer-section [name="vehicleNameVal"]').val();
        stateVal = $('.festive-offer-section [name="stateNameVal"]').val();
        cityVal = $('.festive-offer-section [name="cityNameVal"]').val();

        let specialCityVal = checkNodeCityList(cityVal);

        if (vehicleVal != '' && stateVal != '') {
          populateOffers(vehicleVal, stateVal, specialCityVal);
        }

        $(".festivehub-landing li[value='" + $(this).attr('value') + "']").click();

        $("#festive-hub-landing #claim-offers-form2 li[value='" + vehicleVal + "']").click();

      } else if ("cityname" == button.attr("name")) {
        form.find('[name="cityNameVal"]').val($(this).attr("value"));
        $('#cityDropdown').html(`${$(this).text()} <img class=""
          src="/content/dam/hero-aem-website/in/festive-hub/dropdown-festive-arrow.png">`);

        stateVal = $('.festive-offer-section [name="stateNameVal"]').val().toLowerCase();
        cityVal = $('.festive-offer-section [name="cityNameVal"]').val();

        await generateSliders(stateVal, cityVal);

        $("#festive-hub-landing #claim-offers-form2 li[value='" + cityVal + "']").click();

        $('.festive-offer-card-wrap').addClass('d-flex');
        $('.product-card-slider').slick('setPosition');

        vehicleVal = $('.festive-offer-section [name="vehicleNameVal"]').val();
        stateVal = $('.festive-offer-section [name="stateNameVal"]').val();

        $(".festivehub-landing li[value='" + $(this).attr('value') + "']").click();

        let specialCityVal = checkNodeCityList(cityVal);

        if (vehicleVal != '' && stateVal != '') {
          populateOffers(vehicleVal, stateVal, specialCityVal);
        }

      } else if ("statename" == button.attr("name")) {
        stateVal = $(this).attr('value');
        let cityButton = $('#festive-form [name="cityname"]');
        cityButton.html(`${cityPlaceHolder} <img class=""
        src="/content/dam/hero-aem-website/in/festive-hub/dropdown-festive-arrow.png">`);
        $('.festive-offer-wrap [name="cityNameVal"]').val('');
        let list = cityButton
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");
        stateName = $(this).text();
        let cityValue =
          null != (window && window.locations) ? locations.City : "";
        cityPath =
          defaultservlet + ".dealercities." + $(this).attr("value") + ".html";

        form.find('[name="stateNameVal"]').val($(this).attr("value"));
        $('#stateDropdown').html(`${$(this).text()} <img class=""
      src="/content/dam/hero-aem-website/in/festive-hub/dropdown-festive-arrow.png">`);

        $(".festivehub-landing li[value='" + $(this).attr('value') + "']").click();

        populateCityDropdown(list, stateName, cityValue);

        cityButton[0].disabled = false;

        $("#festive-hub-landing #claim-offers-form2 li[value='" + stateVal + "']").click();

        // generateModelList(stateVal);


      }
    });

    $('.festive-offer-wrap .offer-disable-click').click(function () { return false; });

    $('#cityUlDrop').on('hide.bs.dropdown', function () {
      $('#searchCityOffer').val('');
    })

    $(document).scroll(function (e) {
      if (window.innerWidth < 569) {
        var sticky_height = $('.festive-offer-cta').outerHeight();
        var where_scroll = (document.documentElement.scrollTop || document.body.scrollTop);
        var window_height = $(window).height();

        if ((where_scroll + window_height) > sticky_offset) {
          $('.festive-offer-cta').css({ 'position': 'relative', 'background': 'unset', 'padding': '0 0 16px' });
        }

        if ((where_scroll + window_height) < (sticky_offset - sticky_height)) {
          $('.festive-offer-cta').css({ 'position': 'fixed', 'bottom': '0', 'width': '100%', 'background': '#FFFFFF', 'padding': '16px 0', 'z-index': '2' });
        }
      }
    });

    callStateCityApi();

    /* Method to get State City from Data from Commerce */
    async function getStateCityList() {
      let jsonData = await apicall(
        "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.state-and-city.json",
        "GET",
      );
      return jsonData.data.stateCity;
    }

    async function callStateCityApi() {
      getStateCityList()
        .then(function (html) {
          sessionStorage.setItem("offerStateCityList", JSON.stringify(html));
          let statelist = $('.festive-offer-wrap, .festive-test-drive-form')
            .find('[name="statename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          generateStateDropDown(statelist);
          if ("geolocation" in navigator && sessionStorage.getItem("locationServiceEnabled") === "true") {
            navigator.geolocation.getCurrentPosition(function (position) {

              var latitude = position.coords.latitude;
              var longitude = position.coords.longitude;
              var geocodingAPI = "https://nominatim.openstreetmap.org/reverse";
              var requestURL = geocodingAPI + "?format=jsonv2&lat=" + latitude + "&lon=" + longitude;

              $.get(requestURL, function (data) {
                if (data && data.address) {
                  // Extract state and city information from the response
                  locState = data.address.state;
                  locCity = data.address.city || data.address.county;
                  locState = getStateInfo(locState.toLowerCase());

                  if (locCity) {
                    locCity = locCity.toLowerCase();
                  }
                  if (utmSourceModel) {
                    generateUtmClick();
                  }
                  else {
                    $("#festive-hub-landing li[value='xtreme_125r']").click();
                    $("#festive-hub-landing li[value='del']").click();
                    $("#festive-hub-landing li[value='DELHI']").click();
                  }
                } else {
                  initialClickLocation();
                }
              });
              sessionStorage.setItem("locationServiceEnabled", "true");
            }, function errorCallback(error) {
              console.log(error);
              initialClickLocation();
            });
          } else {
            console.log('Not Available Outside');
            initialClickLocation();
          }
        })
        .catch(function (err) {
          console.log("Something went wrong.", err);
        });
    }

    function generateStateDropDown(selector) {
      let form = $(selector).closest("form");
      let stateListNew = form
        .find('[name="statename"]')
        .parents(".cust-drop-down")
        .find(".cust-dropdown-menu");

      form.find('[name="cityname"]').attr("disabled", true);

      let stateCityList = JSON.parse(sessionStorage.getItem("offerStateCityList"));

      stateCityList?.forEach(function (listData, index) {
        const appendHtml = `<li class="font-montserrat-regular font-weight-500" value="${listData.code?.toLowerCase()}"><a
                                 href="javascript:void(0)">${listData.label}</a></li>`;
        $(stateListNew).append(appendHtml);
      })
    }

    function populateCityDropdown(listSelector, selectedState, cityName) {
      if (cityName != "") {
        let form = $(listSelector).closest("form");
        let cityField = form.find('[name="cityname"]');
        cityField.text(
          form.find('[name="cityname"]').attr("data-default-label")
        );
      }

      if (listSelector[0] !== undefined) {
        let newList = JSON.parse(sessionStorage.getItem("offerStateCityList"));

        listSelector.empty();

        let matchedCity = newList.filter(state => state.label == selectedState);

        if (matchedCity.length > 0) {

          const [{ cities }] = matchedCity;
          cities?.forEach(function (listData, index) {
            const appendHtml = `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${listData.label}">
                                          <a href="javascript:void(0)">${listData.label}</a>
                                      </li>`;
            $(listSelector).append(appendHtml);
          })
          $('[name="cityname"]').removeAttr("disabled");
        } else {
          console.log("Selected state not found in data");
        }
      }
    }

    function offerIDIdenty(offertype, selector) {
      if (offertype.toLowerCase().includes('cash bonus')) {
        selector.attr('id', 'cashbonus-card');
        selector.find('.festive-offer-text').addClass('festive-cashbonus-bg');
      } else if (offertype.toLowerCase().includes('cashback offer')) {
        selector.attr('id', 'cashback-card');
        selector.find('.festive-offer-text').addClass('festive-cashback-bg');
      } else if (offertype.toLowerCase().includes('roi offer')) {
        selector.attr('id', 'roi-card');
        selector.find('.festive-offer-text').addClass('festive-roi-bg');
      } else if (offertype.toLowerCase().includes('finance offer')) {
        selector.attr('id', 'finance-card');
        selector.find('.festive-offer-text').addClass('festive-finance-bg');
      } else if (offertype.toLowerCase().includes('special offer')) {
        selector.attr('id', 'special-card');
        selector.find('.festive-offer-text').addClass('festive-special-bg');
      } else if (offertype.toLowerCase().includes('hero goodlife')) {
        selector.attr('id', 'goodlife-card');
        selector.find('.festive-offer-text').addClass('festive-goodlife-bg');
      } else if (offertype.toLowerCase().includes('exchange offer')) {
        selector.attr('id', 'exchange-card');
        selector.find('.festive-offer-text').addClass('festive-exchange-bg');
      }
    }

    function offerTitleReplace(offerLineOne) {
      if (offerLineOne.toLowerCase().includes('special benefit')) {
        return "Special Benefit";
      } else if (offerLineOne.toLowerCase().includes('roi starting at')) {
        return "ROI starting at"
      } else if (offerLineOne.toLowerCase().includes('cash back')) {
        return "Get Cashback"
      } else if (offerLineOne.toLowerCase().includes('ldp starting at')) {
        return "LDP starting at"
      } else if (offerLineOne.toLowerCase().includes('hero good life value benefit')) {
        return "Hero Goodlife benefit"
      } else if (offerLineOne.toLowerCase().includes('cash discount')) {
        return "Cash discount"
      } else if (offerLineOne.toLowerCase().includes('exchange bonus')) {
        return "Get Exchange Bonus"
      }
    }


    function offerSubTitleReplace(offerLineTwo, selectorNode) {
      let offerText = "";
      if (offerLineTwo.toLowerCase().includes('special benefit')) {
        selectorNode.find('span#offer-upto').text("upto ");
        offerText = offerLineTwo.substr(20).replace('Rs', '₹');
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/special-icon.png');
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('roi starting at')) {
        offerText = offerLineTwo.substr(16);
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/roi-icon.png');
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('cashback')) {
        selectorNode.find('span#offer-upto').text("upto ");
        selectorNode.find('span#offer-emi').text("  on EMI");
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/cashback-icon.png');
        offerText = "₹ 5000*";
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('ldp starting at')) {
        offerText = offerLineTwo.substr(16).replace('Rs', '₹');
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/finance-icon.png');
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('hero goodlife benefit')) {
        selectorNode.find('span#offer-upto').text("upto ");
        offerText = offerLineTwo.substr(27).replace('Rs', '₹');
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/goodlife-icon.png');
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('cash discount')) {
        selectorNode.find('span#offer-upto').text("upto ");
        offerText = offerLineTwo.substr(19).replace('Rs', '₹');
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/cashbonus-icon.png');
        return offerText;
      } else if (offerLineTwo.toLowerCase().includes('exchange bonus')) {
        selectorNode.find('span#offer-upto').text("upto ");
        offerText = offerLineTwo.substr(19).replace('Rs.', '₹');
        selectorNode.find('.festive-offer-img').attr('src', '/content/dam/hero-aem-website/in/festive-hub/exchange-icon.png');
        return offerText;
      }
    }

    function populateOffers(vehicle, state, specialCity) {
      $('.empty-state-offers-list').removeClass('d-none');
      $('.festive-offer-card-wrap, .festive-offer-cta').addClass('invisible');
      $('.festive-card-comp').removeClass('d-none').addClass('d-none');

      let initialState = state;
      state = state.toLowerCase();
      state = specialCity ? specialCity : state;
      let urlToHit = defaultservlet + ".prebookoffers." + vehicle + "." + state + ".html";

      $.ajax({
        type: "GET",
        url: urlToHit,
        success: function (response) {

          if (!response.includes('<li class="font-montserrat-regular font-weight-500">')) {
            let urlToHit = defaultservlet + ".prebookoffers." + vehicle + "." + initialState + ".html";

            $.ajax({
              type: "GET",
              url: urlToHit,
              success: function (response) {

                console.log('Response', response);


                $(".festive-offer-section .festive-offer-card-wrap").remove();

                const headerHtmlOffer = `<div class="festive-offer-card-wrap explore invisible" data-aos="fade-up"></div>`;

                $('.empty-state-offers-list').after(headerHtmlOffer);

                const responseList = $(response).filter('li');
                let offerCount = $(response).filter('p#offer_count').text();

                responseList.each(function (index) {

                  const offerTemplateList = $(".festive-offer-section .festive-offer-card-wrap");

                  const offerTemplateHtml = `<div class="festive-card-comp d-none">
                  <div class="festive-card-content">
                      <div class="festive-offer-text">Cashback Offer</div>
                      <div class="card-info-strip">
                          <div class="d-flex position-relative">
                              <div class="festive-offer-heading"></div>
                              <img src="" class="festive-offer-img" alt="Festive Cashback">
                          </div>
                          <div class="festive-offer-price festive-cashback-txt"><span id="offer-upto"></span><span id="offer-amount"></span> <span id="offer-emi"></span></div>
                      </div>
                      <div class="festive-offer-subheading"></div>
                      <div class="d-flex justify-content-between tnc-wrapper">
                          <div class="festive-offer-cta-label">
                          </div>
                          <div class="festive-offer-cta-link"><a
                                  href="https://www.heromotocorp.com/en-in/campaigns/terms-and-conditions.html">T&C apply*</a></div>
                      </div>
                      <img src="/content/dam/hero-aem-website/in/festive-hub/card-decorator.png" class="card-decorator"
                          alt="card decorator">
                  </div>
              </div>`;

                  $(offerTemplateList).append(offerTemplateHtml);

                  const $li = $(this);
                  const $festiveCardComp = $('.festive-card-comp').eq(index);
                  const $amountP = $li.find('p#amount');

                  $festiveCardComp.find('.festive-offer-text').text($li.find('p#offer_type').text());
                  $festiveCardComp.find('.festive-offer-heading').text(offerTitleReplace($li.find('p#amount').text()));

                  $festiveCardComp.find('span#offer-amount').text(offerSubTitleReplace($li.find('p#lineoneoffer').text(), $festiveCardComp));

                  $festiveCardComp.find('.festive-offer-subheading').text($li.find('p#linetwooffer').text());

                  offerIDIdenty($li.find('p#offer_type').text(), $festiveCardComp);

                  if ($amountP.text() === "NA") {
                    $festiveCardComp.addClass('d-none');
                    offerCount = parseInt(offerCount, 10);
                    offerCount -= 1;
                  } else {
                    $festiveCardComp.removeClass('d-none');
                  }
                });

                $('.empty-state-offers-list').addClass('d-none');
                $('.festive-offer-card-wrap, .festive-offer-cta').removeClass('invisible');

                $(".festive-offer-card-wrap").slick(festiveOfferSlick);

                $('.festive-offer-wrap .offer-number-text').text(offerCount + " Offers");
              },
              error: function (err) {
                $('.festive-offer-card-wrap').removeClass('d-flex');
                $('.festive-offer-card-wrap, .festive-offer-cta, #festive-below-125, #festive-above-125, #festive-above-150, #festive-scooters-model').addClass('d-none');
                $('#offers-api-fail').removeClass('d-none');
                $('.empty-state-offers-list').removeClass('d-none');
                $('.empty-state-offers-list').text('There was an error on fetching offers, Please try again later in some time');
              },
            });
          } else {

            $(".festive-offer-section .festive-offer-card-wrap").remove();

            const headerHtmlOffer = `<div class="festive-offer-card-wrap explore invisible" data-aos="fade-up"></div>`;

            $('.empty-state-offers-list').after(headerHtmlOffer);

            const responseList = $(response).filter('li');
            let offerCount = $(response).filter('p#offer_count').text();

            responseList.each(function (index) {

              const offerTemplateList = $(".festive-offer-section .festive-offer-card-wrap");

              const offerTemplateHtml = `<div class="festive-card-comp d-none">
            <div class="festive-card-content">
                <div class="festive-offer-text">Cashback Offer</div>
                <div class="card-info-strip">
                    <div class="d-flex position-relative">
                        <div class="festive-offer-heading"></div>
                        <img src="" class="festive-offer-img" alt="Festive Cashback">
                    </div>
                    <div class="festive-offer-price festive-cashback-txt"><span id="offer-upto"></span><span id="offer-amount"></span> <span id="offer-emi"></span></div>
                </div>
                <div class="festive-offer-subheading"></div>
                <div class="d-flex justify-content-between tnc-wrapper">
                    <div class="festive-offer-cta-label">
                    </div>
                    <div class="festive-offer-cta-link"><a
                            href="https://www.heromotocorp.com/en-in/campaigns/terms-and-conditions.html">T&C apply*</a></div>
                </div>
                <img src="/content/dam/hero-aem-website/in/festive-hub/card-decorator.png" class="card-decorator"
                    alt="card decorator">
            </div>
        </div>`;

              $(offerTemplateList).append(offerTemplateHtml);

              const $li = $(this);
              const $festiveCardComp = $('.festive-card-comp').eq(index);
              const $amountP = $li.find('p#amount');

              $festiveCardComp.find('.festive-offer-text').text($li.find('p#offer_type').text());
              $festiveCardComp.find('.festive-offer-heading').text(offerTitleReplace($li.find('p#amount').text()));

              $festiveCardComp.find('span#offer-amount').text(offerSubTitleReplace($li.find('p#lineoneoffer').text(), $festiveCardComp));

              $festiveCardComp.find('.festive-offer-subheading').text($li.find('p#linetwooffer').text());

              offerIDIdenty($li.find('p#offer_type').text(), $festiveCardComp);

              if ($amountP.text() === "NA") {
                $festiveCardComp.addClass('d-none');
                offerCount = parseInt(offerCount, 10);
                offerCount -= 1;
              } else {
                $festiveCardComp.removeClass('d-none');
              }
            });

            $('.empty-state-offers-list').addClass('d-none');
            $('.festive-offer-card-wrap, .festive-offer-cta').removeClass('invisible');

            $(".festive-offer-card-wrap").slick(festiveOfferSlick);

            $('.festive-offer-wrap .offer-number-text').text(offerCount + " Offers");
          }
        },
        error: function (err) {
          $('.festive-offer-card-wrap').removeClass('d-flex');
          $('.festive-offer-card-wrap, .festive-offer-cta, #festive-below-125, #festive-above-125, #festive-above-150, #festive-scooters-model').addClass('d-none');
          $('#offers-api-fail').removeClass('d-none');
          $('.empty-state-offers-list').removeClass('d-none');
          $('.empty-state-offers-list').text('There was an error on fetching offers, Please try again later in some time');
        },
      });

    }

    async function generateSliders(stateVal, cityVal) {
      $('.empty-state-offers-list').removeClass('d-none');
      $('.festive-offer-card-wrap, .festive-offer-cta').addClass('invisible');
      //const offersUrl = defaultservlet + ".modelpricelist.json?state=" + stateVal + "&city=" + cityVal;
      const priceApiUrl = "/content/hero-commerce/in/en/finance-landing/jcr:content.products-by-category.json";
      const body = { category: "", state: stateVal, city: cityVal };

      let options = {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      };

      try {
        let response = await fetch(priceApiUrl, options);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        else {
          let jsonData = await response.json();
          const items = jsonData.data.products.items;
          items && items.length > 0 &&
            document.querySelectorAll('.product-card').forEach((productCard) => {
              const dataModel = productCard.getAttribute('data-productsku');
              const productItem = items.find(item => item.sku == dataModel);
              const imgUrl = productItem?.image ? productItem.image.url : '';
              const price = productItem?.price_range?.minimum_price?.regular_price?.value;
              const completePriceElement = productCard.querySelector('.complete-price');
              const productImgElement = productCard.querySelector('img');
              const authoredImg = productImgElement.getAttribute('src');
              if (!authoredImg && imgUrl && productImgElement) {
                productImgElement.setAttribute('src', imgUrl);
              }
              if (completePriceElement && price) {
                const formattedPrice = new Intl.NumberFormat("en-IN").format(parseFloat(price));;
                completePriceElement.textContent = '₹' + formattedPrice + '*';
              }
            });
        }
        $('.empty-state-offers-list').addClass('d-none');
        $('.festive-offer-card-wrap, .festive-offer-cta').removeClass('invisible');
      }
      catch (e) {
        $(".festive-offer-card-wrap").removeClass("d-flex");
        $(".festive-offer-card-wrap, .festive-offer-cta, #festive-below-125, #festive-above-125, #festive-above-150, #festive-scooters-model").addClass("d-none");
        $("#offers-api-fail").removeClass("d-none");
        $('.empty-state-offers-list').addClass('d-none');
        console.error(e);
      }

    }

    $("#try-again-button").on("click", function (e) {
      location.reload();
    })

    $(".explore-card-btn").on("click", function (e) {
      $('.claim-offer-right-section').addClass('d-none');
    });

    if ($('#festive-hub-callback').length) {
      $('#festive-hub-callback').parent().removeClass('pb-4');
      $('#festive-hub-callback .expand-form').remove();
      $('.festive-test-drive-form .row:last-child').addClass('show');
    }


    var offsetModalPosition = 0;

    $("#claimOffersModal").on("shown.bs.modal", function (e) {
      offsetModalPosition = window.scrollY;
      $("body").addClass("festivehub-non-scrollable-body");
      $("body").css({ 'top': -offsetModalPosition + 'px' });
    }).on("hidden.bs.modal", function () {
      $("body").removeClass("festivehub-non-scrollable-body");
      $(window).scrollTop(offsetModalPosition);
    });

    if (window.innerHeight < 850) {
      $('.claim-offer-modal-body').addClass('popup-small-scroll');
    }

    if ($('.book-test-drive-wrapper #bookTestRideCollapse').hasClass('collapse')) {
      $('.book-test-drive-wrapper #bookTestRideCollapse').removeClass('collapse');
    }

    function getStateInfo(stateName) {
      let stateCode;

      switch (stateName) {
        case "andaman and nicobar islands":
          stateCode = "AN";
          break;
        case "andhra pradesh":
          stateCode = "AP";
          break;
        case "arunachal pradesh":
          stateCode = "ARP";
          break;
        case "assam":
          stateCode = "AS";
          break;
        case "bihar":
          stateCode = "BH";
          break;
        case "chandigarh":
          stateCode = "CD";
          break;
        case "chhattisgarh":
          stateCode = "CG";
          break;
        case "dadra and nagar haveli and daman and diu":
          stateCode = "DH";
          break;
        case "dadra and nagar haveli":
          stateCode = "DH";
          break;
        case "delhi":
          stateCode = "DEL";
          break;
        case "goa":
          stateCode = "GDD";
          break;
        case "gujarat":
          stateCode = "GJ";
          break;
        case "haryana":
          stateCode = "HR";
          break;
        case "himachal pradesh":
          stateCode = "HP";
          break;
        case "jammu and kashmir":
          stateCode = "JK";
          break;
        case "jharkhand":
          stateCode = "JR";
          break;
        case "karnataka":
          stateCode = "KAR";
          break;
        case "kerala":
          stateCode = "KER";
          break;
        case "madhya pradesh":
          stateCode = "MP";
          break;
        case "maharashtra":
          stateCode = "MAH";
          break;
        case "manipur":
          stateCode = "MPR";
          break;
        case "meghalaya":
          stateCode = "MGH";
          break;
        case "mizoram":
          stateCode = "MZ";
          break;
        case "nagaland":
          stateCode = "NG";
          break;
        case "odisha":
          stateCode = "OR";
          break;
        case "pondicherry":
          stateCode = "PY";
          break;
        case "punjab":
          stateCode = "PB";
          break;
        case "rajasthan":
          stateCode = "RJ";
          break;
        case "tamil nadu":
          stateCode = "TN";
          break;
        case "telangana":
          stateCode = "TLG";
          break;
        case "tripura":
          stateCode = "TRI";
          break;
        case "uttar pradesh":
          stateCode = "UP";
          break;
        case "uttarakhand":
          stateCode = "UR";
          break;
        case "west bengal":
          stateCode = "WB";
          break;
        default:
          stateCode = "Unknown State";
          break;
      }

      return stateCode;
    }

    function getUTMModelName(utm_model) {
      let modelName;

      switch (utm_model) {
        case "PLEASURE+XTEC":
          modelName = "pleasureplus_xtec";
          break;
        case "SPLENDOR+XTEC":
          modelName = "splendorplus_xtec";
          break;
        case "SUPER_SPLENDOR_XTEC":
          modelName = "super_splendor_xtec";
          break;
        case "DESTINI_PRIME":
          modelName = "destini_prime";
          break;
        case "XTREME_160R_4V":
          modelName = "xtreme_160r_4v";
          break;
        case "XPULSE_200_4V":
          modelName = "xpulse_200_4v";
          break;
        case "XOOM":
          modelName = "xoom";
          break;
        case "PASSION+":
          modelName = "passionplus";
          break;
        case "HF_DELUXE":
          modelName = "hf_deluxe";
          break;
        case "GLAMOUR":
          modelName = "glamour";
          break;
        case "PASSION_XTEC":
          modelName = "passion_xtec";
          break;
        case "HF_100":
          modelName = "hf_100";
          break;
        case "SPLENDOR+":
          modelName = "splendor_+";
          break;
        case "GLAMOUR_XTEC":
          modelName = "glamour_xtec";
          break;
        case "GLAMOUR_CANVAS":
          modelName = "glamour_canvas";
          break;
        case "SUPER_SPLENDOR":
          modelName = "super_splendor";
          break;
        case "XPULSE_200T_4V":
          modelName = "xpulse_200t_4v";
          break;
        case "XTREME_160R":
          modelName = "xtreme_160r";
          break;
        case "XTREME_200S_4V":
          modelName = "xtreme_200s_4v";
          break;
        case "DESTINI_125_XTEC":
          modelName = "destini_125_xtec";
          break;
        case "MAESTRO_EDGE_125":
          modelName = "maestro_edge_125";
          break;
        case "XTREME_125R":
          modelName = "xtreme_125r";
          break;
        default:
          modelName = "xtreme_125r";
          break;
      }

      return modelName;
    }
  }
});
let fhformfields = document.querySelectorAll(
  "#claim-offers-form2 input, #claim-offers-form2 button"
);
sessionStorage.setItem("fhstartEvent", "not sent");
fhformfields.forEach((key) => {
  key.addEventListener("focus", () => {
    if (sessionStorage.getItem("fhstartEvent") === "not sent") {
      if (window.digitalData && window._satellite) {
        window.digitalData = {
          form: {
            formfield: key.name || "",
            formname: "festivehub claim offers form",
            formtype: "Claim Offers",
          },
          page: {
            siteType: "AEM",
            pageURL: window.location.href,
            path: window.location.pathname,
            fullURL: window.location.href,
            hostName: window.location.origin,
            fullReferringUrl: document.referrer,
            pagename: document.title,
            PageTitle: document.title,
            product: $("#claimVehicleDropdown").text().trim() || '',
          },
        };
        _satellite.track("formStart");
        sessionStorage.setItem("fhstartEvent", "sent");
      }
    }
  });
});

$(document).ready(function () {
    const exchangeChooseSlick = {
        infinite: false,
        autoplay: true,
        dots: false,
        prevArrow: false,
        nextArrow: false,
        autoplaySpeed: 5000,
        responsive: [
          {
            breakpoint: 9999,
            settings: "unslick",
          },
          {
            breakpoint: 576,
            settings: {
                slidesToShow: 2,
                slidesToScroll: 1,
            }
          },
          // You can unslick at a given breakpoint now by adding:
          // settings: "unslick"
          // instead of a settings object
        ],
      };
    
      
    $(".exchange-choose-row").slick(exchangeChooseSlick);
})
$(document).ready(function () {
  var sessionVehicleType = sessionStorage.getItem("exchangeVehicleType");
  var sessionLoginType = sessionStorage.getItem("exchangeLoginType");
  var sessionVehicleDetails = sessionStorage.getItem("vehicleDetails");
  var sessionLoggedDetails = sessionStorage.getItem("exchangeloggeddetails");
  var cookieLoggedData = sessionStorage.getItem("data");
  var selectedVehicleObject = {};
  var countIdleProspect = 0;
  let timeoutId;

  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }

  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
  
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }
  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }
  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }

  if (cookieLoggedData)
    cookieLoggedData = JSON.parse(decodeURIComponent(atob(cookieLoggedData)));
  const popularBrandText = $("#modelList .exchg-content-subtitle").html();


    if (sessionLoginType == 'existing') {
        $('.form-step-one .exchg-left-nav-items:first').addClass('d-flex active');
        $('.exchange-form-wrap #exchangeList').addClass('d-flex active-tab');
        clearNextDivTimeout(timeoutId);
        textAnimationAutoPosition();

        if ($('#exchangeList .exchg-content-options-wrap > div').length == 0) {
            getExchanageList(sessionVehicleDetails);
        }
        $('#clickStep3li').addClass('d-none');
        window.innerWidth < 568 && $('#multiStepperWrap').css({'padding-left': '3.25rem'})
        $('#multi-step-form-container .exchg-multi-progress-bar').addClass('exchg-three-progress-bar');
        $('.exchange-banner ul.form-stepper').addClass('exchg-ul-stepper-wrap');
        $('.exchange-banner .form-stepper .label').addClass('three-stepper-label-view');
        $('#partsList input').attr('step_number', '4');
    } else {
        $('.form-step-one .exchg-left-nav-items').eq(1).addClass('active');
        $('.exchange-form-wrap #vehicleList').addClass('active-tab');
        clearNextDivTimeout(timeoutId);
        $('#partsList input').attr('step_number', '3');

        textAnimationAutoPosition();
        
        if (sessionVehicleType) {
            $('#vehicleList .exchg-content-options-wrap .exchg-options-alt input').each(function() {
                if (sessionVehicleType == $(this).val()) {
                    $(this).prop('checked', true);
                    $(this).parent().parent().find('.exchg-content-options').removeClass('active-option-checks');
                    $(this).parent().addClass('active-option-checks');
                    $('#step-1 #selectedVehicleType').html($(this).val());
                    $('.form-step-one .exchg-left-nav-items').eq(1).removeClass('active');
                    $('.exchange-form-wrap #vehicleList').removeClass('active-tab');
                    $('.form-step-one .exchg-left-nav-items').eq(2).addClass('active');
                    $('.exchange-form-wrap #brandList').addClass('active-tab');
                    clearNextDivTimeout(timeoutId);
                    getBrandJsonList($(this).val());
                }
            });
        }
    }

    if ($('#userAccountSetupForm #step-1').length > 0) {
        $('.footer-wrapper').addClass('d-none');
        $('.navbar-wrapper .navbar-nav').eq(0).addClass('invisible');
        $('#multiStepperWrap').css ({'position': 'fixed', 'z-index': 2});
        $('#userAccountSetupForm').css ({'padding-top': document.getElementById('multiStepperWrap').offsetHeight});
    }

    function textAnimationAutoPosition () {
        const headerNavigation = Math.round($('.navbar-expand-lg').outerHeight());
        const stepperNavigation = Math.round($('#multiStepperWrap').outerHeight());
        const animationWrap = Math.round($('#vehicleList .exchg-tips-wrapper').outerHeight())
        const offSetAnimationTop = window.innerHeight - stepperNavigation - headerNavigation - animationWrap - 100;
        if (window.innerHeight < $('#vehicleList .exchg-tips-wrapper').offset()?.top || window.innerHeight < $('#exchangeList .exchg-tips-wrapper').offset()?.top) {
            $(".exchg-tips-wrapper").css({'top': window.innerWidth > 568 ? offSetAnimationTop : offSetAnimationTop + 25 + 'px', 'bottom': 'unset'});
        }
        if (window.innerHeight < 600) {
            $(".exchg-tips-wrapper").css({'position': 'unset', 'width': 'fit-content'});
        }
    }

    if(window.innerHeight < 650) {
        $('#checkModal .modal-content').addClass('low-check-modal-content');
        $('#checkModal .modal-body').addClass('low-check-modal-body');
    }

    const $inp = $('.otp-form .otp-field');

    $inp.on({
        paste(ev) { // Handle Pasting
        
            const clip = (ev.clipboardData || ev.originalEvent.clipboardData || window.clipboardData).getData('text/plain').trim();
            // Allow numbers only
            if (!/\d{6}/.test(clip)) return ev.preventDefault(); // Invalid. Exit here
            // Split string to Array or characters
            const s = [...clip];
            // Populate inputs. Focus last input.
            $inp.val(i => s[i]).eq(5).focus(); 
        },
        input(ev) { // Handle typing
            
            const i = $inp.index(this);
            if (this.value) $inp.eq(i + 1).focus();
        },
        keydown(ev) { // Handle Deleting
            
            const i = $inp.index(this);
            if (!this.value && ev.key === "Backspace" && i) $inp.eq(i - 1).focus();
        }
    
    });

    var offsetModalPosition = 0;

    $("#pincodeModal, #checkModal, #exchg-loader-modal, #otp-modal, #wheelerModal, #wheelerConfirmModal, #resaleModal").on("shown.bs.modal", function (e) {
        offsetModalPosition = window.scrollY;
        $("body").addClass("exchg-non-scrollable-body");
        $("body").css({'top': -offsetModalPosition + 'px'});
    }).on("hidden.bs.modal", function () {
        $("body").removeClass("exchg-non-scrollable-body");
        $(window).scrollTop(offsetModalPosition);
    });

    var leftSelectedNav = '';
    var lastVisitedStepper = '';

    const yearHtmlList = $('#yearList .exchg-content-options-wrap');
    for (let index = 0; index < 16; index++) {
        $('<div>').addClass('exchg-content-options')
            .append($('<input>').attr({
                id: 'year' + index,
                type: "radio",
                name: "radioYear",
                value: new Date().getFullYear() - index,
                "data-target": "monthList",
                "data-from": "yearList"
            }))
            .append($('<label>').attr('for', 'year' + index).text(new Date().getFullYear() - index))
            .appendTo(yearHtmlList);
    }

    // Left Navigation Click Function
    $('.exchg-left-nav-items').click(function(e) {
        if (!$(this).find('.exchg-nav-subheading').html().length > 0) {
            $(this).style.pointerEvents = 'none'
        }
        if ($(this).find('.exchg-nav-subheading').html().length > 0) {
            $(this).prop('disabled', false);
            leftSelectedNav = $(this).find('.exchg-nav-subheading').html();
        }
        $('.exchg-left-nav-items').removeClass('active');
        $(this).addClass('active');

        e.preventDefault();

        // Get the target content ID from the 'data-target' attribute
        var target = $(this).data('target');

        if ($(this).find('.exchg-nav-subheading').html().length > 0) {
            const radioTextVal = $(this).find('.exchg-nav-subheading').html();
            let selectedRadioVal = $(".exchg-content-options-wrap").find(`[value='${radioTextVal}']`);
            selectedRadioVal.prop('checked', true);
        }

        // Remove 'active' class from all panels
        $('.exchg-vehicle-content').removeClass('active-tab');

        // Add 'active' class to the target panel
        $('#' + target).addClass('active-tab');
        const afterSelectSearch = $('#' + target).find('.searchInput input');
        handleSearchClick(afterSelectSearch);
        afterSelectSearch.val('');
        clearNextDivTimeout(timeoutId);
    });

    function showNextDiv(tipsEle, tipsIndex) {
        tipsEle.eq(tipsIndex).fadeIn(500, function() {
            // Inside the fadeIn callback, set the timeout and store the reference
            timeoutId = setTimeout(function() {
                tipsEle.eq(tipsIndex).fadeOut(500, function() {
                    tipsIndex = (tipsIndex + 1) % tipsEle.length;
                    // Call showNextDiv recursively with the updated index
                    showNextDiv(tipsEle, tipsIndex);
                });
            }, 5000); // 5 seconds
        }).css('display', 'flex');
    }

    function clearNextDivTimeout() {
        clearTimeout(timeoutId);
        $('.tips-inner-wrap').css('display', 'none');
        $('.exchg-tips-wrapper').css({'animation': 'none', 'visibility': 'hidden'});
        setTimeout(function() {
          $('.exchg-tips-wrapper').css({'animation': 'fadeOut 3s infinite alternate', 'visibility': 'visible'});
          showNextDiv($('.active-tab .tips-inner-wrap'), 0);
        }, 100)
      }

    $('#exchangeList .exchg-old-user-new').click(function(e) {
        var fromData = $(this).data('from');
        var target = $(this).data('target');

        let selectedValueSubHead = $("div").find(`[data-target='${fromData}']`);
        selectedValueSubHead.find('.exchg-nav-subheading').html('Another Vehicle');

        $('.form-step-one .exchg-left-nav-items').eq(1).addClass('d-flex active');

        $('.form-step-one .exchg-left-nav-items').removeClass('d-none');
        $('.form-step-one .exchg-left-nav-items').addClass('d-flex');

        let checkDiv = $("div").find(`[data-target='${target}']`);

        if (!($(this).html()?.toLowerCase().includes(leftSelectedNav?.toLowerCase())) &&
            checkDiv.index() !== $('.form-step-one .exchg-left-nav-items').length - 1) {
            $('.form-step-one .exchg-left-nav-items').each(function(index, item) {
                if (index > checkDiv.index() - 1) {
                    $(item).find('.exchg-nav-subheading').html('');
                    $(`#${$(item).attr('data-target')} .exchg-content-options`).removeClass("active-option-checks");
                    $('.form-step-two .exchg-left-nav-items .exchg-nav-subheading').html('');
                    $('.exchg-options-condition-wrap input').prop("checked", false);
                    $('.exchg-options-condition-wrap').removeClass("active-option-checks");
                    if($(item).attr('data-target') == 'cityList') {
                        $('#cityList .exchg-content-options input').prop("checked", false);
                        $('#pincodeModal .exchange-pincode-search').val('')
                    }
                    $('#clickStep2li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep.svg');
                    $('#clickStep3li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/customer-multistep.svg');
                    $('#clickStep3li .exchg-multi-progress-bar, #clickStep2li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
                    $('#clickStep3li .exchg-multi-progress-bar, #clickStep2li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
                    $('#step-3 #exchangefullname, #step-3 #exchangemobnumber').val('');
                    $('#formAgreementRadio').prop('checked', false);
                }
            });
        }

        $('#exchangeList .exchg-content-options-wrap > div').removeClass('active-option-checks');
        $(this).addClass('active-option-checks');
        
        $('#exchangeList input').prop("checked", false );

        $('.exchg-left-nav-items').removeClass('active');
        checkDiv.addClass('active');

        // Remove 'active' class from all panels
        $('.exchg-vehicle-content').removeClass('active-tab');

        checkProgressiveStep1();

        // Add 'active' class to the target panel
        $('#' + target).addClass('active-tab');
        clearNextDivTimeout(timeoutId);
        selectedVehicleObject = {};
    })

    $("#pincode").on("keyup", function() {
        if ($(this).val().length == 6 && exchangePincodeValidation($(this).val())) {

            $('#pincodeModal .pincode-error-msg').removeClass('d-block');
            $('#pincodeModal .pincode-error-msg').addClass('d-none');
            $('#pincodeModal .exchg-pincode-wrap').removeClass('exchg-err-pin-border');
            $('#pincodeModal #ex-submit-city').css({"color":"#EE2326", "pointer-events":"unset", "cursor": "pointer", "border": "1px solid #EE2326"});
        } else {
            $('#pincodeModal .pincode-error-msg').removeClass('d-none');
            $('#pincodeModal .pincode-error-msg').addClass('d-block');
            $('#pincodeModal .exchg-pincode-wrap').addClass('exchg-err-pin-border');
            $('#pincodeModal #ex-submit-city').css({"color":"#A5A5A5", "pointer-events":"none", "cursor": "not-allowed", "border": "1px solid #A5A5A5"});
        }
    });

    function exchangePincodeValidation(value) {
        const disallowedPincodes = [
            "012345",
            "111111",
            "222222",
            "333333",
            "444444",
            "555555",
            "666666",
            "777777",
            "888888",
            "999999",
            "000000",
            "123456",
            "101010",
            "202020",
            "303030",
            "404040",
            "505050",
        ];
        const regexPincode = /^[1-9][0-9]{5}$/;
        if (disallowedPincodes.indexOf(value) !== -1) {
            return false;
        } else {
            return regexPincode.test(value);
        }
    }

    $("#ex-submit-city").click(function () {
        let targetDiv = $("div").find(`[data-target='silencerList']`);

        if ($('#selectedExchangeType').html() !== 'Another Vehicle' && $('#selectedExchangeType').html().length !== 0) {
            navigateToFormStep(2);
        }

        $('.exchg-left-nav-items').removeClass('active');
        targetDiv.addClass('active');

        const afterSelectSearch = $('#cityList').find('.searchInput input');
        afterSelectSearch.val('');
        handleSearchClick(afterSelectSearch);

        $('.exchg-vehicle-content').removeClass('active-tab');
        $('#silencerList').addClass('active-tab');
        clearNextDivTimeout(timeoutId);
        $("html, body").animate({ scrollTop: 0 }, "slow");
    })

    $(window).bind("orientationchange", function(evt){
        if (window.innerWidth < 1000) {
            $('.exchange-banner .exchange-form-wrap').addClass('exchange-form-oriented-wrap');
            $('#pincodeModal .exchg-pincode-wrap').addClass('exchange-pincode-oriented-wrap');
            $('#checkModal .modal-image-gaps').addClass('flex-wrap');
        } else {
            $('.exchange-banner .exchange-form-wrap').removeClass('exchange-form-oriented-wrap');
            $('#pincodeModal .exchg-pincode-wrap').removeClass('exchange-pincode-oriented-wrap');
            $('#checkModal .modal-image-gaps').removeClass('flex-wrap');
        }
    });
    
    $(document).on('click', '.exchg-content-options-wrap input', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();

        var target = $(this).data('target');
        var fromData = $(this).data('from');

        if (target && target == 'brandList') {
            if ($('#brandList .exchg-content-options-wrap .exchg-content-options').length > 0) {
                $('#brandList .exchg-content-options').remove();
            }
            getBrandJsonList($(this).filter(":checked").val());
        } else if (target && target == 'modelList') {
            if ($('#modelList .exchg-content-options-wrap .exchg-content-options').length > 0) {
                $('#modelList .exchg-content-options').remove();
            }
            getModelJsonList($(this).filter(":checked").val());
            $('#modelList .exchg-content-subtitle').html(popularBrandText + $(this).filter(":checked").val());
        } else if ($('#stateList .exchg-content-options-wrap .exchg-content-options').length === 0 && target && target == 'stateList') {
            getStateJsonList();
        } 
        else if (target && target == 'cityList') {
            if ($('#cityList .exchg-city-content-options-wrap .exchg-content-options').length > 0) {
                $('#cityList .exchg-content-options').remove();
            }
            getCityJsonList($(this).filter(":checked").val());
            $(this).prop("checked", true);
        }

        if (fromData == 'exchangeList' && $(this).filter(":checked").val() !== 'Another Vehicle') {
            filterStep1LeftNavs();
            $('#exchangeList .exchg-content-options-wrap > div').removeClass('active-option-checks');
            const selectedOption = $(this).filter(":checked").val();
            const sessionVehicleData = JSON.parse(decodeURIComponent(atob(sessionVehicleDetails)));
            [selectedVehicleObject] = sessionVehicleData.filter(function( obj ) {
                return obj.modelName == selectedOption;
            });
        }

        let selectedValueSubHead = $("div").find(`[data-target='${fromData}']`);
        selectedValueSubHead.find('.exchg-nav-subheading').html($(this).filter(":checked").val());
        // Get the target content ID from the 'data-target' attribute

        let checkDiv = $("div").find(`[data-target='${target}']`);

        const checkStep = $(this).parent().parent().parent().parent().parent().attr('id')

        if (checkStep === 'step-1' && leftSelectedNav !== $(this).filter(":checked").val() &&
            checkDiv.find('.exchg-nav-subheading').html()?.length > 0 &&
            checkDiv.index() !== $('.form-step-one .exchg-left-nav-items').length) {
            $('.form-step-one .exchg-left-nav-items').each(function(index, item) {
                if (index > checkDiv.index() - 1) {
                    $(item).find('.exchg-nav-subheading').html('');
                    $(`#${$(item).attr('data-target')} .exchg-content-options`).removeClass("active-option-checks");
                    $('.form-step-two .exchg-left-nav-items .exchg-nav-subheading').html('');
                    $('.exchg-options-condition-wrap input').prop("checked", false);
                    $('.exchg-options-condition-wrap').removeClass("active-option-checks");
                    if($(item).attr('data-target') == 'cityList') {
                        $('#cityList .exchg-content-options input').prop("checked", false);
                        $('#pincodeModal .exchange-pincode-search').val('');
                    }
                    $('#clickStep2li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep.svg');
                    $('#clickStep3li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/customer-multistep.svg');
                    $('#clickStep3li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
                    $('#clickStep3li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
                    $('#step-3 #exchangefullname, #step-3 #exchangemobnumber').val('');
                    $('#formAgreementRadio').prop('checked', false);
                }
            });
        }

        $(this).parent().parent().find('.exchg-content-options').removeClass('active-option-checks');
        $(this).parent().addClass('active-option-checks');

        $('.exchg-left-nav-items').removeClass('active');
        checkDiv.addClass('active');

        // Remove 'active' class from all panels
        $('.exchg-vehicle-content').removeClass('active-tab');

        // Add 'active' class to the target panel
        $('#' + target).addClass('active-tab');
        clearNextDivTimeout(timeoutId);
        if (checkDiv.find('.exchg-nav-subheading').html().length > 0) {
            const targetArrayList = aa = $('#' + target).find('input')?.toArray()
            targetArrayList.forEach(element => {
                if (checkDiv.find('.exchg-nav-subheading').html() == $(element).attr('value')) {
                    $(element).prop('checked', true);
                }
            }); 
        }

        checkProgressiveStep1();
        checkProgressiveStep2();

        leftSelectedNav = '';
        $(this).parent().parent().parent().find('.searchInput input').val('');
        const afterSelectSearch = $(this).parent().parent().parent().find('.searchInput input');
        handleSearchClick(afterSelectSearch);
        $('#step-1 .exchg-content-noresults').addClass('d-none');
        $('#step-1 .exchg-content-subtitle').removeClass('d-none');

        if (target && target == 'monthList') {
            showFilteredMonths($(this).filter(":checked").val());
        }
    });

    $(document).on('click', '.exchg-city-content-options-wrap input', function(e) {
        var fromData = $(this).data('from');
        let selectedValueSubHead = $("div").find(`[data-target='${fromData}']`);
        selectedValueSubHead.find('.exchg-nav-subheading').html($(this).filter(":checked").val());
        $('#pincodeModal').modal('toggle');
        const eletPincode = document.getElementById("pincode");
        // eletPincode.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
        eletPincode.focus();

        $(this).parent().parent().find('.exchg-content-options').removeClass('active-option-checks');
        $(this).parent().addClass('active-option-checks');

        checkProgressiveStep1();
        
        leftSelectedNav = '';
        $(this).parent().parent().parent().find('.searchInput input').val('');
        const afterSelectSearch = $(this).parent().parent().parent().find('.searchInput input');
        handleSearchClick(afterSelectSearch);
        $('#step-1 .exchg-content-noresults').addClass('d-none');
        $('#step-1 .exchg-content-subtitle').removeClass('d-none');
    })

    function showFilteredMonths(selectedYear) {
        const currentyear = new Date().getFullYear();
        if (selectedYear == currentyear) {
            $('#monthList label').each((wheelerElement, data) => {
                if (new Date().getMonth() >= wheelerElement) {
                    $(data).parent().css("cssText", "display : table !important;");
                } else {
                    $(data).parent().css("cssText", "display : none !important;");
                }
            });
        } else if (selectedYear == currentyear - 15) {
            $('#monthList label').each((wheelerElement, data) => {
                if (new Date().getMonth() <= wheelerElement) {
                    $(data).parent().css("cssText", "display : table !important;");
                } else {
                    $(data).parent().css("cssText", "display : none !important;");
                }
            });
        } else {
            $('#monthList label').each((wheelerElement, data) => {
                $(data).parent().css("cssText", "display : table !important;");
            });
        }
    }

    function checkProgressiveStep1() {
        if (sessionLoginType == 'existing' && $('#selectedExchangeType').html() != 'Another Vehicle') {
            if ($('#selectedExchangeType').html() != '') {
                $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-one-third');
            } else {
                $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
            }
            if ($('#selectedState').html() != '') {
                $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-two-third');
            } else {
                $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
            }
            if ($('#selectedCity').html() != '') {
                $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-full');
            } else {
                $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-full');
            }

        } else {
            if (sessionLoginType == 'existing') {
                if ($('#selectedExchangeType').html() != '' && $('#selectedVehicleType').html() != '' && $('#selectedBrand').html() != '') {
                    $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-one-third');
                } else {
                    $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
                }
            } else {
                if ($('#selectedVehicleType').html() != '' && $('#selectedBrand').html() != '') {
                    $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-one-third');
                } else {
                    $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
                }
            }
            if ($('#selectedModel').html() != '' && $('#selectedYear').html() != '' && $('#selectedMonth').html() != '') {
                $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-two-third');
            } else {
                $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
            }
            if ($('#selectedState').html() != '' && $('#selectedCity').html() != '') {
                $('#clickStep1li .exchg-multi-progress-bar').addClass('progress-bar-full');
            } else {
                $('#clickStep1li .exchg-multi-progress-bar').removeClass('progress-bar-full');
            }
        }
    }

    function checkProgressiveStep2() {
        if ($('#selectedCity').html() != '' && $('#selectedSilencer').html() != '' && $('#selectedStarting').html() != '') {
            $('#clickStep2li .exchg-multi-progress-bar').addClass('progress-bar-one-third');
        } else {
            $('#clickStep2li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
        }
        if ($('#selectedCity').html() != '' && $('#selectedLights').html() != '' && $('#selectedTyres').html() != '') {
            $('#clickStep2li .exchg-multi-progress-bar').addClass('progress-bar-two-third');
        } else {
            $('#clickStep2li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
        }
        if ($('#selectedCity').html() != '' && $('#selectedRearTyres').html() != '' && $('#selectedParts').html() != '') {
            $('#clickStep2li .exchg-multi-progress-bar').addClass('progress-bar-full');
        } else {
            $('#clickStep2li .exchg-multi-progress-bar').removeClass('progress-bar-full');
        }
    }

    $("#step-3 #exchangefullname, #step-3 #exchangemobnumber").on("keyup", function() {
        if ($('#selectedCity').html() != '' && $('#selectedParts').html() != '' && $('#exchangefullname').val().length > 0 && $('#exchangemobnumber').val().length == 10) {
            $('#clickStep3li .exchg-multi-progress-bar').addClass('progress-bar-one-third');
        } else {
            $('#clickStep3li .exchg-multi-progress-bar').removeClass('progress-bar-one-third');
        }
    });

    $("#step-3 #formWhatsappRadio, #step-3 #formAgreementRadio").on("change load", function() {
        if ($('#selectedCity').html() != '' && $('#selectedParts').html() != '' && $('#formWhatsappRadio').is(':checked') && $('#formAgreementRadio').is(':checked')) {
            $('#clickStep3li .exchg-multi-progress-bar').addClass('progress-bar-two-third');
        } else {
            $('#clickStep3li .exchg-multi-progress-bar').removeClass('progress-bar-two-third');
        }
    });

    function filterStep1LeftNavs() {
        $('.form-step-one .exchg-left-nav-items').each(function() {
            let attributeVal = $(this).attr('data-target');
            if (attributeVal !== 'exchangeList' && attributeVal !== 'stateList' && attributeVal !== 'cityList') {
                $(this).removeClass('d-flex');
                $(this).addClass('d-none');
            }
        })

        $('#step-1 .exchg-vehicle-content').each(function() {
            let attributeVal = $(this).attr('id');
            if (attributeVal !== 'exchangeList' && attributeVal !== 'stateList' && attributeVal !== 'cityList') {
                $(this).removeClass('d-flex');
                $(this).addClass('d-none');
            }
        })
    }

    function getBrandJsonList(brandOption) {
        let exchgBrandListUrl = $("#userAccountSetupForm #brandList").attr("data-component-relativePath");
        var exchgBrandListPath = exchgBrandListUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        const dataObject = new FormData();
        dataObject.append("category", brandOption);
        $.ajax({
            url: exchgBrandListPath,
            type: "POST",
            data: dataObject,
            processData: false,
            mimeType: "multipart/form-data",
            contentType: false,
            success: function(resp) {
                let finalDataBrand = typeof resp == "string" ? JSON.parse(resp): resp;
                const brandHtmlList = $('#brandList .exchg-content-options-wrap');
                finalDataBrand.jsonData = finalDataBrand.jsonData.filter((value, index) => value.brand_name_hindi);
                // finalDataBrand.jsonData.sort((firstObj, secondObj) => (firstObj.brand_name  > secondObj.brand_name ) ? 1 : ((secondObj.brand_name  > firstObj.brand_name ) ? -1 : 0));
                finalDataBrand.jsonData.forEach(function(brandName, index) {
                    $('<div>').addClass('exchg-content-options')
                        .append($('<input>').attr({
                            id: 'brand' + index,
                            type: "radio",
                            name: "radio",
                            value: brandName.brand_name,
                            "data-target": "modelList",
                            "data-from": "brandList"
                        }))
                        .append($('<label>').addClass('text-center m-auto').attr('for', 'brand' + index).text(brandName.brand_name))
                        .appendTo(brandHtmlList);
                })
            },
            error: function(error) {},
        });
    }

    function getModelJsonList(modelOption) {
        let exchgModelListUrl = $("#userAccountSetupForm #modelList").attr("data-component-relativePath");
        var exchgModelListPath = exchgModelListUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        
        const dataObject = new FormData();
        dataObject.append("make", modelOption);
        dataObject.append("category", $('#step-1 #selectedVehicleType').html());
        $.ajax({
            url: exchgModelListPath,
            type: "POST",
            data: dataObject,
            processData: false,
            mimeType: "multipart/form-data",
            contentType: false,
            success: function(resp) {
                let finalDataModel = typeof resp == "string" ? JSON.parse(resp): resp;
                const modelHtmlList = $('#modelList .exchg-content-options-wrap');
                finalDataModel.jsonData.sort((firstObj, secondObj) => (firstObj.brand_model  > secondObj.brand_model ) ? 1 : ((secondObj.brand_model  > firstObj.brand_model ) ? -1 : 0));
                finalDataModel.jsonData.forEach(function(modelName, index) {
                    $('<div>').addClass('exchg-content-options')
                        .append($('<input>').attr({
                            id: 'model' + index,
                            type: "radio",
                            name: "radio",
                            value: modelName.brand_model,
                            "data-target": "yearList",
                            "data-from": "modelList"
                        }))
                        .append($('<label>').addClass('exchg-all-label-allign').attr('for', 'model' + index).text(modelName.brand_model))
                        .appendTo(modelHtmlList);
                });
            },
            error: function(error) {},
        });
    }

    function getStateJsonList() {
        let exchgStateListUrl = $("#userAccountSetupForm #stateList").attr("data-component-relativePath");
        var exchgStateListPath = exchgStateListUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        $.ajax({
            url: exchgStateListPath,
            type: "POST",
            success: function(resp) {
                let finalDataState = typeof resp == "string" ? JSON.parse(resp): resp;
                const stateHtmlList = $('#stateList .exchg-content-options-wrap');
                finalDataState.jsonData.sort((firstObj, secondObj) => (firstObj.state_name  > secondObj.state_name ) ? 1 : ((secondObj.state_name  > firstObj.state_name ) ? -1 : 0));
                finalDataState.jsonData.forEach(function(stateName, index) {
                    $('<div>').addClass('exchg-content-options')
                        .append($('<input>').attr({
                            id: 'state' + index,
                            type: "radio",
                            name: "radio",
                            value: stateName.state_name,
                            "data-target": "cityList",
                            "data-from": "stateList"
                        }))
                        .append($('<label>').addClass('exchg-all-label-allign').attr('for', 'state' + index).text(stateName.state_name))
                        .appendTo(stateHtmlList);
                })
            },
            error: function(error) {},
        });
    }

    function getCityJsonList(stateOption) {
        let exchgCityListUrl = $("#userAccountSetupForm #cityList").attr("data-component-relativePath");
        var exchgCityListPath = exchgCityListUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        const dataObject = new FormData();
        dataObject.append("state", stateOption);
        $.ajax({
            url: exchgCityListPath,
            type: "POST",
            data: dataObject,
            processData: false,
            mimeType: "multipart/form-data",
            contentType: false,
            success: function(resp) {
                let finalDataCity = typeof resp == "string" ? JSON.parse(resp): resp;
                const cityHtmlList = $('#cityList .exchg-city-content-options-wrap');
                finalDataCity.jsonData.sort((firstObj, secondObj) => (firstObj.district_name  > secondObj.district_name ) ? 1 : ((secondObj.district_name  > firstObj.district_name ) ? -1 : 0));
                finalDataCity.jsonData.forEach(function(cityName, index) {
                    const capitalizedCity = cityName.district_name.charAt(0).toUpperCase() + cityName.district_name.substring(1).toLowerCase();
                    $('<div>').addClass('exchg-content-options')
                        .append($('<input>').attr({
                            id: 'city' + index,
                            type: "radio",
                            name: "radiocity",
                            value: capitalizedCity,
                            "data-from": "cityList"
                        }))
                        .append($('<label>').addClass('exchg-all-label-allign').attr('for', 'city' + index).text(capitalizedCity))
                        .appendTo(cityHtmlList);
                })
            },
            error: function(error) {},
        });
    }

    function getCalculatedPriceDetails() {
        let exchgCalcPriceUrl = selectedVehicleObject?.modelName ? $("#otp-modal #resendStepperOtp").attr("data-component-relativePath") :
            $("#otp-modal #otp-verification-proceed").attr("data-component-relativePath");
        var exchgCalcPricePath = exchgCalcPriceUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        const dataObject = getPriceDataObj();
        $.ajax({
            url: exchgCalcPricePath,
            type: "POST",
            data: dataObject,
            processData: false,
            mimeType: "multipart/form-data",
            contentType: false,
            success: function(resp) {
                try {
                    const finalDataPrice = typeof resp == "string" ? JSON.parse(resp): resp;
                    if (finalDataPrice?.jsonData) {
                        sessionStorage.setItem("exchangeEnquiryId", finalDataPrice.jsonData.enquiry_id);
                        $('.outer-calc-wrap .calc-price-text').html('₹ ' + finalDataPrice.jsonData.lower_limit_price + ' - ' + '₹ ' + finalDataPrice.jsonData.upper_limit_price);
                        $('.outer-calc-wrap #calc-condition').html(finalDataPrice.jsonData.vehicle_condition.toLowerCase());
                        if ($('.outer-calc-wrap .calc-price-text').html()?.length > 17) $('.outer-calc-wrap .calc-price-text').addClass('mob-calc-price-text-long');
                        document.querySelectorAll('.exchg-wheeler-carousel .exchg-wheelers-price, #wheelerModal .exchg-wheelers-price').forEach((wheelerElement) => {
                            let exchangePriceVal = $(wheelerElement).html();
                            exchangePriceVal = exchangePriceVal.substring(2, exchangePriceVal.indexOf('*'))?.replace(/\,/g,'');
                            let strikedVal =  parseInt(exchangePriceVal) - finalDataPrice.jsonData.upper_limit_price;
                            if(strikedVal > 0) {
                                $(wheelerElement).html(`₹ ${strikedVal.toLocaleString("en-IN")}*`);
                                $(wheelerElement).append(`<s class="striked-price-value ml-sm-2">₹ ${parseInt(exchangePriceVal).toLocaleString("en-IN")}*</s>`);
                            }
                        });
                        $('#step-4 .exchg-calculate-wrap img').removeClass('d-none');
                    } else {
                        $('.outer-calc-wrap #estimatedId').addClass('d-none');
                        $('.outer-calc-wrap .calc-estimate-text p').html('We will get back to you shortly with the estimated resale value of your vehicle.');
                        $('.outer-calc-wrap .calc-estimate-text p').addClass('text-center calc-sub-text-width');
                        $('.outer-calc-wrap .calc-assess-text').addClass('d-none');
                    }
                }
                catch (e) {
                    $('.outer-calc-wrap #estimatedId').addClass('d-none');
                    $('.outer-calc-wrap .calc-estimate-text p').html('We will get back to you shortly with the estimated resale value of your vehicle.');
                    $('.outer-calc-wrap .calc-estimate-text p').addClass('text-center calc-sub-text-width');
                    $('.outer-calc-wrap .calc-assess-text').addClass('d-none');
                }
                onInactive(14000, function () {
                    if(countIdleProspect < 1) {
                        sessionStorage.setItem("exchangeInactivity",'yes');
                        // callProspectApi();
                        countIdleProspect++;
                    }
                });
                
                function onInactive(ms, cb) {
                
                    var wait = setTimeout(cb, ms);
                
                    document.onmousemove = document.mousedown = document.mouseup = document.onkeydown = document.onkeyup = document.focus = function () {
                        clearTimeout(wait);
                        wait = setTimeout(cb, ms);
                
                    };
                }
            },
            error: function(error) {
                $('.outer-calc-wrap #estimatedId').addClass('d-none');
                $('.outer-calc-wrap .calc-estimate-text p').html('We will get back to you shortly with the estimated resale value of your vehicle.');
                $('.outer-calc-wrap .calc-estimate-text p').addClass('text-center calc-sub-text-width');
                $('.outer-calc-wrap .calc-assess-text').addClass('d-none');

                
                onInactive(14000, function () {
                    if(countIdleProspect < 1) {
                        sessionStorage.setItem("exchangeInactivity",'yes');
                        // callProspectApi();
                        countIdleProspect++;
                    }
                });
                
                function onInactive(ms, cb) {
                
                    var wait = setTimeout(cb, ms);
                
                    document.onmousemove = document.mousedown = document.mouseup = document.onkeydown = document.onkeyup = document.focus = function () {
                        clearTimeout(wait);
                        wait = setTimeout(cb, ms);
                
                    };
                }
            },
        });
        if ($(window).width() < 577) {
            $('#step-4').append($('.calculate-right-wrap'));
            $('.outer-calc-wrap .calculate-right-wrap').remove();
        }
        $('.footer-wrapper').removeClass('d-none');
        $('.navbar-wrapper .navbar-nav').eq(0).removeClass('invisible');
    }

    function getExchanageList(sessionData) {
        const sessionVehicleData = JSON.parse(decodeURIComponent(atob(sessionData)));
        const exchangeHtmlList = $('#exchangeList .exchg-content-options-wrap');
        if(sessionLoggedDetails && sessionData?.length > 0) {
            sessionLoggedDetails = JSON.parse(decodeURIComponent(atob(sessionLoggedDetails)));
            sessionVehicleData?.forEach(function(vehicleData, index) {
                const formattedDate = new Date(vehicleData.purchaseDate);
                const appendHtml = `<div class="d-flex exchg-old-user-options">
                    <input id="${"exchange" + index}" type="radio" name="radio" value="${vehicleData.modelName}"
                        data-target="stateList" data-from="exchangeList">
                    <label class="m-auto pr-2 w-100" for="${"exchange" + index}">
                        <div class="d-flex justify-content-between w-100 ml-sm-2 pl-sm-1 old-user-mob-content">
                            <div class="d-flex flex-column">
                                <div class="exchange-old-heading">
                                    ${vehicleData.modelName}
                                </div>
                                <div class="d-flex mt-sm-3 exchg-old-gap-cont">
                                    <div class="d-flex flex-column">
                                        <div class="exchange-old-subheading">Reg. Month & Year:</div>
                                        <div class="exchange-old-vals">${formattedDate.toLocaleString('default', { month: 'long' })} , ${formattedDate.getFullYear()}</div>
                                    </div>
                                    ${sessionLoggedDetails?.state && `<div class="d-flex flex-column">
                                        <div class="exchange-old-subheading">State & City:</div>
                                        <div class="exchange-old-vals">${capitalizedString(sessionLoggedDetails.state)} , ${capitalizedString(sessionLoggedDetails.city)}</div>
                                    </div> `}
                                </div>
                            </div>
                            <img src="/content/dam/hero-aem-website/in/exchange---assets/Fevicon.png"
                                class="exchg-old-hero-icon" alt="Hero Icon">
                        </div>
                    </label>
                </div>`;
                $(exchangeHtmlList).append(appendHtml);
            });
        }
        $(exchangeHtmlList).append(`<div class="d-flex justify-content-center exchg-old-user-new" data-from="exchangeList" data-target="vehicleList">Check your another vehicle</div>`);
    }

    function capitalizedString(value) {
        if(value) {
            let capitalizedValue = value.toLowerCase();
            capitalizedValue = capitalizedValue[0].toUpperCase() + capitalizedValue.substring(1);
            return capitalizedValue;
        }
    }

    function getDealersList(state, city) {
        let exchgDealersListUrl = $("#step-4 .exchg-dealers-wrap").attr("data-component-relativePath");
        var exchgDealersListPath = exchgDealersListUrl?.replace(
            "jcr:content",
            "_jcr_content"
        );
        const dataObject = new FormData();
        dataObject.append("state", state);
        dataObject.append("city", city);
        $.ajax({
            url: exchgDealersListPath,
            type: "POST",
            data: dataObject,
            processData: false,
            mimeType: "multipart/form-data",
            contentType: false,
            success: function(resp) {
                const finalDataDealer = typeof resp == "string" ? JSON.parse(resp): resp;
                const dealerHtmlList = $('#step-4 .exchg-dealers-wrap');
                finalDataDealer.jsonData.forEach(function(dealerName, index) {
                  const appendHtml = `<div class="exchange-dealers">
                            <div class="exchg-dealers-options d-flex">
                                <input id="${"dealers" + index}" type="radio" name="exchgDealer" value="${dealerName.dealer_code}"
                                    class="active mt-sm-1 position-absolute">
                                <label class="text-center m-0 exchg-dealer-label pr-0" for="${"dealers" + index}">
                                    <div class="exchg-dealers-contents">
                                        <div class="exchg-dealers-name">${dealerName.center_name}</div>
                                        <div class="exchg-dealers-contacts">
                                            <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/exchg_call_icon.svg"
                                                class="" alt="dealers call">
                                            <div class="exchg-dealers-mob">${dealerName.webapp_number}</div>
                                        </div>
                                        <div class="exchg-dealers-contacts">
                                            <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/exchg_mail_icon.svg"
                                                class="" alt="dealers mail">
                                            <div class="exchg-dealers-mob">${dealerName.email}</div>
                                        </div>
                                        <div class="exchg-dealers-contacts">
                                            <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/exchg_address_icon.svg"
                                                class="" alt="dealers mail">
                                            <div class="exchg-dealers-location">${dealerName.webapp_address}</div>
                                        </div>
                                  </label>
                              </div>
                          </div>`
                    $(dealerHtmlList).append(appendHtml);
                })
                const exchangeSliderLength = $('.exchange-dealers').length;
                const browserWidth = $(window).width();

                if(browserWidth > 1200 && exchangeSliderLength < 5) {
                    $('.exchg-dealers-wrap .exchange-dealers').addClass('dealers-outer-wrap');
                    $('.exchg-dealers-wrap .exchg-dealers-options').addClass('w-100');
                    }

                    const exchangeDealerSlick = {
                        infinite: false,
                        autoplay: false,
                        dots: true,
                        prevArrow: false,
                        nextArrow: false,
                        autoplaySpeed: 5000,
                        responsive: [
                        {
                            breakpoint: 9999,
                            settings: exchangeSliderLength > 4 ? {
                                slidesToShow: 4,
                                slidesToScroll: 4,
                            } : "unslick",
                        },
                        {
                            breakpoint: 1200,
                            settings: exchangeSliderLength > 3 ? {
                                slidesToShow: 3,
                                slidesToScroll: 3,
                            } : "unslick",
                        },
                        {
                            breakpoint: 900,
                            settings: exchangeSliderLength > 2 ? {
                                slidesToShow: 2,
                                slidesToScroll: 2,
                            } : "unslick",
                        },
                        {
                            breakpoint: 480,
                            settings: exchangeSliderLength > 1 ? {
                                slidesToShow: 1,
                                slidesToScroll: 1,
                            } : "unslick",
                        }
                    ],
                };

                
                $(".exchange-banner .exchg-dealers-wrap").slick(exchangeDealerSlick);
            },
            error: function(error) {},
        });
    }

    function getPriceDataObj() {
        var priceObj = new FormData();
        $('.form-step-one .exchg-left-nav-items').each(function() {
            var thisHeaderValue = $(this).find('.exchg-nav-heading p').html();
            const formattedDate = new Date(selectedVehicleObject?.purchaseDate);
            switch (thisHeaderValue) {
                case 'Year':
                    priceObj.append("year_of_mfg", selectedVehicleObject?.purchaseDate ? formattedDate.getFullYear() : $(this).find('.exchg-nav-subheading').html());
                    break;
                case 'City':
                    priceObj.append("city", $(this).find('.exchg-nav-subheading').html());
                    break;
                case 'State':
                    priceObj.append("state", $(this).find('.exchg-nav-subheading').html());
                    break;
                case 'Brand':
                    priceObj.append("make", selectedVehicleObject?.make ? selectedVehicleObject.make : $(this).find('.exchg-nav-subheading').html());
                    break;
                case 'Model':
                    priceObj.append("model", selectedVehicleObject?.modelName ? selectedVehicleObject.modelName : $(this).find('.exchg-nav-subheading').html());
                    break;
                case 'Month':
                    priceObj.append("month", selectedVehicleObject?.purchaseDate ? formattedDate.getMonth() + 1 : getMonthFromString($(this).find('.exchg-nav-subheading').html()));
                    break;
                case 'Vehicle Type':
                    priceObj.append("vehicle_type", selectedVehicleObject?.category_code ? selectedVehicleObject.category_code : $(this).find('.exchg-nav-subheading').html());
                    break;
                default:
                    console.log('Default case step 1');
            }
        });

        $('.form-step-two .exchg-left-nav-items').each(function() {
            var thisHeaderValue = $(this).find('.exchg-nav-heading p').html();
            switch (thisHeaderValue) {
                case 'Silencer':
                    priceObj.append("smoke", $(this).find('.exchg-nav-subheading').html() == 'Smoke' ? 'Y' : 'N');
                    break;
                case 'Problem in Starting':
                    priceObj.append("starting", $(this).find('.exchg-nav-subheading').html() == 'Starts Normally' ? 'Y' : 'N');
                    break;
                case 'Lights':
                    priceObj.append("light_indicator", $(this).find('.exchg-nav-subheading').html() == 'Working' ? 'Y' : 'N');
                    break;
                case 'Front Tyres':
                    priceObj.append("front_tyre", $(this).find('.exchg-nav-subheading').html() == 'Ok' ? 'Y' : 'N');
                    break;
                case 'Rear Tyres':
                    priceObj.append("rear_tyre", $(this).find('.exchg-nav-subheading').html() == 'Ok' ? 'Y' : 'N');
                    break;
                case 'Body Parts':
                    priceObj.append("body_part", $(this).find('.exchg-nav-subheading').html() == 'Ok' ? 'Y' : 'N');
                    break;
                default:
                    console.log('Default case step 2');
            }
        });

        priceObj.append("name", cookieLoggedData?.name ? cookieLoggedData.name : $('#exchangefullname').val());
        priceObj.append("phone", cookieLoggedData?.mobile ? cookieLoggedData.mobile : $('#exchangemobnumber').val());
        priceObj.append("pincode", $('#pincodeModal #pincode').val());

    return priceObj;
  }

  function callProspectApi() {
    const cityName = $("#step-1 #selectedCity")?.html();
    const dealerValue = $(".exchg-dealers-wrap .exchg-dealers-options input")
      .filter(":checked")
      .val();
    const modelName = selectedVehicleObject?.modelName
      ? selectedVehicleObject.modelName
      : $("#step-1 #selectedModel")?.html();
    const exchgProspectUrl = $("#wheelerConfirmModal").attr("data-component-relativePath");
    const prospectObject = JSON.stringify({
      dse_login: "",
      comments: "",
      referal_gl_No: "",
      fName: cookieLoggedData?.name ? cookieLoggedData.name : $("#exchangefullname").val(),
      enquirySource: "",
      next_followup_Dt: "",
      prospect_source: "",
      emailId: "",
      referal_VIN: "",
      testride_Flag: "",
      lName: ".",
      app_Source: "",
      modelInterested_In: "",
      mobile_Number: cookieLoggedData?.mobile
        ? cookieLoggedData.mobile
        : $("#exchangemobnumber").val(),
      expected_purchaseDt: "",
      city: cityName,
      dealer_code: dealerValue ? dealerValue : "",
    });
    $.ajax({
      url: exchgProspectUrl,
      type: "POST",
      contentType: "application/json",
      data: prospectObject,
      success: function (resp) {
        console.log("Exchange Prospect response", resp);
        let getFinalData = sessionStorage.getItem("exchangeVehicleInfo");
        let getVehicleDatalayer = JSON.parse(getFinalData) || "";
        let aainactivity = sessionStorage.getItem("exchangeInactivity") || "";
        if (window.digitalData) {
          window.digitalData.push({
            event: "Exchange Journey Completed",
            exchangeDetails: {
              journeyType: sessionStorage.getItem("aaExchangeJourneyType") || "",
              exchangeType: getVehicleDatalayer.aaExchangeType,
              brand: getVehicleDatalayer.exchangeVehicleBrand,
              city: getVehicleDatalayer.exchangeVehicleCity,
              model: getVehicleDatalayer.exchangeVehicleModel,
              pincode: getVehicleDatalayer.exchangeVehiclePincode,
              state: getVehicleDatalayer.exchangeVehicleState,
              vehicleType: getVehicleDatalayer.exchangeVehicleType,
              year: getVehicleDatalayer.exchangeVehicleYear,
              month: getVehicleDatalayer.exchangeVehicleMonth,
              registrationYear: getVehicleDatalayer.aaOwnVehicleYear ?? "NA",
              registrationMonth: getVehicleDatalayer.aaOwnVehicleMonth ?? "NA",
              vehicleCondition: sessionStorage.getItem("vehicleCondition") || "",

              resaleValue: $(".calc-price-text").text() || "",
              dealerName: $("#confirmDealerText").text() || "",
              heroExchangeVehicleName: $("#confirmModelText").text() || "",
              wheelerExchangePrice: sessionStorage.getItem("wheelerExchangePrice") || "",
              wheelerActualPrice: sessionStorage.getItem("wheelerActualPrice") || "",
              type:
                aainactivity != "yes" || !aainactivity || aainactivity == ""
                  ? "User submit"
                  : "inActivityCall",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      },
      error: function (error) {},
    });
  }

  function callExchangeSubmitApi() {
    const dealerValue = $(".exchg-dealers-wrap .exchg-dealers-options input")
      .filter(":checked")
      .val();
    const modelName = $("#wheelerModal").hasClass("show")
      ? $("#wheelerModal .wheeler-modal-body input").filter(":checked").val().toUpperCase()
      : $(".exchg-wheeler-carousel input").filter(":checked").val().toUpperCase();
    const exchangeSubmitUrl = $("#wheelerModal").attr("data-component-relativePath");
    var exchangeSubmitPath = exchangeSubmitUrl?.replace("jcr:content", "_jcr_content");
    const exchgSubObj = new FormData();
    exchgSubObj.append("enquiry_id", sessionStorage.getItem("exchangeEnquiryId"));
    exchgSubObj.append("dealer_id", dealerValue);
    exchgSubObj.append("model", modelName);
    const submitData = exchgSubObj;
    $.ajax({
      url: exchangeSubmitPath,
      type: "POST",
      data: submitData,
      processData: false,
      mimeType: "multipart/form-data",
      contentType: false,
      success: function (resp) {
        console.log("Exchange Submit response", resp);
        let getFinalData = sessionStorage.getItem("exchangeVehicleInfo");
        let getVehicleDatalayer = JSON.parse(getFinalData) || "";
        let aainactivity = sessionStorage.getItem("exchangeInactivity") || "";
        if (window.digitalData) {
          window.digitalData.push({
            event: "Exchange Journey Completed",
            exchangeDetails: {
              journeyType: sessionStorage.getItem("aaExchangeJourneyType") || "",
              exchangeType: getVehicleDatalayer.aaExchangeType,
              brand: getVehicleDatalayer.exchangeVehicleBrand,
              city: getVehicleDatalayer.exchangeVehicleCity,
              model: getVehicleDatalayer.exchangeVehicleModel,
              pincode: getVehicleDatalayer.exchangeVehiclePincode,
              state: getVehicleDatalayer.exchangeVehicleState,
              vehicleType: getVehicleDatalayer.exchangeVehicleType,
              year: getVehicleDatalayer.exchangeVehicleYear,
              month: getVehicleDatalayer.exchangeVehicleMonth,
              registrationYear: getVehicleDatalayer.aaOwnVehicleYear ?? "NA",
              registrationMonth: getVehicleDatalayer.aaOwnVehicleMonth ?? "NA",
              vehicleCondition: sessionStorage.getItem("vehicleCondition") || "",
              resaleValue: $(".calc-price-text").text() || "",
              dealerName: $("#confirmDealerText").text() || "",
              heroExchangeVehicleName: $("#confirmModelText").text() || "",
              wheelerExchangePrice: sessionStorage.getItem("wheelerExchangePrice") || "",
              wheelerActualPrice: sessionStorage.getItem("wheelerActualPrice") || "",
              type:
                aainactivity != "yes" || !aainactivity || aainactivity == ""
                  ? "User submit"
                  : "inActivityCall",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      },
      error: function (error) {
        console.log("Exchange Submit error", error);
      },
    });
  }

    function getMonthFromString(mon) {
        return new Date(Date.parse(mon + " 1, 2012")).getMonth() + 1;
    }

    /**
     * Define a function to navigate betweens form steps.
     * It accepts one parameter. That is - step number.
     */
    const navigateToFormStep = (stepNumber) => {
        /**
         * Hide all form steps.
         */
        document.querySelectorAll(".form-step").forEach((formStepElement) => {
            formStepElement.classList.add("d-none");
        });
        /**
         * Mark all form steps as unfinished.
         */
        document.querySelectorAll(".form-stepper-list").forEach((formStepHeader) => {
            formStepHeader.classList.add("form-stepper-unfinished");
            formStepHeader.classList.remove("form-stepper-active", "form-stepper-completed");
        });
        /**
         * Show the current form step (as passed to the function).
         */
        document.querySelector("#step-" + stepNumber).classList.remove("d-none");
        /**
         * Select the form step circle (progress bar).
         */
        const formStepCircle = document.querySelector('li[step="' + stepNumber + '"]');
        /**
         * Mark the current form step as active.
         */
        formStepCircle.classList.remove("form-stepper-unfinished", "form-stepper-completed");
        formStepCircle.classList.add("form-stepper-active");
        /**
         * Loop through each form step circles.
         * This loop will continue up to the current step number.
         * Example: If the current step is 3,
         * then the loop will perform operations for step 1 and 2.
         */
        for (let index = 0; index < stepNumber; index++) {
            /**
             * Select the form step circle (progress bar).
             */
            const formStepCircle = document.querySelector('li[step="' + index + '"]');
            /**
             * Check if the element exist. If yes, then proceed.
             */
            if (formStepCircle) {
                /**
                 * Mark the form step as completed.
                 */
                formStepCircle.classList.remove("form-stepper-unfinished", "form-stepper-active");
                formStepCircle.classList.add("form-stepper-completed");
            }
        }

        if ($('#clickStep2li.form-stepper-active .form-stepper-circle img').length > 0) {
            $('#clickStep2li.form-stepper-active .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep-visited.svg');
        } else if ($('#clickStep3li.form-stepper-active .form-stepper-circle img').length > 0) {
            $('#clickStep3li.form-stepper-active .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/customer-multistep-visited.svg');
        } else if ($('#clickStep4li.form-stepper-active .form-stepper-circle img').length > 0) {
            $('#clickStep4li.form-stepper-active .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/valuation-multistep-visited.svg');
        }

        if ($('#clickStep3li.form-stepper-completed .form-stepper-circle img').length > 0) {
            $('#clickStep3li.form-stepper-completed .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/customer-multistep-completed.svg');
        } else if ($('#clickStep2li.form-stepper-completed .form-stepper-circle img').length > 0) {
            $('#clickStep2li.form-stepper-completed .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep-completed.svg');
        }
        if ($('#clickStep1li.form-stepper-completed .form-stepper-circle img').length > 0) {
            $('#clickStep1li.form-stepper-completed .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/vehicle-multistep-completed.svg');
        }
    };
    /**
     * Select all form navigation buttons, and loop through them.
     */
    document.querySelectorAll(".btn-navigate-form-step").forEach((formNavigationBtn) => {
        /**
         * Add a click event listener to the button.
         */
        formNavigationBtn.addEventListener("click", () => {
            /**
             * Get the value of the step.
             */
            const stepNumber = parseInt(formNavigationBtn.getAttribute("step_number"));
            const fromStepper = formNavigationBtn.getAttribute("navigation_from");
            let pincodeEle = document.getElementById("ex-submit-city");
            if (formNavigationBtn.getAttribute("navigation_from")?.length > 0) {
                if ($('.calc-intro-text').html().length> 0 || $('#clickStep4li').hasClass("form-stepper-active")) return;
                switch (stepNumber) {
                    case 1:
                        if (!($('#stateList .exchg-content-options').hasClass("active-option-checks"))) return;
                        $('#clickStep1li.form-stepper-completed .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/vehicle-multistep.svg');
                        $('.exchg-left-nav-items').removeClass('active');
                        $('.exchg-vehicle-content').removeClass('active-tab');
                        $('.form-step-one').find(`[data-target='cityList']`).addClass('active');
                        $('.exchange-form-wrap #cityList').addClass('active-tab');
                        clearNextDivTimeout(timeoutId);
                        if (lastVisitedStepper == "3" || lastVisitedStepper == "2") {
                            $('#clickStep2li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep-visited.svg');
                        }
                        lastVisitedStepper = "1";
                        break;
                    case 2:
                        if($('#cityList input').filter(":checked").length > 0 && $('.exchange-pincode-search').val().length == 6 && !$('#rearTyresList .exchg-content-options').hasClass("active-option-checks")){
                            if(lastVisitedStepper == "1" && fromStepper == 'steppers' && stepNumber == $("#ex-submit-city").attr("step_number")){
                                $('#pincodeModal').modal('toggle');
                                return;
                            }
                            $('.exchg-left-nav-items').removeClass('active');
                            $('.exchg-vehicle-content').removeClass('active-tab');
                            $('.form-step-two').find(`[data-target='silencerList']`).addClass('active');
                            $('.exchange-form-wrap #silencerList').addClass('active-tab');
                            clearNextDivTimeout(timeoutId);
                            let checkDiv = $("div").find(`[data-target='silencerList']`);
                            if (checkDiv.find('.exchg-nav-subheading').html().length > 0) {
                                const targetArrayList = aa = $('#silencerList').find('input')?.toArray()
                                targetArrayList.forEach(element => {
                                    if (checkDiv.find('.exchg-nav-subheading').html() == $(element).attr('value')) {
                                        $(element).prop('checked', true);
                                    }
                                }); 
                            }
                            lastVisitedStepper = "2";
                            break;
                        }
                        if (!($('#cityList input').filter(":checked").length > 0 && $('.exchange-pincode-search').val().length == 6)) return;
                        if (!($('#rearTyresList .exchg-content-options').hasClass("active-option-checks"))) return;
                        if(lastVisitedStepper == "1" && fromStepper == 'steppers' && stepNumber == $("#ex-submit-city").attr("step_number")){
                                $('#pincodeModal').modal('toggle');
                                return;
                            }
                        if(lastVisitedStepper == "1" && fromStepper == 'steppers' && stepNumber != $("#ex-submit-city").attr("step_number")){
                            pincodeEle.setAttribute("step_number", "2");
                            $('#pincodeModal').modal('toggle');
                            return;
                        }
                        $('.exchg-left-nav-items').removeClass('active');
                        $('.exchg-vehicle-content').removeClass('active-tab');
                        $('.form-step-two').find(`[data-target='partsList']`).addClass('active');
                        $('.exchange-form-wrap #partsList').addClass('active-tab');
                        clearNextDivTimeout(timeoutId);
                        let checkDiv = $("div").find(`[data-target='partsList']`);
                        if (checkDiv.find('.exchg-nav-subheading').html().length > 0) {
                            const targetArrayList = aa = $('#partsList').find('input')?.toArray()
                            targetArrayList.forEach(element => {
                                if (checkDiv.find('.exchg-nav-subheading').html() == $(element).attr('value')) {
                                    $(element).prop('checked', true);
                                }
                            }); 
                        }
                        lastVisitedStepper = "2";
                        break;
                    case 3:
                        if (!($('#cityList input').filter(":checked").length > 0 && $('.exchange-pincode-search').val().length == 6 && $('#partsList .exchg-content-options').hasClass("active-option-checks"))) return;
                        if(lastVisitedStepper == "1" && fromStepper == 'steppers' && stepNumber != $("#ex-submit-city").attr("step_number")){
                            pincodeEle.setAttribute("step_number", "3");
                            $('#pincodeModal').modal('toggle');
                            return;
                        }
                        $('#clickStep1li').addClass('form-stepper-completed');
                        lastVisitedStepper = "3";
                        break;
                    default:
                        console.log('Default case');
                }
            }
            if (sessionLoggedDetails && sessionLoginType == 'existing' && $(formNavigationBtn).data('from') == 'partsList') {
                $('#exchg-loader-modal').modal('show');
                setTimeout($('.after-success-loader').removeClass('d-none'), 5000);
                setTimeout(() => {
                    sessionLoggedDetails = sessionLoggedDetails?.username ? sessionLoggedDetails : JSON.parse(decodeURIComponent(atob(sessionLoggedDetails)));
                    $('#exchg-loader-modal').modal('hide');
                    const stateName = $('#step-1 #selectedState')?.html();
                    const cityName = $('#step-1 #selectedCity')?.html();
                    navigateToFormStep(stepNumber);
                    if ($('#clickStep2li.form-stepper-completed .form-stepper-circle img').length > 0) {
                        $('#clickStep2li.form-stepper-completed .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/condition-multistep-completed.svg');
                    }
                    getCalculatedPriceDetails();
                    getDealersList(stateName, cityName);
                    $("html, body").animate({ scrollTop: 0 }, "slow");
                    const brandName = selectedVehicleObject?.make  ? selectedVehicleObject.make : $('#step-1 #selectedBrand')?.html();
                    const modelName = selectedVehicleObject?.modelName  ? selectedVehicleObject.modelName : $('#step-1 #selectedModel')?.html();
        
                    if (brandName.length > 0 || modelName.length > 0 || stateName.length > 0 || cityName.length > 0) {
                        $('#step-4 #calcBrand').html(brandName + ' ' + modelName);
                        $('#step-4 #calcState').html(stateName);
                        $('#step-4 #calcCity').html(cityName);
                    }
                    calculateScreenDisplay();
                    $('.calc-intro-text').html(`Hi ${sessionLoggedDetails.username}`);
                    $('.exchange-step-4-faq').addClass('d-block');
                    $('.exchg-wheeler-wrap .exchg-wheeler-carousel').slick('refresh');
                }, 5000);
            } else {
                const stepNumber = parseInt(formNavigationBtn.getAttribute("step_number"));
                /**
                 * Call the function to navigate to the target form step.
                 */
                navigateToFormStep(stepNumber);
            }
            if (fromStepper == 'pincodestep' && lastVisitedStepper == "3") {
                pincodeEle.setAttribute("step_number", "2");
            }
        });
    });

    $('#wheelerConfirmModal .booknow-btn').click(function() {
        const checkedDealer = $('.exchg-dealers-wrap input').filter(":checked").parent().find('label .exchg-dealers-name').html();
        if(checkedDealer) {
            $('.wheeler-confirm-modal-body').addClass('d-none');
            $('.wheeler-congrats-modal').removeClass('d-none');
            setInterval(function() {
                $('#wheelerConfirmModal').modal('hide');
                $('#wheelerModal').modal('hide');
                setTimeout(function() {
                    $('.exchg-dealer-main-heading, .exchg-dealers-wrap').remove();
                    $('.exchg-wheeler-main-heading, .exchg-wheeler-wrap').remove();
                }, 500)
            }, 3000);

            // const dealerValue = $('.exchg-dealers-wrap .exchg-dealers-options input').filter(":checked").val();
            // const modelName = selectedVehicleObject?.modelName  ? selectedVehicleObject.modelName : $('#step-1 #selectedModel')?.html();
            // callProspectApi();

            callExchangeSubmitApi();

            // const exchgEnquireUrl = $("#wheelerConfirmModal .booknow-btn").attr("data-component-relativePath");
            // const brandName = selectedVehicleObject?.make  ? selectedVehicleObject.make : $('#step-1 #selectedBrand')?.html();
            // let exchangePriceVal = $('.calc-price-text').html();
            // let formattedYear = new Date(selectedVehicleObject?.purchaseDate)
            // formattedYear = selectedVehicleObject?.purchaseDate ? formattedYear.getFullYear().toString() : $('#step-1 #selectedYear')?.html();
            // exchangePriceVal = exchangePriceVal && exchangePriceVal !== '' ? exchangePriceVal.substring(exchangePriceVal.indexOf('-') + 4) : '20000';
            // const enquiryObject = JSON.stringify({
            //         "body":{
            //             "FstName":cookieLoggedData?.name ? cookieLoggedData.name : $('#exchangefullname').val(),
            //             "LstName":".",
            //             "Mobile":cookieLoggedData?.mobile ? cookieLoggedData.mobile : $('#exchangemobnumber').val(),
            //             "Model": $('#wheelerModal').hasClass('show') ? $('#wheelerModal .wheeler-modal-body input').filter(":checked").val().toUpperCase() :
            //                 $('.exchg-wheeler-carousel input').filter(":checked").val().toUpperCase(),
            //             "Dealer":dealerValue,
            //             "ExchangeReq":"Y",
            //             "FinanceReq":"N",
            //             "EnquirySource":"Activity WOT",
            //             "VehicleMake":brandName,
            //             "VehicleModel":modelName,
            //             "ModelYear":formattedYear,
            //             "Priceoffered":exchangePriceVal,
            //             "PropensityScore":"6",
            //             "Source":"WOT"
            //         }
            //     });
            // $.ajax({
            //     url: exchgEnquireUrl,
            //     type: "POST",
            //     contentType: "application/json",
            //     data: enquiryObject,
            //     success: function(resp) {
            //         console.log('Exchange Enquiry response', resp);
            //     },
            //     error: function(error) {},
            // });
            $('#clickStep4li.form-stepper-list .form-stepper-circle img').attr('src', '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/valuation-multistep-completed.svg');
            setTimeout(function() {
                $("html, body").animate({ scrollTop: 0 }, "slow");
            }, 3000);
        }
      })

    function handleSearchClick(thisValue) {
        var searchValue = $(thisValue) && ($(thisValue).val() == '' || $(thisValue).val() == undefined) ? '' : $(thisValue).val().toLowerCase();
        $('.exchg-content-options-wrap label, .exchg-city-content-options-wrap label').each(function() {
            const exceptionFilterList = $(this)?.parent()?.parent()?.parent()?.attr('id');
            var optionText = $(this).text().toLowerCase();
            if(exceptionFilterList && exceptionFilterList != 'monthList') {
                if (optionText.indexOf(searchValue) > -1) {
                    $(this).parent().css("cssText", "display : table !important;");
                } else {
                    $(this).parent().css("cssText", "display : none !important;");
                }
            }
        });
        const searchSuperParent = $(thisValue).parent().parent().parent();
        if(searchSuperParent.find('.exchg-content-options')?.length == searchSuperParent.find('.exchg-content-options:hidden').length) {
            searchSuperParent.find('.exchg-content-noresults').removeClass("d-none");
            searchSuperParent.find('.exchg-content-subtitle').addClass("d-none");
        } else {
            searchSuperParent.find('.exchg-content-noresults').addClass("d-none");
            searchSuperParent.find('.exchg-content-subtitle').removeClass("d-none");
        }
    }

    // Search functionality for Multistep Form
    $('.exchange-brand-search, .exchange-model-search, .exchange-state-search, .exchange-city-search, .exchange-year-search').on('input', function() {
        handleSearchClick($(this));
    });

    $('.check-popup-text').click(function() {
        var checkId = $(this).data('check-id');
        let checkWrappers = document.querySelectorAll('.exchg-modal-contents-wrap');
        checkWrappers.forEach(wrapperPanel => {
            wrapperPanel.style.display = wrapperPanel.id === checkId ? 'block' : 'none';
        });
    })


    $(".otp-form *:input[type!=hidden]:first").focus();
    let otp_fields = $(".otp-form .otp-field"),
        otp_value_field = $(".otp-form .otp-value");
    otp_fields
        .on("input", function(e) {
            $(this).val(
                $(this)
                .val()
                .replace(/[^0-9]/g, "")
            );
            let opt_value = "";
            otp_fields.each(function() {
                let field_value = $(this).val();
                if (field_value != "") opt_value += field_value;
            });
            otp_value_field.val(opt_value);
        })
        .on("keyup", function(e) {
            let key = e.keyCode || e.charCode;
            if (key == 8 || key == 46 || key == 37 || key == 40) {
                $(this).prev().focus();
            } else if (key == 38 || key == 39 || $(this).val() != "") {
                $(this).next().focus();
            }
        })

  $("#otp-verification-proceed").on("click", async function () {
    let mobNumber = $(".ex-form-tab-content #exchangemobnumber").val();
    if (isValidOtp(mobNumber, otp_value_field.val())) {
      $("#clickStep3li .exchg-multi-progress-bar").addClass("progress-bar-full");
      $(".otp-verfication").addClass("d-none");
      $(".otp-verified").removeClass("d-none");
      let getFinalData = sessionStorage.getItem("exchangeVehicleInfo");
      let getVehicleDatalayer = JSON.parse(getFinalData) || "";
      if (window.digitalData) {
        window.digitalData.push({
          event: "Exchange Customer Details Submitted",
          exchangeDetails: {
            journeyType: sessionStorage.getItem("aaExchangeJourneyType") || "",
            exchangeType: getVehicleDatalayer.aaExchangeType,
            brand: getVehicleDatalayer.exchangeVehicleBrand,
            city: getVehicleDatalayer.exchangeVehicleCity,
            model: getVehicleDatalayer.exchangeVehicleModel,
            pincode: getVehicleDatalayer.exchangeVehiclePincode,
            state: getVehicleDatalayer.exchangeVehicleState,
            vehicleType: getVehicleDatalayer.exchangeVehicleType,
            year: getVehicleDatalayer.exchangeVehicleYear,
            month: getVehicleDatalayer.exchangeVehicleMonth,
            registrationYear: getVehicleDatalayer.aaOwnVehicleYear ?? "NA",
            registrationMonth: getVehicleDatalayer.aaOwnVehicleMonth ?? "NA",
            vehicleCondition: sessionStorage.getItem("vehicleCondition") || "",
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
      setTimeout(contentLoader, 3000);
    } else {
      $(".otp-verfication").addClass("d-none");
      $(".otp-failed").removeClass("d-none");
    }
  });

    function calculateScreenDisplay() {
        setTimeout(() => {
            $('.exchg-calculate-wrap #calculatingId').css('display', 'none');
            $('.exchg-calculate-wrap #estimatedId').css('display', 'block')
        }, 3000);
        setTimeout(() => {
            $('.exchg-calculate-wrap #estimatedId').css('display', 'none');
            $('.exchg-calculate-wrap #calcPriceWrap').css('display', 'block')
        }, 5000);
    }

    function contentLoader() {
        $('.otp-verfication').addClass('d-none');
        $('.otp-verified').addClass('d-none');
        $('#otp-modal .modal-content').removeClass('modal-mob-content');
        $('#otp-modal .modal-dialog').removeClass('modal-mob-bottom');
        setTimeout($('.after-success-loader').removeClass('d-none'), 5000);
        const stateName = $('#step-1 #selectedState')?.html();
        const cityName = $('#step-1 #selectedCity')?.html();
        getCalculatedPriceDetails();
        getDealersList(stateName, cityName);
        setTimeout(() => {
            navigateToFormStep(4);
            $('#otp-modal').modal('hide');
            $("html, body").animate({ scrollTop: 0 }, "slow");
            const brandName = $('#step-1 #selectedBrand')?.html();
            const modelName = $('#step-1 #selectedModel')?.html();

            if (brandName.length > 0 || modelName.length > 0 || stateName.length > 0 || cityName.length > 0) {
                $('#step-4 #calcBrand').html(brandName + ' ' + modelName);
                $('#step-4 #calcState').html(stateName);
                $('#step-4 #calcCity').html(cityName);
            }
            calculateScreenDisplay();
            $('.calc-intro-text').html('Hi ' + $('#exchangefullname').val())
            $('.exchange-step-4-faq').addClass('d-block');
            $('.exchg-wheeler-wrap .exchg-wheeler-carousel').slick('refresh');
            $(window).width() > 576 && $('.exchg-dealers-wrap .exchange-dealers').length > 4 && $('.exchg-dealers-wrap').slick('refresh');
            $(window).width() < 577 && $('.exchg-dealers-wrap').slick('refresh');
            if ($(window).width() < 577 && $('.exchg-dealers-wrap .exchange-dealers').length == 1) $('.exchg-dealers-wrap .slick-dots').addClass('d-none');
        }, 5000);
    }

    function isValidOtp(mobile, otp) {
        const reqId = sessionStorage.getItem("tempID");
        return (
            otp.toString() ===
            (Math.abs(hashCode(mobile + reqId)) % 1000000).toString().padStart(6, "0")
        );
    }

    function generateId(len) {
        var arr = new Uint8Array((len || 40) / 2);
        window.crypto.getRandomValues(arr);
        return Array.from(arr, dec2hex).join("");
    }

    function dec2hex(dec) {
        return dec.toString(16).padStart(2, "0");
    }

    function hashCode(s) {
        var h = 0,
            l = s.length,
            i = 0;
        if (l > 0)
            while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
        return h;
    }

    function  requestOtp(contactNumber, pageType, token) {
        sessionStorage.setItem("tempID", generateId());
        var otpdata = {
            phoneNum: contactNumber,
            pageType: pageType,
            reqID: sessionStorage.getItem("tempID"),
            token: token,
        };

    let defaultservlet = $("#exchange-jounery-servlet").val();
    $.ajax({
      url: defaultservlet + ".sendotp.html",
      type: "POST",
      data: otpdata,
      success: function (resp) {
        console.log(resp);
        if (window.digitalData) {
          window.digitalData.push({
            event: "OTP Success",
            formDetails: {
              formname: "Exchange customer login",
              formtype: "Exchange journey",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      },
      error: function (err) {
        console.log(err);
        if (window.digitalData) {
          window.digitalData.push({
            event: "OTP Fails",
            formDetails: {
              formname: "Exchange customer login",
              formtype: "Exchange journey",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      },
    });
  }

    function onSendOTP() {
        let mobNumber = $(".ex-form-tab-content #exchangemobnumber").val();
        const pageType = "homepage"; // Exchange Vehicle
        if (mobNumber) {
            let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
            grecaptcha.ready(function () {
                grecaptcha.execute(sitKey).then(function (token) {
                    requestOtp(mobNumber, pageType, token);
                });
            });
        }
    }

  $("#exchange-userdata").click(function (e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    let isFormValid = $("#exchangeUserValidation");
    if (isFormValid.valid()) {
      if (window.digitalData && window._satellite) {
        window.digitalData.push({
          formDetails: {
            formname: "Exchange customer login",
            formtype: "Exchange journey",
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
        _satellite.track("OTP Requested");
      }
      onSendOTP();
      $(".verifyNumber").text($(".ex-form-tab-content #exchangemobnumber").val());
      $(".otp-verfication").removeClass("d-none");
      $(".otp-failed").addClass("d-none");
      $(".otp-verified").addClass("d-none");
      $("#otp-modal").modal("show");
    }
  });

  $("#resendStepperOtp").click(function (e) {
    e.stopImmediatePropagation();
    if (window.digitalData && window._satellite) {
      window.digitalData.push({
        formDetails: {
          formname: "Exchange customer login",
          formtype: "Exchange journey",
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
      _satellite.track("OTP Requested");
    }
    $(".otp-form .otp-field").val("");
    onSendOTP();
  });

    function exchangeFormValidation($form) {
        jQuery.validator.addMethod("validNumber", function(value) {
            const disallowedNumbers = [
                "0123456789",
                "1111111111",
                "2222222222",
                "3333333333",
                "4444444444",
                "5555555555",
                "6666666666",
                "7777777777",
                "8888888888",
                "9999999999",
                "0000000000",
                "1234567890",
                "1010101010",
                "2020202020",
                "3030303030",
                "4040404040",
                "5050505050",
            ];
            if (disallowedNumbers.indexOf(value) !== -1) {
                return false;
            }
            if (value.length < 10) {
                return false;
            } else {
                return true;
            }
        });

        jQuery.validator.addMethod("indianNumber", function(value) {
            return /^[6789]\d{9}$/i.test(value);
        });

        $form.validate({
            ignore: [],
            rules: {
                mobile: {
                    required: true,
                    validNumber: true,
                    indianNumber: true,
                },
                fullname: {
                    required: true,
                },
                agreement: {
                    required: true,
                },
            },
            messages: {
                mobile: {
                    required: $("#exchangemobnumber").data("validation-msg-req"),
                    validNumber: "Please enter a valid number",
                    indianNumber: "Please enter a valid number",
                },
                fullname: {
                    required: $("#exchangefullname").data("validation-msg-req"),
                },
                agreement: {
                    required: $("#exchangefullname").data("validation-msg-req"),
                },
            },
        });
    }

    if ($("#exchangeUserValidation").length > 0) {
        exchangeFormValidation($("#exchangeUserValidation"));
    }
});
$(document).ready(function() {

    const exchangeSliderLength = $('.exchange-dealers').length;
    const browserWidth = $(window).width();

  if(browserWidth > 1200 && exchangeSliderLength < 5) {
    $('.exchg-dealers-wrap .exchange-dealers').addClass('dealers-outer-wrap');
    $('.exchg-dealers-wrap .exchg-dealers-options').addClass('w-100');
  }

  const exchangeDealerSlick = {
  infinite: false,
  autoplay: false,
  dots: true,
  prevArrow: false,
  nextArrow: false,
  autoplaySpeed: 5000,
  responsive: [
    {
      breakpoint: 9999,
      settings: exchangeSliderLength > 4 ? {
          slidesToShow: 4,
          slidesToScroll: 4,
      } : "unslick",
    },
    {
      breakpoint: 1200,
      settings: exchangeSliderLength > 3 ? {
          slidesToShow: 3,
          slidesToScroll: 3,
      } : "unslick",
    },
    {
      breakpoint: 900,
      settings: exchangeSliderLength > 2 ? {
          slidesToShow: 2,
          slidesToScroll: 2,
      } : "unslick",
    },
    {
      breakpoint: 480,
      settings: exchangeSliderLength > 1 ? {
          slidesToShow: 1,
          slidesToScroll: 1,
      } : "unslick",
    },
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ],
};


$(".exchange-banner .exchg-dealers-wrap").slick(exchangeDealerSlick);

var width = $(window).width();
  $(window).on('resize', function() {
    if ($(this).width() !== width) {
        width = $(this).width();
        console.log(width, exchangeSliderLength);
        if(width > 1200 && exchangeSliderLength < 5) {
          $('.exchg-dealers-wrap .exchange-dealers').addClass('dealers-outer-wrap');
          $('.exchg-dealers-wrap .exchg-dealers-options').addClass('w-100'); 
        }
    }
  });
});
$(document).ready(function () {

    if ($('.exchg-wheeler-wrap').length > 0) {

        const wheelersListJSON = $('.exchg-wheeler-wrap .exchg-wheeler-carousel').attr('data-wheelerList');

        const response2WheelerData = JSON.parse(wheelersListJSON);
        const wheelerHtmlList = $('#step-4 .exchg-wheeler-carousel');
        const wheelerModalHtmlList = $('.wheeler-modal-content .wheeler-modal-body');
        response2WheelerData?.forEach(function (wheelerData, index) {
            if (index < 8) {
                const appendHtml = `<div class="wheelers-outer-wrap">
          <div class="exchg-wheelers-options d-flex">
              <input id="${'wheeler' + index}" type="radio" name="exchgWheeler" value="${wheelerData.name}"
                  class="active mt-1 position-absolute exchg-wheeler-input">
              <label class="text-center m-0 exchg-wheeler-label pr-0" data-toggle="modal"
                  data-target="#wheelerConfirmModal" for="${'wheeler' + index}">
                  <div class="exchg-wheelers-contents">
                      <div class="exchg-wheelers-tag-wrap">
                          <img src="/content/dam/hero-aem-website/in/exchange---assets/exchange_exclusive.png"
                              class="exchg-wheelers-tag-img" alt="exchange tag">
                          <div class="exchg-wheelers-tag-text">Exchange Price</div>
                      </div>
                      <div class="exchg-wheelers-img-wrap">
                          <img src="${wheelerData.image}" class=""
                              alt="exchange image">
                      </div>
                      <div class="exchg-wheelers-details-wrap">
                          <div class="exchg-wheelers-name">${wheelerData.name}</div>
                          <div class="exchg-wheelers-price">₹ ${wheelerData.price}*</div>
                      </div>
                  </div>
              </label>
          </div>
      </div>`
                $(wheelerHtmlList).append(appendHtml);
            } else if (index >= 8) {
                const appendHtml = `<div class="wheelers-outer-wrap">
          <div class="exchg-wheelers-options d-flex">
              <input id="${'wheelerModal' + index}" type="radio" name="exchgWheeler" value="${wheelerData.name}"
                  class="active mt-1 position-absolute exchg-wheeler-input">
              <label class="text-center m-0 exchg-wheeler-label pr-0" data-toggle="modal"
                  data-target="#wheelerConfirmModal" for="${'wheelerModal' + index}">
                  <div class="exchg-wheelers-contents">
                      <div class="exchg-wheelers-tag-wrap">
                          <img src="/content/dam/hero-aem-website/in/exchange---assets/exchange_exclusive.png"
                              class="exchg-wheelers-tag-img" alt="exchange tag">
                          <div class="exchg-wheelers-tag-text">Exchange Price</div>
                      </div>
                      <div class="exchg-wheelers-img-wrap">
                          <img src="${wheelerData.image}"
                              class="" alt="exchange image">
                      </div>
                      <div class="exchg-wheelers-details-wrap">
                          <div class="exchg-wheelers-name">${wheelerData.name}</div>
                          <div class="exchg-wheelers-price">₹ ${wheelerData.price}*</div>
                      </div>
                  </div>
              </label>
          </div>
      </div>`
                $(wheelerModalHtmlList).append(appendHtml);
            }
        });

        $('.exchg-wheeler-carousel input, .wheeler-modal-body input').click(function () {
            const checkedDealer = $('.exchg-dealers-wrap input').filter(":checked").parent().find('label .exchg-dealers-name').html();
            if (!checkedDealer) {
                $('.wheeler-confirm-butons .booknow-btn').removeClass('exchg-disable-login');
                $('#wheelerConfirmModal #confirmDealerText').removeClass('text-danger');
                $('.wheeler-confirm-butons .booknow-btn').addClass('exchg-disable-login');
                $('#wheelerConfirmModal #confirmDealerText').addClass('text-danger');
            } else {
                $('.wheeler-confirm-butons .booknow-btn').removeClass('exchg-disable-login');
                $('#wheelerConfirmModal #confirmDealerText').removeClass('text-danger');
            }
            $('#wheelerConfirmModal #confirmDealerText').html(checkedDealer ? checkedDealer : "Please select Dealer to continue");
            $('#wheelerConfirmModal #confirmModelText').html($(this).filter(":checked").parent().find('label .exchg-wheelers-name').html());
        })

        $(document).on('click', '.exchg-dealers-wrap input', function (e) {
            const eleWheelerWrap = document.getElementById("exchange-wheeler-wrapper");
            eleWheelerWrap.scrollIntoView({ behavior: "smooth", block: "center", inline: "nearest" });
        });

        $('.edit-number-exchg').click(function () {
            $('#otp-modal').modal('toggle');
            const eleStepMobileInput = document.getElementById("exchangemobnumber");
            eleStepMobileInput.focus();
            $('.otp-form .otp-field').val('');
        });

        $('#otp-modal').on('hidden.bs.modal', function () {
            $('.otp-form .otp-field').val('');
        })

        $('.exchg-wheeler-wrap .exchg-form-viewall').click(function () {
            $('.wheeler-modal-body .wheelers-outer-wrap').removeClass('wheelers-modal-wrap');
            $('.wheeler-modal-body .exchg-wheelers-options').removeClass('w-100');
            $('.wheeler-modal-body .wheelers-outer-wrap').addClass('wheelers-modal-wrap');
            $('.wheeler-modal-body .exchg-wheelers-options').addClass('w-100');
        })


        $('#wheelerConfirmModal').on('hidden.bs.modal', function () {
            $('.modal-backdrop').eq(0).removeClass('wheeler-confirm-modal-backdrop');
            $('#wheelerConfirmModal').removeClass('wheeler-confirm-modal-main');
        })


        $('#wheelerConfirmModal').on('shown.bs.modal', function (e) {
            $('.modal-backdrop').eq(0).removeClass('wheeler-confirm-modal-backdrop');
            $('#wheelerConfirmModal').removeClass('wheeler-confirm-modal-main');
            $('.modal-backdrop').eq(0).addClass('wheeler-confirm-modal-backdrop');
            $('#wheelerConfirmModal').addClass('wheeler-confirm-modal-main');
        })

        const exchangeWheelerSlick = {
            infinite: false,
            autoplay: false,
            dots: true,
            prevArrow: false,
            nextArrow: false,
            autoplaySpeed: 5000,
            responsive: [{
                breakpoint: 9999,
                settings: {
                    slidesToShow: 4,
                    slidesToScroll: 4,
                }
            },
            {
                breakpoint: 1200,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 3,
                }
            },
            {
                breakpoint: 900,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2,
                }
            },
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            ],
        };

        $(".exchg-wheeler-wrap .exchg-wheeler-carousel").slick(exchangeWheelerSlick);
    }
});
$(document).ready(function () {
  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }

  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
  
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }
  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }
  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }

  $("#ex-submit-city").click(function () {
    let exchangeVehicleInfo = {
      exchangeVehicleType:
        document.querySelector('[data-target="vehicleList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleBrand:
        document.querySelector('[data-target="brandList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleModel:
        document.querySelector('[data-target="modelList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleYear:
        document.querySelector('[data-target="yearList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleMonth:
        document.querySelector('[data-target="monthList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleState:
        document.querySelector('[data-target="stateList"]').children[1].textContent.trim() ||
        "",
      exchangeVehicleCity:
        document.querySelector('[data-target="cityList"]').children[1].textContent.trim() ||
        "",
      exchangeVehiclePincode: $("#pincode").val() || "",
    };

    sessionStorage.setItem("exchangeVehicleInfo", JSON.stringify(exchangeVehicleInfo));

    let getData = sessionStorage.getItem("exchangeVehicleInfo");

    let vehicleData = JSON.parse(getData) || "";

    if ($("#selectedExchangeType").text()) {
      if ($("#selectedExchangeType").text() === "Another Vehicle") {
        vehicleData.aaExchangeType = "Another Vehicle";
      } else {
        vehicleData.aaExchangeType = "Hero own Vehicle";
        vehicleData.aaOwnVehiclename = $("#selectedExchangeType").text() || "";
        let getVehicleYearMonth = $("#ownVehicleYearMonth")?.text().split(",");
        let getVehicleStateCity = $("#ownVehicleStateCity")?.text().split(",");
        vehicleData.aaOwnVehicleMonth = getVehicleYearMonth[0] || "";
        vehicleData.aaOwnVehicleYear = getVehicleYearMonth[1] || "";
        vehicleData.aaOwnVehicleState = getVehicleStateCity[0] || "";
        vehicleData.aaOwnVehicleCity = getVehicleStateCity[1] || "";
      }
    } else {
      vehicleData.aaExchangeType = "Another Vehicle";
    }

    sessionStorage.setItem("exchangeVehicleInfo", JSON.stringify(vehicleData));
    let getFinalData = sessionStorage.getItem("exchangeVehicleInfo");
    let getVehicleDatalayer = JSON.parse(getFinalData) || "";

    if (window.digitalData) {
      window.digitalData.push({
        event: "Exchange Vehicle Details Submitted",
        exchangeDetails: {
          journeyType: sessionStorage.getItem("aaExchangeJourneyType") || "",
          exchangeType: getVehicleDatalayer.aaExchangeType,
          brand: getVehicleDatalayer.exchangeVehicleBrand,
          city: getVehicleDatalayer.exchangeVehicleCity,
          model: getVehicleDatalayer.exchangeVehicleModel,
          pincode: getVehicleDatalayer.exchangeVehiclePincode,
          state: getVehicleDatalayer.exchangeVehicleState,
          vehicleType: getVehicleDatalayer.exchangeVehicleType,
          year: getVehicleDatalayer.exchangeVehicleYear,
          month: getVehicleDatalayer.exchangeVehicleMonth,
          registrationYear: getVehicleDatalayer.aaOwnVehicleYear ?? "NA",
          registrationMonth: getVehicleDatalayer.aaOwnVehicleMonth ?? "NA",
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  });

  let analyticsSecondClick = false;
  $("#partsList .exchg-options-condition-wrap").click(function () {
    let getFinalData = sessionStorage.getItem("exchangeVehicleInfo");
    let getVehicleDatalayer = JSON.parse(getFinalData) || "";
    let exchangeVehicleCondition = {
      silencer:
        document
          .querySelector('[data-target="silencerList"]')
          .children[1].textContent.trim() || "",
      problemInStarting:
        document
          .querySelector('[data-target="startingList"]')
          .children[1].textContent.trim() || "",
      lights:
        document.querySelector('[data-target="lightsList"]').children[1].textContent.trim() ||
        "",
      frontTyres:
        document.querySelector('[data-target="tyresList"]').children[1].textContent.trim() ||
        "",
      rearTyres:
        document
          .querySelector('[data-target="rearTyresList"]')
          .children[1].textContent.trim() || "",
      bodyParts: $(this).find("input").val(),
    };

    function objectToPipeSeparatedKey(obj) {
      return Object.entries(obj)
        .map(([key, value]) => `${key}=${value}`)
        .join("|");
    }

    const pipeSeparatedConditions = objectToPipeSeparatedKey(exchangeVehicleCondition);
    sessionStorage.setItem("vehicleCondition", pipeSeparatedConditions);
    if (window.digitalData && analyticsSecondClick === false) {
      window.digitalData.push({
        event: "Exchange Vehicle Condition Submitted",
        exchangeDetails: {
          journeyType: sessionStorage.getItem("aaExchangeJourneyType") || "",
          exchangeType: getVehicleDatalayer.aaExchangeType,
          brand: getVehicleDatalayer.exchangeVehicleBrand,
          city: getVehicleDatalayer.exchangeVehicleCity,
          model: getVehicleDatalayer.exchangeVehicleModel,
          pincode: getVehicleDatalayer.exchangeVehiclePincode,
          state: getVehicleDatalayer.exchangeVehicleState,
          vehicleType: getVehicleDatalayer.exchangeVehicleType,
          year: getVehicleDatalayer.exchangeVehicleYear,
          month: getVehicleDatalayer.exchangeVehicleMonth,
          registrationYear: getVehicleDatalayer.aaOwnVehicleYear ?? "NA",
          registrationMonth: getVehicleDatalayer.aaOwnVehicleMonth ?? "NA",
          vehicleCondition: sessionStorage.getItem("vehicleCondition") || "",
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
    analyticsSecondClick = true;
  });

  $(".exchg-wheelers-options").click(function () {
    sessionStorage.setItem(
      "wheelerExchangePrice",
      $(this)
        .find(".exchg-wheelers-details-wrap .exchg-wheelers-price")
        .contents()
        .get(0)
        .nodeValue.replaceAll("*", "") || ""
    );
    sessionStorage.setItem(
      "wheelerActualPrice",
      $(this).find(".exchg-wheelers-details-wrap .exchg-wheelers-price s").text() || ""
    );
  });
});

$(document).ready(function () {
  $(".gallary-carousel").slick({
    slidesToShow: 1,
    dots: true,
    centerMode: false,
    rows: 1,
    slidesToScroll: 1,
    infinite: false,
    variableWidth: false,
    adaptiveHeight: true,
    autoplay: true,
    autoplaySpeed: 3000,
  });

  let modelOpened = true;
  $(".fullscreenGallery").on("shown.bs.modal", function (e) {
    console.log("initialize");
    if (modelOpened) {
      $(".gallary-carousel-mobile").slick({
        slidesToShow: 1,
        dots: false,
        centerMode: false,
        slidesToScroll: 1,
        infinite: true,
        adaptiveHeight: true,
      });
      modelOpened = false;
    }
  });

  $(document).on("click", ".gallery-download-link", function (event) {
    event.preventDefault();
    event.stopPropagation();
    downloadActiveSlideImage();
  });
  
  function downloadActiveSlideImage() {
    if ($('.fullscreenGallery').length > 1) {
      var imageUrl = $(".active .slick-active .gallary-carousel-mobile-image .popup-img").attr("src");
    } else {
      var imageUrl = $(".slick-active .gallary-carousel-mobile-image .popup-img").attr("src");
    }
    
    if (imageUrl) {
      let imageName = imageUrl.split("/");
      var link = document.createElement("a");
      link.href = imageUrl;
      link.download = imageName[imageName.length - 1]; // file name
      link.click();
    }
  }

  $("#gallery-slider .gallery-slide a").on("click", function (event) {
    event.preventDefault();
    $(".fullscreenGallery").modal("show");
    $('html').css({
      overflow: 'hidden',
      height: '100vh'
    });
    $("body").addClass("gallery-modal-popup");
    let slickIndex = parseInt($(this).data("modal-index"));
    $(".gallary-carousel-mobile").slick("slickGoTo", slickIndex);
  });

  $(".gallary-carousel-mobile-image .close ").on("click", function () {
    $('html').css({
      overflow: '',
      height: ''
    });
    if ($('.modal-backdrop').length > 0) {
      $('.modal-backdrop').remove();
    }
    $('.fullscreenGallery').modal("hide");
    $("body").removeClass("gallery-modal-popup");
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) {
      // Firefox
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      // Chrome, Safari and Opera
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      // IE/Edge
      document.msExitFullscreen();
    }
    screen.orientation.lock("portrait-primary");
  });

  // $("#fullscreenGallery .fullscreen-button").on("click", function () {
  //   var elem = document.getElementById("fullscreenGallery");
  //   if (elem.requestFullscreen) {
  //     elem.requestFullscreen();
  //   } else if (elem.mozRequestFullScreen) {
  //     /* Firefox */
  //     elem.mozRequestFullScreen();
  //   } else if (elem.webkitRequestFullscreen) {
  //     /* Chrome, Safari & Opera */
  //     elem.webkitRequestFullscreen();
  //   } else if (elem.msRequestFullscreen) {
  //     /* IE/Edge */
  //     elem.msRequestFullscreen();
  //   } else if (elem.webkitFullscreenElement) {
  //     elem.webkitCancelFullScreen();
  //   }
  //   if (screen.orientation.type === "portrait-primary") {
  //     screen.orientation
  //       .lock("landscape-primary")
  //       .catch(function (error) {
  //         alert(error);
  //       });
  //   }
  // });

  $('.custom-cvg-popup').simpleLightboxCustom();
});



$(document).ready(async function () {

    /* Method to get City from Data from Commerce */
    async function getCommerceCityList(stateCode) {
        let response = await fetch("/content/hero-commerce/in/en/jcr:content.state-and-city.json");
        let jsonData = await response.json();

        if (stateCode) {
            return jsonData.data.stateCity
            .find((state) => state.code == stateCode)
            .cities.sort((city1, city2) => city1.label.localeCompare(city2.label))
            .map(
            (item) =>
                `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${item.code.toUpperCase()}">
                        <a href="javascript:void(0)">${item.label.toUpperCase()}</a>
                    </li>`
            )
            .join("");
        }
    }

    /* Method to get State from Data from Commerce */
    async function getCommerceStateList() {
        let response = await fetch("/content/hero-commerce/in/en/jcr:content.state-and-city.json");
        let jsonData = await response.json();

            return jsonData.data.stateCity
            .sort((state1, state2) => state1.label.localeCompare(state2.label))
            .map(
            (item) =>
                `<li class="font-montserrat-regular font-weight-500" value="${item.code}">
                        <a href="javascript:void(0)">${item.label.toUpperCase()}</a>
                    </li>`
            )
            .join("");
    }

    /* Method to get vehicle list from Commerce */
    async function getVehicleList() {
        const url =
        "/content/hero-commerce/in/en/jcr:content.products-by-category.json";
        let options = {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            category: "",
            newly_launched: 0,
            rfm_enable: 0,
            state: "DEL",
            city: "Delhi",
        }),
        };
        try {
        let response = await fetch(url, options);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            else {
                let jsonData = await response.json();
                let items = jsonData.data.products.items;
                return items.map(item => `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${item.sku}">
                        <a href="javascript:void(0)">${item.name.toUpperCase()}</a>
                    </li>`).join("");
            }
        } catch (e) {
        console.error(e);
        }
    }  

    if ($("#price-list").length > 0) {
        document.body.style.webkitScrollbar = "display: none";
        let urlLand = window.location.href;
        const form = $("#pl--form-wrap");
        const defaultservlet = document.getElementById("defaultservlet").value;

        let vehicleList = form
            .find('[name="vehiclename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");

        populateCommerceDropdown(
            getVehicleList,
            vehicleList,
            "vehicle",
            window && window.locations ? locations.State : null,
            false
        );

        /* function populateDropdown(url, selector, keyword, selectedVal) {
            if (url && selector[0] !== undefined) {
                fetch(url)
                    .then(function (response) {
                        if (!response.ok) {
                            // make the promise be rejected if we didn't get a 2xx response
                            throw new Error("Not 2xx response", { cause: response });
                        } else {
                            return response.text();
                        }
                    })
                    .then(function (html) {
                        selector[0].innerHTML = html;
                        let form = $(selector).closest("form");
                        if (keyword == "vehicle") {
                            //sort in ascending order
                            form
                                .find('[name="vehiclename"]')
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    form
                                        .find('[name="vehiclename"]')
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let vehicle;
                            let abbrState = form
                                .find('[name="vehicle"]')
                                .attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    vehicle = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrState = selectedVal;
                                    form.find('[name="vehicleNameVal"]').val(selectedVal);
                                }
                            }
                            form.find('[name="vehiclename"]').text(abbrState);


                            let stateField = form.find('[name="statename"]');
                            let stateValue =
                                null != (window && window.locations) ? locations.State : "";
                            if (
                                stateField.text().trim() !== stateField.attr("data-default-label")
                            ) {
                                stateValue = stateField.text().trim();
                            }
                            let statelist = stateField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu ");
                            if (state) {
                                stateField[0].disabled = false;
                                populateDropdown(
                                    url.substr(0, url.indexOf(".")) +
                                    ".vehiclepricestates." +
                                    vehicle +
                                    ".html",
                                    statelist,
                                    "city",
                                    stateValue
                                );
                            } else {
                                stateField[0].disabled = true;
                                stateField.text(
                                    form.find('[name="statename"]').attr("data-default-label")
                                );

                                stateField.removeClass("active");

                            }
                        }
                        if (keyword == "state") {
                            let stateField = form.find('[name="statename"]');
                            stateField[0].disabled = false;
                            //sort in ascending order
                            form
                                .find('[name="statename"]')
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    form
                                        .find('[name="statename"]')
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let state;
                            let abbrState = form
                                .find('[name="statename"]')
                                .attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    state = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrState = selectedVal;
                                    form.find('[name="stateNameVal"]').val(selectedVal);
                                }
                            }
                            form.find('[name="statename"]').text(abbrState);
                            let cityField = form.find('[name="cityname"]');
                            let cityValue =
                                null != (window && window.locations) ? locations.City : "";
                            if (
                                cityField.text().trim() !== cityField.attr("data-default-label")
                            ) {
                                cityValue = cityField.text().trim();
                            }
                            let citylist = cityField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu ");
                        }
                        if (keyword == "city") {
                            //sort in ascending order
                            let cityField = form.find('[name="cityname"]');
                            let dealerField = form.find('[name="dealername"]');
                            cityField[0].disabled = false;
                            cityField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    cityField
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let abbrCity;
                            abbrCity = cityField.attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    abbrCity = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrCity = selectedVal;
                                    form.find('[name="cityNameVal"]').val($(this).attr("value"));
                                    abbrDealer = dealerField.text().trim();
                                    form
                                        .find('[name="dealerNameVal"]')
                                        .val(form.find('[name="dealerNameVal"]').val());
                                } else {
                                    cityField.removeClass("active");
                                    $("#pl-search-btn").addClass("btn-disabled");
                                }
                            }
                            cityField.text(abbrCity);

                        }
                    })
                    .catch(function (err) {
                        console.warn("Something went wrong.", err);
                    });
            }
        } */
        
            async function populateCommerceDropdown(callbackFunc, selector, keyword, selectedVal) {
            if (callbackFunc && selector[0] !== undefined) {                
                   await callbackFunc(selectedVal)
                    .then(function (html) {
                        selector[0].innerHTML = html;
                        let form = $(selector).closest("form");
                        let state;
                        if (keyword == "vehicle") {
                            //sort in ascending order
                            form
                                .find('[name="vehiclename"]')
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    form
                                        .find('[name="vehiclename"]')
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let vehicle;
                            let abbrState = form
                                .find('[name="vehicle"]')
                                .attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    vehicle = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrState = selectedVal;
                                    form.find('[name="vehicleNameVal"]').val(selectedVal);
                                }
                            }
                            form.find('[name="vehiclename"]').text(abbrState);


                            let stateField = form.find('[name="statename"]');
                            let stateValue =
                                null != (window && window.locations) ? locations.State : "";
                            if (
                                stateField.text().trim() !== stateField.attr("data-default-label")
                            ) {
                                stateValue = stateField.text().trim();
                            }
                            let statelist = stateField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu ");
                            
                            if (state) {
                                stateField[0].disabled = false;
                                populateCommerceDropdown(
                                    getCommerceStateCityList,
                                    statelist,
                                    "city",
                                    stateValue
                                );
                            } else {
                                stateField[0].disabled = true;
                                stateField.text(
                                    form.find('[name="statename"]').attr("data-default-label")
                                );

                                stateField.removeClass("active");
                            }
                        }
                        if (keyword == "state") {
                            let stateField = form.find('[name="statename"]');
                            stateField[0].disabled = false;
                            //sort in ascending order
                            form
                                .find('[name="statename"]')
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    form
                                        .find('[name="statename"]')
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let abbrState = form
                                .find('[name="statename"]')
                                .attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    state = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrState = selectedVal;
                                    form.find('[name="stateNameVal"]').val(selectedVal);
                                }
                            }
                            form.find('[name="statename"]').text(abbrState);
                            let cityField = form.find('[name="cityname"]');
                            let cityValue =
                                null != (window && window.locations) ? locations.City : "";
                            if (
                                cityField.text().trim() !== cityField.attr("data-default-label")
                            ) {
                                cityValue = cityField.text().trim();
                            }
                            let citylist = cityField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu ");
                        }
                        if (keyword == "city") {
                            //sort in ascending order
                            let cityField = form.find('[name="cityname"]');
                            let dealerField = form.find('[name="dealername"]');
                            cityField[0].disabled = false;
                            cityField
                                .parents(".cust-drop-down")
                                .find(".cust-dropdown-menu li")
                                .sort(sortAscending)
                                .appendTo(
                                    cityField
                                        .parents(".cust-drop-down")
                                        .find(".cust-dropdown-menu")
                                );
                            let abbrCity;
                            abbrCity = cityField.attr("data-default-label");
                            if (selectedVal) {
                                if (
                                    $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value")
                                ) {
                                    abbrCity = $(selector[0])
                                        .children("li:contains(" + selectedVal.toLowerCase() + ")")
                                        .attr("value");
                                    abbrCity = selectedVal;
                                    form.find('[name="cityNameVal"]').val($(this).attr("value"));
                                    abbrDealer = dealerField.text().trim();
                                    form
                                        .find('[name="dealerNameVal"]')
                                        .val(form.find('[name="dealerNameVal"]').val());
                                } else {
                                    cityField.removeClass("active");
                                    $("#pl-search-btn").addClass("btn-disabled");
                                }
                            }
                            cityField.text(abbrCity);

                        }
                    })
                    .catch(function (err) {
                        console.warn("Something went wrong.", err);
                    });
            }
        }

        if (urlLand.includes('-in-')) {

            let [content, city, state] = urlLand.split('-in-');
            let vehicle = content.split('/').pop();
            if (vehicle.includes('-price')) {
                vehicle = vehicle.replace('-price', '');
            }
            //city = city.replace(/-/g, '_');
            //vehicle = vehicle.replace(/-/g, '_');
            if (state.includes('.html')) {
                state = state.replace('.html', '');
            }

            function waitForElement(selector) {
                return new Promise(resolve => {
                    const intervalId = setInterval(() => {
                        const element = document.querySelector(selector);
                        if (element) {
                            clearInterval(intervalId);
                            resolve(element);
                        }
                    }, 100);
                });
            }

            async function selectDropdownItem(selector, value) {
                try {
                    const matchingLi = await waitForElement(`${selector} li[value="${value}"]`);
                    if (matchingLi) {
                        matchingLi.click();
                    } else {
                        console.error(`Element with selector ${selector} and value ${value} not found.`);
                    }
                } catch (error) {
                    console.error(`Error selecting dropdown item: ${error}`);
                }
            }

            async function handleDropdownSelection(vehicle, state, city) {
                await selectDropdownItem('#vehicle-dropdown', vehicle);
                await selectDropdownItem('#stateDropdown', state);
                await selectDropdownItem('#cityDropdown', city);
            }

            handleDropdownSelection(vehicle, state.toUpperCase(), city.toUpperCase().replaceAll("-"," "));

            /* $.ajax({
                type: "GET",
                url: defaultservlet + ".vehiclepricedata." + vehicle + "." + state + "." + city + ".html",
                success: function (response) {
                    const $responseHtml = $(response);
                    const $listItems = $responseHtml.filter('li');
                    const $table = $('.table--wrap table');

                    $listItems.each(function () {
                        const $li = $(this);
                        const vehicleName = $li.find('.b2-text-std').text();
                        const vehiclePrice = $li.find('.price-text').text();
                        const $tableRow = $('<tr>').append(
                            $('<td>').append($('<p>').text(vehicleName)),
                            $('<td>').append($('<p>').text(vehiclePrice))
                        );
                        $table.append($tableRow);
                    });
                },
                error: function (err) {
                    console.log("Error: ", err)
                }
            }) */
        }

        $("#price-list #pl--form-wrap .cust-dropdown-menu").on("click", "li", function () {
            let selectionGroup = $(this).parents(".cust-drop-down");
            var button = selectionGroup.find(".dropdown-select");
            button.addClass("active");
            button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
            var form = $(this).closest("form");

            if ("vehiclename" == button.attr("name")) {
                let stateField = form.find('[name="statename"]');
                let cityField = form.find('[name="cityname"]');


                let list = stateField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu ");

                vehicleName = $(this).text();
                if (!$(this).hasClass("active")) {
                    selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
                    $(this).addClass("active");
                    stateField.text(stateField.attr("data-default-label"));
                    cityField.text(cityField.attr("data-default-label"));

                    stateField.removeClass("active");
                    cityField.removeClass("active");

                    let dropDownSelector = stateField
                        .parents(".cust-drop-down")
                        .find(".cust-dropdown-menu");
                    stateField[0].disabled = true;
                    cityField[0].disabled = true;

                    // .Vehicle.StateCode.html
                    statePath =
                        defaultservlet + ".vehiclepricestates." + $(this).attr("value") + ".html";
                    let stateValue =
                        null != (window && window.locations) ? locations.State : "";

                    populateCommerceDropdown(getCommerceStateList, list, "state", stateValue, true);
                    // form.find('[name="stateNameVal"]').val($(this).attr("value"));
                    form.find('[name="stateNameVal"]').val("");
                    form.find('[name="cityNameVal"]').val("");
                }
                form.find('[name="vehicleModelNameVal"]').val($(this).attr("value").toLowerCase());
            } else if ("statename" == button.attr("name")) {
                let cityField = form.find('[name="cityname"]');
                let selVehicle = form.find('[name="vehicleModelNameVal"]').val();
                let list = cityField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu ");

                stateName = $(this).text();
                if (!$(this).hasClass("active")) {
                    selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
                    $(this).addClass("active");
                    cityField.text(cityField.attr("data-default-label"));

                    cityField.removeClass("active");

                    let dropDownSelector = cityField
                        .parents(".cust-drop-down")
                        .find(".cust-dropdown-menu");
                    cityField[0].disabled = true;
                    cityPath =
                        defaultservlet + ".vehiclepricecities." + selVehicle + "." + $(this).attr("value") + ".html";
                    let cityValue = $(this).attr("value");
                    let dataObj = {
                        state: button.text(),
                    };
                    populateCommerceDropdown(getCommerceCityList, list, "city", cityValue, true);
                    form.find('[name="stateNameVal"]').val($(this).attr("value"));
                    form.find('[name="cityNameVal"]').val("");
                }
            }
            else if ("cityname" == button.attr("name")) {
                form.find('[name="cityNameVal"]').val($(this).attr("value"));
            }
            let inputField = form.find("input");
            inputField.each(function () {
                let inputVal = $(this).val();
                if (!inputVal) {
                    $("#pl-search-btn").addClass("btn-disabled");
                    return false;
                } else {
                    $("#pl-search-btn").removeClass("btn-disabled");
                }
            });
        });

        $('#pl-search-btn').click(() => {
            const selectedBike = $('[name="vehicleModelNameVal"]').val().replace(/_/g, '-');
            const selectedState = $('[name="stateNameVal"]').val().toLowerCase();
            const selectedCity = $('[name="cityNameVal"]').val().replaceAll(' ', '-').toLowerCase();
            let newQueryString = `/${selectedBike}-price-in-${selectedCity}-in-${selectedState}.html`;
            if (urlLand.includes('-in-')) {
                urlLand = urlLand.substring(0, urlLand.lastIndexOf('/'));
            }
            urlLand += newQueryString;
            window.location.href = urlLand;
        })
    }

    if ($('#seo-dynamic-canonical').length > 0) {
        $('head link').each(function (i) {
            if ($(this).attr('rel') == 'canonical')
                $(this).attr('href', window.location.href);
        })
    }
})
$(document).ready(function () {
    if ($('#nearby-cities-section').length) {

        const defaultservlet = document.getElementById("defaultservlet").value;
        const currentURL = window.location.href;
        const reqRadius = $("#seo-nearby-radius").data("seoradius");

        function generateNearbyCities(jsonArray, modelSku) {
            jsonArray
                .filter((item, index) => index < 4)
                .forEach((item) => {
                    let stateCode = item.stateCode;
                    let cityCode = item.cityCode;
                    let apiUrl = `/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.product.performance.${modelSku}.${stateCode}.${cityCode}.json`;
                    fetch(apiUrl)
                        .then((response) => response.json())
                        .then((json) => json.data.products.items[0].variant_to_colors)
                        .then(variants => variants.map(variant=>variant.variant_price))
                        .then(priceArr=> Math.min(...priceArr))
                        .then(price => {
                            let data = {};
                            data[`${stateCode}|${cityCode}`] = new Intl.NumberFormat("en-US").format(parseInt(price));
                            return data;
                        })
                        .then(data => {
                            const cityList = $('#city-list ul');
                            const priceList = $('#road-price-list ul');
                            const viewAllList = $('#varient-price ul');
                            const mobileTileParent = $('.white-section-mob .vehicle-list-price');
                            const ctaLabel = $("#seo-nearby-cta").data("seonearcta");
                            
                            if (Object.keys(data).length > 0) {
                                const sortedObject = Object.fromEntries(Object.entries(data).slice(0, 4).sort((a, b) => a[0].localeCompare(b[0])));
                                const [cities, prices] = [Object.keys(sortedObject), Object.values(sortedObject)];

                                cities.forEach(city => {

                                const [respState, respCity] = city.split('|');

                                // Populating for desktop
                                cityList.append($('<li>').text(respCity).attr('data-respstate', respState.toLowerCase()));
                                viewAllList.append($('<li>').append($('<a>').attr('href', 'javascript:void(0)').text(ctaLabel).addClass('desktop-click')));
                                priceList.append($('<li>').text("₹" + prices[cities.indexOf(city)] + " onwards"))

                                // Populating for Mobile
                                const vehicleTile = $('<div>').addClass('veh-tile');
                                const vehicleName = $('<p>').addClass('city-name').text(respCity).attr('data-respstate', respState.toLowerCase());
                                const priceViewAnchor = $('<div>').addClass('price-view-anchor d-flex flex-column');
                                const priceMob = $('<p>').addClass('price-mob').text("₹" + prices[cities.indexOf(city)] + " onwards");
                                const viewVariantsPrice = $('<a>').attr('href', 'javascript:void(0)').text(ctaLabel).addClass('mobile-click');
                                priceViewAnchor.append(priceMob, viewVariantsPrice);
                                vehicleTile.append(vehicleName, priceViewAnchor);
                                mobileTileParent.append(vehicleTile);
                        });

                            } else {
                                $('#nearby-cities-section').addClass('d-none');
                            }
                        })
                });
            return;
        }

        // View All Click on Desktop
        $('body').on('click', '.desktop-click', function () {
            const clickedIndex = $(this).parent().index();
            const respCityName = $('#city-list ul li').eq(clickedIndex).text().toLowerCase().replace(/ /g, '-');
            const respStateName = $('#city-list ul li').eq(clickedIndex).data('respstate');
            const regex = /-in-(.*?)-in-(.*?).html/;
            const newURL = currentURL.replace(regex, `-in-${respCityName}-in-${respStateName}.html`);
            window.location.href = newURL;
        });

        // View All Click on Mobile
        $('body').on('click', '.mobile-click', function () {
            const respCityName = $(this).parent().parent().find('.city-name').text().toLowerCase().replace(/ /g, '-');
            const respStateName = $(this).parent().parent().find('.city-name').data('respstate');
            const regex = /-in-(.*?)-in-(.*?).html/;
            const newURL = currentURL.replace(regex, `-in-${respCityName}-in-${respStateName}.html`);
            window.location.href = newURL;
        });

        if (currentURL.includes('-in-')) {
            let dataObject = new FormData();

            let [content, city, state] = currentURL.split('-in-');
            let vehicle = content.split('/').pop();
            if (vehicle.includes('-price')) {
                vehicle = vehicle.replace('-price', '');
            }
            if (state.includes('.html')) {
                state = state.replace('.html', '');
            }

            dataObject.append("state", state.toUpperCase());
            dataObject.append("city", city.toUpperCase());
            dataObject.append("model", vehicle);
            dataObject.append("maxradius", reqRadius);

            $.ajax({
                type: "POST",
                url: defaultservlet + ".seopricecityservlet.html",
                data: dataObject,
                processData: false,
                mimeType: "multipart/form-data",
                contentType: false,
                success: function (response) {
                    if (typeof response === 'string') {
                        try {
                            response = JSON.parse(response);
                        } catch (e) {
                            console.log("Error parsing response to JSON: ", e);
                            $('#nearby-cities-section').addClass('d-none');
                            return;
                        }
                    }
                    if (response.length == 0) {
                        $('#nearby-cities-section').addClass('d-none');
                    } else {
                        generateNearbyCities(response, vehicle);
                    }
                },
                error: function (err) {
                    console.log("Nearby City Error: ", err);
                    $('#nearby-cities-section').addClass('d-none');
                }
            })
        }
    }
})
var CryptoJS = CryptoJS || function (u, p) {
    var d = {}, l = d.lib = {}, s = function () { }, t = l.Base = { extend: function (a) { s.prototype = this; var c = new s; a && c.mixIn(a); c.hasOwnProperty("init") || (c.init = function () { c.$super.init.apply(this, arguments) }); c.init.prototype = c; c.$super = this; return c }, create: function () { var a = this.extend(); a.init.apply(a, arguments); return a }, init: function () { }, mixIn: function (a) { for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]); a.hasOwnProperty("toString") && (this.toString = a.toString) }, clone: function () { return this.init.prototype.extend(this) } },
      r = l.WordArray = t.extend({
        init: function (a, c) { a = this.words = a || []; this.sigBytes = c != p ? c : 4 * a.length }, toString: function (a) { return (a || v).stringify(this) }, concat: function (a) { var c = this.words, e = a.words, j = this.sigBytes; a = a.sigBytes; this.clamp(); if (j % 4) for (var k = 0; k < a; k++)c[j + k >>> 2] |= (e[k >>> 2] >>> 24 - 8 * (k % 4) & 255) << 24 - 8 * ((j + k) % 4); else if (65535 < e.length) for (k = 0; k < a; k += 4)c[j + k >>> 2] = e[k >>> 2]; else c.push.apply(c, e); this.sigBytes += a; return this }, clamp: function () {
          var a = this.words, c = this.sigBytes; a[c >>> 2] &= 4294967295 <<
            32 - 8 * (c % 4); a.length = u.ceil(c / 4)
        }, clone: function () { var a = t.clone.call(this); a.words = this.words.slice(0); return a }, random: function (a) { for (var c = [], e = 0; e < a; e += 4)c.push(4294967296 * u.random() | 0); return new r.init(c, a) }
      }), w = d.enc = {}, v = w.Hex = {
        stringify: function (a) { var c = a.words; a = a.sigBytes; for (var e = [], j = 0; j < a; j++) { var k = c[j >>> 2] >>> 24 - 8 * (j % 4) & 255; e.push((k >>> 4).toString(16)); e.push((k & 15).toString(16)) } return e.join("") }, parse: function (a) {
          for (var c = a.length, e = [], j = 0; j < c; j += 2)e[j >>> 3] |= parseInt(a.substr(j,
            2), 16) << 24 - 4 * (j % 8); return new r.init(e, c / 2)
        }
      }, b = w.Latin1 = { stringify: function (a) { var c = a.words; a = a.sigBytes; for (var e = [], j = 0; j < a; j++)e.push(String.fromCharCode(c[j >>> 2] >>> 24 - 8 * (j % 4) & 255)); return e.join("") }, parse: function (a) { for (var c = a.length, e = [], j = 0; j < c; j++)e[j >>> 2] |= (a.charCodeAt(j) & 255) << 24 - 8 * (j % 4); return new r.init(e, c) } }, x = w.Utf8 = { stringify: function (a) { try { return decodeURIComponent(escape(b.stringify(a))) } catch (c) { throw Error("Malformed UTF-8 data"); } }, parse: function (a) { return b.parse(unescape(encodeURIComponent(a))) } },
      q = l.BufferedBlockAlgorithm = t.extend({
        reset: function () { this._data = new r.init; this._nDataBytes = 0 }, _append: function (a) { "string" == typeof a && (a = x.parse(a)); this._data.concat(a); this._nDataBytes += a.sigBytes }, _process: function (a) { var c = this._data, e = c.words, j = c.sigBytes, k = this.blockSize, b = j / (4 * k), b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0); a = b * k; j = u.min(4 * a, j); if (a) { for (var q = 0; q < a; q += k)this._doProcessBlock(e, q); q = e.splice(0, a); c.sigBytes -= j } return new r.init(q, j) }, clone: function () {
          var a = t.clone.call(this);
          a._data = this._data.clone(); return a
        }, _minBufferSize: 0
      }); l.Hasher = q.extend({
        cfg: t.extend(), init: function (a) { this.cfg = this.cfg.extend(a); this.reset() }, reset: function () { q.reset.call(this); this._doReset() }, update: function (a) { this._append(a); this._process(); return this }, finalize: function (a) { a && this._append(a); return this._doFinalize() }, blockSize: 16, _createHelper: function (a) { return function (b, e) { return (new a.init(e)).finalize(b) } }, _createHmacHelper: function (a) {
          return function (b, e) {
            return (new n.HMAC.init(a,
              e)).finalize(b)
          }
        }
      }); var n = d.algo = {}; return d
  }(Math);
  (function () {
    var u = CryptoJS, p = u.lib.WordArray; u.enc.Base64 = {
      stringify: function (d) { var l = d.words, p = d.sigBytes, t = this._map; d.clamp(); d = []; for (var r = 0; r < p; r += 3)for (var w = (l[r >>> 2] >>> 24 - 8 * (r % 4) & 255) << 16 | (l[r + 1 >>> 2] >>> 24 - 8 * ((r + 1) % 4) & 255) << 8 | l[r + 2 >>> 2] >>> 24 - 8 * ((r + 2) % 4) & 255, v = 0; 4 > v && r + 0.75 * v < p; v++)d.push(t.charAt(w >>> 6 * (3 - v) & 63)); if (l = t.charAt(64)) for (; d.length % 4;)d.push(l); return d.join("") }, parse: function (d) {
        var l = d.length, s = this._map, t = s.charAt(64); t && (t = d.indexOf(t), -1 != t && (l = t)); for (var t = [], r = 0, w = 0; w <
          l; w++)if (w % 4) { var v = s.indexOf(d.charAt(w - 1)) << 2 * (w % 4), b = s.indexOf(d.charAt(w)) >>> 6 - 2 * (w % 4); t[r >>> 2] |= (v | b) << 24 - 8 * (r % 4); r++ } return p.create(t, r)
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    }
  })();
  (function (u) {
    function p(b, n, a, c, e, j, k) { b = b + (n & a | ~n & c) + e + k; return (b << j | b >>> 32 - j) + n } function d(b, n, a, c, e, j, k) { b = b + (n & c | a & ~c) + e + k; return (b << j | b >>> 32 - j) + n } function l(b, n, a, c, e, j, k) { b = b + (n ^ a ^ c) + e + k; return (b << j | b >>> 32 - j) + n } function s(b, n, a, c, e, j, k) { b = b + (a ^ (n | ~c)) + e + k; return (b << j | b >>> 32 - j) + n } for (var t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = 0; 64 > x; x++)b[x] = 4294967296 * u.abs(u.sin(x + 1)) | 0; r = r.MD5 = v.extend({
      _doReset: function () { this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]) },
      _doProcessBlock: function (q, n) {
        for (var a = 0; 16 > a; a++) { var c = n + a, e = q[c]; q[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360 } var a = this._hash.words, c = q[n + 0], e = q[n + 1], j = q[n + 2], k = q[n + 3], z = q[n + 4], r = q[n + 5], t = q[n + 6], w = q[n + 7], v = q[n + 8], A = q[n + 9], B = q[n + 10], C = q[n + 11], u = q[n + 12], D = q[n + 13], E = q[n + 14], x = q[n + 15], f = a[0], m = a[1], g = a[2], h = a[3], f = p(f, m, g, h, c, 7, b[0]), h = p(h, f, m, g, e, 12, b[1]), g = p(g, h, f, m, j, 17, b[2]), m = p(m, g, h, f, k, 22, b[3]), f = p(f, m, g, h, z, 7, b[4]), h = p(h, f, m, g, r, 12, b[5]), g = p(g, h, f, m, t, 17, b[6]), m = p(m, g, h, f, w, 22, b[7]),
          f = p(f, m, g, h, v, 7, b[8]), h = p(h, f, m, g, A, 12, b[9]), g = p(g, h, f, m, B, 17, b[10]), m = p(m, g, h, f, C, 22, b[11]), f = p(f, m, g, h, u, 7, b[12]), h = p(h, f, m, g, D, 12, b[13]), g = p(g, h, f, m, E, 17, b[14]), m = p(m, g, h, f, x, 22, b[15]), f = d(f, m, g, h, e, 5, b[16]), h = d(h, f, m, g, t, 9, b[17]), g = d(g, h, f, m, C, 14, b[18]), m = d(m, g, h, f, c, 20, b[19]), f = d(f, m, g, h, r, 5, b[20]), h = d(h, f, m, g, B, 9, b[21]), g = d(g, h, f, m, x, 14, b[22]), m = d(m, g, h, f, z, 20, b[23]), f = d(f, m, g, h, A, 5, b[24]), h = d(h, f, m, g, E, 9, b[25]), g = d(g, h, f, m, k, 14, b[26]), m = d(m, g, h, f, v, 20, b[27]), f = d(f, m, g, h, D, 5, b[28]), h = d(h, f,
            m, g, j, 9, b[29]), g = d(g, h, f, m, w, 14, b[30]), m = d(m, g, h, f, u, 20, b[31]), f = l(f, m, g, h, r, 4, b[32]), h = l(h, f, m, g, v, 11, b[33]), g = l(g, h, f, m, C, 16, b[34]), m = l(m, g, h, f, E, 23, b[35]), f = l(f, m, g, h, e, 4, b[36]), h = l(h, f, m, g, z, 11, b[37]), g = l(g, h, f, m, w, 16, b[38]), m = l(m, g, h, f, B, 23, b[39]), f = l(f, m, g, h, D, 4, b[40]), h = l(h, f, m, g, c, 11, b[41]), g = l(g, h, f, m, k, 16, b[42]), m = l(m, g, h, f, t, 23, b[43]), f = l(f, m, g, h, A, 4, b[44]), h = l(h, f, m, g, u, 11, b[45]), g = l(g, h, f, m, x, 16, b[46]), m = l(m, g, h, f, j, 23, b[47]), f = s(f, m, g, h, c, 6, b[48]), h = s(h, f, m, g, w, 10, b[49]), g = s(g, h, f, m,
              E, 15, b[50]), m = s(m, g, h, f, r, 21, b[51]), f = s(f, m, g, h, u, 6, b[52]), h = s(h, f, m, g, k, 10, b[53]), g = s(g, h, f, m, B, 15, b[54]), m = s(m, g, h, f, e, 21, b[55]), f = s(f, m, g, h, v, 6, b[56]), h = s(h, f, m, g, x, 10, b[57]), g = s(g, h, f, m, t, 15, b[58]), m = s(m, g, h, f, D, 21, b[59]), f = s(f, m, g, h, z, 6, b[60]), h = s(h, f, m, g, C, 10, b[61]), g = s(g, h, f, m, j, 15, b[62]), m = s(m, g, h, f, A, 21, b[63]); a[0] = a[0] + f | 0; a[1] = a[1] + m | 0; a[2] = a[2] + g | 0; a[3] = a[3] + h | 0
      }, _doFinalize: function () {
        var b = this._data, n = b.words, a = 8 * this._nDataBytes, c = 8 * b.sigBytes; n[c >>> 5] |= 128 << 24 - c % 32; var e = u.floor(a /
          4294967296); n[(c + 64 >>> 9 << 4) + 15] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360; n[(c + 64 >>> 9 << 4) + 14] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360; b.sigBytes = 4 * (n.length + 1); this._process(); b = this._hash; n = b.words; for (a = 0; 4 > a; a++)c = n[a], n[a] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360; return b
      }, clone: function () { var b = v.clone.call(this); b._hash = this._hash.clone(); return b }
    }); t.MD5 = v._createHelper(r); t.HmacMD5 = v._createHmacHelper(r)
  })(Math);
  (function () {
    var u = CryptoJS, p = u.lib, d = p.Base, l = p.WordArray, p = u.algo, s = p.EvpKDF = d.extend({ cfg: d.extend({ keySize: 4, hasher: p.MD5, iterations: 1 }), init: function (d) { this.cfg = this.cfg.extend(d) }, compute: function (d, r) { for (var p = this.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length < q;) { n && s.update(n); var n = s.update(d).finalize(r); s.reset(); for (var a = 1; a < p; a++)n = s.finalize(n), s.reset(); b.concat(n) } b.sigBytes = 4 * q; return b } }); u.EvpKDF = function (d, l, p) {
      return s.create(p).compute(d,
        l)
    }
  })();
  CryptoJS.lib.Cipher || function (u) {
    var p = CryptoJS, d = p.lib, l = d.Base, s = d.WordArray, t = d.BufferedBlockAlgorithm, r = p.enc.Base64, w = p.algo.EvpKDF, v = d.Cipher = t.extend({
      cfg: l.extend(), createEncryptor: function (e, a) { return this.create(this._ENC_XFORM_MODE, e, a) }, createDecryptor: function (e, a) { return this.create(this._DEC_XFORM_MODE, e, a) }, init: function (e, a, b) { this.cfg = this.cfg.extend(b); this._xformMode = e; this._key = a; this.reset() }, reset: function () { t.reset.call(this); this._doReset() }, process: function (e) { this._append(e); return this._process() },
      finalize: function (e) { e && this._append(e); return this._doFinalize() }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function (e) { return { encrypt: function (b, k, d) { return ("string" == typeof k ? c : a).encrypt(e, b, k, d) }, decrypt: function (b, k, d) { return ("string" == typeof k ? c : a).decrypt(e, b, k, d) } } }
    }); d.StreamCipher = v.extend({ _doFinalize: function () { return this._process(!0) }, blockSize: 1 }); var b = p.mode = {}, x = function (e, a, b) {
      var c = this._iv; c ? this._iv = u : c = this._prevBlock; for (var d = 0; d < b; d++)e[a + d] ^=
        c[d]
    }, q = (d.BlockCipherMode = l.extend({ createEncryptor: function (e, a) { return this.Encryptor.create(e, a) }, createDecryptor: function (e, a) { return this.Decryptor.create(e, a) }, init: function (e, a) { this._cipher = e; this._iv = a } })).extend(); q.Encryptor = q.extend({ processBlock: function (e, a) { var b = this._cipher, c = b.blockSize; x.call(this, e, a, c); b.encryptBlock(e, a); this._prevBlock = e.slice(a, a + c) } }); q.Decryptor = q.extend({
      processBlock: function (e, a) {
        var b = this._cipher, c = b.blockSize, d = e.slice(a, a + c); b.decryptBlock(e, a); x.call(this,
          e, a, c); this._prevBlock = d
      }
    }); b = b.CBC = q; q = (p.pad = {}).Pkcs7 = { pad: function (a, b) { for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, l = [], n = 0; n < c; n += 4)l.push(d); c = s.create(l, c); a.concat(c) }, unpad: function (a) { a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255 } }; d.BlockCipher = v.extend({
      cfg: v.cfg.extend({ mode: b, padding: q }), reset: function () {
        v.reset.call(this); var a = this.cfg, b = a.iv, a = a.mode; if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor; else c = a.createDecryptor, this._minBufferSize = 1; this._mode = c.call(a,
          this, b && b.words)
      }, _doProcessBlock: function (a, b) { this._mode.processBlock(a, b) }, _doFinalize: function () { var a = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) { a.pad(this._data, this.blockSize); var b = this._process(!0) } else b = this._process(!0), a.unpad(b); return b }, blockSize: 4
    }); var n = d.CipherParams = l.extend({ init: function (a) { this.mixIn(a) }, toString: function (a) { return (a || this.formatter).stringify(this) } }), b = (p.format = {}).OpenSSL = {
      stringify: function (a) {
        var b = a.ciphertext; a = a.salt; return (a ? s.create([1398893684,
          1701076831]).concat(a).concat(b) : b).toString(r)
      }, parse: function (a) { a = r.parse(a); var b = a.words; if (1398893684 == b[0] && 1701076831 == b[1]) { var c = s.create(b.slice(2, 4)); b.splice(0, 4); a.sigBytes -= 16 } return n.create({ ciphertext: a, salt: c }) }
    }, a = d.SerializableCipher = l.extend({
      cfg: l.extend({ format: b }), encrypt: function (a, b, c, d) { d = this.cfg.extend(d); var l = a.createEncryptor(c, d); b = l.finalize(b); l = l.cfg; return n.create({ ciphertext: b, key: c, iv: l.iv, algorithm: a, mode: l.mode, padding: l.padding, blockSize: a.blockSize, formatter: d.format }) },
      decrypt: function (a, b, c, d) { d = this.cfg.extend(d); b = this._parse(b, d.format); return a.createDecryptor(c, d).finalize(b.ciphertext) }, _parse: function (a, b) { return "string" == typeof a ? b.parse(a, this) : a }
    }), p = (p.kdf = {}).OpenSSL = { execute: function (a, b, c, d) { d || (d = s.random(8)); a = w.create({ keySize: b + c }).compute(a, d); c = s.create(a.words.slice(b), 4 * c); a.sigBytes = 4 * b; return n.create({ key: a, iv: c, salt: d }) } }, c = d.PasswordBasedCipher = a.extend({
      cfg: a.cfg.extend({ kdf: p }), encrypt: function (b, c, d, l) {
        l = this.cfg.extend(l); d = l.kdf.execute(d,
          b.keySize, b.ivSize); l.iv = d.iv; b = a.encrypt.call(this, b, c, d.key, l); b.mixIn(d); return b
      }, decrypt: function (b, c, d, l) { l = this.cfg.extend(l); c = this._parse(c, l.format); d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt); l.iv = d.iv; return a.decrypt.call(this, b, c, d.key, l) }
    })
  }();
  (function () {
    for (var u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = 0; 256 > c; c++)a[c] = 128 > c ? c << 1 : c << 1 ^ 283; for (var e = 0, j = 0, c = 0; 256 > c; c++) { var k = j ^ j << 1 ^ j << 2 ^ j << 3 ^ j << 4, k = k >>> 8 ^ k & 255 ^ 99; l[e] = k; s[k] = e; var z = a[e], F = a[z], G = a[F], y = 257 * a[k] ^ 16843008 * k; t[e] = y << 24 | y >>> 8; r[e] = y << 16 | y >>> 16; w[e] = y << 8 | y >>> 24; v[e] = y; y = 16843009 * G ^ 65537 * F ^ 257 * z ^ 16843008 * e; b[k] = y << 24 | y >>> 8; x[k] = y << 16 | y >>> 16; q[k] = y << 8 | y >>> 24; n[k] = y; e ? (e = z ^ a[a[a[G ^ z]]], j ^= a[a[j]]) : e = j = 1 } var H = [0, 1, 2, 4, 8,
      16, 32, 64, 128, 27, 54], d = d.AES = p.extend({
        _doReset: function () {
          for (var a = this._key, c = a.words, d = a.sigBytes / 4, a = 4 * ((this._nRounds = d + 6) + 1), e = this._keySchedule = [], j = 0; j < a; j++)if (j < d) e[j] = c[j]; else { var k = e[j - 1]; j % d ? 6 < d && 4 == j % d && (k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255]) : (k = k << 8 | k >>> 24, k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255], k ^= H[j / d | 0] << 24); e[j] = e[j - d] ^ k } c = this._invKeySchedule = []; for (d = 0; d < a; d++)j = a - d, k = d % 4 ? e[j] : e[j - 4], c[d] = 4 > d || 4 >= j ? k : b[l[k >>> 24]] ^ x[l[k >>> 16 & 255]] ^ q[l[k >>>
            8 & 255]] ^ n[l[k & 255]]
        }, encryptBlock: function (a, b) { this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l) }, decryptBlock: function (a, c) { var d = a[c + 1]; a[c + 1] = a[c + 3]; a[c + 3] = d; this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s); d = a[c + 1]; a[c + 1] = a[c + 3]; a[c + 3] = d }, _doCryptBlock: function (a, b, c, d, e, j, l, f) {
          for (var m = this._nRounds, g = a[b] ^ c[0], h = a[b + 1] ^ c[1], k = a[b + 2] ^ c[2], n = a[b + 3] ^ c[3], p = 4, r = 1; r < m; r++)var q = d[g >>> 24] ^ e[h >>> 16 & 255] ^ j[k >>> 8 & 255] ^ l[n & 255] ^ c[p++], s = d[h >>> 24] ^ e[k >>> 16 & 255] ^ j[n >>> 8 & 255] ^ l[g & 255] ^ c[p++], t =
            d[k >>> 24] ^ e[n >>> 16 & 255] ^ j[g >>> 8 & 255] ^ l[h & 255] ^ c[p++], n = d[n >>> 24] ^ e[g >>> 16 & 255] ^ j[h >>> 8 & 255] ^ l[k & 255] ^ c[p++], g = q, h = s, k = t; q = (f[g >>> 24] << 24 | f[h >>> 16 & 255] << 16 | f[k >>> 8 & 255] << 8 | f[n & 255]) ^ c[p++]; s = (f[h >>> 24] << 24 | f[k >>> 16 & 255] << 16 | f[n >>> 8 & 255] << 8 | f[g & 255]) ^ c[p++]; t = (f[k >>> 24] << 24 | f[n >>> 16 & 255] << 16 | f[g >>> 8 & 255] << 8 | f[h & 255]) ^ c[p++]; n = (f[n >>> 24] << 24 | f[g >>> 16 & 255] << 16 | f[h >>> 8 & 255] << 8 | f[k & 255]) ^ c[p++]; a[b] = q; a[b + 1] = s; a[b + 2] = t; a[b + 3] = n
        }, keySize: 8
      }); u.AES = p._createHelper(d)
  })();

$("document").ready(function () {
  if ($("#survey--page").length) {
    function getOS() {
      var userAgent = window.navigator.userAgent,
        platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
        macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
        windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
        iosPlatforms = ["iPhone", "iPad", "iPod"],
        os = null;
    
      if (macosPlatforms.indexOf(platform) !== -1) {
        os = "Mac OS";
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = "iOS";
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = "Windows";
      } else if (/Android/.test(userAgent)) {
        os = "Android";
      } else if (/Linux/.test(platform)) {
        os = "Linux";
      }
    
      return os;
    }
    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }
    function getPageDetails(isErrorPage = false) {
      let pagePath = window.location.pathname;
      let slug = pagePath.split("/");
      let actualSlug = slug[1].replace(".html", "");
      let primary_category = window.location.origin;
      let fullSplit = primary_category.split("//");
      let pcSplit = fullSplit[1].split(".");
      let title = $("title").text();
      let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
      let sub1 = "";
      let sub2 = "";
      let sub3 = "";
      let sub4 = "";
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
        sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
          sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
          sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
          sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
      } else {
        if (slug[2]) sub1 = slug[2].replace(".html", "");
        if (slug[3]) sub2 = slug[3].replace(".html", "");
        if (slug[4]) sub3 = slug[4].replace(".html", "");
        if (slug[5]) sub4 = slug[5].replace(".html", "");
      }
      return {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: isErrorPage,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      };
    }
    async function hashedValue(message) {
      const hashBuffer = await crypto.subtle.digest(
        "SHA-256",
        new TextEncoder().encode(message)
      );
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
      return hashValue;
    }
    function getEncryptString(ekey) {
      var key = '63C09AE37D4254AD7D13A7HGF$F88411';
      var iv = '1234567890123456';
      var data = ekey;
      var authpass = CryptoJS.AES.encrypt(data, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
      var token = base64(authpass);
      return token
    }
    function base64(data) {
        var wordArray = CryptoJS.enc.Utf8.parse(data);
        var final = CryptoJS.enc.Base64.stringify(wordArray);
        return final;
    }
    function customValidationSurvey($form) {
      jQuery.validator.addMethod("indianNumber", function (value) {
        return /^[6789]\d{9}$/i.test(value);
      });

      $form.validate({
        ignore: [],
        rules: {
          mobileno: {
            required: true,
            indianNumber: true,
          },
        },
        messages: {
          mobileno: {
            required: $('[name="mobileno"]').data("validation-msg-req"),
            indianNumber: $('[name="mobileno"]').data("validation-msg-val"),
          },
        },
      });
    }

    customValidationSurvey($(".survey--form"));

    // OTP
    function isValidOtp(mobile, otp) {
      const reqId = sessionStorage.getItem("tempID");
      return (
        otp.toString() ===
        (Math.abs(hashCode(mobile + reqId)) % 1000000).toString().padStart(6, "0")
      );
    }

    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }

    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }

    function hashCode(s) {
      var h = 0,
        l = s.length,
        i = 0;
      if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
      return h;
    }

    async function requestOtp(contactNumber, pageType, vehicleName, token) {
      sessionStorage.setItem("tempID", generateId());
      var otpdata = {
        phoneNum: contactNumber,
        pageType: "Vida Survey Page",
        vehicleName: vehicleName,
        reqID: sessionStorage.getItem("tempID"),
        token: token,
      };

      const phCodemobNumber = "+91" +  contactNumber;
      let hashedMobile = await hashedValue(phCodemobNumber);
      localStorage.setItem("analyticsHashedMobile", hashedMobile);

      const phCodemobNumberMeta = "91" +  contactNumber;
      let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
      localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

      if (window.digitalData && window._satellite) {
        window.digitalData.push({
          formDetails: {
            formname: "Survey Page Form",
            formtype: "static",
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
        _satellite.track("OTP Requested");
      }

      const defaultservlet = $("#survey--page").data("defaultservletotp");
      const defaultservletPath = defaultservlet.replace("jcr:content", "_jcr_content");

      $.ajax({
        url: defaultservletPath + ".sendotp.html",
        type: "POST",
        data: otpdata,
        success: function (resp) {
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Success",
              formDetails: {
                formname: "Survey Page Form",
                formtype: "static",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
        error: function (err) {
          console.log(err);
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP fails",
              formDetails: {
                formname: "Survey Page Form",
                formtype: "static",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
      });
    }

    function onSendOTP(token) {
      let mobNumber = $(".survey--form #mob-no").val();
      const pageType = "Vida Survey Page";
      const vehicleName = "";
      if (mobNumber) {
        requestOtp(mobNumber, pageType, vehicleName, token);
      }
    }

    let numberSentTo;

    $("#survey--send").click(function (e) {
      e.preventDefault();
      numberSentTo = $(".survey--form #mob-no").val();
      if ($(".survey--form").valid()) {
        $("#otp--form").removeClass("d-none");
        $("#otp").attr("disabled", false);

        if (!$(".otp-field").val("")) {
          $(".otp-field").val("");
          otp_checked = false;
        }
        let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
        grecaptcha.ready(function () {
          grecaptcha.execute(sitKey).then(function (token) {
            onSendOTP(token);
          });
        });
        $(this).text("Resend Code");
      } else {
        $("#otp--form").addClass("d-none");
        $("#mob-no").removeClass("clickedsub");
        $("#otp").val("");
        $(this).text("Send Code");
      }
    });

    $("#otp").on("input", async function () {
      var otpValue = $(this).val();
      let mobNumber = $("#mob-no").val();

      if (otpValue.length === 6) {
        // Otp Match
        if (isValidOtp(mobNumber, otpValue)) {
          $(this).parent().removeClass("otp--invalid");
          $(this).parent().addClass("otp--valid");
          $("#survey--send,.invalid__otp").addClass("d-none");
          $("#survey--submit").removeClass("d-none");
          
          const phCodemobNumber = "+91" + mobNumber;
          let hashedMobile = await hashedValue(phCodemobNumber);
          localStorage.setItem("analyticsHashedMobile", hashedMobile);

          const phCodemobNumberMeta = "91" + mobNumber;
          let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
          localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Verified",
              formDetails: {
                formname: "Survey Page Form",
                formtype: "static",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                encryptedMobile: getEncryptString(mobNumber),
                encryptedEmail: "NA",
                encryptedName: "NA",
              },
              page: getPageDetails(),
            });
          }
        } else {
          $(this).parent().removeClass("otp--valid");
          $(this).parent().addClass("otp--invalid");
          $("#survey--send,.invalid__otp").removeClass("d-none");
          $("#survey--submit").addClass("d-none");
        }
      } else {
        $(this).parent().removeClass("otp--valid");
        $(this).parent().addClass("otp--invalid");
        $("#survey--send").removeClass("d-none");
        $("#survey--submit").addClass("d-none");
        $(".invalid__otp").removeClass("d-none");
      }
    });

    $(".survey--form #mob-no").on("input", function () {
      $(".customer-alert").addClass("d-none");
      if ($(this).val().length == 10) {
        if (numberSentTo) {
          if ($(this).val() === numberSentTo) {
            $("#survey--send").text("Resend Code");
          } else {
            $("#survey--send").text("Send Code");
          }
        }
      }
    });

    let surveyURL;

    function loadTargetPage(url, selector) {
      $("section#form--wrap #survey--form").attr("src", url);
      selector.addClass("d-none");
      $("section#form--wrap").removeClass("d-none");
      $(".survey-page.aem-GridColumn").css("height", "100vh");
    }

    // Decryption
    let key = "63C09AE37D4254AD7D13A7HGF$F88411";
    let iv = "1234567890123456";

    function getQueryParam(name) {
      var url = window.location.href;
      var paramIndex = url.indexOf("?");
      if (paramIndex === -1) {
        return null; // No query parameter in the URL
      }
      var queryString = url.substring(paramIndex + 1);
      var params = queryString.split("&");
      for (var i = 0; i < params.length; i++) {
        var param = params[i].split("=");
        if (param[0] === name) {
          return param[1] || "";
        }
      }
      return null;
    }

    let paramName = "s";
    let linkName = "link";
    let custID = "cust_id";
    let channel = "channel";
    const dtKey = "dt";

    let resLink = getQueryParam(linkName);
    let res = getQueryParam(paramName);
    let custValue = getQueryParam(custID);
    if(!custValue){
      custValue = getQueryParam("custid");
    }
    let channelValue = getQueryParam(channel);
    let dtValue = getQueryParam(dtKey);
    let isDtValid = true;

    function checkDate(date) {
      let today = new Date();
      today.setHours(0,0,0,0);
      let dat = new Date(date);
      return dat.getTime() < today.getTime();
    }

    function decryptData(encryptedData, key, iv) {
      var base64DecodedData = atob(encryptedData);
      var decryptedBytes = CryptoJS.AES.decrypt(
        base64DecodedData,
        CryptoJS.enc.Utf8.parse(key),
        {
          mode: CryptoJS.mode.CBC,
          iv: CryptoJS.enc.Utf8.parse(iv),
        }
      );
      var decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);
      return decryptedText;
    }

    const decryptedDataSurvey = decryptData(res, key, iv);
    const decryptedLinkSurvey = decryptData(resLink, key, iv);
    const decryptedCustomer = decryptData(custValue, key, iv);
    const decryptedDate = decryptData(dtValue, key, iv);

    if (decryptedDate != null) {
      let decryptedDateValue = moment(decryptedDate, "DD-MM-YYYY").format("YYYY/MM/DD");
      if(checkDate(decryptedDateValue)) {
        isDtValid = false;
        $("#survey--page-third").removeClass("d-none");
        $("#survey--page").addClass("d-none");
        $("#survey--page-third .welcome--text,#survey--page-third .subtext,#cus-details,#submit-cust").addClass("d-none");
        $("#survey--page-third .subtext.error--dt-alert").removeClass("d-none");
      }
    }

    if (paramName != null && custValue != null && isDtValid) {
      let incomingLink;
      let surveyServletURL = $("#survey--page-third").attr("data-defaultservlet");
      let surveyPath = surveyServletURL.replace("jcr:content", "_jcr_content");

      $("#survey--page-third").removeClass("d-none");
      $("#survey--page").addClass("d-none");

      // ON LOAD AJAX
      const dataObject = new FormData();
      dataObject.append("survey_id", decryptedDataSurvey);
      dataObject.append("customer_id", decryptedCustomer);

      $.ajax({
        url: surveyPath,
        type: "POST",
        data: dataObject,
        processData: false,
        mimeType: "multipart/form-data",
        contentType: false,
        async: false,
        success: function (response) {
          digitalDataFormSuccess(decryptedDataSurvey);
          const responseData = JSON.parse(response);
          if (responseData.message && responseData.message === "Customer Verified Successfully") {
            let surveyLink = responseData.data.survey_link;
            incomingLink = surveyLink;
            responseData.data.info.forEach(function (info) {
              $('#survey--page-third .welcome--text').text(responseData.data.survey_ui_mainTitle);
              $('#survey--page-third .subtext').text(responseData.data.survey_ui_title);
              const detailRow = $("<div>").addClass("detail-row");
              const detailLabel = $("<div>").addClass("label").text(info.customer_Label_info);
              const detailData = $("<div>").addClass("data").text(info.customer_Label_value);
              detailRow.append(detailLabel, detailData);
              $(".details-wrap").append(detailRow);
            });
          } else {
            $(
              "#survey--page-third .welcome--text,#survey--page-third .subtext,#cus-details,#submit-cust"
            ).addClass("d-none");
            $(".subtext.error-alert").removeClass("d-none");
          }
        },
        error: function (error) {
          console.log(error);
          $(
            "#survey--page-third .welcome--text,#survey--page-third .subtext,#cus-details,#submit-cust"
          ).addClass("d-none");
          $(".subtext.error-alert").removeClass("d-none");
        },
      });

      const customerClick = () => {
        let altIncomingLink;
        if (channelValue) {
          altIncomingLink =
            incomingLink + "?id=" + decryptedCustomer + "&channel=" + channelValue;
        } else {
          altIncomingLink = incomingLink + "?id=" + decryptedCustomer;
        }
        if (window.digitalData) {
          window.digitalData.push({
            event: "linkClicked",
            web: {
              webInteraction: {
                name: "Start Survey",
                URL: altIncomingLink || "NA",
                position: "Survey Page Form",
              },
            },
            surveyData:{
              surveyID: decryptedDataSurvey
            },
            productDetails: {
              productName: "NA",
              variant: "NA", // selected variant
              colour: "NA", // selected color
              dealer: "NA", // selected dealer name
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
        loadTargetPage(altIncomingLink, $("#survey--page-third"));
      };

      $("#submit-cust").click(customerClick);
    }

    if (decryptedLinkSurvey && isDtValid) {
      surveyURL = decryptedLinkSurvey;
      loadTargetPage(surveyURL, $("#survey--page"));
    }

    $("#survey--submit").click(function (e) {
      e.preventDefault();
      const dataObject = new FormData();

      dataObject.append("surveyId", decryptedDataSurvey);
      dataObject.append("mobileNo", $(".survey--form #mob-no").val());

      let surveyServletURL = $("#survey--page").attr("data-defaultservlet");
      let surveyPath = surveyServletURL.replace("jcr:content", "_jcr_content");

      $.ajax({
        url: surveyPath,
        type: "POST",
        data: dataObject,
        processData: false,
        mimeType: "multipart/form-data",
        contentType: false,
        success: function (response) {
          const surveyResponse = JSON.parse(response);
          $(".error-alert").addClass("d-none");
          if (surveyResponse && surveyResponse.data && surveyResponse.data.serveryLink) {
            const surveyLink =
              surveyResponse.data.serveryLink + "?id=" + surveyResponse.data.customerId;
            loadTargetPage(surveyLink, $("#survey--page"));
            digitalDataFormSuccess();
          } else if (
            surveyResponse.message.includes("Customer Not Found") &&
            surveyResponse.success == false
          ) {
            $(".error-alert").addClass("d-none");
            $(".customer-alert").removeClass("d-none");
          } else {
            $(".error-alert").removeClass("d-none");
          }
        },
        error: function (error) {
          console.log(error);
          $(".error-alert").removeClass("d-none");
        },
      });
    });

    function digitalDataFormSuccess(survey_Id = "", leadId = "") {
      if (window.digitalData) {
        if (survey_Id) {
          digitalData.push({
            event: "survey page view",
            surveyData:{
              surveyID: survey_Id
            },
            page: getPageDetails(),
          });
        } else {
          window.digitalData.push({
            event: "Form Success",
            formDetails: {
              formname: "Survey Page Form",
              formtype: "static",
              state: "",
              city: "",
              leadId: leadId || "",
            },
            productDetails:{
              productName : "NA",
              variant: "NA", // selected variant
              colour: "NA", // selected color
              dealer: "NA", // selected dealer name
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      }
    }
  }
});


$(document).ready(function () {
  const panels = document.querySelectorAll(".et-panel");
  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }
  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }

  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
  
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }
  if ($("#rideseventlp").length) {
    $("#scooterBanner .btn.btn-white").click(function (e) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: "Know More",
              URL: $(this).attr("href"),
              position: "RNE Banner",
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
      }
    });

    $("#scooterBanner .btn.btn-red-gradient").click(function (e) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: "Register",
              URL: $(this).attr("href"),
              position: "RNE Banner",
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
      }
    });

    $(".et-container .et-content-footer .btn").click(function (e) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: "View Events",
              URL: $(this).attr("href"),
              position: $(this).parent().parent().parent().find(".et-heading").text(),
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
      }
    });
  }

  panels.forEach((panel) => {
    panel.addEventListener("mouseover", () => {
      removeActiveClasses();
      panel.classList.add("active");
    });
  });

  function removeActiveClasses() {
    panels.forEach((panel) => {
      panel.classList.remove("active");
    });
  }

  if ($(".et-container").length > 0) {
    let accordFilterListing = [];
    let aemNodesEvents;
    const defaultservlet = $("#default-type-servlet").data("defaultservlet");
    $.ajax({
      type: "GET",
      url: defaultservlet,
      async: false,
      success: function (response) {
        if (typeof response === "string") {
          try {
            response = JSON.parse(response);
          } catch (e) {
            console.log("Error parsing response to JSON: ", e);
            return;
          }
        }
        aemNodesEvents = response;
      },
      error: function (err) {
        reject(err); // Reject the promise and go to catch()
      },
    });

    if (!jQuery.isEmptyObject(aemNodesEvents)) {
      let initialLoadedEvents = [];
      Object.keys(aemNodesEvents.categories).forEach(function (nodesVal, nodesKey) {
        aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
          Object.keys(filterVal).forEach(function (locationVal, locationKey) {
            filterVal[locationVal].forEach(function (eventVal, eventKey) {
              initialLoadedEvents.push(eventVal);
            });
          });
        });
      });
      accordFilterListing = getAccordFilteredArray([], initialLoadedEvents, true);
      setDefault();
      let advEventCount = 0;
      let tarEventCount = 0;
      let compEventCount = 0;
      let cultEventCount = 0;
      accordFilterListing[0].accordLists.forEach(function (listname) {
        if (listname.listName == "Adventure" && listname.listCount > 0) {
          advEventCount = advEventCount + listname.listCount;
          $("#et-adventure").html(`(${advEventCount} Events)`);
          $("#et-adventure-btn").removeClass("disabled");
        }

        if (listname.listName == "Tarmac" && listname.listCount > 0) {
          tarEventCount = tarEventCount + listname.listCount;
          $("#et-racing").html(`(${tarEventCount} Events)`);
          $("#et-racing-btn").removeClass("disabled");
        }

        if (listname.listName == "Competition" && listname.listCount > 0) {
          compEventCount = compEventCount + listname.listCount;
          $("#et-competition").html(`(${compEventCount} Events)`);
          $("#et-competition-btn").removeClass("disabled");
        }

        if (
          (listname.listName == "Racing Culture" || listname.listName == "Off Road") &&
          listname.listCount > 0
        ) {
          cultEventCount = cultEventCount + listname.listCount;
          $("#et-tarmac").html(`(${cultEventCount} Events)`);
          $("#et-tarmac-btn").removeClass("disabled");
        }
      });
    }

    function getAccordFilteredArray(mainArray, tempEventsLists, initialCall) {
      mainArray = ["CATEGORY"];
      const accordianListingArray = [];
      let accordArray = [];
      mainArray.forEach(function (accordTitle, accordKey) {
        switch (accordTitle) {
          case "CATEGORY":
            let initCategoryObj = {
              accordName: "CATEGORY",
              accordRef: "category",
              accordLists: [],
            };
            const categoryLists = tempEventsLists.map(function (item, index) {
              return item["Timeline"] == "Upcoming" ? item["Category"] : null;
            });
            const categoryOccur = categoryLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(categoryOccur).forEach(function (occuranceVal, occuranceKey) {
              const multipleValues = occuranceVal.split("/");
              multipleValues.forEach(function (splitVal, splitKey) {
                const identOccuranceObj = {
                  listName: splitVal,
                  listCount: categoryOccur[occuranceVal],
                };
                accordArray.push(splitVal);
                initCategoryObj.accordLists.push(identOccuranceObj);
              });
            });
            accordianListingArray.push(initCategoryObj);
            break;
          default:
            break;
        }
      });
      return accordianListingArray;
    }
  }
});

function setDefault() {
  $("#et-adventure-btn").addClass("disabled");
  $("#et-adventure").html(`(Coming soon)`);
  $("#et-tarmac-btn").addClass("disabled");
  $("#et-tarmac").html(`(Coming soon)`);
  $("#et-competition-btn").addClass("disabled");
  $("#et-competition").html(`(Coming soon)`);
  $("#et-racing-btn").addClass("disabled");
  $("#et-racing").html(`(Coming soon)`);
}

$(document).ready(function () {
  function updateBackgroundImage() {
    $(".htrts-panel").each(function () {
      var container = $(this);
      var desktopImage = container.data("desktop-image");
      var mobileImage = container.data("mobile-image");

      if (window.matchMedia("(max-width: 767px)").matches) {
        container.css("background", "url(" + mobileImage + ") no-repeat");
      } else {
        container.css("background", "url(" + desktopImage + ") no-repeat");
      }
    });
  }
  // Initial check
  updateBackgroundImage();

  // Update functions on window resize
  $(window).resize(function () {
    updateBackgroundImage();
    viewhandlePanelClickMobile();
    viewhandlePanelClickWeb();
  });

  if ($(window).width() < 768) {
    viewhandlePanelClickMobile();
  } else {
    viewhandlePanelClickWeb();
  }

  function viewhandlePanelClickMobile() {
    const panels = document.querySelectorAll(".et-panel.htrts-panel");
    panels.forEach((panel) => {
      panel.addEventListener("click", () => {
        removeActiveClasses();
        panel.classList.add("active");
        const popupButton = panel.querySelector(".htrtsPopupButton");
        if (popupButton) {
          popupButton.style.display = "inline-block";
        }
      });
    });
  }

  function viewhandlePanelClickWeb() {
    const panels = document.querySelectorAll(".et-panel.htrts-panel");
    panels.forEach((panel) => {
      const popupButton = panel.querySelector(".htrtsPopupButton");
      popupButton.style.display = "inline-block";
    });
  }

  function removeActiveClasses() {
    const panels = document.querySelectorAll(".et-panel.htrts-panel");
    panels.forEach((panel) => {
      panel.classList.remove("active");
      const popupButton = panel.querySelector(".htrtsPopupButton");
      popupButton.style.display = "none";
    });
  }

  if ($(".htrts-container").length > 0) {
    let tempButton;
    let tempButtonMob;
    let childButtonList;
    let childButtonListMob;

    $(".htrts-container").each((index, tabElement) => {
      $(tabElement)
        .find(".et-panel .htrtsPopupButton")
        .on("click", function () {
          const card = $(".et-panel.active .initiative-card");
          const title = $(card).data("title");
          const description = $(card).data("description");
          // Desktop
          const slickarrowPrev = $(tabElement).find(
            ".initiative-indicator-wrapper .previous"
          );
          const slickarrowNext = $(tabElement).find(
            ".initiative-indicator-wrapper .next"
          );
          const slickPrevPath = $(tabElement).find(
            ".initiative-indicator-wrapper .previous svg"
          );
          const slickNextPath = $(tabElement).find(
            ".initiative-indicator-wrapper .next svg"
          );

          let initiativePointer = 0;
          $(slickarrowNext).prop("disabled", false);
          $(slickNextPath).removeClass("disabled");
          $(slickarrowPrev).prop("disabled", true);
          $(slickPrevPath).addClass("disabled");
          // Mobile
          const slickarrowPrevMob = $(tabElement).find(
            ".initiative-indicator-wrapper-mob .previous"
          );
          const slickarrowNextMob = $(tabElement).find(
            ".initiative-indicator-wrapper-mob .next"
          );
          const slickPrevPathMob = $(tabElement).find(
            ".initiative-indicator-wrapper-mob .previous svg"
          );
          const slickNextPathMob = $(tabElement).find(
            ".initiative-indicator-wrapper-mob .next svg"
          );
          let initiativePointerMob = 0;
          $(slickarrowNextMob).prop("disabled", false);
          $(slickNextPathMob).removeClass("disabled");
          $(slickarrowPrevMob).prop("disabled", true);
          $(slickPrevPathMob).addClass("disabled");
          $(tabElement).find(".popup-title").text(title);
          $(tabElement).find(".popup-description").html(description);
          $(tabElement).find(".popup").css("display", "flex");
          $(".et-panel.active")
            .children()
            .each(function (index, child) {
              if ($(child).hasClass("htrts-image-wrapper")) {
                var grandchildren = $(child).find("> div");
                var elementsArray = grandchildren.toArray();
                let temp;
                $(tabElement)
                  .find(".popup-wrapper .popup-img-container")
                  .empty();
                $(tabElement)
                  .find(".popup-wrapper-mob .popup-img-container-mob")
                  .empty();

                elementsArray.forEach((e, index) => {
                  if (index == 0) {
                    temp =
                      "<div class='initiative-tabpopup-image popup-active'>" +
                      $(e).html() +
                      "</div>";
                  } else {
                    temp =
                      "<div class='initiative-tabpopup-image'>" +
                      $(e).html() +
                      "</div>";
                  }
                  $(tabElement)
                    .find(".popup-wrapper .popup-img-container")
                    .append(temp);
                });
                elementsArray.forEach((e, index) => {
                  if (index == 0) {
                    temp =
                      "<div class='initiative-tabpopup-image-mob popup-active-mob'>" +
                      $(e).html() +
                      "</div>";
                  } else {
                    temp =
                      "<div class='initiative-tabpopup-image-mob'>" +
                      $(e).html() +
                      "</div>";
                  }
                  $(tabElement)
                    .find(".popup-wrapper-mob .popup-img-container-mob")
                    .append(temp);
                });
                const initiativeDots = $(tabElement).find(
                  ".initiative-carousel-indicators > .slick-dots-initiative"
                );
                const initiativeDotsMob = $(tabElement).find(
                  ".initiative-carousel-indicators-mob > .slick-dots-initiative-mob"
                );
                initiativeDots.empty();
                initiativeDotsMob.empty();

                $(tabElement)
                  .find(".popup-wrapper .play-button-container")
                  .each(function (i, button) {
                    $(button).on("click", (e) => {
                      e.preventDefault();
                    });
                  });
                $(tabElement)
                  .find(".popup-wrapper-mob .play-button-container")
                  .each(function (i, button) {
                    $(button).on("click", (e) => {
                      e.preventDefault();
                    });
                  });

                if (elementsArray.length > 1) {
                  $(slickarrowNext).css("display", "block");
                  $(slickarrowPrev).css("display", "block");
                  $(slickarrowNextMob).css("display", "block");
                  $(slickarrowPrevMob).css("display", "block");

                  for (let i = 0; i < elementsArray.length; i++) {
                    let tempDots;
                    if (i == 0) {
                      tempDots =
                        "<li role='presentation' class='slick-active' style='display: block;'><button type='button' role='tab'></button></li>";
                    } else {
                      tempDots =
                        "<li role='presentation' style='display: block;'><button type='button' role='tab'></button></li>";
                    }
                    initiativeDots.append(tempDots);
                  }
                  for (let i = 0; i < elementsArray.length; i++) {
                    let tempDots;
                    if (i == 0) {
                      tempDots =
                        "<li role='presentation' class='slick-active-mob' style='display: block;'><button type='button' role='tab'></button></li>";
                    } else {
                      tempDots =
                        "<li role='presentation' style='display: block;'><button type='button' role='tab'></button></li>";
                    }
                    initiativeDotsMob.append(tempDots);
                  }
                  if (initiativeDots) {
                    initiativeDots.children().each((i, indicators) => {
                      $(indicators).click(function (e) {
                        e.preventDefault();
                        updateInitiativeTabs(i);
                      });
                    });
                    initiativeDotsMob.children().each((i, indicators) => {
                      $(indicators).click(function (e) {
                        e.preventDefault();
                        updateInitiativeTabsMob(i);
                      });
                    });
                  }
                  if ($(slickarrowPrev)) {
                    $(slickarrowPrev).click(function (e) {
                      e.preventDefault();
                      initiativePointer--;
                      updateInitiativeTabs(initiativePointer);
                    });
                    $(slickarrowPrev).prop("disabled", true);
                  }
                  if ($(slickarrowNext)) {
                    $(slickarrowNext).click(function (e) {
                      e.preventDefault();
                      initiativePointer++;
                      updateInitiativeTabs(initiativePointer);
                    });
                  }
                  if ($(slickarrowPrevMob)) {
                    $(slickarrowPrevMob).click(function (e) {
                      e.preventDefault();
                      initiativePointerMob--;
                      updateInitiativeTabsMob(initiativePointerMob);
                    });
                    $(slickarrowPrevMob).prop("disabled", true);
                  }
                  if ($(slickarrowNextMob)) {
                    $(slickarrowNextMob).click(function (e) {
                      e.preventDefault();
                      initiativePointerMob++;
                      updateInitiativeTabsMob(initiativePointerMob);
                    });
                  }
                } else {
                  $(slickarrowNext).css("display", "none");
                  $(slickarrowPrev).css("display", "none");
                  $(slickarrowNextMob).css("display", "none");
                  $(slickarrowPrevMob).css("display", "none");
                }
              }
            });
          //   0th index buttons toggle
          tempButton = $(tabElement)
            .find(
              ".initiative-tabpopup-image.popup-active .play-button-container"
            )
            .toArray();
          if (tempButton.length > 0) {
            let childButton = $(tempButton).find("button");
            if (childButton) {
              $(childButton[0]).on("click", () => {
                // $(childButton[1]).show()
                $(childButton[1]).css("display", "grid");
                $(childButton[0]).css("display", "none");
              });
              $(childButton[1]).on("click", () => {
                // $(childButton[0]).show()
                $(childButton[0]).css("display", "grid");
                $(childButton[1]).css("display", "none");
              });
            }
          }

          //   0th index Mob buttons toggle
          tempButtonMob = $(tabElement)
            .find(
              ".initiative-tabpopup-image-mob.popup-active-mob .play-button-container"
            )
            .toArray();
          if (tempButtonMob.length > 0) {
            let childButton = $(tempButtonMob).find("button");
            if (childButton) {
              $(childButton[0]).on("click", () => {
                // $(childButton[1]).show()
                $(childButton[1]).css("display", "grid");
                $(childButton[0]).css("display", "none");
              });
              $(childButton[1]).on("click", () => {
                // $(childButton[0]).show()
                $(childButton[0]).css("display", "grid");
                $(childButton[1]).css("display", "none");
              });
            }
          }

          const updateInitiativeTabs = (index) => {
            if (childButtonList) {
              $(childButtonList[0]).css("display", "grid");
              $(childButtonList[1]).css("display", "none");
            }

            const popupImgList = $(tabElement)
              .find(".initiative-tabpopup-image")
              .toArray();
            const indicatorListActive = $(tabElement)
              .find(".slick-dots-initiative > li")
              .toArray();
            let imgLen = popupImgList.length;
            if (index < imgLen && index >= 0) {
              popupImgList.forEach((popupElement, i) => {
                if (index == i) {
                  $(popupElement).addClass("popup-active");
                  $(indicatorListActive[index]).addClass("slick-active");
                } else {
                  $(popupElement).removeClass("popup-active");
                  $(indicatorListActive[i]).removeClass("slick-active");
                }
              });
            }
            let buttonContainer = $(tabElement)
              .find(
                ".initiative-tabpopup-image.popup-active .play-button-container"
              )
              .toArray();
            if (buttonContainer.length > 0) {
              buttonContainer = buttonContainer[0];
              childButtonList = $(buttonContainer).find("button");
              if (childButtonList) {
                $(childButtonList[0]).on("click", () => {
                  // $(childButtonList[1]).show()
                  $(childButtonList[1]).css("display", "grid");
                  $(childButtonList[0]).css("display", "none");
                });
                $(childButtonList[1]).on("click", () => {
                  // $(childButtonList[0]).show()
                  $(childButtonList[0]).css("display", "grid");
                  $(childButtonList[1]).css("display", "none");
                });
              }
            } else {
              childButtonList = null;
            }
            if (index <= 0) {
              $(slickarrowPrev).prop("disabled", true);
              $(slickPrevPath).addClass("disabled");
            } else {
              $(slickarrowPrev).prop("disabled", false);
              $(slickPrevPath).removeClass("disabled");
            }
            if (index >= imgLen - 1) {
              $(slickarrowNext).prop("disabled", true);
              $(slickNextPath).addClass("disabled");
            } else {
              $(slickarrowNext).prop("disabled", false);
              $(slickNextPath).removeClass("disabled");
            }
            initiativePointer = index;
          };

          const updateInitiativeTabsMob = (index) => {
            if (childButtonListMob) {
              $(childButtonListMob[0]).css("display", "grid");
              $(childButtonListMob[1]).css("display", "none");
            }
            const popupImgList = $(tabElement)
              .find(".initiative-tabpopup-image-mob")
              .toArray();
            const indicatorListActive = $(tabElement)
              .find(".slick-dots-initiative-mob > li")
              .toArray();
            let imgLen = popupImgList.length;
            if (index < imgLen && index >= 0) {
              popupImgList.forEach((popupElement, i) => {
                if (index == i) {
                  $(popupElement).addClass("popup-active-mob");
                  $(indicatorListActive[index]).addClass("slick-active-mob");
                } else {
                  $(popupElement).removeClass("popup-active-mob");
                  $(indicatorListActive[i]).removeClass("slick-active-mob");
                }
              });
            }

            let buttonContainer = $(tabElement)
              .find(
                ".initiative-tabpopup-image-mob.popup-active-mob .play-button-container"
              )
              .toArray();
            if (buttonContainer.length > 0) {
              buttonContainer = buttonContainer[0];
              childButtonListMob = $(buttonContainer).find("button");
              if (childButtonListMob) {
                $(childButtonListMob[0]).on("click", () => {
                  // $(childButtonListMob[1]).show()
                  $(childButtonListMob[1]).css("display", "grid");
                  $(childButtonListMob[0]).css("display", "none");
                });
                $(childButtonListMob[1]).on("click", () => {
                  // $(childButtonListMob[0]).show()
                  $(childButtonListMob[0]).css("display", "grid");
                  $(childButtonListMob[1]).css("display", "none");
                });
              }
            } else {
              childButtonListMob = null;
            }

            if (index <= 0) {
              $(slickarrowPrevMob).prop("disabled", true);
              $(slickPrevPathMob).addClass("disabled");
            } else {
              $(slickarrowPrevMob).prop("disabled", false);
              $(slickPrevPathMob).removeClass("disabled");
            }
            if (index >= imgLen - 1) {
              $(slickarrowNextMob).prop("disabled", true);
              $(slickNextPathMob).addClass("disabled");
            } else {
              $(slickarrowNextMob).prop("disabled", false);
              $(slickNextPathMob).removeClass("disabled");
            }
            initiativePointer = index;
            initiativePointerMob = index;
          };
          document.documentElement.classList.add("overflow-y-hidden");
        });

      $(".htrts-container")
        .find(".close-btn")
        .on("click", function () {
          document.documentElement.classList.remove("overflow-y-hidden");
          $(tabElement).find(".popup").fadeOut();
        });
    });
  }
});

$(document).ready(function () {
    $('.es-carousel').slick({
        autoplay: true,
        autoplaySpeed: 5000,
        vertical: false,
        verticalSwiping: false,
        slidesToShow: 1,
        slidesToScroll: 1,
        infinite: true,
        speed: 1000,
        arrows: true,
        dots: true
    });

    $('.es-carousel-mobile').slick({
        autoplay: true,
        autoplaySpeed: 5000,
        slidesToShow: 1,
        slidesToScroll: 1,
        infinite: true,
        speed: 1000,
        arrows: true,
        dots: true
    });

    $("#event_faq_button").click(function () {
        $("html").css({
            overflow: "hidden",
            height: "100vh",
        });
        $("#ride_event_faq").modal();
        $('#01').addClass('active');
        $('#01').parent().addClass('active-faq-border-box');
        $('#01 accordian-heading-faq').removeClass('collapsed');
        $('#collapse01').addClass('show');
        $('.faq-card-tile-mobile #01').parent().addClass('active-faq-border-mob');
        $('.faq-card-tile-mobile .mob-head-faq:first()').addClass('active');
        $('.faq-card-tile-mobile #collapse01').addClass('show');
    });

    $("#ride_event_faq .close").click(function () {
        $("html").css({
            overflow: "",
            height: "",
        });
    });

    $('#login-event-register').on('click', function () {
        let LoggedIn;
        LoggedIn = sessionStorage.getItem("data");
        if (!LoggedIn) {
            sessionStorage.setItem('eventLogin', "true");
            $('#logIn').modal('toggle');
            $('html').css({
                overflow: 'hidden',
                height: '100vh'
            });
        } else {
            let allowed = false;
            $('#vehicle-list .floating-select-list').html("");
            try {
                let vehicleDet = JSON.parse(atob(sessionStorage.getItem('vehicleDetails')));
                $.each(vehicleDet, function (key, value) {
                    if (value.modelName.toLowerCase().indexOf('xpulse') != -1 || value.modelName.toLowerCase().indexOf('mavrick') != -1 || value.modelName.toLowerCase().indexOf('karizma') != -1) {
                        $('#ride_events_loggedin_register input[name=vin]').val(value.vinNO);
                        $('#vehicle-list .floating-select-list').append(`<li data-vin="${value.vinNO}" data-value="${value.modelName}">${value.modelName}</li>`)
                        allowed = true;
                    }
                })

                $("#vehicle-list .floating-select-list li").click(function (e) {
                    const currentVal = $(this).html();
                    $("#vehicle-list .floating-select-list li.selected").removeClass("selected");
                    $(this).addClass("selected");
                    $('#vehicle-list input[name="eventName"]').val($(this).attr("data-value"));
                    $("#vehicle-list .floating-select span").val($(this).attr("data-vin"));
                    $("#vehicle-list .floating-select span").html(currentVal);
                    $("#vehicle-list .floating-select-group").removeClass("active");
                    $('input[name=vin]').val($('#vehicle-list .floating-select-list .selected').data('vin'));
                });

                $("#vehicle-list .floating-select-list li:first-child").trigger("click");

                $("#event-city-list .floating-select-list li").click(function (e) {
                    const currentVal = $(this).html();
                    $("#event-city-list .floating-select-list li.selected").removeClass("selected");
                    $(this).addClass("selected");
                    $("#event-city-list .floating-select span").html(currentVal);
                    $("#event-city-list .floating-select-group").removeClass("active");
                });
              
                $("#event-city-list .floating-select-list li:first-child").trigger("click");
                
                $('input[name=vin]').val($('#vehicle-list .floating-select-list .selected').data('vin'));

                if (allowed) {
                    $('#vehicle-list .floating-select span').text($('#vehicle-list .floating-select-list li:first').text());
                    if (allowed) {
                        let defaultservlet = $('#defaultservlet').val();
                        send_AEM_AjaxCall(`${defaultservlet}.get-customer-profile.json`, '').then(function (data) {
                            $('.log-in-link').addClass('d-none');
                            $('.logout-header').removeClass('d-none');
                            let serverResp = data
                            let userName = `${serverResp.data.customer.firstname} ${serverResp.data.customer && (serverResp.data.customer.lastname ? serverResp.data.customer.lastname : '')}`;
                            let mobile = `${serverResp.data.customer.mobile}`;
                            let email = `${serverResp.data.customer.email}`;
                            let state = `${serverResp.data.customer.addresses[0].region.region}`;
                            let city = `${serverResp.data.customer.addresses[0].city}`;
                            let pincode = `${serverResp.data.customer.addresses[0].postcode}`;
                            $('#ride_events_loggedin_register input[name=fullName]').val(userName);
                            $('#ride_events_loggedin_register input[name=mobile]').val(mobile);
                            $('#ride_events_loggedin_register input[name=email]').val(email);
                            $('#user-state .floating-select span').text(state);
                            $('#user-city .floating-select span').text(city);
                            $('#ride_events_loggedin_register input[name=pin]').val(pincode);
                        });
                    }
                    $("html").css({
                        overflow: "hidden",
                        height: "100vh",
                    });
                    $("#ride_event_form").modal();
                } else {
                    $("#event-register-status .event_status_sucess").addClass("d-none");
                    $("#event-register-status #non-vehicle").removeClass("d-none");
                    $("#event-register-status").modal();
                }
            } catch (err) {
                $("#event-register-status .event_status_sucess").addClass("d-none");
                $("#event-register-status #non-user").removeClass("d-none");
                $("#event-register-status").modal();
            }
        }
    })
})
$(document).ready(function () {
  let etprev = $('.evs-container').data("next-arrow");
  let etnext = $('.evs-container').data("prev-arrow");  
  let arrowstyle = $('<style>.evs-container .slick-prev::before { content: url(' + etprev + ');} .evs-container .slick-next::before { content: url(' + etnext + '); } }</style>');
  $('html > head').append(arrowstyle);

  if ($('.evs-container').length > 0) {
    let fClick = false;
    var rev = $('.rev_slider');
    rev.on('init', function (event, slick, currentSlide) {
      var
        cur = $(slick.$slides[slick.currentSlide]),
        next = cur.next(),
        prev = cur.prev();
      prev.addClass('slick-sprev');
      next.addClass('slick-snext');
      cur.removeClass('slick-snext').removeClass('slick-sprev');
      slick.$prev = prev;
      slick.$next = next;
    }).on('beforeChange', function (event, slick, currentSlide, nextSlide) {
      //console.log('beforeChange');
      var
        cur = $(slick.$slides[nextSlide]);
      //console.log(slick.$prev, slick.$next);
      slick.$prev.removeClass('slick-sprev');
      slick.$next.removeClass('slick-snext');
      next = cur.next(),
        prev = cur.prev();
      prev.prev();
      prev.next();
      prev.addClass('slick-sprev');
      next.addClass('slick-snext');
      slick.$prev = prev;
      slick.$next = next;
      cur.removeClass('slick-next').removeClass('slick-sprev');
    });

    rev.slick({
      arrows: true,
      dots: true,
      focusOnSelect: true,
      infinite: true,
      centerMode: true,
      slidesPerRow: 1,
      slidesToShow: 1,
      slidesToScroll: 1,
      centerPadding: '0',
      swipe: true,
      customPaging: function (slider, i) {
        return '';
      },
    });
    $('.rev_slider').slick("setPosition");

    $('.rev_slider').on('afterChange', function (event, slick, currentSlide) {
      $('.evs-card video').trigger('pause');
      if ($('.rev_slide').hasClass('slick-active')) {
        $('.slick-active .evs-card video').trigger('play');
      }
    });

    $('.rev_slider').on('setPosition', function (event, slick, currentSlide) {
      $('.slick-active .evs-card video').trigger('play');
      if (!fClick) {
        $('.rev_slider .slick-active').trigger('click');
        setTimeout(
          () => fClick = true,
          3000
        );
      }
    });

    $('.custom-yt-popup').simpleLightboxCustom();
  }
})
$(document).ready(function () {
	$('.event-shorts').slick({
		dots: true,
		infinite: true,
		speed: 1500,
		slidesToShow: 4,
		slidesToScroll: 1,
		autoplay: true,
		autoplaySpeed: 5000,
		arrows: true,
		responsive: [
			{
				breakpoint: 991,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 2,
				}
			},
			{
				breakpoint: 768,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1,
					centerMode: true,
					centerPadding: '90px',
				}
			},
		]
	});

	$('.event-shorts').on('setPosition', function (event, slick, currentSlide) {
		if (!$('.eventshorts .modal').hasClass('show')) {
			$('.eventshorts .slick-active video:first').trigger('play');
			let video = $('.eventshorts .slick-active video:first').get(0);
			let pBar = $('.eventshorts .slick-active #pb').get(0);
			video.addEventListener('timeupdate', function () {
				let percent = Math.floor((100 / 5) * video.currentTime);
				pBar.value = percent;
				document.getElementsByClassName('progresslabel')[0];
			}, false)
		}
	});

	$('.event-shorts').on('afterChange', function (event, slick, currentSlide) {
		$('.eventshorts .slick-active progress').val(0)
		let video = $('.eventshorts .slick-active video:first').get(0);
		let pBar = $('.eventshorts .slick-active #pb').get(0);
		video.currentTime = 0;
		video.addEventListener('timeupdate', function () {
			let percent = Math.floor((100 / 5) * video.currentTime);
			pBar.value = percent;
			document.getElementsByClassName('progresslabel')[0];
		}, false)

		$('.eventshorts .slick-active #pb').on('ended', function () {
			$('.eventshorts .slick-active #pb').trigger('play');
		});

	});

	$('.popup-slider').on('setPosition', function (event, slick, currentSlide) {
		$('.popup-slider .slick-active video').trigger('play');
	});

	let modelOpened = true;
	$("#shortspopup").on("shown.bs.modal", function (e) {
		if (modelOpened) {
			$(".popup-slider").slick({
				slidesToShow: 1,
				dots: false,
				centerMode: false,
				slidesToScroll: 1,
				infinite: false,
				adaptiveHeight: true,
				vertical: true,
				verticalSwiping: true,
			});
			modelOpened = false;
		}
	});

	$(".event-shorts .evts-slider a").on("click", function (event) {
		event.preventDefault();
		$('.sh-play').addClass('d-none');
		$("#shortspopup").modal("show");
		$('html').css({
			overflow: 'hidden',
			height: '100vh'
		});
		$("body").addClass("gallery-modal-popup");
		let slickIndex = parseInt($(this).data("modal-index"));
		$(".popup-slider").slick("slickGoTo", slickIndex);
	});

	$('.popup-slider').on('afterChange', function (event, slick, currentSlide) {
		$('.popup-slider .slick-active video').unbind('click').on('click', function () {
			var video = $(".popup-slider .slick-active video").get(0);
			if (video.paused) {
				video.play();
				$('.sh-play').addClass('d-none');
				$('.sh-pause').removeClass('d-none');
				setTimeout(function () {
					$('.sh-pause').addClass('d-none');
				}, 1000);
			} else {
				video.pause();
				$('.sh-play').removeClass('d-none');
				$('.sh-pause').addClass('d-none');
			}
			return false;
		});

		$('.sh-play').addClass('d-none');

		$('.popup-slider .slick-active video').on('ended', function () {
			$('.popup-slider .slick-active video').trigger('play');
		});

		$('.popup-slider .slick-active .sh-unmute').unbind('click').on('click', function () {
			$(".popup-slider  video").prop('muted', true);
			$('.popup-slider .sh-unmute').addClass('d-none');
			$('.popup-slider .sh-mute').removeClass('d-none');
		});

		$('.popup-slider .slick-active .sh-mute').unbind('click').on('click', function () {
			$(".popup-slider video").prop('muted', false);
			$('.popup-slider .sh-mute').addClass('d-none');
			$('.popup-slider .sh-unmute').removeClass('d-none');
		});

		let video = $(".popup-slider .slick-active video").get(0);
		let pBar = $('.popup-slider .slick-active #pb').get(0);
		video.addEventListener('timeupdate', function () {
			let percent = Math.floor((100 / video.duration) * video.currentTime);
			pBar.value = percent;
			document.getElementsByClassName('progresslabel')[0];
		}, false)

		let startswipe = true;
		if (startswipe == true) {
			setTimeout(function () {
				$('.sh-swipe-up').addClass('d-none');
				$('.sh-info').removeClass('d-none');
			}, 5000);
			startswipe = false;
		}
	});

	$("#shortspopup .close ").on("click", function () {
		$('html').css({
			overflow: '',
			height: ''
		});
		$(".popup-slider .slick-active video").get(0).pause();
		$("body").removeClass("gallery-modal-popup");
		if (document.exitFullscreen) {
			document.exitFullscreen();
		} else if (document.mozCancelFullScreen) {
			// Firefox
			document.mozCancelFullScreen();
		} else if (document.webkitExitFullscreen) {
			// Chrome, Safari and Opera
			document.webkitExitFullscreen();
		} else if (document.msExitFullscreen) {
			// IE/Edge
			document.msExitFullscreen();
		}
		screen.orientation.lock("portrait-primary");
	});

	$(document).keyup(function (e) {
		if (e.key === "Escape") {
			$(".popup-slider .slick-active video").get(0).pause();
		}
	});

	$('.sh-play').on('click', function () {
		$(".popup-slider .slick-active video").get(0).play();
		$('.sh-play').addClass('d-none');
		$('.sh-pause').removeClass('d-none');
		setTimeout(function () {
			$('.sh-pause').addClass('d-none');
		}, 1000);
	})

	$('.sh-pause').on('click', function () {
		$(".popup-slider .slick-active video").get(0).pause();
		$('.sh-play').removeClass('d-none');
		$('.sh-pause').addClass('d-none');
	})
})
$(document).ready(function() {
  $('.esf-slider').slick({
		dots: true,
		infinite: false,
		speed: 1000,
		slidesToShow: 4,
		slidesToScroll: 4,
		autoplay:true,
		autoplaySpeed:4000,
		arrows: true,
		responsive: [
			{
				breakpoint: 991,
				settings: {
					slidesToShow: 2,
					slidesToScroll: 2,
				}
			},
			{
				breakpoint: 768,
				settings: {
					slidesToShow: 1,
					slidesToScroll: 1,
				}
			},
		]
	});
})
$(document).ready(function () {
  if ($("#event_rides_register_form").length) {
    $('#consentcheck').on('click', function(){
      if($("#consentcheck").prop("checked")) {
        $('#event_rides_register_submit').prop("disabled", false);
      } else {
        $('#event_rides_register_submit').prop("disabled", true);
      }
    })

    $(".b1-text-std span.event-text-show").click(function () {
      $(".b1-text-std span.event-text-shown").css("display", "inline");
      $(".b1-text-std span.event-text-hide").css("display", "inline");
      $(".b1-text-std span.event-text-show").css("display", "none");
    });
    $(".b1-text-std span.event-text-hide").click(function () {
      $(".b1-text-std span.event-text-shown").css("display", "none");
      $(".b1-text-std span.event-text-hide").css("display", "none");
      $(".b1-text-std span.event-text-show").css("display", "inline");
    });

    $("#event-city-list .floating-select").click(function (e) {
      $("#event-city-list .floating-select-group").toggleClass("active");
    });

    $(window).click(function (e) {
      const selectField = $("#event-city-list .floating-select-group").find(
        e.target
      );
      if (selectField?.length == 0)
        $("#event-city-list .floating-select-group").removeClass("active");
    });

    $("#event-city-list .floating-select-list li").click(function (e) {
      const currentVal = $(this).html();
      $("#event-city-list .floating-select-list li.selected").removeClass("selected");
      $(this).addClass("selected");
      $("#event-city-list .floating-select span").html(currentVal);
      $("#event-city-list .floating-select-group").removeClass("active");
    });

    $("#event-city-list .floating-select-list li:first-child").trigger("click");

    $("#event_rides_register_form #event-list .floating-select").click(function (e) {
      $("#event_rides_register_form #event-list .floating-select-group").toggleClass("active");
    });

    if (sessionStorage.getItem("formStartNotFired") === null) {
      sessionStorage.setItem("formStartNotFired", "false");
    } else {
      sessionStorage.setItem("formStartNotFired", "false");
    }

    $("#event_rides_register_form input").on("input", function () {
      const anyDataLayerEventFired = sessionStorage.getItem("formStartNotFired");

      if (anyDataLayerEventFired !== "true") {
        if (window.digitalData) {
          window.digitalData.push({
            event: "Form Start",
            formDetails: {
              formfield: $(this).attr("name"),
              formname: "Rides and Community",
              formtype: "popup",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
        sessionStorage.setItem("formStartNotFired", "true");
      }
    });

    $(window).click(function (e) {
      const selectField = $("#event_rides_register_form #event-list .floating-select-group").find(
        e.target
      );
      if (selectField?.length == 0)
        $("#event_rides_register_form #event-list .floating-select-group").removeClass("active");
    });

    $("#event_rides_register_form #event-list .floating-select-list li").click(function (e) {
      const currentVal = $(this).html();
      $("#event-list .floating-select-list li.selected").removeClass("selected");
      $(this).addClass("selected");
      $('#event_rides_register_form #event-list input[name="eventName"]').val($(this).attr("data-value"));
      $('#event_rides_register_form #event-list input[name="eventNamesms"]').val($(this).attr("data-eventnamesms"));
      $("#event-list .floating-select span").html(currentVal);
      $("#event_rides_register_form #event-list .floating-select-group").removeClass("active");
    });

    $("#event_rides_register_form #event-list .floating-select-list li:first-child").trigger("click");

    $("#event_register_button").click(function () {
      //$('#event-register-status').modal();
      $("html").css({
        overflow: "hidden",
        height: "100vh",
      });
      const registerCTA = $(this).data("url");
      if (registerCTA) {
        window.location.href = registerCTA;
      } else {
        $("#ride_event_form").modal();
      }
    });

    $("#ride_event_form .close").click(function () {
      $("html").css({
        overflow: "",
        height: "",
      });
    });

    $("#event_rides_register_submit").click(async function () {
      customValidation($("#event_rides_register_form"));
      if ($("#event_rides_register_form").valid()) {
        console.log(" no errors");

        $("html").css({
          overflow: "",
          height: "",
        });
        // if(error){  for opening error status popup
        //   $('#event-register-status .event_status_sucess').addClass('d-none');
        //   $('#event-register-status .event_status_error').removeClass('d-none');
        // }

        var event = $('#event_rides_register_form [name="eventName"]')
          .val()
          ?.replace(/\//g, " per ");
        var name = $('#event_rides_register_form [name="fullName"]').val();
        var age = $('#event_rides_register_form [name="age"]').val();
        var email = $('#event_rides_register_form [name="email"]').val();
        var mobile = $("#event_rides_register_form [name='mobile']").val();
        var vehicle = $("#event_rides_register_form [name='existingVehicle']").val();
        var address = $("#event_rides_register_form [name='address']").val();
        var fb_handle = "";
        var tweet_handle = "";
        var insta_handle = $('#event-city-list .floating-select-list .selected').text().trim()? $('#event-city-list .floating-select-list .selected').text().trim():'';
        var data_rider = "0";
        var rider_community_name = "";

        let eventName = $('#event_rides_register_form [name="eventName"]').val();
        let eventLocation; 
        if($("#event_rides_register_form #event-city-list").length > 0) {
          eventLocation = $("#event_rides_register_form #event-city-list .selected").attr("data-eventlocation");
        } else {
          eventLocation = $(`#event_rides_register_form li[data-value="${eventName}"]`).attr("data-eventlocation");
        }
        
        let eventSmsName = $('#event_rides_register_form [name="eventNamesms"]').val();
        var sms_text = `Thank you for registering for Hero Ride Event - ${eventSmsName}. Google location for the event: ${eventLocation}. -HMCL`;
        let xtrackFormData = {
          event: event,
          name: name,
          age: age,
          email: email,
          mobile: mobile,
          state: "",
          city: "",
          date: "",
          pincode:"",
          vin:"",
          formType:"OPEN_FOR_ALL_EVENTS",
          vehicle: vehicle,
          eventCity:"",
          address: address,
          fb_handle: fb_handle,
          tweet_handle: tweet_handle,
          insta_handle: insta_handle,
          eventCity: insta_handle,
          data_rider: data_rider,
          rider_community_name: rider_community_name,
          sms_text: sms_text.replaceAll("\n", " "),
        };
 
        if (email) {
          const hashedEmail = await hashedValue(email);
          localStorage.setItem("analyticsHashedEmail", hashedEmail);
        }

        var xtrackRelativePath = $("#event_rides_register_form").attr(
          "data-component-relativePath"
        );

        var xtrackFormPath = xtrackRelativePath.replace("jcr:content", "_jcr_content");
        $.ajax({
          url: xtrackFormPath,
          type: "POST",
          data: JSON.stringify(xtrackFormData),
          dataType: "json",
          contentType: "application/json",
          success: function (resp) {
            $("#event_rides_register_form").trigger("reset");
            const eventName = $('#event_rides_register_form [name="eventName"]')
              .val()
              ?.replace(/\//g, " per ");
            let jsonResp = resp;
            if (typeof jsonResp != "object") {
              jsonResp = JSON.parse(resp);
            }
            if (jsonResp.status == "success") 
             {
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Success",
                  formDetails: {
                    formname: "Rides and Community",
                    formtype: "popup",
                    city: "NA",
                    state: "NA",
                    leadId: "NA",
                    eventname: eventName,
                  },
                  productDetails:{
                    productName : xtrackFormData.vehicle,
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: "NA", // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
              let eventVal = $('#event_rides_register_form [name="eventName"]').val();
              let eventRedirectLink = $(
                `#event_rides_register_form li[data-value="${eventVal}"]`
              ).attr("data-eventredirection");
              if (eventRedirectLink) {
                window.location.href = eventRedirectLink;
              } else {
                $("#ride_event_form").modal("hide");
                $("#event-register-status .event_status_sucess").removeClass("d-none");
                $("#event-register-status .event_status_error").addClass("d-none");
                $("#event-register-status").modal();
              }
            } else {
              if (window.digitalData) {
                window.digitalData.push({
                  event: "Form Error",
                  formDetails: {
                    formname: "Rides and Community",
                    formtype: "popup",
                    formerrorfields: "API Error",
                    city: "NA",
                    state: "NA",
                    leadId: "NA",
                  },
                  productDetails:{
                    productName : xtrackFormData.vehicle,
                    variant: "NA", // selected variant
                    colour: "NA", // selected color
                    dealer: "NA", // selected dealer name
                  },
                  user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                  },
                  page: getPageDetails(),
                });
              }
              if(jsonResp.status == "Registration Exceeded") {
                $('#event-register-status .event_status_error .event_status_success_title').text(jsonResp.message)
              }
              $("#ride_event_form").modal("hide");
              $("#event-register-status .event_status_sucess").addClass("d-none");
              $("#event-register-status .event_status_error").removeClass("d-none");
              $("#event-register-status").modal();
            }
          },
          error: function (error) {
            if (window.digitalData) {
              window.digitalData.push({
                event: "Form Error",
                formDetails: {
                  formname: "Rides and Community",
                  formtype: "popup",
                  formerrorfields: "API Error",
                  city: "NA",
                  state: "NA",
                  leadId: "NA",
                },
                productDetails:{
                  productName : xtrackFormData.vehicle,
                  variant: "NA", // selected variant
                  colour: "NA", // selected color
                  dealer: "NA", // selected dealer name
                },
                user: {
                  hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                  hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                  hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                  customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
              });
            }
            $("#ride_event_form").modal("hide");
            $("#event-register-status .event_status_sucess").addClass("d-none");
            $("#event-register-status .event_status_error").removeClass("d-none");
            $("#event-register-status").modal();
          },
        });
      } else {
        console.log(" some errors");

        const forAttributes = [];

        $("#event_rides_register_form input").each(function () {
          if ($(this).siblings("label.error").length > 0) {
            let forAttribute = $(this).siblings("label.error").attr("for");
            forAttributes.push(forAttribute);
          }
        });
        const forAttributesString = forAttributes.join("|");
        if (window.digitalData) {
          window.digitalData.push({
            event: "Form Error",
            formDetails: {
              formname: "Rides and Community",
              formtype: "popup",
              formerrorfields: forAttributesString,
              city: "NA",
              state: "NA",
              leadId: "NA",
            },
            productDetails:{
              productName : xtrackFormData.vehicle,
              variant: "NA", // selected variant
              colour: "NA", // selected color
              dealer: "NA", // selected dealer name
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
      }
    });

    if ($(".event_register_footer").length > 0) {
      $(".footer-wrapper").addClass("eventpage-footer-padding");
    }

    $("#er-mobile").on("keyup", function () {
      if ($(this).val().length == 10) {
        $("#event-rides-otp").removeClass("pe-none");
      } else {
        $("#event-rides-otp").addClass("pe-none");
      }
    });

    $("#event-rides-otp").click(async function (e) {
      //$("#er-otp").prop('disabled', false);
      e.preventDefault();
      const email = $('#event_rides_register_form [name="email"]').val();
      let mobNumber = $("#er-mobile").val();
      if (mobNumber) {
        const phCodemobNumber = "+91" + mobNumber;
        let hashedMobile = await hashedValue(phCodemobNumber);
        localStorage.setItem("analyticsHashedMobile", hashedMobile);
      }
      if (email) {
        const hashedEmail = await hashedValue(email);
        localStorage.setItem("analyticsHashedEmail", hashedEmail);
      }
      if (window.digitalData && window._satellite) {
        window.digitalData.push({
          formDetails: {
            formname: "Rides and Community",
            formtype: "popup", // registration
          },
          user: {
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });

        _satellite.track("OTP Requested");
      }

      let timerVal = 30;
      let interval = setInterval(() => {
        timerVal--;
        if (timerVal === 0) {
          clearInterval(interval);
          $("#event-rides-otp").text("Resend");
          $(this).removeClass("pe-none-tracker");
        } else {
          $(this).addClass("pe-none-tracker");
          if (timerVal < 10) {
            $("#event-rides-otp").text(`00:0${timerVal}`);
          } else {
            $("#event-rides-otp").text(`00:${timerVal}`);
          }
        }
      }, 1000);

      const pageType = "Rides and Community";
      const vehicleName = "Rides_Events";
      const otpExpiryTime = $("#otp-time-expiry").data("otptimeexpiry");
      if (mobNumber) {
        let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
        grecaptcha.ready(function () {
          grecaptcha.execute(sitKey).then(function (token) {
            requestOtp(mobNumber, pageType, vehicleName, token, otpExpiryTime);
          });
        });
      }
    });

    function isValidOtp(mobile, otp) {
      const reqId = sessionStorage.getItem("tempID");
      return (
        otp.toString() ===
        (Math.abs(hashCode(mobile + reqId)) % 1000000).toString().padStart(6, "0")
      );
    }

    const otpInputs = $("#er-otp");

    async function hashedValue(message) {
      const hashBuffer = await crypto.subtle.digest(
        "SHA-256",
        new TextEncoder().encode(message)
      );
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
      return hashValue;
    }

    function getEncryptString(data) {
      const getKey = "63C09AE37D4254AD7D13A7HGF$F88411";
      const getIv = "1234567890123456";
      const getData = data;

      var authpass = CryptoJS.AES.encrypt(getData, CryptoJS.enc.Utf8.parse(getKey), {
        mode: CryptoJS.mode.CBC,
        iv: CryptoJS.enc.Utf8.parse(getIv),
      });
      var token = base64(authpass);
      return token;
    }

    function base64(data) {
      var wordArray = CryptoJS.enc.Utf8.parse(data);
      var final = CryptoJS.enc.Base64.stringify(wordArray);

      return final;
    }

    otpInputs.on("input", async function () {
      let otp = $(this).val();
      const num = $("#er-mobile").val();
      const email = $('#event_rides_register_form [name="email"]').val()
      if (otp.length == 6 && isValidOtp(num, otp)) {
        const encNum = getEncryptString(num);
        
        const phCodemobNumberMeta = "91" + num;
        let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
        localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

        let encEmail = "NA";
        if (email) {
          encEmail = getEncryptString(email);
          const hashedEmail = await hashedValue(email);
          localStorage.setItem("analyticsHashedEmail", hashedEmail);
        } 
        otpInputs.parent().addClass("otp--valid");
        otpValidated = true;
        if (window.digitalData) {
          window.digitalData.push({
            event: "OTP Verified",
            formDetails: {
              formname: "Rides and Community",
              formtype: "popup",
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              encryptedEmail: encEmail,
              encryptedMobile: encNum,
            },
            page: getPageDetails(),
          });
        }
      } else {
        otpInputs.parent().removeClass("otp--valid");
        otpValidated = false;
      }
    });

    function getPageDetails(isErrorPage = false) {
      let pagePath = window.location.pathname;
      let slug = pagePath.split("/");
      let actualSlug = slug[1].replace(".html", "");
      let primary_category = window.location.origin;
      let fullSplit = primary_category.split("//");
      let pcSplit = fullSplit[1].split(".");
      let title = $("title").text();
      let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
      let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
      let sub1 = "";
      let sub2 = "";
      let sub3 = "";
      let sub4 = "";
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
        sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
          sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
          sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
          sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
      } else {
        if (slug[2]) sub1 = slug[2].replace(".html", "");
        if (slug[3]) sub2 = slug[3].replace(".html", "");
        if (slug[4]) sub3 = slug[4].replace(".html", "");
        if (slug[5]) sub4 = slug[5].replace(".html", "");
      }
      return {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: isErrorPage,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      };
    }

    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }

    let otpValidated = false;

    function customValidation($form) {
      // for age restriction
      jQuery.validator.addMethod("ageAbove18", function (value, element) {
        return value >= 18;
      });
      //email validation
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      // for mobile no fields
      jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      });
      //to allow numbers only
      jQuery.validator.addMethod("numbersOnly", function (value) {
        return /^[0-9]+$/i.test(value);
      });
      //to allow indian numbers only
      jQuery.validator.addMethod("indianNumber", function (value) {
        return /^[6789]\d{9}$/i.test(value);
      });
      //for valid mobile number
      jQuery.validator.addMethod("validNumber", function (value) {
        const disallowedNumbers = [
          "0123456789",
          "1111111111",
          "2222222222",
          "3333333333",
          "4444444444",
          "5555555555",
          "6666666666",
          "7777777777",
          "8888888888",
          "9999999999",
          "0000000000",
          "1234567890",
          "1010101010",
          "2020202020",
          "3030303030",
          "4040404040",
          "5050505050",
        ];
        if (disallowedNumbers.indexOf(value) !== -1) {
          return false;
        }
        if (value.length < 10) {
          return false;
        } else {
          return true;
        }
      });
      jQuery.validator.addMethod("validOTP", function (value) {
        if (otpValidated == true) return /^[0-9]\d{5}$/i.test(value);
      });
      //   ride-event-drive-form
      $form.validate({
        ignore: [],
        rules: {
          fullName: {
            required: true,
          },
          age: {
            required: true,
           // numbersOnly: true,
            //ageAbove18: true,
          },
          email: {
            required: true,
            emailOnly: true,
          },
          mobile: {
            required: true,
            numbersOnly: true,
            validNumber: true,
            indianNumber: true,
          },
          otp: {
            required: true,
            validOTP: true,
          },
          existingVehicle: {
            required: true,
          },
          address: {
            required: true,
          },
        },
        messages: {
          fullName: {
            required: $('[name="fullName"]').data("validation-msg-req"),
          },
          age: {
            required: $('[name="age"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            ageAbove18: "Age must be minimum of 18",
          },
          email: {
            required: $('[name="email"]').data("validation-msg-req"),
            emailOnly: "Please enter valid E-mail ",
          },
          mobile: {
            required: $('[name="mobile"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            validNumber: "Please enter valid Mobile Number",
            indianNumber: "Please enter valid Mobile Number",
          },
          otp: {
            validOTP: "Please enter a valid 6 digit OTP",
          },
          existingVehicle: {
            required: $('[name="existingVehicle"]').data("validation-msg-req"),
          },
          address: {
            required: $('[name="address"]').data("validation-msg-req"),
          },
        },
      });
    }

    function requestOtp(contactNumber, pageType, vehicleName, token, otpExpiryTime) {
      sessionStorage.setItem("tempID", generateId());
      var otpdata = {
        phoneNum: contactNumber,
        pageType: pageType,
        otpExpiryTime: otpExpiryTime,
        reqID: sessionStorage.getItem("tempID"),
        vehicleName: vehicleName,
        token: token,
      };

      let defaultservlet = $("#defaultservlet").val();
      $.ajax({
        url: defaultservlet + ".sendotp.html",
        type: "POST",
        data: otpdata,
        success: function (resp) {
          console.log(resp);
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Success",
              formDetails: {
                formname: "Rides and Community",
                formtype: "popup",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
        error: function (err) {
          console.log(err);
          if (window.digitalData) {
            window.digitalData.push({
              event: "OTP Fails",
              formDetails: {
                formname: "Rides and Community",
                formtype: "popup",
              },
              user: {
                hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
              },
              page: getPageDetails(),
            });
          }
        },
      });
    }

    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }

    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }

    function hashCode(s) {
      var h = 0,
        l = s.length,
        i = 0;
      if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
      return h;
    }
  }

  if ($("#login_event_rides_register_form").length) {
    $('#consentcheck').on('click', function(){
      if($("#consentcheck").prop("checked")) {
        $('#login_event_rides_register_submit').prop("disabled", false);
      } else {
        $('#login_event_rides_register_submit').prop("disabled", true);
      }
    })
    $("#login_event_rides_register_submit").click(function () {
      customValidation($("#login_event_rides_register_form"));
      if ($("#login_event_rides_register_form").valid()) {
        
        $("html").css({
          overflow: "",
          height: "",
        });

        var name = $('#login_event_rides_register_form [name="fullName"]').val();
        var email = $('#login_event_rides_register_form [name="email"]').val();
        var mobile = $("#login_event_rides_register_form [name='mobile']").val();
        var fb_handle = "";
        var tweet_handle = "";
        var insta_handle ="";
        var eventCity = $('#event-city-list .floating-select-list .selected').text().trim();
        var data_rider = "0";
        var rider_community_name = "";
        var vin_no = $('#vehicle-list .floating-select-list .selected').data('vin');
        var selBike = $('#vehicle-list .floating-select-list .selected').data('value');
        var state = $('#user-state .floating-select span').text();
        var city = $('#user-city .floating-select span').text();
        var pincode = $('#ride_events_loggedin_register input[name=pin]').val();
        let eventName = $('#login_event_rides_register_form [name="eventName"]').val();
        let eventLocation = $(`#login_event_rides_register_form li[data-value="${eventName}"]`).attr(
          "data-eventlocation"
        );
        let vehicleName = $('#vehicle-list .floating-select span').text();
        let form_type = "";
        var sms_text = "";
        let event = "";
        if($('#d5exp').length) {
          form_type = "HERO_CUSTOMER_EVENTS";
          event = "D5 Expedition";
          sms_text = `Thank you for registering for Hero Ride Event - D5-Expedition. Google location for the event: ${insta_handle}. -HMCL`;
        } else {
          form_type = "XCLAN_INTEREST_FORM_CUSTOMER";
          sms_text = `Thank you for registering for Hero Ride Event - ${eventName}. Google location for the event: ${eventLocation}. -HMCL`;
        }
        
        let xtrackFormData = {
          event: event,
          name: name,
          age: "",
          email: email,
          mobile: mobile,
          state: state,
          city: city,
          date: null,
          vehicle: vehicleName,
          address: "",
          fb_handle: fb_handle,
          tweet_handle: tweet_handle,
          insta_handle: insta_handle,
          eventCity: insta_handle,
          data_rider: data_rider,
          rider_community_name: rider_community_name,
          sms_text: sms_text.replaceAll("\n", " "),
          pincode: pincode,
          eventCity:eventCity,
          vin: vin_no,
          formType: form_type
        };
        var xtrackRelativePath = $("#login_event_rides_register_form").attr(
          "data-component-relativePath"
        );

        var xtrackFormPath = xtrackRelativePath.replace("jcr:content", "_jcr_content");
        $.ajax({
          url: xtrackFormPath,
          type: "POST",
          data: JSON.stringify(xtrackFormData),
          dataType: "json",
          contentType: "application/json",
          success: function (resp) {
            $("#login_event_rides_register_form").trigger("reset");
            const eventName = $('#login_event_rides_register_form [name="eventName"]')
              .val()
              ?.replace(/\//g, " per ");
            let jsonResp = resp;
            if (typeof jsonResp != "object") {
              jsonResp = JSON.parse(resp);
            }
            console.log(jsonResp.status)
            if (jsonResp.status == "success") {
              let eventVal = $('#login_event_rides_register_form [name="eventName"]').val();
              let eventRedirectLink = $(
                `#login_event_rides_register_form li[data-value="${eventVal}"]`
              ).attr("data-eventredirection");
              if (eventRedirectLink) {
                window.location.href = eventRedirectLink;
              } else {
                $("#ride_event_form").modal("hide");
                $("#event-register-status .event_status_sucess .event_status_success_text").append(' '+selBike+'!');
                $("#event-register-status .event_status_sucess").removeClass("d-none");
                $("#event-register-status #non-user").addClass("d-none");
                $("#event-register-status #non-vehicle").addClass("d-none");
                $("#event-register-status").modal();
              }
            } else if (jsonResp.status == 'fail' && jsonResp.message.indexOf('already exist') != -1) {
              $("#ride_event_form").modal("hide");
              $("#event-register-status .event_status_sucess").addClass("d-none");
              $("#event-register-status #non-user").removeClass("d-none");
              $("#event-register-status #non-user .event_status_success_title").text($('#already').data('value'));
              $("#event-register-status #non-vehicle").addClass("d-none");
              $("#event-register-status").modal();
            } else {
              (jsonResp.status == 'fail');

              $("#ride_event_form").modal("hide");
              $("#event-register-status .event_status_sucess").addClass("d-none");
              $("#event-register-status #non-user").removeClass("d-none");
              $("#event-register-status #non-vehicle").addClass("d-none");
              $("#event-register-status").modal();
            }
          },
          error: function (error) {

            $("#ride_event_form").modal("hide");
            $("#event-register-status .event_status_sucess").addClass("d-none");
            $("#event-register-status #non-user").removeClass("d-none");
            $("#event-register-status #non-vehicle").addClass("d-none");
            $("#event-register-status").modal();
          },
        });
      } else {
        console.log(" some errors");

        const forAttributes = [];

        $("#login_event_rides_register_form input").each(function () {
          if ($(this).siblings("label.error").length > 0) {
            let forAttribute = $(this).siblings("label.error").attr("for");
            forAttributes.push(forAttribute);
          }
        });
        const forAttributesString = forAttributes.join("|");

      }
    });

    $("#ride_events_loggedin_register .close").click(function () {
      $("html").css({
        overflow: "",
        height: "",
      });
    });

    $("#vehicle-list .floating-select").click(function (e) {
      $("#vehicle-list .floating-select-group").toggleClass("active");
    });

    $(window).click(function (e) {
      const selectField = $("#vehicle-list .floating-select-group").find(
        e.target
      );
      if (selectField?.length == 0)
        $("#vehicle-list .floating-select-group").removeClass("active");
    });

    $("#event-city-list .floating-select").click(function (e) {
      $("#event-city-list .floating-select-group").toggleClass("active");
    });

    $(window).click(function (e) {
      const selectField = $("#event-city-list .floating-select-group").find(
        e.target
      );
      if (selectField?.length == 0)
        $("#event-city-list .floating-select-group").removeClass("active");
    });

    let otpValidated = true;

    function customValidation($form) {
      // for age restriction
      jQuery.validator.addMethod("ageAbove18", function (value, element) {
        return value >= 18;
      });
      //email validation
      jQuery.validator.addMethod("emailOnly", function (value) {
        return /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(value);
      });
      // for mobile no fields
      jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
        return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
      });
      //to allow numbers only
      jQuery.validator.addMethod("numbersOnly", function (value) {
        return /^[0-9]+$/i.test(value);
      });
      //to allow indian numbers only
      jQuery.validator.addMethod("indianNumber", function (value) {
        return /^[6789]\d{9}$/i.test(value);
      });
      //for valid mobile number
      jQuery.validator.addMethod("validNumber", function (value) {
        const disallowedNumbers = [
          "0123456789",
          "1111111111",
          "2222222222",
          "3333333333",
          "4444444444",
          "5555555555",
          "6666666666",
          "7777777777",
          "8888888888",
          "9999999999",
          "0000000000",
          "1234567890",
          "1010101010",
          "2020202020",
          "3030303030",
          "4040404040",
          "5050505050",
        ];
        if (disallowedNumbers.indexOf(value) !== -1) {
          return false;
        }
        if (value.length < 10) {
          return false;
        } else {
          return true;
        }
      });
      jQuery.validator.addMethod("validOTP", function (value) {
        if (otpValidated == true) return /^[0-9]\d{5}$/i.test(value);
      });
      //   ride-event-drive-form
      $form.validate({
        ignore: [],
        rules: {
          fullName: {
            required: true,
          },
          age: {
            required: true,
            numbersOnly: true,
            ageAbove18: true,
          },
          email: {
            required: true,
            emailOnly: true,
          },
          mobile: {
            required: true,
            numbersOnly: true,
            validNumber: true,
            indianNumber: true,
          },
          otp: {
            required: true,
            validOTP: true,
          },
          existingVehicle: {
            required: true,
          },
          address: {
            required: true,
          },
        },
        messages: {
          fullName: {
            required: $('[name="fullName"]').data("validation-msg-req"),
          },
          age: {
            required: $('[name="age"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            ageAbove18: "Age must be minimum of 18",
          },
          email: {
            required: $('[name="email"]').data("validation-msg-req"),
            emailOnly: "Please enter valid E-mail ",
          },
          mobile: {
            required: $('[name="mobile"]').data("validation-msg-req"),
            numbersOnly: "Please enter numbers only",
            validNumber: "Please enter valid Mobile Number",
            indianNumber: "Please enter valid Mobile Number",
          },
          otp: {
            validOTP: "Please enter a valid 6 digit OTP",
          },
          existingVehicle: {
            required: $('[name="existingVehicle"]').data("validation-msg-req"),
          },
          address: {
            required: $('[name="address"]').data("validation-msg-req"),
          },
        },
      });
    }
  }
});
$(document).ready(function () {
  if ($("#rides-event-details").length > 0) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }

    function isSignedIn() {
      let isSignedIn = "No";
      if (sessionStorage.getItem("data")) isSignedIn = "Yes";
      return isSignedIn;
    }

    if (window.digitalData) {
      window.digitalData.push({
        event: "pageView",
        page: {
          pagename: title,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          country: "India",
          hostName: window.location.origin,
          previousPageValue: document.referrer,
          platform: getOS(),
          loggedIn: isSignedIn(),
          fullURL: window.location.href,
        },
      });
    }

    $(document).on("click", "#rides-event-details .card-wrapper a", function (e) {
      if (!$(this).hasClass("event-map-link")) {
        if (window.digitalData) {
          window.digitalData.push({
            event: "linkClicked",
            web: {
              webInteraction: {
                name: $(this).parent().find(".event-title-name").text().trim(),
                URL: $(this).attr("href"),
                position: "Event Listing",
              },
            },
            page: {
              pagename: title,
              category: sub1,
              categoryLevel1: sub2,
              categoryLevel2: sub3,
              categoryLevel3: sub4,
              country: "India",
              hostName: window.location.origin,
              previousPageValue: document.referrer,
              platform: getOS(),
              loggedIn: isSignedIn(),
              fullURL: window.location.href,
            },
          });
        }
      }
    });

    let accordFilterListing = [];
    let aemNodesEvents;
    const defaultservlet = $("#default--servlet").data("defaultservlet");

    $.ajax({
      type: "GET",
      url: defaultservlet,
      async: false,
      success: function (response) {
        if (typeof response === "string") {
          try {
            response = JSON.parse(response);
          } catch (e) {
            console.log("Error parsing response to JSON: ", e);
            return;
          }
        }
        aemNodesEvents = response;
      },
      error: function (err) {
        reject(err); // Reject the promise and go to catch()
      },
    });

    // Initial load of Event Listing Details and Default Filters
    if (!jQuery.isEmptyObject(aemNodesEvents)) {
      let initialLoadedEvents = [];
      Object.keys(aemNodesEvents.categories).forEach(function (nodesVal, nodesKey) {
        aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
          Object.keys(filterVal).forEach(function (locationVal, locationKey) {
            filterVal[locationVal].forEach(function (eventVal, eventKey) {
              initialLoadedEvents.push(eventVal);
            });
          });
        });
      });
      accordFilterListing = getAccordFilteredArray([], initialLoadedEvents, true);
      eventsListingCreation(initialLoadedEvents);
    }

    let checkMobFilters = [];

    // Default Event Listing Cards
    function eventsListingCreation(eventsLists) {
      const eventsContentListing = $("#rides-event-details .contents-card-wrap");
      eventsLists?.forEach(function (listingData, index) {
        const isSameDayMonth =
          listingData["Start Date"] ===
          listingData["End Date"].split(" ").slice(0, 2).join(" ");
        const startEndDateText = isSameDayMonth
          ? `${listingData["End Date"]}`
          : `${listingData["Start Date"]} - ${listingData["End Date"]}`;
        const eventLisinHtml = `<div class="card-wrapper"><a href="${
          listingData["redirectUrl"]
        }" class="${!listingData["redirectUrl"] ? "pointer-none" : ""}">
                <div class="event-img-wrapper">
                    <img class="event-image" src="/content/dam/hero-aem-website/in/rides-events-listing/event-images/desktop/${
                      listingData["eventImgDesk"]
                    }">
                    <div class="event-fixture-wrap">
                        <img class="event-fixture-img" src="/content/dam/hero-aem-website/in/rides-events-listing/events-dates-img.svg">
                        <div class="event-fixture-heading">${listingData["Timeline"]}</div>
                    </div>
                </div>
                <div class="event-card-contents">
                    <div class="event-card-namings">
                        <div class="event-category-text">
                            ${listingData["Category"]}
                        </div>
                        <div class="event-title-name">
                            ${listingData["Event Name"]}
                        </div>
                    </div>
                    <div class="event-date-wrap">
                        <img class="event-date-img" src="/content/dam/hero-aem-website/in/rides-events-listing/rides-carrer-icon.svg">
                        <div class="event-date-text">${listingData["Event Level"]}</div>
                    </div>
                    <div class="event-date-wrap">
                        <img class="event-date-img" src="/content/dam/hero-aem-website/in/rides-events-listing/events-calendor-icon.svg">
                        <div class="event-date-text">${startEndDateText}</div>
                    </div>
                    <div class="event-location-wrap">
                        <img class="event-location-img" src="/content/dam/hero-aem-website/in/rides-events-listing/events-location-icon.svg">
                        <div class="event-location-text">${listingData["Event Address"]}</div>
                    </div>
                    <a class="event-map-link ${
                      !listingData["MapURL"] ? "pointer-none" : ""
                    }" href="${listingData["MapURL"]}" target="_blank">View in Map</a>
                </div>
            </a></div>`;
        $(eventsContentListing).append(eventLisinHtml);
      });
      $("#rides-event-details .events-count").html(
        eventsLists?.length ? eventsLists.length : ""
      );

      automaticSorting();
    }

    // Filters Component Addition/Deletion Filters based on Mobile and Desktop viewport
    if (window.innerWidth > 567) {
      const filterAccordWrap = $("#rides-event-details #listing-events");
      accordFilterListing?.forEach(function (accorData, index) {
        const appendHeaderHtml = `<div class="card-header">
                <button class="accordion-button" data-toggle="collapse" data-target="#${
                  "collapse" + index
                }">

                    <div class="event-accord-head">${accorData.accordName}<img
                            src="/content/dam/hero-aem-website/in/rides-events-listing/listing-accord-open.svg"
                            class="arrow-icon expanded-icon"></div>
                </button>
            </div>`;

        const checkHtml = accorData.accordLists
          ?.map(function (innerAccorData, innerIndex) {
            const appendLabelHtml = `<label class="events-label-wrap">
                    <div class="event-sublist-title">${innerAccorData.listName}</div>
                    <input type="checkbox" name="${innerAccorData.listName.toLowerCase()}" class="events-list-checkbox" value="${
              innerAccorData.listName
            }" filterTitle="${accorData.accordName}">
                    <span class="events-list-checkbox-mark"></span>
                </label>`;
            return appendLabelHtml;
          })
          .join("");

        const appendBodyHtml = `<div id="${"collapse" + index}" class="collapse in">
                <div class="card-body">${checkHtml}</div>
            </div>`;

        const finalCardHtml = `<div class="card">
                ${appendHeaderHtml}${appendBodyHtml}
            </div>`;

        $(filterAccordWrap).append(finalCardHtml);
      });
    } else {
      const filterMobWrap = $("#rides-event-details .mob-filter-content");
      accordFilterListing?.forEach(function (accorData, index) {
        const appendHeaderHtml = `
                <input type="radio" id="${"tab-" + (index + 1)}" name="tab-group-1" ${
          index == 0 && "checked"
        }>
                <label for="${"tab-" + (index + 1)}">${accorData.accordName}</label>`;

        const checkHtml = accorData.accordLists
          ?.map(function (innerAccorData, innerIndex) {
            const appendLabelHtml = `<label class="events-label-wrap">
                    <div class="event-sublist-title">${innerAccorData.listName}</div>
                    <input type="checkbox" name="${innerAccorData.listName.toLowerCase()}" class="events-list-checkbox" value="${
              innerAccorData.listName
            }" filterTitle="${accorData.accordName}">
                    <span class="events-list-checkbox-mark"></span>
                </label>`;
            return appendLabelHtml;
          })
          .join("");

        const appendBodyHtml = `<div class="mob-filters-check-wrap">${checkHtml}</div>`;

        const finalCardHtml = `<div class="mob-filters-tabs">
                ${appendHeaderHtml}
                ${appendBodyHtml}
            </div>`;

        $(filterMobWrap).append(finalCardHtml);
      });
    }

    // Automatically open all Filter accordians in Desktop Viewport
    $("#rides-event-details #listing-events .collapse").collapse("toggle");

    // Record Filter clicks Add/Remove on checkboxes
    $("#listing-events .events-list-checkbox, #eventFilterModal .events-list-checkbox").change(
      function () {
        let selectedFilters = {};
        const checkedLists = $("#rides-event-details input[type='checkbox']:checked").map(
          function (index, accorData) {
            const filterAttribute = $(accorData).attr("filterTitle");
            if (Object.keys(selectedFilters).includes(filterAttribute)) {
              selectedFilters[filterAttribute].push($(accorData).val());
            } else {
              selectedFilters[filterAttribute] = [$(accorData).val()];
            }
            return $(accorData).val();
          }
        );
        let filterClickedWrap = $("#rides-event-details .filter-content-section");
        if (window.innerWidth > 567) {
          filterClickedWrap = $("#rides-event-details .filter-content-section");
        } else {
          filterClickedWrap = $("#eventFilterModal .mob-filter-content-section");
        }
        $(
          ".filter-content-section .filter-items-wrap, .filter-title .filter-clear-wrap"
        ).remove();
        $("#eventFilterModal .filter-items-wrap").remove();
        if (checkedLists?.length > 0) {
          checkedLists?.map(function (innerIndex, filteredData) {
            const appendFilterListHtml = `<div class="filter-items-wrap">
                    <div class="filter-item-heading">${filteredData}</div>
                    <img class="filter-cancel" src="/content/dam/hero-aem-website/in/rides-events-listing/filter-cross-icon.svg" data-target="'${filteredData}'">
                </div>`;
            $(filterClickedWrap).append(appendFilterListHtml);
          });

          if (window.innerWidth > 567 && $("#desktopClearWrap").length == 0) {
            $(".filter-title").append(`<div id="desktopClearWrap" class="filter-clear-wrap">
                    <div class="filter-item-heading">Clear All</div>
                </div>`);
          } else {
            $("#eventFilterModal .filter-clear-wrap").removeClass("d-none");
          }
        } else {
          $("#eventFilterModal .filter-clear-wrap").addClass("d-none");
        }
        if (window.innerWidth > 567) showMoreDesktop();
        else showMoreMobile();
        segregateEventsList(selectedFilters);
      }
    );

    // Return the values in Pascal Case
    function toTitleCase(str) {
      var lcStr = str.toLowerCase();
      return lcStr.replace(/(?:^|\s)\w/g, function (match) {
        return match.toUpperCase();
      });
    }

    // Show More/Less Toggle Functionality (Desktop)
    function showMoreDesktop() {
      const desktopFilterWrap = $("#rides-event-details .filter-content-section");
      $(".filter-content-section").removeClass(
        "filter-content-fixed-section filter-content-auto-section"
      );
      if ($(".filter-content-section").height() > 64 && $(".show-more-wrap").length == 0) {
        $(".filter-content-section").addClass("filter-content-fixed-section");
        const showMoreNode = `<div class="show-more-wrap">
                <div class="show-more-text">Show More</div>
                <img class="show-more-icon" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/blue-arrow-down.svg">
            </div>`;
        desktopFilterWrap.after(showMoreNode);
      } else if (
        $(".filter-content-section").height() > 64 &&
        $(".show-more-wrap").length > 0
      ) {
        $(".filter-content-section").addClass("filter-content-fixed-section");
        $(".show-more-text").html("Show More");
        $(".show-more-icon").removeClass("show-more-icon-rotate");
      } else {
        if ($(".show-more-wrap").length > 0) {
          $(".show-more-wrap").remove();
          $(".filter-content-section").removeClass("filter-content-fixed-section");
        }
      }
    }

    // Show More/Less Toggle Functionality (Mobile)
    function showMoreMobile() {
      const desktopFilterWrap = $("#rides-event-details .mob-filter-content-section");
      $(".mob-filter-content-section").removeClass(
        "filter-mob-content-fixed-section filter-mob-content-auto-section"
      );
      if ($(".mob-filter-content-section").height() > 24 && $(".show-more-wrap").length == 0) {
        $(".mob-filter-content-section").addClass("filter-mob-content-fixed-section");
        const showMoreNode = `<div class="show-more-wrap">
                <div class="show-more-text">Show More</div>
                <img class="show-more-icon" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/blue-arrow-down.svg">
            </div>`;
        desktopFilterWrap.after(showMoreNode);
      } else if (
        $(".mob-filter-content-section").height() > 24 &&
        $(".show-more-wrap").length > 0
      ) {
        $(".mob-filter-content-section").addClass("filter-mob-content-fixed-section");
        $(".show-more-text").html("Show More");
        $(".show-more-icon").removeClass("show-more-icon-rotate");
      } else {
        if ($(".show-more-wrap").length > 0) {
          $(".show-more-wrap").remove();
          $(".mob-filter-content-section").removeClass("filter-mob-content-fixed-section");
        }
      }
    }

    // Record Filter remove clicks on Individual Filter Cross icon
    $(document).on(
      "click",
      ".filter-content-section .filter-cancel, .mob-filter-content-section .filter-cancel",
      function (e) {
        const checkedValue = $(this).attr("data-target");
        $(`#rides-event-details input[value=${checkedValue}]`).prop("checked", false);
        if (
          $(".filter-content-section .filter-items-wrap").length == 1 ||
          $(".mob-filter-content-section .filter-items-wrap").length == 1
        ) {
          $(
            ".filter-content-section .filter-items-wrap, .filter-title .filter-clear-wrap, .mob-filter-content-section .filter-items-wrap"
          ).remove();
          $("#eventFilterModal .filter-clear-wrap").addClass("d-none");
        } else {
          $(this).parent().remove();
        }

        let selectedFilters = {};
        $("#rides-event-details input[type='checkbox']:checked").map(function (
          index,
          accorData
        ) {
          const filterAttribute = $(accorData).attr("filterTitle");
          if (Object.keys(selectedFilters).includes(filterAttribute)) {
            selectedFilters[filterAttribute].push($(accorData).val());
          } else {
            selectedFilters[filterAttribute] = [$(accorData).val()];
          }
          return $(accorData).val();
        });
        if (window.innerWidth > 567) showMoreDesktop();
        else showMoreMobile();
        segregateEventsList(selectedFilters);
      }
    );

    // Record Filter remove clicks on Clear All wrap
    $(document).on(
      "click",
      ".filter-title .filter-clear-wrap, #eventFilterModal .filter-clear-wrap",
      function (e) {
        const clearCheckedLists = $("#rides-event-details input[type='checkbox']:checked").map(
          function (index, accorData) {
            return $(accorData);
          }
        );
        if (clearCheckedLists?.length > 0) {
          clearCheckedLists?.map(function (clearedIndex, clearFilter) {
            $(`#rides-event-details input[value='${$(this).val()}']`).prop("checked", false);
            $(
              ".filter-content-section .filter-items-wrap, .filter-title .filter-clear-wrap, .mob-filter-content-section .filter-items-wrap"
            ).remove();
            $("#eventFilterModal .filter-clear-wrap").addClass("d-none");
          });
        }

        let selectedFilters = {};
        $("#rides-event-details input[type='checkbox']:checked").map(function (
          index,
          accorData
        ) {
          const filterAttribute = $(accorData).attr("filterTitle");
          if (Object.keys(selectedFilters).includes(filterAttribute)) {
            selectedFilters[filterAttribute].push($(accorData).val());
          } else {
            selectedFilters[filterAttribute] = [$(accorData).val()];
          }
          return $(accorData).val();
        });
        if (window.innerWidth > 567) showMoreDesktop();
        else showMoreMobile();
        segregateEventsList(selectedFilters);
      }
    );

    // Sort By Events Listing Default Select ALL
    $("#rides-event-details .campaign-dropdown li").eq(0).addClass("active");
    $(".sortby-mob-lists li").eq(0).addClass("active");

    // Sort By Events Listing Popup clicks (Desktop viewport)
    $("#rides-event-details .campaign-dropdown").on("click", "li", function () {
      $("#rides-event-details .campaign-dropdown li").removeClass("active");
      let sortBy = $(this).text().trim();
      $(this).addClass("active");
      $(".header-sortby .dropdown-toggle").html(
        sortBy +
          `<img class="sortby-drop-arrow" src="/content/dam/hero-aem-website/in/rides-events-listing/events-sortby-grey.svg">`
      );
      const strippedSort = sortBy == "All" ? sortBy : sortBy.substring(0, sortBy.indexOf(" "));
      $(".contents-card-wrap .event-fixture-heading").map(function (index, sortedData) {
        if (strippedSort == "All") {
          $(this).closest(".card-wrapper").removeClass("d-none");
        } else {
          if ($(sortedData).html() != strippedSort) {
            $(this).closest(".card-wrapper").addClass("d-none");
          } else {
            $(this).closest(".card-wrapper").removeClass("d-none");
          }
        }
      });
      const sortByEventsLists = $(".card-wrapper").not(".d-none");
      const sortEventLength = sortByEventsLists.length;
      if (sortEventLength === 0) {
        $(".events-listing-empty").removeClass("d-none");
      } else {
        $(".events-listing-empty").addClass("d-none");
      }
      $("#rides-event-details .events-count").html(
        sortByEventsLists?.length ? sortByEventsLists.length : "0"
      );
    });

    // Sort By Events Listing Popup clicks (Mobile viewport)
    $(".sortby-mob-lists li").on("click", function () {
      $(".sortby-mob-lists li").removeClass("active");
      $(this).addClass("active");
      const selectedLiVal = $(this).attr("data-value");
      const strippedSort =
        selectedLiVal == "All"
          ? selectedLiVal
          : selectedLiVal.substring(0, selectedLiVal.indexOf(" "));
      $(".contents-card-wrap .event-fixture-heading").map(function (index, sortedData) {
        if (strippedSort == "All") {
          $(this).closest(".card-wrapper").removeClass("d-none");
        } else {
          if ($(sortedData).html() != strippedSort) {
            $(this).closest(".card-wrapper").addClass("d-none");
          } else {
            $(this).closest(".card-wrapper").removeClass("d-none");
          }
        }
      });
      const sortByEventsLists = $(".card-wrapper").not(".d-none");
      const sortEventLength = sortByEventsLists.length;
      if (sortEventLength === 0) {
        $(".events-listing-empty").removeClass("d-none");
      } else {
        $(".events-listing-empty").addClass("d-none");
      }
      $("#rides-event-details .events-count").html(
        sortByEventsLists?.length ? sortByEventsLists.length : "0"
      );
      $("#sortByModal").modal("hide");
    });

    // Apply Filtered List to API for generating filtered events (Mobile Viewport)
    $(".filter-modal-apply").on("click", function () {
      $("#eventFilterModal").modal("hide");
    });

    // Get the List of Existing Filtered list if clicked Close Button (Mobile Viewport)
    $(".sticky-options-events #tab2").on("click", function () {
      checkMobFilters = $("#rides-event-details input[type='checkbox']:checked");
    });

    // Apply action of Existing Filtered Lists to override unapplied filtered list (Mobile Viewport)
    $(".filter-modal-close").on("click", function () {
      if (checkMobFilters?.length > 0) {
        let selectedFilters = {};
        $("#rides-event-details input[type='checkbox']:checked").map(function (
          index,
          accorData
        ) {
          $(this).prop("checked", false);
        });
        const checkedLists = checkMobFilters.map(function (index, accorData) {
          $(this).prop("checked", true);
          const filterAttribute = $(accorData).attr("filterTitle");
          if (Object.keys(selectedFilters).includes(filterAttribute)) {
            selectedFilters[filterAttribute].push($(accorData).val());
          } else {
            selectedFilters[filterAttribute] = [$(accorData).val()];
          }
          return $(accorData).val();
        });
        let filterClickedWrap = $("#rides-event-details .filter-content-section");
        if (window.innerWidth > 567) {
          filterClickedWrap = $("#rides-event-details .filter-content-section");
        } else {
          filterClickedWrap = $("#eventFilterModal .mob-filter-content-section");
        }
        $(
          ".filter-content-section .filter-items-wrap, .filter-title .filter-clear-wrap"
        ).remove();
        $("#eventFilterModal .filter-items-wrap").remove();
        if (checkedLists?.length > 0) {
          checkedLists?.map(function (innerIndex, filteredData) {
            const appendFilterListHtml = `<div class="filter-items-wrap">
                        <div class="filter-item-heading">${filteredData}</div>
                        <img class="filter-cancel" src="/content/dam/hero-aem-website/in/rides-events-listing/filter-cross-icon.svg" data-target="${filteredData}">
                    </div>`;
            $(filterClickedWrap).append(appendFilterListHtml);
          });

          if (window.innerWidth > 567) {
            $(filterClickedWrap).append(`<div class="filter-clear-wrap">
                        <div class="filter-item-heading">Clear All</div>
                        <img class="filter-clear-all" src="/content/dam/hero-aem-website/in/rides-events-listing/filter-blue-cross.svg">
                    </div>`);
          } else {
            $("#eventFilterModal .filter-clear-wrap").removeClass("d-none");
          }
        }
        segregateEventsList(selectedFilters);
      } else {
        $("#rides-event-details input[type='checkbox']:checked").map(function (
          index,
          accorData
        ) {
          $(this).prop("checked", false);
        });
        $(
          ".filter-content-section .filter-items-wrap, .filter-title .filter-clear-wrap"
        ).remove();
        $("#eventFilterModal .filter-items-wrap").remove();
        segregateEventsList({});
      }
      checkMobFilters = [];
    });

    // Default Filter Array Structuring Details
    function getAccordFilteredArray(mainArray, tempEventsLists, initialCall) {
      mainArray = [
        "CATEGORY",
        "LOCATION",
        "EVENT LEVEL",
        "TWO WHEELER",
        "EXPERIENCE",
        "PAID MEMBERSHIP",
      ];
      const accordianListingArray = [];
      let accordArray = [];
      mainArray.forEach(function (accordTitle, accordKey) {
        switch (accordTitle) {
          case "CATEGORY":
            let initCategoryObj = {
              accordName: "CATEGORY",
              accordRef: "category",
              accordLists: [],
            };
            const categoryLists = tempEventsLists.map(function (item, index) {
              return item["Category"];
            });
            const categoryOccur = categoryLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(categoryOccur).forEach(function (occuranceVal, occuranceKey) {
              const multipleValues = occuranceVal.split("/");
              multipleValues.forEach(function (splitVal, splitKey) {
                const identOccuranceObj = {
                  listName: splitVal,
                  listCount: categoryOccur[occuranceVal],
                };
                accordArray.push(splitVal);
                initCategoryObj.accordLists.push(identOccuranceObj);
              });
            });
            const uniqueCategory = initCategoryObj?.accordLists?.filter((obj, index) => {
              return index === initCategoryObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
            });
            initCategoryObj.accordLists = uniqueCategory;
            accordianListingArray.push(initCategoryObj);
            break;
          case "LOCATION":
            let initLocationObj = {
              accordName: "LOCATION",
              accordRef: "location",
              accordLists: [],
            };
            const locationLists = tempEventsLists.map(function (item, index) {
              return item["Location"];
            });
            const loationOccur = locationLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(loationOccur).forEach(function (occuranceVal, occuranceKey) {
              const identOccuranceObj = {
                listName: occuranceVal,
                listCount: loationOccur[occuranceVal],
              };
              accordArray.push(occuranceVal);
              initLocationObj.accordLists.push(identOccuranceObj);
            });
            const uniqueLocation = initLocationObj?.accordLists?.filter((obj, index) => {
              return index === initLocationObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
            });
            initLocationObj.accordLists = uniqueLocation;
            accordianListingArray.push(initLocationObj);
            break;
          case "EVENT LEVEL":
            let initLevelObj = {
              accordName: "EVENT LEVEL",
              accordRef: "eventlevel",
              accordLists: [],
            };
            const levelLists = tempEventsLists.map(function (item, index) {
              return item["Event Level"];
            });
            const levelOccur = levelLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(levelOccur).forEach(function (occuranceVal, occuranceKey) {
              const multipleValues = occuranceVal.split(",");
              multipleValues.forEach(function (splitVal, splitKey) {
                let matchRepeatedKey = 0;
                const checkRepeatedVal = initLevelObj.accordLists.filter(function (
                  repeatedVal,
                  repeatedKey
                ) {
                  matchRepeatedKey = repeatedKey;
                  return repeatedVal.listName == splitVal.trim();
                });
                if (checkRepeatedVal?.length > 0) {
                  initLevelObj.accordLists[matchRepeatedKey].listCount =
                    initLevelObj.accordLists[matchRepeatedKey].listCount +
                    levelOccur[occuranceVal];
                } else {
                  const identOccuranceObj = {
                    listName: splitVal.trim(),
                    listCount: levelOccur[occuranceVal],
                  };
                  accordArray.push(splitVal.trim());
                  initLevelObj.accordLists.push(identOccuranceObj);
                }
              });
            });
            const uniqueLevel = initLevelObj?.accordLists?.filter((obj, index) => {
              return index === initLevelObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
            });
            initLevelObj.accordLists = uniqueLevel;
            accordianListingArray.push(initLevelObj);
            break;
          case "TWO WHEELER":
            let initWheelerObj = {
              accordName: "TWO WHEELER",
              accordRef: "twowheeler",
              accordLists: [],
            };
            const wheelerLists = tempEventsLists.map(function (item, index) {
              return item["Two Wheeler"];
            });
            const wheelerOccur = wheelerLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(wheelerOccur).forEach(function (occuranceVal, occuranceKey) {
              const identOccuranceObj = {
                listName: occuranceVal,
                listCount: wheelerOccur[occuranceVal],
              };
              accordArray.push(occuranceVal);
              initWheelerObj.accordLists.push(identOccuranceObj);
            });
            const uniqueWheeler = initWheelerObj?.accordLists?.filter((obj, index) => {
              return index === initWheelerObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
            });
            initWheelerObj.accordLists = uniqueWheeler;
            accordianListingArray.push(initWheelerObj);
            break;
          case "EXPERIENCE":
            let initExpObj = {
              accordName: "Experience",
              accordRef: "experience",
              accordLists: [],
            };
            const expLists = tempEventsLists.map(function (item, index) {
              return item["Experience"];
            });
            const expOccur = expLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(expOccur).forEach(function (occuranceVal, occuranceKey) {
              const identOccuranceObj = {
                listName: occuranceVal,
                listCount: expOccur[occuranceVal],
              };
              accordArray.push(occuranceVal);
              initExpObj.accordLists.push(identOccuranceObj);
            });
            const uniqueExperience = initExpObj?.accordLists?.filter((obj, index) => {
              return index === initExpObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
            });
            initExpObj.accordLists = uniqueExperience;
            accordianListingArray.push(initExpObj);
            break;
          case "PAID MEMBERSHIP":
            let initMemberObj = {
              accordName: "Paid Membership",
              accordRef: "paidmembership",
              accordLists: [],
            };
            const membersLists = tempEventsLists.map(function (item, index) {
              return item["Paid Membership"];
            });
            const memberOccur = membersLists.reduce(function (acc, curr) {
              return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc;
            }, {});
            Object.keys(memberOccur).forEach(function (occuranceVal, occuranceKey) {
              const identOccuranceObj = {
                listName: occuranceVal,
                listCount: memberOccur[occuranceVal],
              };
              accordArray.push(occuranceVal);
              if (occuranceVal !== "undefined") {
                initMemberObj.accordLists.push(identOccuranceObj);
              }
            });
            if (initMemberObj.accordLists.length > 0) {
              const uniqueMembership = initMemberObj?.accordLists?.filter((obj, index) => {
                return index === initMemberObj?.accordLists?.findIndex(innerObj => obj.listName.toLowerCase() === innerObj.listName.toLowerCase());
              });
              initMemberObj.accordLists = uniqueMembership;
              accordianListingArray.push(initMemberObj);
            }
            break;
          default:
            break;
        }
      });
      !initialCall &&
        $(".events-list-checkbox").map(function (checkVal, checkKey) {
          const attrVal = $(checkKey).attr("value");
          $(checkKey).parent().removeClass("filter-opacity-out");
          $(checkKey).prop("disabled", false);
          if (!accordArray.includes(attrVal)) {
            $(checkKey).parent().addClass("filter-opacity-out");
            $(checkKey).prop("disabled", true);
          }
        });
      return accordianListingArray;
    }

    // Deep Nested Filtering Events within different accordian filter and intra filters
    function segregateEventsList(selectedFilters) {
      let finalEventsList = [];
      let categorySelected = false;

      Object.keys(aemNodesEvents.categories).forEach(function (nodesVal, nodesKey) {
        // Add Category Check Here
        const categoryVal = nodesVal.split("/");
        // Only If Category Selected
        if (
          selectedFilters?.CATEGORY &&
          selectedFilters.CATEGORY.some((r) => categoryVal.includes(r))
        ) {
          aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
            Object.keys(filterVal).forEach(function (locationVal, locationKey) {
              // Add Location Check Here
              if (
                selectedFilters?.LOCATION &&
                selectedFilters.LOCATION.includes(locationVal)
              ) {
                filterVal[locationVal].forEach(function (eventVal, eventKey) {
                  const selectedKeys = Object.keys(selectedFilters);
                  // delete selectedFilters['CATEGORY'];
                  categorySelected = true;
                  if (Object.keys(selectedFilters).length > 0) {
                    Object.keys(selectedFilters).forEach(function (newFilVal, newFilKey) {
                      if (selectedKeys.includes(newFilVal)) {
                        selectedFilters[newFilVal].forEach(function (
                          newEventVal,
                          newEventKey
                        ) {
                          if (newFilKey <= 1) {
                            if (
                              eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                newEventVal.toLowerCase() ||
                              eventVal[toTitleCase(newFilVal)]
                                .toLowerCase()
                                .includes(newEventVal.toLowerCase())
                            ) {
                              finalEventsList.push(eventVal);
                            }
                          } else {
                            if (
                              newEventKey == 0 &&
                              !(
                                eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                  newEventVal.toLowerCase() ||
                                eventVal[toTitleCase(newFilVal)]
                                  .toLowerCase()
                                  .includes(newEventVal.toLowerCase())
                              )
                            ) {
                              finalEventsList = finalEventsList.filter(function (eventItem) {
                                return (
                                  eventItem[toTitleCase(newFilVal)].toLowerCase() ==
                                  newEventVal.toLowerCase()
                                );
                              });
                            }
                          }
                        });
                      }
                    });
                  } else {
                    filterVal[locationVal].forEach(function (eventVal, eventKey) {
                      finalEventsList.push(eventVal);
                    });
                  }
                });
              }
            });
          });
        }

        if (
          selectedFilters?.CATEGORY &&
          selectedFilters.CATEGORY.some((r) => categoryVal.includes(r))
        ) {
          aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
            Object.keys(filterVal).forEach(function (locationVal, locationKey) {
              // Add Location Check Here
              if (!selectedFilters?.LOCATION) {
                filterVal[locationVal].forEach(function (eventVal, eventKey) {
                  const selectedKeys = Object.keys(selectedFilters);
                  // delete selectedFilters['CATEGORY'];
                  categorySelected = true;
                  if (Object.keys(selectedFilters).length > 0) {
                    Object.keys(selectedFilters).forEach(function (newFilVal, newFilKey) {
                      if (selectedKeys.includes(newFilVal)) {
                        selectedFilters[newFilVal].forEach(function (
                          newEventVal,
                          newEventKey
                        ) {
                          if (newFilKey == 0) {
                            if (
                              eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                newEventVal.toLowerCase() ||
                              eventVal[toTitleCase(newFilVal)]
                                .toLowerCase()
                                .includes(newEventVal.toLowerCase())
                            ) {
                              finalEventsList.push(eventVal);
                            }
                          } else {
                            if (
                              newEventKey == 0 &&
                              selectedFilters[newFilVal].length < 2 &&
                              !(
                                eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                  newEventVal.toLowerCase() ||
                                eventVal[toTitleCase(newFilVal)]
                                  .toLowerCase()
                                  .includes(newEventVal.toLowerCase())
                              )
                            ) {
                              finalEventsList = finalEventsList.filter(function (eventItem) {
                                return (
                                  eventItem[toTitleCase(newFilVal)].toLowerCase() ==
                                    newEventVal.toLowerCase() ||
                                  eventItem[toTitleCase(newFilVal)]
                                    .toLowerCase()
                                    .includes(newEventVal.toLowerCase())
                                );
                              });
                            }
                          }
                        });
                      }
                    });
                  } else {
                    filterVal[locationVal].forEach(function (eventVal, eventKey) {
                      finalEventsList.push(eventVal);
                    });
                  }
                });
              }
            });
          });
        }

        if (selectedFilters?.LOCATION && !selectedFilters?.CATEGORY) {
          aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
            Object.keys(filterVal).forEach(function (locationVal, locationKey) {
              // Add Location Check Here
              if (selectedFilters.LOCATION.includes(locationVal)) {
                filterVal[locationVal].forEach(function (eventVal, eventKey) {
                  const selectedKeys = Object.keys(selectedFilters);
                  // delete selectedFilters['CATEGORY'];
                  if (Object.keys(selectedFilters).length > 0) {
                    Object.keys(selectedFilters).forEach(function (newFilVal, newFilKey) {
                      if (selectedKeys.includes(newFilVal)) {
                        selectedFilters[newFilVal].forEach(function (
                          newEventVal,
                          newEventKey
                        ) {
                          if (newFilKey == 0) {
                            if (
                              eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                newEventVal.toLowerCase() ||
                              eventVal[toTitleCase(newFilVal)]
                                .toLowerCase()
                                .includes(newEventVal.toLowerCase())
                            ) {
                              finalEventsList.push(eventVal);
                            }
                          } else {
                            if (
                              newEventKey == 0 &&
                              !(
                                eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                  newEventVal.toLowerCase() ||
                                eventVal[toTitleCase(newFilVal)]
                                  .toLowerCase()
                                  .includes(newEventVal.toLowerCase())
                              )
                            ) {
                              finalEventsList = finalEventsList.filter(function (eventItem) {
                                return (
                                  eventItem[toTitleCase(newFilVal)].toLowerCase() ==
                                    newEventVal.toLowerCase() ||
                                  eventItem[toTitleCase(newFilVal)]
                                    .toLowerCase()
                                    .includes(newEventVal.toLowerCase())
                                );
                              });
                            }
                          }
                        });
                      }
                    });
                  } else {
                    filterVal[locationVal].forEach(function (eventVal, eventKey) {
                      finalEventsList.push(eventVal);
                    });
                  }
                });
              }
            });
          });
        }

        if (!selectedFilters?.LOCATION && !selectedFilters?.CATEGORY && !categorySelected) {
          aemNodesEvents.categories[nodesVal].forEach(function (filterVal, filterKey) {
            Object.keys(filterVal).forEach(function (locationVal, locationKey) {
              // Add Location Check Here
              filterVal[locationVal].forEach(function (eventVal, eventKey) {
                const selectedKeys = Object.keys(selectedFilters);
                if (Object.keys(selectedFilters).length > 0) {
                  Object.keys(selectedFilters).forEach(function (newFilVal, newFilKey) {
                    if (selectedKeys.includes(newFilVal)) {
                      selectedFilters[newFilVal].forEach(function (newEventVal, newEventKey) {
                        if (newFilKey == 0) {
                          if (
                            eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                              newEventVal.toLowerCase() ||
                            eventVal[toTitleCase(newFilVal)]
                              .toLowerCase()
                              .includes(newEventVal.toLowerCase())
                          ) {
                            finalEventsList.push(eventVal);
                          }
                        } else {
                          if (
                            newEventKey == 0 &&
                            !(
                              eventVal[toTitleCase(newFilVal)].toLowerCase() ==
                                newEventVal.toLowerCase() ||
                              eventVal[toTitleCase(newFilVal)]
                                .toLowerCase()
                                .includes(newEventVal.toLowerCase())
                            )
                          ) {
                            finalEventsList = finalEventsList.filter(function (eventItem) {
                              return (
                                eventItem[toTitleCase(newFilVal)].toLowerCase() ==
                                newEventVal.toLowerCase()
                              );
                            });
                          }
                        }
                      });
                    }
                  });
                } else {
                  filterVal[locationVal].forEach(function (eventVal, eventKey) {
                    finalEventsList.push(eventVal);
                  });
                }
              });
            });
          });
        }
      });

      finalEventsList = finalEventsList.map(JSON.stringify);
      const uniqueSet = new Set(finalEventsList);
      const uniqueArray = Array.from(uniqueSet).map(JSON.parse);

      $("#rides-event-details .card-wrapper").remove();
      eventsListingCreation(uniqueArray);
      getAccordFilteredArray([], uniqueArray);
    }

    // Sort the Events Automatically based on previous sort by selected value
    function automaticSorting() {
      let sortBy = $("#rides-event-details .dropdown-select.dropdown-toggle").text().trim();
      let selectedLiVal = $(".sortby-mob-lists li.active").attr("data-value");
      selectedLiVal = selectedLiVal ? selectedLiVal : "All";
      let strippedSort = "";
      if (window.innerWidth > 567) {
        strippedSort = sortBy == "All" ? sortBy : sortBy.substring(0, sortBy.indexOf(" "));
      } else {
        strippedSort =
          selectedLiVal == "All"
            ? selectedLiVal
            : selectedLiVal.substring(0, selectedLiVal.indexOf(" "));
      }
      $(".contents-card-wrap .event-fixture-heading").map(function (index, sortedData) {
        if (strippedSort == "All") {
          $(this).closest(".card-wrapper").removeClass("d-none");
        } else {
          if ($(sortedData).html() != strippedSort) {
            $(this).closest(".card-wrapper").addClass("d-none");
          } else {
            $(this).closest(".card-wrapper").removeClass("d-none");
          }
        }
      });

      const sortByEventsLists = $(".card-wrapper").not(".d-none");
      const sortEventLength = sortByEventsLists.length;
      const headerCountWrap = document.querySelector(".header-count-wrap");
      if (sortEventLength === 0) {
        $(".events-listing-empty").removeClass("d-none");
        headerCountWrap.lastChild.nodeValue = " EVENTS";
      } else if (sortEventLength === 1) {
        headerCountWrap.lastChild.nodeValue = " EVENT";
      } else {
        $(".events-listing-empty").addClass("d-none");
        headerCountWrap.lastChild.nodeValue = " EVENTS";
      }
      $("#rides-event-details .events-count").html(
        sortByEventsLists?.length ? sortByEventsLists.length : "0"
      );
    }

    // Show More/Less Wrap value and Arrow based on click of Toggle
    $(document).on("click", "#rides-event-details .show-more-wrap", function (e) {
      if ($(".show-more-text").html() == "Show More") {
        $(".show-more-text").html("Show Less");
        $(".filter-content-section").removeClass("filter-content-fixed-section");
        $(".filter-content-section").addClass("filter-content-auto-section");
        $(".mob-filter-content-section").removeClass("filter-mob-content-fixed-section");
        $(".mob-filter-content-section").addClass("filter-mob-content-auto-section");

        $(".show-more-icon").addClass("show-more-icon-rotate");
      } else {
        if ($(".show-more-text").html() == "Show Less") {
          $(".filter-content-section").removeClass("filter-content-auto-section");
          $(".filter-content-section").addClass("filter-content-fixed-section");
          $(".mob-filter-content-section").removeClass("filter-mob-content-auto-section");
          $(".mob-filter-content-section").addClass("filter-mob-content-fixed-section");
          $(".show-more-text").html("Show More");
          $(".show-more-icon").removeClass("show-more-icon-rotate");
        }
      }
    });
  }

  //optional parameter
  var url_string = window.location.href;
  var url = new URL(url_string);
  var categoryType = url.searchParams.get("category");
  if (categoryType != "") {
    $(".events-label-wrap .events-list-checkbox").each(function () {
      if ($(this).val() == "Tarmac" && categoryType == "Tarmac") $(this).trigger("click");

      if ($(this).val() == "Racing Culture" && categoryType == "RacingCulture")
        $(this).trigger("click");

      if ($(this).val() == "Adventure" && categoryType == "Adventure")
        $(this).trigger("click");

      if ($(this).val() == "Competition" && categoryType == "Competition")
        $(this).trigger("click");

      if ($(this).val() == "Expedition" && categoryType == "Expedition")
        $(this).trigger("click");

      if ($(this).val() == "Off Road" && categoryType == "OffRoad") $(this).trigger("click");
    });
    $(".header-sortby li").eq(1) && $(".header-sortby li").eq(1).trigger("click");
  }
});

$(document).ready(function () {

  $(window).scroll(addAnimationForIcons);

  let jsonObj = {};
  let accessoriesImageFolder = $("#accessories").data("accessoriesimages");
  const bikeImagePath = $("#accessories").data("accessoriesimagepath");
  let randomNo = `_${Math.floor(100000 + Math.random() * 900000)}`;
  if ($("#accessories").length > 0) {
    getData();
  }
  function getData() {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let base_url = defaultservlet + "/_jcr_content.accessories.json";
    $.ajax({
      url: base_url,
      type: "GET",
      data: { accessoriesPath: accessoriesImageFolder, random: randomNo },
      success: function (resp) {
        jsonObj = resp;
        if (typeof jsonObj != "object") {
          jsonObj = $.parseJSON(jsonObj);
        }
        let bikeType = [...new Set(jsonObj.map((item) => item.type))];
        let modBikeType = bikeType.filter(
          (item) =>
            !["all models", "all scooters", "all bikes", ""].includes(
              item.toLowerCase()
            )
        );
        generateDropDown(modBikeType, "bike-type-dropdown");
      },
      error: function () {},
    });
  }

  function generateDropDown(uniqueValues, dropdownId, selectedValue = null) {
    let listItems = uniqueValues.map((value) => {
      let activeClass = selectedValue && value == selectedValue ? "active" : "";
      return (
        '<li class="font-montserrat-regular font-weight-500 ' +
        activeClass +
        '"><a href="javascript:void(0)">' +
        value +
        "</a></li>"
      );
    });
    $("#" + dropdownId).html(listItems.join(""));
  }

  function generateModelDropdown(jsonObj, bikeType) {
    const allModelsType = bikeType == "BIKE" ? "all bikes" : "all scooters";
    if (bikeType) {
      $(".accessorie-items").addClass("d-none");
      let filteredModels = jsonObj.filter(
        (item) =>
          item.type === bikeType || item.type.toLowerCase() == allModelsType
      );
      let uniqueModels = [...new Set(filteredModels.map((item) => item.model))];
      let arrModels = [];
      for (let i = 0; i < uniqueModels.length; i++) {
        let a = uniqueModels[i].split(",");
        for (let j = 0; j < a.length; j++) {
          let finalModel = a[j].trim();
          arrModels.push(finalModel);
        }
      }
      //let modarrModels = arrModels.filter(item=>!['HF 100','HF DELUX'].includes(item));
      //arrModels = [...new Set(arrModels)]
      let uniqueArray = arrModels.filter(
        (item) =>
          ![
            "all bike model",
            "all models",
            "all scooters",
            "all bike models",
            "all scooter model",
          ].includes(item.toLowerCase())
      );
      const uniqueValues = uniqueArray.filter((item, index, arr) => {
        const lowercaseItem = item.toLowerCase();
        return (
          index === arr.findIndex((val) => val.toLowerCase() === lowercaseItem)
        );
      });
      generateDropDown(uniqueValues, "model-dropdown");
    }
  }

  function generateCategoryDropdown(jsonObj, bikeType, modelType) {
    if (bikeType && modelType) {
      $(".accessorie-items").addClass("d-none");
      let allModelType =
        bikeType.toLowerCase() == "bike" ? "all bike model" : "all scooters";
      let filteredModels = jsonObj.filter(
        (item) =>
          (item.type === bikeType && item.model === modelType) ||
          item.model.includes(modelType) ||
          item.model.toLowerCase() == allModelType ||
          item.type.toLowerCase() == "all models" ||
          item.model.toLowerCase() == "all bike models"
      );
      let uniqueModels = [
        ...new Set(filteredModels.map((item) => item.category)),
      ];
      const uniqueValues = uniqueModels.filter((item, index, arr) => {
        const lowercaseItem = item.toLowerCase();
        return (
          index === arr.findIndex((val) => val.toLowerCase() === lowercaseItem)
        );
      });
      generateDropDown(uniqueValues, "category-dropdown");
    }
  }

  $("#accessories--form-wrap .dropdown-menu").on("click", "li", function () {
    let selectionGroup = $(this).parents(".cust-drop-down");
    let button = selectionGroup.find(".dropdown-select");
    button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
    selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
    $(this).parents("ul").siblings(".btn-drop").addClass("active");
    $(this).addClass("active");
    if ("bike" === button.attr("name").toLowerCase()) {
      let bikeType = $(this).text();
      $('[name="bikeType"]').val($(this).text());
      // if (bikeType.toLowerCase() == 'bike') {
      //   $('.accessorie-items').removeClass('d-none');
      // } else {
      //   $('.accessorie-items').addClass('d-none');
      // }
      if ($('[name="model"]').hasClass("active")) {
        $('[name="model"]').removeClass("active");
        $('[name="model"]').text("Select Model");
      }
      if ($('[name="category"]').hasClass("active")) {
        $('[name="category"]').removeClass("active");
        $('[name="category"]').text("Select Category");
      }
      generateModelDropdown(jsonObj, bikeType);
      $('[name="model"]').prop("disabled", false);
      $('[name="category"]').prop("disabled", true);
    } else if ("model" === button.attr("name")) {
      modelType = $(this).text();
      $('[name="modelNameVal"]').val($(this).text());
      bikeType = $('[name="bikeType"]').val();
      if ($('[name="category"]').hasClass("active")) {
        $('[name="category"]').removeClass("active");
        $('[name="category"]').text("Select Category");
      }
      generateCategoryDropdown(jsonObj, bikeType, modelType);
      $('[name="category"]').prop("disabled", false);
    } else if ("category" === button.attr("name")) {
      generateBikeImage(jsonObj, modelType, bikeType);
    }
  });

  function generateBikeImage(jsonObj, bikeModel, bikeType) {
    const buttonTag = document.querySelector('button[name="category"]');
    const buttonValue = buttonTag.textContent.toLowerCase();

    let allModelType =
      bikeType.toLowerCase() == "bike" ? "all bike model" : "all scooters";
    const bikeImagepath =
      bikeImagePath +
      "/" +
      bikeModel.replaceAll(" ", "").toLowerCase() +
      ".jpg";
    $(".accessorie-items").empty();
    let bikeModels = jsonObj.filter(
      (item) =>
        item.category.toLowerCase() == buttonValue &&
        (item.model === bikeModel ||
          item.model.includes(bikeModel) ||
          item.model.toLowerCase() == allModelType ||
          item.type.toLowerCase() == "all models" ||
          item.model.toLowerCase() == "all bike models")
    );
    let bikeImage = [...new Set(bikeModels.map((item) => item.images))];
    $(".accessorie-items").removeClass("d-none");
    $("#accessories-bike-image").empty();
    if (bikeModels.length > 0) {
      for (let i = 0; i < bikeModels.length; i++) {
        $(".accessorie-items").prepend(
          '<div class="accessories-image-wrapper"><a href="' +
            bikeModels[i].eshop +
            '"><img id="theImg" class="accessorie-img" src="' +
            accessoriesImageFolder +
            "/" +
            bikeModels[i].images +
            '" /><p class="b1-text-std text-center">' +
            bikeModels[i].description +
            "</p></div>"
        );
      }
    }
    $("#accessories-bike-image").append(
      '<img class="bike-image" src="' + bikeImagepath + '"/>'
    );
  }
});
function addAnimationForIcons(){
  if($('.ride-event-text-image-container').length && !$('.ride-event-text-image-container.showAnimation').length){
    const IconStartingHt = $('.ride-event-text-image-container').offset().top;
    const IconContainerHt =  $('.ride-event-text-image-container').outerHeight();
    const windowHt = $(window).height();
    const scrollposition = $(this).scrollTop();
    console.log(scrollposition, IconStartingHt)
  
    if(scrollposition > (IconStartingHt + IconContainerHt*1.1 - windowHt)){
      // console.log((IconStartingHt + (IconContainerHt*.25) - windowHt)," - ",IconContainerHt , windowHt)
      $('.ride-event-text-image-container').addClass('showAnimation');
    }
  }
}

$(document).ready(function () {
  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }


  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }


  $(".event_register_footer .event_register_footer_action button").click(function (e) {
    if (window.digitalData) {
      window.digitalData.push({
        event: "linkClicked",
        web: {
          webInteraction: {
            name: "Register",
            URL: $(this).attr("href"),
            position: $("h2 span.h2-heading-std").text(),
          },
        },
        page: {
          pagename: title,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          country: "India",
          hostName: window.location.origin,
          previousPageValue: document.referrer,
          platform: getOS(),
          loggedIn: isSignedIn(),
          fullURL: window.location.href,
        },
      });
    }
  });
  $(document).ready(function () {
    $(".event-carousel").on("afterChange", function (ev, slick, current) {
      //const item_length = slick.slideCount - slick.options.slidesToShow
      const rem = slick.slideCount % 4;
      let total = current + rem;
      if (rem == 0) {
        total = current + 4;
      }
      if (slick.slideCount == total) {
        $(".event-carousel").slick("slickPause");
        setTimeout(() => {
          $(".event-carousel").slick("slickGoTo", 0);
          // $(".upcoming_event-carousel .slick-dots li:first-child").trigger('click');
          $(".event-carousel").slick("slickPlay");
          setTimeout(() => {
            $(".event-carousel").slick("refresh");
          }, $(".event-carousel").slick("slickGetOption", "speed"));
        }, 3000);
      }
    });

    $(".event-carousel").slick({
      dots: true,
      slidesToShow: 4,
      slidesToScroll: 4,
      arrows: false,
      autoplay: true,
      autoplaySpeed: 3000,
      infinite: false,
      responsive: [
        {
          breakpoint: 1100,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3,
          },
        },
        {
          breakpoint: 920,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2,
          },
        },
      ],
    });

    let eventDesktop = $(".event_detail").data("image-event-desktop");
    let eventMobile = $(".event_detail").data("image-event-mobile");
    let upcomingDesktop = $(".upcoming_event-layout").data("image-upcoming-desktop");
    let upcomingMobile = $(".upcoming_event-layout").data("image-upcoming-mobile");
    if ($(window).width() <= 768) {
      $(".event_detail").css(
        "background-image",
        `url(${
          eventMobile
            ? eventMobile
            : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/Event_timeline_bg.png"
        })`
      );
      $(".upcoming_event-layout").css(
        "background-image",
        `url(${
          upcomingMobile
            ? upcomingMobile
            : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/upcomingEventsBg.png"
        })`
      );
    } else {
      $(".event_detail").css(
        "background-image",
        `url(${
          eventDesktop
            ? eventDesktop
            : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/Event_timeline_bg.png"
        })`
      );
      $(".upcoming_event-layout").css(
        "background-image",
        `url(${
          upcomingDesktop
            ? upcomingDesktop
            : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/upcomingEventsBg.png"
        })`
      );
    }
    $(window).resize(function () {
      if ($(window).width() <= 768) {
        //mobile images
        //event timeline
        $(".event_detail").css(
          "background-image",
          `url(${
            eventMobile
              ? eventMobile
              : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/Event_timeline_bg.png"
          })`
        );
        //upcoming event
        $(".upcoming_event-layout").css(
          "background-image",
          `url(${
            upcomingMobile
              ? upcomingMobile
              : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/upcomingEventsBg.png"
          })`
        );
      } else {
        $(".event_detail").css(
          "background-image",
          `url(${
            eventDesktop
              ? eventDesktop
              : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/Event_timeline_bg.png"
          })`
        );
        $(".upcoming_event-layout").css(
          "background-image",
          `url(${
            upcomingDesktop
              ? upcomingDesktop
              : "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/upcomingEventsBg.png"
          })`
        );
      }
    });
  });

  $(document).ready(function () {
    $(".upcoming_event-carousel").on("afterChange", function (ev, slick, current) {
      const rem = slick.slideCount % 4;
      let total = current + rem;
      if (rem == 0) {
        total = current + 4;
      }
      //const item_length =  Math.round($(".upcoming_event_card ").length / 2 - 1);
      if (slick.slideCount == total) {
        $(".upcoming_event-carousel").slick("slickPause");
        setTimeout(() => {
          $(".upcoming_event-carousel").slick("slickGoTo", 0);
          $(".upcoming_event-carousel").slick("slickPlay");
          setTimeout(() => {
            $(".upcoming_event-carousel").slick("refresh");
          }, $(".upcoming_event-carousel").slick("slickGetOption", "speed"));
        }, 3000);
      }
    });

    $(".upcoming_event-carousel").slick({
      dots: true,
      slidesToShow: 4,
      slidesToScroll: 4,
      arrows: false,
      autoplay: true,
      autoplaySpeed: 3000,
      infinite: false,
      responsive: [
        {
          breakpoint: 1100,
          settings: {
            slidesToShow: 3,
            slidesToScroll: 3,
          },
        },
        {
          breakpoint: 920,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2,
          },
        },
      ],
    });
  });

  if ($(".event-carousel-mobile").length > 0) {
    const container = document.querySelector(".circular-container");
    const maskEl = document.querySelector(".circular-mask");
    const galleryEL = container.querySelector(".circular-gallery");
    const slides = galleryEL.querySelectorAll(".circular-slide");

    // let slideLength = slides.length + 1;
    // slides.forEach((ele, index) => {
    //   let data_index = slideLength + index;
    //   console.log(ele);
    //   let element = ` <div class="circular-slide circular-slide-cloned" data-index="${data_index}">
    //   <div class="circular-image">
    //     <img
    //       src="https://plus.unsplash.com/premium_photo-1669349127566-9be644ceac6e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8bnVtYmVyJTIwM3xlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=800&q=60"
    //     />
    //   </div>
    // </div>`;
    //   galleryEL.innerHTML += element;
    // });

    const transitionTime = 1000;
    const slidesLength = slides.length;
    const autoplay = true;
    const delayTime = 4000;

    var interval;
    var mylatesttap;
    var currentIndex = 0;
    var rotate = 0;

    createDot();
    const dots = document.getElementsByClassName("circular-dot");

    console.assert(slides.length === dots.length, "length mismatch");

    dots[currentIndex].classList.add("circular-active");
    container.style.setProperty("--t", `${transitionTime}ms`);

    autoplayFn();

    for (let i = 0; i < dots.length; i++) {
      let item = dots[i];
      item.addEventListener("click", dotClick);
    }

    maskEl.addEventListener("click", (e) => {
      const { top, left, width, height } = e.target.getBoundingClientRect();

      const x = e.clientX - left; //x position within the element.
      // const y = e.clientY - top; //y position within the element.

      if (x < width / 4) next();
      else if (x > (3 * width) / 4) prev();
    });

    function autoplayFn() {
      if (autoplay == true)
        interval = setInterval(() => {
          next();
        }, delayTime);
    }

    function createDot() {
      const dotsContainer = document.querySelector(".circular-dots");
      let html = "";
      for (let i = 0; i < slidesLength; i++) {
        html = html + `<li class="circular-dot"></li>`;
      }
      dotsContainer.innerHTML = html;
    }

    function dotClick(event) {
      const activeDot = document.querySelector(".circular-dot.circular-active");

      const index = Array.from(dots).indexOf(event.target);

      const prevIndex = Array.from(dots).indexOf(activeDot);

      activeDot.classList.remove("circular-active");

      // currentIndex = index;
      dots[index].classList.add("circular-active");

      if (index > prevIndex) {
        let count = index - prevIndex;

        if (count > 2) {
          container.style.setProperty("--t", `${100}ms`);
        }
        for (let i = 0; i < count; i++) {
          next();
        }
      } else {
        let count = prevIndex - index;

        if (count > 2) {
          container.style.setProperty("--t", `${100}ms`);
        }
        for (let i = 0; i < count; i++) {
          prev();
        }
      }
      setTimeout(() => {
        container.style.setProperty("--t", `${transitionTime}ms`);
      }, 50);
    }

    function next() {
      clearInterval(interval);
      const prev = (currentIndex + 2) % slidesLength;
      const next = (currentIndex - 2 + slidesLength) % slidesLength;
      const dummy = (currentIndex + 3) % slidesLength;

      const dummyEl = slides[dummy];
      const prevEl = slides[prev];
      const nextEl = slides[next];

      const prevElStyles = getComputedStyle(prevEl);
      const newRotate = prevElStyles.getPropertyValue("rotate");

      if (slidesLength >= 6) {
        dummyEl.style.display = "block";

        dummyEl.style.rotate = parseInt(newRotate) + 60 + "deg";

        nextEl.style.display = "none";
      } else if (slidesLength === 5) {
        dummyEl.style.rotate = parseInt(newRotate) + 60 + "deg";
      } else if (slidesLength == 4) {
        // const dummy = (currentIndex + 2) % slidesLength;
        // const dummyEl = slides[dummy];
        prevEl.style.rotate = parseInt(newRotate) - 120 + "deg";
      }

      currentIndex = (currentIndex + 1) % slidesLength;

      const activeDot = document.querySelector(".circular-dot.circular-active");

      activeDot.classList.remove("circular-active");

      // currentIndex = index;
      dots[currentIndex].classList.add("circular-active");

      rotate = rotate - 60;
      galleryEL.style.transform = `rotate(${rotate}deg)`;

      autoplayFn();
    }

    function prev() {
      clearInterval(interval);

      const prev = (currentIndex - 2 + slidesLength) % slidesLength;
      const next = (currentIndex + 2) % slidesLength;
      const dummy = (currentIndex - 3 + slidesLength) % slidesLength;

      const dummyEl = slides[dummy];
      const prevEl = slides[prev];
      const nextEl = slides[next];

      const prevElStyles = getComputedStyle(prevEl);
      const newRotate = prevElStyles.getPropertyValue("rotate");

      if (slidesLength >= 6) {
        dummyEl.style.display = "block";

        dummyEl.style.rotate = parseInt(newRotate) - 60 + "deg";

        nextEl.style.display = "none";
      } else if (slidesLength === 5) {
        dummyEl.style.rotate = parseInt(newRotate) - 60 + "deg";
      } else {
        dummyEl.style.rotate = parseInt(newRotate) - 120 + "deg";
      }

      currentIndex = (currentIndex - 1 + slidesLength) % slidesLength;

      const activeDot = document.querySelector(".circular-dot.circular-active");

      activeDot.classList.remove("circular-active");

      // currentIndex = index;
      dots[currentIndex].classList.add("circular-active");

      rotate = rotate + 60;

      // galleryEL.style. = `${rotate}deg`;
      galleryEL.style.transform = `rotate(${rotate}deg)`;


      autoplayFn();
    }
  }
  // Slick version 1.5.8
});

$(document).ready(function () {
  if ($(".upcoming_event-carousel-mobile").length > 0) {
    const container = document.querySelector(".circular-upcoming-container");
    const maskEl = document.querySelector(".circular-upcoming-mask");
    const galleryEL = container.querySelector(".circular-upcoming-gallery");
    const slides = galleryEL.querySelectorAll(".circular-upcoming-slide");

    const transitionTime = 1000;
    const slidesLength = slides.length;
    const autoplay = true;
    const delayTime = 4000;

    var interval;
    var mylatesttap;
    var currentIndex = 0;
    var rotate = 0;

    createDot();
    const dots = document.getElementsByClassName("circular-upcoming-dot");


    dots[currentIndex].classList.add("circular-upcoming-active");
    container.style.setProperty("--t", `${transitionTime}ms`);

    autoplayFn();

    for (let i = 0; i < dots.length; i++) {
      let item = dots[i];
      item.addEventListener("click", dotClick);
    }

    maskEl.addEventListener("click", (e) => {
      const { top, left, width, height } = e.target.getBoundingClientRect();

      const x = e.clientX - left; //x position within the element.
      // const y = e.clientY - top; //y position within the element.

      if (x < width / 4) next();
      else if (x > (3 * width) / 4) prev();
    });

    function autoplayFn() {
      if (autoplay == true)
        interval = setInterval(() => {
          next();
        }, delayTime);
    }

    function createDot() {
      const dotsContainer = document.querySelector(".circular-upcoming-dots");
      let html = "";
      for (let i = 0; i < slidesLength; i++) {
        html = html + `<li class="circular-upcoming-dot"></li>`;
      }
      dotsContainer.innerHTML = html;
    }

    function dotClick(event) {
      const activeDot = document.querySelector(".circular-upcoming-dot.circular-upcoming-active");

      const index = Array.from(dots).indexOf(event.target);

      const prevIndex = Array.from(dots).indexOf(activeDot);

      activeDot.classList.remove("circular-upcoming-active");

      // currentIndex = index;
      dots[index].classList.add("circular-upcoming-active");

      if (index > prevIndex) {
        let count = index - prevIndex;

        if (count > 2) {
          container.style.setProperty("--t", `${100}ms`);
        }
        for (let i = 0; i < count; i++) {
          next();
        }
      } else {
        let count = prevIndex - index;

        if (count > 2) {
          container.style.setProperty("--t", `${100}ms`);
        }
        for (let i = 0; i < count; i++) {
          prev();
        }
      }
      setTimeout(() => {
        container.style.setProperty("--t", `${transitionTime}ms`);
      }, 50);
    }

    function next() {
      clearInterval(interval);
      const prev = (currentIndex + 2) % slidesLength;
      const next = (currentIndex - 2 + slidesLength) % slidesLength;
      const dummy = (currentIndex + 3) % slidesLength;

      const dummyEl = slides[dummy];
      const prevEl = slides[prev];
      const nextEl = slides[next];

      const prevElStyles = getComputedStyle(prevEl);
      const newRotate = prevElStyles.getPropertyValue("rotate");

      if (slidesLength >= 6) {
        dummyEl.style.display = "block";

        dummyEl.style.rotate = parseInt(newRotate) + 60 + "deg";

        nextEl.style.display = "none";
      } else if (slidesLength === 5) {
        dummyEl.style.rotate = parseInt(newRotate) + 60 + "deg";
      } else if (slidesLength == 4) {
        // const dummy = (currentIndex + 2) % slidesLength;
        // const dummyEl = slides[dummy];
        prevEl.style.rotate = parseInt(newRotate) - 120 + "deg";
      }

      currentIndex = (currentIndex + 1) % slidesLength;

      const activeDot = document.querySelector(".circular-upcoming-dot.circular-upcoming-active");

      activeDot.classList.remove("circular-upcoming-active");

      // currentIndex = index;
      dots[currentIndex].classList.add("circular-upcoming-active");

      rotate = rotate - 60;
      galleryEL.style.transform = `rotate(${rotate}deg)`;

      autoplayFn();
    }

    function prev() {
      clearInterval(interval);

      const prev = (currentIndex - 2 + slidesLength) % slidesLength;
      const next = (currentIndex + 2) % slidesLength;
      const dummy = (currentIndex - 3 + slidesLength) % slidesLength;

      const dummyEl = slides[dummy];
      const prevEl = slides[prev];
      const nextEl = slides[next];

      const prevElStyles = getComputedStyle(prevEl);
      const newRotate = prevElStyles.getPropertyValue("rotate");

      if (slidesLength >= 6) {
        dummyEl.style.display = "block";

        dummyEl.style.rotate = parseInt(newRotate) - 60 + "deg";

        nextEl.style.display = "none";
      } else if (slidesLength === 5) {
        dummyEl.style.rotate = parseInt(newRotate) - 60 + "deg";
      } else {
        dummyEl.style.rotate = parseInt(newRotate) - 120 + "deg";
      }

      currentIndex = (currentIndex - 1 + slidesLength) % slidesLength;

      const activeDot = document.querySelector(".circular-upcoming-dot.circular-upcoming-active");

      activeDot.classList.remove("circular-upcoming-active");

      // currentIndex = index;
      dots[currentIndex].classList.add("circular-upcoming-active");

      rotate = rotate + 60;

      // galleryEL.style. = `${rotate}deg`;
      galleryEL.style.transform = `rotate(${rotate}deg)`;
      autoplayFn();
    }
  }
});

$(document).ready(function () {
    try {
        if ($('.company-menu-container').length) {
            initCompanyMenu();
        }
    } catch (error) {
        console.error(error);
    }
});

function initCompanyMenu() {
    let height = 60;
    const headerMain = document.querySelector('.header-main');
    const mainMenu = document.querySelector('.company-menu-desktop-view .main-menu');
    const sidenavDesktop = document.querySelector('.company-menu-desktop-view .sidenav-desktop');
    const sidenavMobile = document.querySelector('.company-menu-mobile-view .sidenav-mobile');

    function openNav() {
        if (sidenavDesktop) {
            sidenavDesktop.style.width = "290px";
            sidenavDesktop.style.height = `${(window.innerHeight - height)}px`;
            if (window.innerWidth < 768) {
                sidenavDesktop.style.width = "100%";
                sidenavDesktop.style.height = "100%";
            }
        }
    }
    function closeNav() {
        if (sidenavDesktop) {
            sidenavDesktop.style.width = "0";
            sidenavDesktop.style.height = "0";
        }
    }

    // calculate the header-main height
    if (headerMain) {
        height = headerMain.offsetHeight;
    }
    if (mainMenu) {
        mainMenu.style.top = `${height}px`;
        mainMenu.addEventListener("click", function () {
            openNav();
        });
    }
    if (sidenavDesktop) {
        sidenavDesktop.style.top = `${height}px`;
        const closeNavElement = sidenavDesktop.querySelector('.menu-container .close-icon-container img');
        if (closeNavElement) {
            closeNavElement.addEventListener("click", function () {
                closeNav();
            });
        }
    }
    if (sidenavMobile)
        sidenavMobile.style.top = `${height}px`;

    let currentPath = window.location.pathname;
    currentPath = currentPath.split(".")[0];

    const desktopAndMobile = [document.querySelectorAll(".company-menu-desktop-view .sidenav-desktop .single-menu"), document.querySelectorAll(".company-menu-mobile-view .sidenav-mobile .single-menu")].filter((item) => item !== undefined);
    let imgSrc = '';
    for (let b = 0; b < desktopAndMobile.length; b++) {
        for (let i = 0; i < desktopAndMobile[b].length; i++) {
            const forRed = desktopAndMobile[b][i].children[0].querySelector(".main-menu-outer > div");
            const forOpen = desktopAndMobile[b][i].children[1];
            const top = desktopAndMobile[b][i].children[0].querySelector(".main-menu-outer > span > a");
            let mainMenuTitle = String(top ? top.getAttribute('href') : "");
            mainMenuTitle = mainMenuTitle.replace(".html", "")
            if (mainMenuTitle !== "" && (currentPath.includes(mainMenuTitle) || mainMenuTitle.includes(currentPath))) {
                forRed.classList.add("active");
                forOpen.classList.remove("sub-menu");
                forOpen.classList.add("show");
                if (!imgSrc)
                    imgSrc = forRed.getAttribute("data-img-src");
                break;
            }

            const bottom = desktopAndMobile[b][i].children[1].querySelectorAll(".sub-menu-outer > span > a");
            for (let j = 0; j < bottom.length; j++) {
                let subMenuTitle = String(bottom && bottom[j] ? bottom[j].getAttribute("href") : "");
                subMenuTitle = subMenuTitle.replace(".html", "")
                if (subMenuTitle !== "" && (currentPath.includes(subMenuTitle) || subMenuTitle.includes(currentPath))) {
                    forRed.classList.add("active");
                    forOpen.classList.remove("sub-menu");
                    forOpen.classList.add("show");
                    if (!imgSrc)
                        imgSrc = forRed.getAttribute("data-img-src");
                    break;
                }
            }
            let linkElementList = desktopAndMobile[b][i].querySelectorAll('a');
            if (linkElementList && linkElementList.length) {
                linkElementList.forEach(linkElement => {
                    if (!linkElement.hasAttribute('data-toggle')) {
                        linkElement.addEventListener('click', function (e) {
                            closeNav();
                        });
                    }
                });
            }
        }
    }
    if (imgSrc) {
        const bgImage = document.querySelectorAll(".content-bg-top");
        for (let i = 0; i < bgImage.length; i++) {
            bgImage[i].style.backgroundImage = `url(${imgSrc})`;
        }
    }

    window.addEventListener('resize', function () {
        let height = 60;
        if (headerMain) {
            height = headerMain.offsetHeight;
        }
        if (mainMenu)
            mainMenu.style.top = `${height}px`;
        if (sidenavDesktop)
            sidenavDesktop.style.top = `${height}px`;
        if (sidenavMobile)
            sidenavMobile.style.top = `${height}px`;
    });
}
let isClicked = false;

const counterAnimation = function (element, value) {
    if (!element || element.length === 0 || !value) {
        return;
    }

    // pattern used to seperate input number from html into an array of numbers and non numbers. EX $65.3M -> ["$65.3M", "$", "65", ".", "3", "M"]
    const patt = /(\D+)?(\d+)(\D+)?(\d+)?(\D+)?/;
    const time = 500;
    let result = [...patt.exec(value)];
    let fresh = true;
    // Remove first full match from result array (we dont need the full match, just the individual match groups).
    result.shift();
    // Remove undefined values from result array where they didnt have a match in one of the optional regex groups
    result = result.filter(res => res != null);

    for (let res of result) {
        if (isNaN(res)) {
            element.empty();
            element.append(`<span>${res}</span>`);
        } else {
            const eleChildren = element.children();
            if (eleChildren.length === res.length) {
                if (res.length === 1) {
                    if ($(eleChildren[0]).attr('data-value')) {
                        $(eleChildren[0]).attr('data-value', res);
                    } else {
                        element.empty();
                        element.append(
                            `<span data-value="${res}">
                            ${Array(10)
                                .join(0)
                                .split(0)
                                .map(
                                    (x, j) => `
                                <span>${j}</span>
                            `
                                )
                                .join("")}
                        </span>`
                        );
                    }
                } else {
                    for (let i = 0; i < res.length; i++) {
                        $(eleChildren[i]).attr('data-value', res[i]);
                    }
                }
            } else {
                element.empty();
                for (let i = 0; i < res.length; i++) {
                    element.append(
                        `<span data-value="${res[i]}">
                        ${Array(10)
                            .join(0)
                            .split(0)
                            .map(
                                (x, j) => `
                            <span>${j}</span>
                        `
                            )
                            .join("")}
                    </span>`
                    );
                }
            }
        }
    }

    let activate = () => {
        const top = element[0].getBoundingClientRect().top;
        const offset = window.innerHeight * 0.8;

        setTimeout(() => {
            fresh = false;
        }, time);

        if (top < offset) {
            setTimeout(() => {
                element.find('span[data-value]').each(function (i, tick) {
                    const dist = parseInt($(tick).attr('data-value'));
                    $(tick).css('transform', `translateY(-${dist * 100}%)`);
                });
            }, fresh ? time : 0);
            window.removeEventListener("scroll", activate);
        }
    };
    window.addEventListener("scroll", activate);
    activate();
};

const cardAnimation = function (element, pos, dir = false) {
    if (!element || element.length === 0) {
        return;
    }

    const time = 500;
    let fresh = true;
    let posVal = 1;
    if (pos) {
        posVal = pos - 1;
    }

    let activate = () => {
        const top = element[0].getBoundingClientRect().top;
        const offset = window.innerHeight * 0.8;

        setTimeout(() => {
            fresh = false;
        }, time);

        if (top < offset) {
            setTimeout(() => {
                if (dir) {
                    element.find('.block--list-container').css('transform', `translateX(-${posVal * 100}%)`);
                } else {
                    element.find('.block--list-container').css('transform', `translateY(-${posVal * 100}%)`);
                }
            }, fresh ? time : 0);
            window.removeEventListener("scroll", activate);
        }
    };
    window.addEventListener("scroll", activate);
    activate();
};

const timelineAnimation = function (element, parent, pos, prevPos, yearNoElement) {
    if (!element || element.length === 0 || !parent) {
        return;
    }

    const screenWidth = parent[0].offsetWidth;
    const eleWidth = element[0].offsetWidth;
    const scrollWidth = parent[0].scrollWidth;
    const scrolledLeft = parent[0].getBoundingClientRect().left;
    const noOfCardVisiable = parseInt(screenWidth / eleWidth);
    const hiddenCardWidth = scrollWidth - screenWidth + scrolledLeft;
    const currentWidth = screenWidth - scrolledLeft;
    const currentRightPos = parseInt(currentWidth / eleWidth);
    const screenNoThreshold = screenWidth > 850 ? 2 : 1;
    let dpPos = 0;
    let dnPos = 0;

    if (pos > prevPos) {
        if(pos >= (currentRightPos - screenNoThreshold)) {
            const threshold = 2 * eleWidth;
            if (threshold < hiddenCardWidth) {
                dpPos = scrolledLeft - eleWidth;
                parent.css('transform', `translateX(${dpPos}px)`);
            }
            else {
                dpPos = scrolledLeft - hiddenCardWidth;
                parent.css('transform', `translateX(${dpPos}px)`);
            }
        }
    } else {
        if (scrolledLeft && pos < (currentRightPos - noOfCardVisiable)) {
            const threshold = -2 * eleWidth;
            if (threshold > scrolledLeft ) {
                dnPos = scrolledLeft + eleWidth;
                parent.css('transform', `translateX(${dnPos}px)`);
            }
            else {
                parent.css('transform', 'translateX(0px)');
            }
        }
    }

    if (screenWidth < 767) {
        let currentEleLeft = element[pos].getBoundingClientRect().left;
        let yearNoEleParentLeft = 0;
        if (currentEleLeft) {
            yearNoEleParentLeft = yearNoElement[0].parentElement.getBoundingClientRect().left;
            currentEleLeft = currentEleLeft - (2 * yearNoEleParentLeft) - 16;
        }
        if (currentEleLeft < 0) {
            currentEleLeft = 0;
        }
        yearNoElement.css('left', `${currentEleLeft}px`);
    } else {
        yearNoElement.css('left', `0px`);
    }
};

const getCurrentSlide = function (element) {
    if (!element || element.length === 0) {
        return -1;
    }

    let currentPos = 0;
    const dataIndex = element.filter('.milestone-active').attr('data-card-index');
    if (dataIndex !== undefined && parseInt(dataIndex) < element.length) {
        currentPos = parseInt(dataIndex);
    }

    return currentPos;
};

const changeActiveClass = function (blockList, parent, pos, checkPrevPos = false, arrowClicked = -1) {
    if (!blockList || !parent || isClicked) {
        return;
    }

    const time = 1000;
    let posVal = 0;
    let prevPosVal = 0;
    if (pos && pos <= blockList.dotBlockList.length) {
        posVal = pos - 1;
    }

    if (arrowClicked !== -1) {
        prevPosVal = getCurrentSlide(blockList.dotBlockList);

        if (arrowClicked === 0 && prevPosVal !== 0) { // left arrow clicked
            posVal = prevPosVal - 1;
        }
        else if (arrowClicked === 1 && prevPosVal < blockList.dotBlockList.length - 1) { // right arrow clicked
            posVal = prevPosVal + 1;
        } else {
            return;
        }
    }

    if (checkPrevPos) {
        prevPosVal = getCurrentSlide(blockList.dotBlockList);
    }
    isClicked = true;

    const yearNo = $(blockList.imageBlockList[posVal]).find('.block--year').text();
    const yearNoElement = $(parent).find('.block--card-section > .block--year-no');
    const descriptionText = $(blockList.descBlockList[posVal]).find('.block--card-content').html();
    const imgCaptionHeading = $(blockList.imageBlockList[posVal]).find('.block--card-image-heading').text();
    const imgCaptionDescription = $(blockList.imageBlockList[posVal]).find('.block--card-image-description').text();
    const imgTextElement = $(parent).find('.block--card-section > .block--image-container > .block--image-card > .block--image-content');
    const descriptionElement = $(parent).find('.block--company-milestone > .block--card-content');
    const leftArrowElement = $(parent).find('.arrow-container > .left-arrow');
    const rightArrowElement = $(parent).find('.arrow-container > .right-arrow');
    if (yearNo) {
        counterAnimation(yearNoElement, yearNo);
    }

    const dotParentElement = $(parent).find('.block--company-milestone > .block--years-section > .block--years-container');
    timelineAnimation(blockList.dotBlockList, dotParentElement, posVal, prevPosVal, yearNoElement);

    setTimeout(function () {
        if (imgCaptionHeading) {
            imgTextElement.attr('heading', imgCaptionHeading);
        } else {
            imgTextElement.attr('heading', '');
        }
        if (imgCaptionDescription) {
            imgTextElement.attr('description', imgCaptionDescription);
        } else {
            imgTextElement.attr('description', '');
        }
        descriptionElement.html(descriptionText);
        isClicked = false;
    }, 1500);

    const imageContainer = $(parent).find('.block--image-container');
    const cardContainer = $(parent).find('.block--card-container');
    cardAnimation(imageContainer, (posVal + 1), true);
    cardAnimation(cardContainer, (posVal + 1), false);

    setTimeout(function () {
        $(blockList.imageBlockList[prevPosVal]).removeClass('milestone-active');
        $(blockList.imageBlockList[posVal]).addClass('milestone-active');
        if (prevPosVal !== 0) {
            $(blockList.imageBlockList[prevPosVal - 1]).removeClass('pre-active');
        }
        if (posVal !== 0) {
            $(blockList.imageBlockList[posVal - 1]).addClass('pre-active');
        }
        $(blockList.descBlockList[prevPosVal]).removeClass('milestone-active');
        $(blockList.descBlockList[posVal]).addClass('milestone-active');
        $(blockList.dotBlockList[prevPosVal]).removeClass('milestone-active').find('.dot').attr('tabindex', '0');
        $(blockList.dotBlockList[posVal]).addClass('milestone-active').find('.dot').attr('tabindex', '-1');
        if (posVal === 0) {
            leftArrowElement.addClass("disabled");
        } else {
            leftArrowElement.removeClass("disabled");
        }
        if (posVal === (blockList.dotBlockList.length - 1)) {
            rightArrowElement.addClass("disabled");
        } else {
            rightArrowElement.removeClass("disabled");
        }
    }, time);

};

$(document).ready(function () {
    $('.section--company-milestone').each(function (a, cmpMilestoneEle) {
        const imageBlockList = $(cmpMilestoneEle).find('.block--card-section > .block--image-container > .block--image-card > .block--list-container > .block--list');
        const descBlockList = $(cmpMilestoneEle).find('.block--card-section > .block--card-container > .block--list-container > .block--list');
        const dotBlockList = $(cmpMilestoneEle).find('.block--company-milestone > .block--years-section > .block--years-container > .block--card-dot');

        if (dotBlockList.length > 6) {
            $(cmpMilestoneEle).find('.block--company-milestone > .block--years-section').addClass('block-section-years');
        }

        const blockList = { imageBlockList, descBlockList, dotBlockList };
        changeActiveClass(blockList, cmpMilestoneEle, 1, false);

        // arrow container
        $(cmpMilestoneEle).find('.arrow-container').each(function (b, arrowContainer) {
            $(arrowContainer).children().on('click', function (e) {
                if ($(e.currentTarget).hasClass('left-arrow')) {
                    changeActiveClass(blockList, cmpMilestoneEle, 0, false, 0);
                }
                else if ($(e.currentTarget).hasClass('right-arrow')) {
                    changeActiveClass(blockList, cmpMilestoneEle, 0, false, 1);
                }
            });
        });

        // dot container
        dotBlockList.each(function (b, blockCardDot) {
            $(blockCardDot).find('.dot').on('click', function (e) {
                if (!$(blockCardDot).hasClass('milestone-active')) {
                    e.preventDefault();
                    let pos = $(blockCardDot).attr('data-card-index');
                    if (pos !== undefined && parseInt(pos) < dotBlockList.length) {
                        pos = parseInt(pos) + 1;
                        changeActiveClass(blockList, cmpMilestoneEle, pos, true);
                    }
                }
            });
        });
    });
});


$(document).ready(function () {
    $('.company-architect-of-our-impact .read-link').on('click', function () {
        const title = $(this).data('title');
        const description = $(this).data('description');
        const role = $(this).data('role');
        const img = $(this).data('img');
        const alt = $(this).data('alt');
        $('.company-architect-of-our-impact .popup-title').text(title);
        $('.company-architect-of-our-impact .popup-card-role').text(role);
        $('.company-architect-of-our-impact .popup-description').html(description);
        $('.company-architect-of-our-impact .popup-img-container-architect img').attr('src', img);
        $('.company-architect-of-our-impact .popup-img-container-architect img').attr('alt', alt);
        $('.company-architect-of-our-impact .popup').css('display', 'flex');
        if (img) {
            $('.company-architect-of-our-impact .popup-img-container-architect img').css('display', 'block');
        } else {
            $('.company-architect-of-our-impact .popup-img-container-architect img').css('display', 'none');
        }
        document.documentElement.classList.add('overflow-y-hidden');
    });

    $('.company-architect-of-our-impact .close-btn').on('click', function () {
        document.documentElement.classList.remove('overflow-y-hidden');
        $('.company-architect-of-our-impact .popup').fadeOut();
    });
});
$(document).ready(function () {
    try {
        if ($(".investor-calendar-section").length) {
            investorCalendarEvents();
        }
    } catch (err) {
        console.error(err);
    }

    function investorCalendarEvents() {
        $(".investor-calendar-section").each(function (idx, cmpInvCalEventEle) {
            const searchPath = $(cmpInvCalEventEle).attr("data-search-path");
            if (!searchPath) {
                return;
            }
            const resourcePath = $(cmpInvCalEventEle).attr("data-resource-path");
            const categoryData = $(cmpInvCalEventEle).attr("data-category-set");
            const searchYear = $(cmpInvCalEventEle).attr("data-search-year") ? $(cmpInvCalEventEle).attr("data-search-year") : "";
            const dataToShow = $(cmpInvCalEventEle).attr("data-show-count") ? $(cmpInvCalEventEle).attr("data-show-count") : "-1";
            let reqLink = `${resourcePath}.companyreportspolicies.json?searchRootPath=${searchPath}&searchTags=${categoryData}&searchYear=${searchYear}&resultsPerPage=${dataToShow}`;
            $.ajax({
                type: "GET",
                url: reqLink,
                dataType: "JSON",
                success: function (resp) {
                    if (resp) {
                        populateInvestorCalendarData(cmpInvCalEventEle, resp, categoryData);
                    }
                },
                error: function (err) {
                    console.error(err);
                },
            });
        });
    }

    function populateInvestorCalendarData(cmpInvCalEventEle, resp, dataAttribute) {
        const data = resp[dataAttribute];
        if (data.length) {
            const wrapperElement = $(cmpInvCalEventEle).find(".investor-calendar-wrapper .investor-calendar-field-wrapper");
            wrapperElement.empty();
            data.forEach((item) => {
                const element = `<div class="investor-calendar-field">
                    <h5>${item.tileTitle}</h5>
                    <div class="divider"></div>
                    <div class="investor-calendar-location">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 25 25" fill="none">
                        <path d="M13 6.58203C10.5147 6.58203 8.5 8.7035 8.5 11.3204C8.5 15.3992 11.5654 18.4873 12.6361 19.4416C12.8462 19.6288 13.1538 19.6288 13.3639 19.4416C14.4346 18.4873 17.5 15.3992 17.5 11.3204C17.5 8.7035 15.4853 6.58203 13 6.58203ZM13 14.3576C11.4071 14.3576 10.1158 12.9979 10.1158 11.3204C10.1158 9.64304 11.4071 8.28331 13 8.28331C14.5929 8.28331 15.8843 9.64319 15.8843 11.3204C15.8843 12.9977 14.593 14.3576 13 14.3576Z" fill="white"></path>
                        </svg>
                        <div>
                            <p>${item.venue}</p>
                        </div>
                    </div>
                </div>`;
                wrapperElement.append(element);
            });
        }
    }
});
$(document).ready(function () {
    const appendingList = $('.company-leadership-team .popup-inner-content .social-icon-items');
    $(appendingList).empty();
    $('.company-leadership-team .leadership-card').on('click', function () {
        const leadershipSocialList = $(this).find('.social-icon-empty-content').children();
        const appendingList = $('.company-leadership-team .popup-inner-content .social-icon-items');
        let leadershipSocialListCount = $(leadershipSocialList).length;
        const title = $(this).data('title');
        const description = $(this).data('description');
        const role = $(this).data('role');
        const img = $(this).data('img');
        const alt = $(this).data('alt');
        $(appendingList).empty();

        for (let i = 0; i < leadershipSocialListCount; i++) {
            // Create the item HTML structure
            const itemHTML = `
          <div class="single-item">
            <a href="">
              <img src="" alt="contactIcon">
            </a>
          </div>
        `;
            $(appendingList).append(itemHTML);       
        }
        $('.company-leadership-team .popup-title').text(title);
        $('.company-leadership-team .popup-card-role').text(role);
        $('.company-leadership-team .popup-description').html(description);
        $('.company-leadership-team .popup-img-container img').attr('src', img);
        $('.company-leadership-team .popup-img-container img').attr('alt', alt);
        $('.company-leadership-team .popup').css('display', 'flex');
        if (img) {
            $('.company-leadership-team .popup-img-container img').css('display', 'block');
        } else {
            $('.company-leadership-team .popup-img-container img').css('display', 'none');
        }

        $('.company-leadership-team .social-icon-empty-content .single-item').each(function(index) {
            const icon = $(this).data('icon');
            const redirect = $(this).data('redirect');
            $('.company-leadership-team .popup .icon-container .single-item').eq(index).children().attr('href', redirect);
            $('.company-leadership-team .popup-inner-content .icon-container .single-item').eq(index).find('img').attr('src', icon);
          });
        document.documentElement.classList.add('overflow-y-hidden');
    });

    $('.company-leadership-team .close-btn').on('click', function () {
        document.documentElement.classList.remove('overflow-y-hidden');
        $('.company-leadership-team .popup').fadeOut();
    });
});
$(document).ready(function () {
  if ($(".initiative-tabs").length) {
    let currvideo;
    let currvideoMob;
    let tempButton;
    let tempButtonMob;
    let childButtonList;
    let childButtonListMob;

    $(".initiative-tabs").each((index, tabElement) => {
      $(tabElement).find(".initiative-card").on("click", function () {
        const title = $(this).data("popuptitle");
        const description = $(this).data("description");
        const role = $(this).data("role");
        // Desktop
        const slickarrowPrev = $(tabElement).find(".initiative-indicator-wrapper .previous");
        const slickarrowNext = $(tabElement).find(".initiative-indicator-wrapper .next");
        const slickPrevPath = $(tabElement).find(".initiative-indicator-wrapper .previous svg");
        const slickNextPath = $(tabElement).find(".initiative-indicator-wrapper .next svg");

        let initiativePointer = 0;
        $(slickarrowNext).prop("disabled", false);
        $(slickNextPath).removeClass("disabled");
        $(slickarrowPrev).prop("disabled", true);
        $(slickPrevPath).addClass("disabled");
        // Mobile
        const slickarrowPrevMob = $(tabElement).find(".initiative-indicator-wrapper-mob .previous");
        const slickarrowNextMob = $(tabElement).find(".initiative-indicator-wrapper-mob .next");
        const slickPrevPathMob = $(tabElement).find(
          ".initiative-indicator-wrapper-mob .previous svg"
        );
        const slickNextPathMob = $(tabElement).find(".initiative-indicator-wrapper-mob .next svg");
        let initiativePointerMob = 0;
        $(slickarrowNextMob).prop("disabled", false);
        $(slickNextPathMob).removeClass("disabled");
        $(slickarrowPrevMob).prop("disabled", true);
        $(slickPrevPathMob).addClass("disabled");
        $(tabElement).find(".popup-title").text(title);
        $(tabElement).find(".popup-card-role").text(role);
        $(tabElement).find(".popup-description").html(description);
        $(tabElement).find(".popup").css("display", "flex");
        $(this)
          .children()
          .each(function (index, child) {
            var classAttribute = $(child).attr("class");
            if ($(child).hasClass("initiative-image-container")) {
              var grandchildren = $(child).find("> div > div");
              var elementsArray = grandchildren.toArray();
              let temp;
              $(tabElement).find(".popup-wrapper .popup-img-container").empty();
              $(tabElement).find(
                ".popup-wrapper-mob .popup-img-container-mob"
              ).empty();

              elementsArray.forEach((e, index) => {
                if (index == 0) {
                  temp =
                    "<div class='initiative-tabpopup-image popup-active'>" +
                    $(e).html() +
                    "</div>";
                } else {
                  temp =
                    "<div class='initiative-tabpopup-image'>" +
                    $(e).html() +
                    "</div>";
                }
                $(tabElement).find(".popup-wrapper .popup-img-container").append(
                  temp
                );
              });
              elementsArray.forEach((e, index) => {
                if (index == 0) {
                  temp =
                    "<div class='initiative-tabpopup-image-mob popup-active-mob'>" +
                    $(e).html() +
                    "</div>";
                } else {
                  temp =
                    "<div class='initiative-tabpopup-image-mob'>" +
                    $(e).html() +
                    "</div>";
                }
                $(tabElement).find(
                  ".popup-wrapper-mob .popup-img-container-mob"
                ).append(temp);
              });
              const initiativeDots = $(tabElement).find(
                ".initiative-carousel-indicators > .slick-dots-initiative"
              );
              const initiativeDotsMob = $(tabElement).find(
                ".initiative-carousel-indicators-mob > .slick-dots-initiative-mob"
              );
              initiativeDots.empty();
              initiativeDotsMob.empty();

              $(tabElement).find(".popup-wrapper .play-button-container").each(function (i, button) {
                $(button).on('click', (e) => {
                  e.preventDefault()
                  const buttonParent = $(this).closest('.initiative-tabpopup-image')
                  const videoTag = buttonParent.find('video')
                  if (videoTag.length) {
                    videoTag[0].muted = !videoTag[0].muted;
                  }
                })
              })
              $(tabElement).find(".popup-wrapper-mob .play-button-container").each(function (i, button) {
                $(button).on('click', (e) => {
                  e.preventDefault()
                  const buttonParent = $(this).closest('.initiative-tabpopup-image-mob')
                  const videoTag = buttonParent.find('video')
                  if (videoTag.length) {
                    videoTag[0].muted = !videoTag[0].muted;
                  }
                })
              })


              if (elementsArray.length > 1) {
                $(slickarrowNext).css("display", "block");
                $(slickarrowPrev).css("display", "block");
                $(slickarrowNextMob).css("display", "block");
                $(slickarrowPrevMob).css("display", "block");

                for (let i = 0; i < elementsArray.length; i++) {
                  let tempDots;
                  if (i == 0) {
                    tempDots =
                      "<li role='presentation' class='slick-active' style='display: block;'><button type='button' role='tab'></button></li>";
                  } else {
                    tempDots =
                      "<li role='presentation' style='display: block;'><button type='button' role='tab'></button></li>";
                  }
                  initiativeDots.append(tempDots);
                }
                for (let i = 0; i < elementsArray.length; i++) {
                  let tempDots;
                  if (i == 0) {
                    tempDots =
                      "<li role='presentation' class='slick-active-mob' style='display: block;'><button type='button' role='tab'></button></li>";
                  } else {
                    tempDots =
                      "<li role='presentation' style='display: block;'><button type='button' role='tab'></button></li>";
                  }
                  initiativeDotsMob.append(tempDots);
                }
                if (initiativeDots) {
                  initiativeDots.children().each((i, indicators) => {
                    $(indicators).click(function (e) {
                      e.preventDefault();
                      updateInitiativeTabs(i);
                    });
                  });
                  initiativeDotsMob.children().each((i, indicators) => {
                    $(indicators).click(function (e) {
                      e.preventDefault();
                      updateInitiativeTabsMob(i);
                    });
                  });
                }
                if ($(slickarrowPrev)) {
                  $(slickarrowPrev).click(function (e) {
                    e.preventDefault();
                    initiativePointer--;
                    updateInitiativeTabs(initiativePointer);
                  });
                  $(slickarrowPrev).prop("disabled", true);
                }
                if ($(slickarrowNext)) {
                  $(slickarrowNext).click(function (e) {
                    e.preventDefault();
                    initiativePointer++;
                    updateInitiativeTabs(initiativePointer);
                  });
                }
                if ($(slickarrowPrevMob)) {
                  $(slickarrowPrevMob).click(function (e) {
                    e.preventDefault();
                    initiativePointerMob--;
                    updateInitiativeTabsMob(initiativePointerMob);
                  });
                  $(slickarrowPrevMob).prop("disabled", true);
                }
                if ($(slickarrowNextMob)) {
                  $(slickarrowNextMob).click(function (e) {
                    e.preventDefault();
                    initiativePointerMob++;
                    updateInitiativeTabsMob(initiativePointerMob);
                  });
                }
              } else {
                $(slickarrowNext).css("display", "none");
                $(slickarrowPrev).css("display", "none");
                $(slickarrowNextMob).css("display", "none");
                $(slickarrowPrevMob).css("display", "none");
              }
            }
          });

        //0th index video
        const temp = $(tabElement).find(
          ".initiative-tabpopup-image.popup-active video"
        ).toArray();
        if (temp.length > 0) {
          currvideo = temp[0]
        }

        //0th index video mobile
        const tempMob = $(tabElement).find(
          ".initiative-tabpopup-image-mob.popup-active-mob video"
        ).toArray();
        if (tempMob.length > 0) {
          currvideoMob = tempMob[0]
        }

        //0th index buttons toggle
        tempButton = $(tabElement).find(
          ".initiative-tabpopup-image.popup-active .play-button-container"
        ).toArray();
        if (tempButton.length > 0) {

          let childButton = $(tempButton).find('button')
          if (childButton) {

            $(childButton[0]).on('click', () => {
              // $(childButton[1]).show()
              $(childButton[1]).css('display', 'grid');
              $(childButton[0]).css('display', 'none');
            })
            $(childButton[1]).on('click', () => {
              // $(childButton[0]).show()
              $(childButton[0]).css('display', 'grid');
              $(childButton[1]).css('display', 'none');
            })


          }

        }

        //0th index Mob buttons toggle
        tempButtonMob = $(tabElement).find(
          ".initiative-tabpopup-image-mob.popup-active-mob .play-button-container"
        ).toArray();
        if (tempButtonMob.length > 0) {
          let childButton = $(tempButtonMob).find('button')
          if (childButton) {
            $(childButton[0]).on('click', () => {
              // $(childButton[1]).show()
              $(childButton[1]).css('display', 'grid');
              $(childButton[0]).css('display', 'none');
            })
            $(childButton[1]).on('click', () => {
              // $(childButton[0]).show()
              $(childButton[0]).css('display', 'grid');
              $(childButton[1]).css('display', 'none');
            })
          }
        }


        const updateInitiativeTabs = (index) => {
          if (currvideo) {
            $(currvideo).prop('muted', true)

          }
          if (childButtonList) {
            $(childButtonList[0]).css('display', 'grid');
            $(childButtonList[1]).css('display', 'none');
          }

          const popupImgList = $(tabElement).find(
            ".initiative-tabpopup-image"
          ).toArray();
          const indicatorListActive = $(tabElement).find(
            ".slick-dots-initiative > li"
          ).toArray();
          let imgLen = popupImgList.length;
          if (index < imgLen && index >= 0) {
            popupImgList.forEach((popupElement, i) => {
              if (index == i) {
                $(popupElement).addClass("popup-active");
                $(indicatorListActive[index]).addClass("slick-active");

                if ($(popupElement).find('video').length > 0) {
                  currvideo = $(popupElement).find('video');
                  currvideo = currvideo[0];
                } else {
                  currvideo = null;
                }

              } else {
                $(popupElement).removeClass("popup-active");
                $(indicatorListActive[i]).removeClass("slick-active");
              }
            });
            $(tabElement).find(".initiative-tabpopup-image video").each((i, vid) => {
              vid.pause();
            })
            $(tabElement).find(".initiative-tabpopup-image-mob video").each((i, vid) => {
              vid.pause();
            })

            if (currvideo) {
              currvideo.play();
            }



          }
          let buttonContainer = $(tabElement).find(".initiative-tabpopup-image.popup-active .play-button-container").toArray()
          if (buttonContainer.length > 0) {
            buttonContainer = buttonContainer[0]

            childButtonList = $(buttonContainer).find('button')


            if (childButtonList) {

              $(childButtonList[0]).on('click', () => {
                // $(childButtonList[1]).show()
                $(childButtonList[1]).css('display', 'grid');
                $(childButtonList[0]).css('display', 'none');
              })
              $(childButtonList[1]).on('click', () => {
                // $(childButtonList[0]).show()
                $(childButtonList[0]).css('display', 'grid');
                $(childButtonList[1]).css('display', 'none');
              })


            }

          } else {
            childButtonList = null;

          }

          if (index <= 0) {
            $(slickarrowPrev).prop("disabled", true);
            $(slickPrevPath).addClass("disabled");
          } else {
            $(slickarrowPrev).prop("disabled", false);
            $(slickPrevPath).removeClass("disabled");
          }
          if (index >= imgLen - 1) {
            $(slickarrowNext).prop("disabled", true);
            $(slickNextPath).addClass("disabled");
          } else {
            $(slickarrowNext).prop("disabled", false);
            $(slickNextPath).removeClass("disabled");
          }
          initiativePointer = index;
        };


        const updateInitiativeTabsMob = (index) => {
          if (childButtonListMob) {
            $(childButtonListMob[0]).css('display', 'grid');
            $(childButtonListMob[1]).css('display', 'none');
          }
          const popupImgList = $(tabElement).find(
            ".initiative-tabpopup-image-mob"
          ).toArray();
          const indicatorListActive = $(tabElement).find(
            ".slick-dots-initiative-mob > li"
          ).toArray();
          let imgLen = popupImgList.length;
          if (index < imgLen && index >= 0) {
            popupImgList.forEach((popupElement, i) => {
              if (index == i) {
                $(popupElement).addClass("popup-active-mob");
                $(indicatorListActive[index]).addClass("slick-active-mob");

                if ($(popupElement).find('video').length > 0) {
                  currvideoMob = $(popupElement).find('video');
                  currvideoMob = currvideoMob[0];
                } else {
                  currvideoMob = null;
                }


              } else {
                $(popupElement).removeClass("popup-active-mob");
                $(indicatorListActive[i]).removeClass("slick-active-mob");
              }
            });
            $(tabElement).find(".initiative-tabpopup-image-mob video").each((i, vid) => {
              vid.pause();
            })
            $(tabElement).find(".initiative-tabpopup-image video").each((i, vid) => {
              vid.pause();
            })
            if (currvideoMob) {
              currvideoMob.play();
            }
          }


          let buttonContainer = $(tabElement).find(".initiative-tabpopup-image-mob.popup-active-mob .play-button-container").toArray()
          if (buttonContainer.length > 0) {
            buttonContainer = buttonContainer[0]
            childButtonListMob = $(buttonContainer).find('button')
            if (childButtonListMob) {
              $(childButtonListMob[0]).on('click', () => {
                // $(childButtonListMob[1]).show()
                $(childButtonListMob[1]).css('display', 'grid');
                $(childButtonListMob[0]).css('display', 'none');
              })
              $(childButtonListMob[1]).on('click', () => {
                // $(childButtonListMob[0]).show()
                $(childButtonListMob[0]).css('display', 'grid');
                $(childButtonListMob[1]).css('display', 'none');
              })
            }
          } else {
            childButtonListMob = null;

          }


          if (index <= 0) {
            $(slickarrowPrevMob).prop("disabled", true);
            $(slickPrevPathMob).addClass("disabled");
          } else {
            $(slickarrowPrevMob).prop("disabled", false);
            $(slickPrevPathMob).removeClass("disabled");
          }
          if (index >= imgLen - 1) {
            $(slickarrowNextMob).prop("disabled", true);
            $(slickNextPathMob).addClass("disabled");
          } else {
            $(slickarrowNextMob).prop("disabled", false);
            $(slickNextPathMob).removeClass("disabled");
          }
          initiativePointer = index;
          initiativePointerMob = index;
        };
        document.documentElement.classList.add("overflow-y-hidden");
      });

      $(tabElement).find(".close-btn").on("click", function () {
        if (currvideo) {
          currvideo.pause();
          currvideo = null;
        }
        if (currvideoMob) {
          currvideoMob.pause();
          currvideoMob = null;
        }
        document.documentElement.classList.remove("overflow-y-hidden");
        $(tabElement).find(".popup").fadeOut();
      });
    })
  }
});

$(document).ready(function () {

    function createCarouselCard(response, parentElement, detailsPageLink) {
        if (response && response.length) {
            $(parentElement).empty();
            response.forEach(function (item) {
                let isOpenNewTab = item.openInNewTab == "true" ? true : false;
                let redirectLink = "#";
                const imagePath = item.articlePageImagePath ? item.articlePageImagePath : item.tileImagePath;
                if (item.pdfPath) {
                    redirectLink = item.pdfPath;
                } else {
                    redirectLink = item.fragmentPath.split("/").pop();
                    redirectLink = detailsPageLink ? `${detailsPageLink}.${redirectLink}.html` : "#";
                }
                const cardEle = `<div class="company-update-carousel-item">
                    <div class="company-update-carousel-content">
                        <h4 class="company-carousel-heading">${item.tileTitle}</h4>
                        <p class="company-carousel-description">${item.externalArticlePublisher}</p>
                        <p class="company-carousel-dates">${item.articleDate}</p>
                    </div>
                    <div class="company-update-carousel-image-container">
                        <div class="company-carousel-image-inner">
                            <a href="${redirectLink}" ${isOpenNewTab ? 'target="_blank"' : ""}>
                                <img src="${imagePath}" alt="card image"
                                    loading="lazy" />
                            </a>
                        </div>
                    </div>
                </div>`;

                $(parentElement).append(cardEle);
            });
        }
    }

    const initcarouselUpdate = function () {
        $('.section--company-update-carousel').each(function (inde, cmpUpdateCarouselElement) {
            const carouselContainerElement = $(cmpUpdateCarouselElement).find('.company-update-carousel-outer-container .company-update-carousel-container');
            const carouselIndicatorsElement = $(cmpUpdateCarouselElement).find('.company-update-carousel-outer-container .company-update-carousel-indicators');
            const carouselDotIndicatorsElement = carouselIndicatorsElement.find('.company-update-carousel-dot-indicators');
            const carouselArrowIndicatorsElement = carouselIndicatorsElement.find('.company-update-carousel-arrow-indicators');
            const detailsPageLink = $(cmpUpdateCarouselElement).find(".block--article-details-path").attr("href");
            const resourcePath = $(cmpUpdateCarouselElement).attr("data-resource-path");
            const searchPath = $(cmpUpdateCarouselElement).attr("data-search-path");
            const categorySet = $(cmpUpdateCarouselElement).attr("data-category-set");
            const dataToShow = $(cmpUpdateCarouselElement).attr("data-show-count") ? $(cmpUpdateCarouselElement).attr("data-show-count") : "-1";
            let reqLink = `${resourcePath}.companyarticlesearch.json`;
            let delayTime = $(cmpUpdateCarouselElement).data('delay');

            if (!delayTime) {
                delayTime = 3000;
            }

            const carouselImageSettings = {
                infinite: true,
                autoplay: true,
                dots: true,
                arrows: true,
                adaptiveHeight: false,
                variableWidth: true,
                draggable: false,
                slidesToShow: 2,
                slidesToScroll: 1,
                autoplaySpeed: delayTime,
                speed: 280,
                width: "100%",
                prevArrow: `<button type='button' class='slick-prev'><i><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"><path d="M17 22.5L8 12L17 1.5" stroke="#FF0000" stroke-width="3"/></svg></i></button>`,
                nextArrow: `<button type='button' class='slick-next'><i><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"><path d="M7 22.5L16 12L7 1.5" stroke="#FF0000" stroke-width="3"/></svg></i></button>`,
                appendArrows: carouselArrowIndicatorsElement,
                dotsClass: "carousel-indicators",
                appendDots: carouselDotIndicatorsElement,
                responsive: [
                    {
                        breakpoint: 767,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1,
                            draggable: true,
                            adaptiveHeight: true,
                            arrows: false,
                            variableWidth: false,
                            infinite: false,
                            autoplay: false
                        }
                    }
                ]
            };

            function setEventOnCarousel(carouselContainerEle) {
                carouselContainerEle.on(
                    "beforeChange",
                    function (event, slick, currentSlide, nextSlide) {
                        if (currentSlide === (slick.slideCount - 1) && nextSlide === 0) {
                            carouselContainerEle.addClass('right-transition-animation');
                        } else if (nextSlide === (slick.slideCount - 1) && currentSlide === 0) {
                            carouselContainerEle.removeClass('right-transition-animation');
                        }
                        else if (currentSlide < nextSlide) {
                            carouselContainerEle.addClass('right-transition-animation');
                        } else {
                            carouselContainerEle.removeClass('right-transition-animation');
                        }
                    }
                );
            }

            if (searchPath) {
                reqLink = `${reqLink}?searchRootPath=${searchPath}&searchTags=${categorySet}&resultsPerPage=${dataToShow}`;
                $.ajax({
                    type: "GET",
                    url: reqLink,
                    dataType: "JSON",
                    success: function (resp) {
                        const results = resp ? resp.filter((item) => item.moreMatchesExist == undefined) : [];
                        if (results && results.length) {
                            createCarouselCard(results, carouselContainerElement, detailsPageLink);
                            carouselContainerElement.slick(carouselImageSettings);
                            setEventOnCarousel(carouselContainerElement);
                        }
                    },
                    error: function (err) {
                        console.error(err);
                    },
                });
            } else {
                carouselContainerElement.slick(carouselImageSettings);
                setEventOnCarousel(carouselContainerElement);
            }
        });
    };

    const intCSRNewsroom = function () {
        function init() {
            const newsroomContainer = document.querySelectorAll(".section--company-csr-update-carousel .csr-newsroom");

            if (newsroomContainer && newsroomContainer.length) {
                newsroomContainer.forEach((container) => {
                    if (container) {
                        const newsroomImgBG = container.querySelector(".csr-newsroom-img")
                        const desktopImg = container.getAttribute("desktop-img");
                        const mobileImg = container.getAttribute("mobile-img");
                        if (window.innerWidth >= 600) {
                            if (desktopImg) {
                                newsroomImgBG.style.backgroundImage = `url('${desktopImg}')`;
                            }
                        } else {
                            if (mobileImg) {
                                newsroomImgBG.style.backgroundImage = `url('${mobileImg}')`;
                            } else if (desktopImg) {
                                newsroomImgBG.style.backgroundImage = `url('${desktopImg}')`;
                            }
                        }
                    }
                })

            }
        }

        window.onresize = init;
        init()
    }

    try {
        if ($('.section--company-update-carousel').length) {
            initcarouselUpdate();
        }
        if ($('.section--company-csr-update-carousel').length) {
            intCSRNewsroom();
        }
    } catch (err) {
        console.log(err);
    }
});

$(document).ready(function () {
    const progressElement =  $('.impact-created-wrappper .progressbar');
    let impactAutoplaySpeed = $('.impact-created-wrappper').data("delay");

    if (!impactAutoplaySpeed) {
      impactAutoplaySpeed = 3000;
    }

    $(progressElement).css({
        'transition': 'all ' + impactAutoplaySpeed + 'ms linear',
        'background': '#f00'
    });

    $('.impact-created-wrappper').each(function (a, cmpImpactCreatedElement) {
        const cmpImpactCreatedListContainer = $(cmpImpactCreatedElement).find('.carousel-slides');
        const imageSlickSettings = {
          infinite: true,
          fade: true,
          autoplay: true,
          prevArrow: $(cmpImpactCreatedElement).find('.womens-indicator-wrapper .previous'),
          nextArrow: $(cmpImpactCreatedElement).find('.womens-indicator-wrapper .next'),
          autoplaySpeed: impactAutoplaySpeed,
          pauseOnHover: false,
          dots: true,
          arrows: true,
          adaptiveHeight: true,
          slidesToShow: 1,
          slidesToScroll: 1,
          appendDots: $(cmpImpactCreatedElement).find('.womens-indicator-wrapper .indicator-position'),
          width: "100%",
          responsive: [
            {
              breakpoint: 767,
              settings: {
                draggable: true, 
                variableWidth: false,
                infinite: false,
                fade:false,
                autoplay:false,
                arrows: false,
                slidesToShow: 1,
                slidesToScroll: 1,
              }
            }
          ]
        };
    
        cmpImpactCreatedListContainer.slick(imageSlickSettings);
      });
});

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$("#company-global-footprint").length) {
            return;
        }
        initGlobalFootprint();
    } catch (error) {
        console.error(error);
    }
});

function initGlobalFootprint() {

    let elementSelected;
    let isPopoverOpen = false;
    const cities = {
        'location-a': [1043, 118],
        'location-b': [1060, 122],
        'location-c': [1115, 123],
        'location-d': [1091, 188],
        'location-e': [834, 41.92], //blue
        'location-f': [1044, 166] //blue
    };
    const dataPoints = []

    const zoomableImageGlobalFootprint = document.getElementById('global-footprint-map');
    const allImageDots = document.querySelectorAll('#main-map-container .map-container .dots > img');
    const mapContainer = document.querySelector('#main-map-container .map-container');
    const globalFootprintCursor = document.querySelector('.global-footprint-cursor');
    let baseImageWidth = 1200;
    let baseImageHeight = 668;
    const cropping = 0;//882;

    let globalFootprintZoom = 1;

    const globalFootprintPopover = document.querySelector("#main-map-container .map-container .global-footprint-popover");
    const globalFootprintPopoverMobile = document.querySelector("#main-map-container .global-footprint-popover-mobile");
    const globalFootprintPopoverTitle = document.querySelector("#main-map-container .map-container .global-footprint-popover .global-footprint-popover-title");
    const globalFootprintPopoverDescription = document.querySelector("#main-map-container .map-container .global-footprint-popover-description");
    const popoverMain = document.querySelector(".global-footprint-popover .main-menu-outer");
    const labelContainer = document.querySelector(".label-outer-container");
    const zoomContainer = document.querySelector('#company-global-footprint #main-map-container .global-footprint-zoom-container');
    const halfPopover = 278 / 2;
    const mobileScreen = 767;

    function getPosition(transformString) {
        // Use a regular expression to extract values
        const regex = /translate3d\(([^,]+),([^,]+),([^,]+)\)/;
        const matches = transformString.match(regex);

        if (matches) {
            // Extracted values
            const xPosition = parseFloat(matches[1]);
            const yPosition = parseFloat(matches[2]);
            const zPosition = parseFloat(matches[3]);

            return [xPosition, yPosition, zPosition];
        } else {
            return []
        }
    }

    function movePopover(element) {
        const position = getPosition(element.style.transform);
        const popoverMobile = globalFootprintPopoverMobile.querySelector(".main-menu-outer");
        if (element && element.getAttribute("global-footprint-class") === "main-menu-outer") {
            popoverMain.classList.remove("main-menu-outer-blue");
            popoverMobile.classList.remove("main-menu-outer-blue");
        } else {
            popoverMain.classList.add(element.getAttribute("global-footprint-class"));
            popoverMobile.classList.add(element.getAttribute("global-footprint-class"));
        }
        if (position.length) {

            let left;

            const [xPosition, yPosition] = position;
            globalFootprintCursor.style.display = "block";
            globalFootprintCursor.style.transform = `translate3d(${xPosition - 20}px, ${(yPosition - 8)}px, 0px)`;


            // spliting screen horizontally into left and right
            if (xPosition <= (zoomableImageGlobalFootprint.getBoundingClientRect().width / 2)) {
                // is in left
                if (xPosition < halfPopover) {
                    left = halfPopover;
                } else {
                    left = xPosition;
                }

            } else if (xPosition > (zoomableImageGlobalFootprint.getBoundingClientRect().width / 2)) {
                // is in right
                if ((zoomableImageGlobalFootprint.getBoundingClientRect().width - xPosition) < halfPopover) {
                    left = zoomableImageGlobalFootprint.getBoundingClientRect().width - halfPopover - 20;
                } else {
                    left = xPosition;
                }
            }

            const title = element.getAttribute("data-popover-title");
            const description = element.getAttribute("data-popover-description");

            if (window.innerWidth <= mobileScreen) {
                if (globalFootprintPopoverMobile) {
                    const globalFootprintPopoverTitleMobile = globalFootprintPopoverMobile.querySelector(".global-footprint-popover-title");
                    const globalFootprintPopoverDescriptionMobile = globalFootprintPopoverMobile.querySelector(".global-footprint-popover-description");

                    globalFootprintPopoverTitleMobile.innerHTML = title;
                    globalFootprintPopoverDescriptionMobile.innerHTML = description;
                    if (zoomableImageGlobalFootprint.offsetHeight < 500) {
                        globalFootprintPopoverMobile.style.top = yPosition + 200 + "px";
                    } else {
                        globalFootprintPopoverMobile.style.top = "430px";
                    }
                    globalFootprintPopoverMobile.style.display = "block";
                    globalFootprintPopover.style.display = "none";
                }

            } else {
                globalFootprintPopover.style.transform = `translate3d(${left}px, ${(yPosition + 100)}px, 0px)`;
                // reading value to show in the popover
                globalFootprintPopoverTitle.innerHTML = title;
                globalFootprintPopoverDescription.innerHTML = description;

                globalFootprintPopover.style.display = "block";
                globalFootprintPopoverMobile.style.display = "none";
            }
        }
    }

    function init(globalFootprintZoom) {
        const [wRatio, hRatio] = [(zoomableImageGlobalFootprint.getBoundingClientRect().width) / baseImageWidth, parseFloat(`${(zoomableImageGlobalFootprint.offsetHeight * globalFootprintZoom) / baseImageHeight}`).toFixed(2)];
        allImageDots.forEach((element, index) => {
            element.style.transform = `translate3d(${(((window.innerWidth <= mobileScreen ? dataPoints[index].points[0] - cropping : dataPoints[index].points[0]) * wRatio))}px, ${(dataPoints[index].points[1] * hRatio)}px, 0px)`;
        })
        if (isPopoverOpen) {
            movePopover(elementSelected);
        }
    }

    function cropImage() {
        if (window.innerWidth <= mobileScreen) {
            if (labelContainer && zoomContainer) {
                zoomContainer.style.marginTop = `${labelContainer.offsetHeight}px`;
            }
        }
    }

    zoomableImageGlobalFootprint.addEventListener('click', function (event) {
        globalFootprintPopoverMobile.style.display = "none";
        globalFootprintPopover.style.display = "none";
        globalFootprintCursor.style.display = "none";
        isPopoverOpen = false;
    });

    const zoomInBtn = document.querySelector('#company-global-footprint #main-map-container .global-footprint-zoom-container .zoom-in-btn');
    if (zoomInBtn) {
        zoomInBtn.addEventListener('click', function () {
            if (globalFootprintZoom < 5) {
                globalFootprintZoom += 0.1;
                zoomableImageGlobalFootprint.style.transform = `scale(${globalFootprintZoom})`;
                if (window.innerWidth <= mobileScreen) {
                    mapContainer.style.height = `${zoomableImageGlobalFootprint.offsetHeight * globalFootprintZoom}px`;
                } else {
                    mapContainer.style.height = 'auto';
                }
                init(globalFootprintZoom);
            }
        })
    }

    const zoomOutBtn = document.querySelector('#company-global-footprint #main-map-container .global-footprint-zoom-container  .zoom-out-btn');
    if (zoomOutBtn) {
        zoomOutBtn.addEventListener('click', function () {
            if (globalFootprintZoom > 1) {
                globalFootprintZoom -= 0.1;
                zoomableImageGlobalFootprint.style.transform = `scale(${globalFootprintZoom})`;
                if (window.innerWidth <= mobileScreen) {
                    mapContainer.style.height = `${zoomableImageGlobalFootprint.offsetHeight * globalFootprintZoom}px`;
                } else {
                    mapContainer.style.height = 'auto';
                }
                init(globalFootprintZoom)
            }
        })
    }

    allImageDots.forEach(function (element) {
        element.addEventListener('click', function (event) {
            elementSelected = element;
            isPopoverOpen = true;
            movePopover(element);
        });
        const otherLocation = element.getAttribute("data-other-location");
        if (otherLocation) {
            dataPoints.push({ points: [...otherLocation.replaceAll(" ", "").split(",").map((item) => +item)] })
        } else {
            const city = element.getAttribute("data-location");
            dataPoints.push({ points: cities[city] })
        }
    });

    function startFlow() {
        if (window.innerWidth <= mobileScreen) {
            globalFootprintZoom = 3;
            zoomableImageGlobalFootprint.style.transform = `scale(${globalFootprintZoom})`;

            init(globalFootprintZoom);
            mapContainer.style.height = `${zoomableImageGlobalFootprint.offsetHeight * globalFootprintZoom}px`;
            const rightEdgePosition = mapContainer.scrollWidth - mapContainer.clientWidth;
            mapContainer.scrollLeft = rightEdgePosition;
        } else {
            globalFootprintZoom = 1;
            zoomableImageGlobalFootprint.style.transform = `scale(${globalFootprintZoom})`;
            mapContainer.style.height = 'auto';
            init(globalFootprintZoom);
        }
    }

    window.addEventListener('resize', function () {
        cropImage();
        startFlow();
    });
    // init
    cropImage();
    startFlow();
}


$(document).ready(function () {
  if (
    document.querySelector(".block-company-manufacturing-facilities") &&
    document.querySelector(".block-company-manufacturing-facilities").children
      .length > 0
  ) {
    if ($(window).width() < 767) {
      $(".block-company-manufacturing-facilities .facilities-card-container").slick({
        autoplay: false,
        dots: true,
        slidesToShow: 1.37,
        infinite: false,
        arrows: false,
      });
    }
  }
});

$(document).ready(function () {
  const carouselSettings = {
    autoplay: false,
    infinite: false,
    arrows: false,
    dots: true,
    slidesToShow: 1,
    slidesToScroll: 1,
    width: "100%",
    dotsClass: "carousel-indicators",
    responsive: [
      {
        breakpoint: 9999,
        settings: "unslick"
      },
      {
        breakpoint: 767,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      }
    ]
  }

  $('.block-company-innovation').each(function (inde, cmpInnovationElement) {
    const facBanEle = $(cmpInnovationElement).closest('.facilities-banner');
    if (!(facBanEle && facBanEle.length)) {
      $(cmpInnovationElement).find('.card-container').slick(carouselSettings);
    }
  });

  const isInViewport = function (element) {
    if (!element) {
      return false;
    }

    const elementTop = $(element).offset().top;
    const elementBottom = elementTop + $(element).outerHeight();
    const viewportTop = $(window).scrollTop();
    const viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
  };

  $(window).on('resize scroll', function () {
    $('video').each(function (ind, videosCustElement) {
      if (videosCustElement && videosCustElement.hasAttribute('autoplay')) {
        if (videosCustElement.offsetHeight > 0 && isInViewport(videosCustElement)) {
          videosCustElement.play();
        } else {
          videosCustElement.pause();
        }
      }
    });
  });
});

$(document).ready(function () {
  try {
    initInventorsHeroGarden()
  } catch (error) {
    console.log(error);
  }
})

function initInventorsHeroGarden() {
  $(".investor-hero-garden-content").each(function (a, cmpInvHeroGardenElement) {
    const gardenText = $(cmpInvHeroGardenElement).find(".content-paragraph").html();
    const showText = gardenText.slice(0, 200) + "...";
    const cmpContentWrapper = $(cmpInvHeroGardenElement).find(".content-wrapper");
    const cmpReadMore = $(cmpInvHeroGardenElement).find(".readMore");
    const cmpReadLess = $(cmpInvHeroGardenElement).find(".readLess");

    if (cmpReadMore.length) {
      cmpContentWrapper.html(showText);
    } else {
      cmpContentWrapper.html(gardenText);
    }

    $(window).on('resize', function () {
      if ($(this).width() > 767) {
        cmpReadMore.css("display", "none");
        cmpReadLess.css("display", "none");
      } else {
        toggleGardenText(false);
      }
    })

    const toggleGardenText = (toggleGarden) => {
      if (toggleGarden) {
        cmpContentWrapper.html(gardenText);
        cmpReadMore.css("display", "none");
        cmpReadLess.css("display", "block");
      } else {
        cmpContentWrapper.html(showText);
        cmpReadMore.css("display", "block");
        cmpReadLess.css("display", "none");
      }
    }

    cmpReadMore.on("click", function (e) {
      toggleGardenText(true);
    });
    cmpReadLess.on("click", function (e) {
      toggleGardenText(false);
    });
  });
}


$(document).ready(function () {
  const imageSlickSettings = {
      infinite: false,
      autoplay: false,
      dots: true,
      arrows: false,
      slidesToShow: 1,
      slidesToScroll: 1,
      width: "100%",
      dotsClass: "carousel-indicators",
      responsive: [
          {
              breakpoint: 9999,
              settings: "unslick"
          },
          {
              breakpoint: 767,
              settings: {
                  slidesToShow: 1,
                  slidesToScroll: 1,
                  variableWidth:true
              }
          }
      ]
  };


  $('.investors-explore-cards .explore-images').slick(imageSlickSettings, 1000);
  
});


$(document).ready(function () {
  const imageSlickSettings = {
      infinite: false,
      autoplay: false,
      dots: true,
      arrows: false,
      slidesToShow: 1,
      slidesToScroll: 1,
      width: "100%",
      dotsClass: "carousel-indicators",
      responsive: [
          {
              breakpoint: 9999,
              settings: "unslick"
          },
          {
              breakpoint: 767,
              settings: {
                  slidesToShow: 1,
                  slidesToScroll: 1,
              }
          }
      ]
  };


  $('.investors-blogs .investors-blogs-images').slick(imageSlickSettings, 1000);
  
});

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".block-company-csr-manufacturing-facilities").length) {
            return;
        }
        initManufacturing();
    } catch (error) {
        console.error(error);
    }
});

function initManufacturing() {
    function init() {
        $(".block-company-csr-manufacturing-facilities .facilities-card-container").slick({
            autoplay: false,
            dots: false,
            slidesToShow: 3,
            infinite: false,
            arrows: false,
            adaptiveHeight: false,
            responsive: [{
                breakpoint: 767,
                settings: {
                    dots: true,
                    slidesToShow: 1.37,
                }
            }]
        });
    }

    init();
}




document.addEventListener("DOMContentLoaded", function() {
    if (document.getElementById('overview-banner-section')) {
        let elementToDisappear = document.getElementById("elementToDisappear");


        setTimeout(function() {

            elementToDisappear.classList.remove("menu")
            elementToDisappear.classList.add("none")
        }, 10000);
    }
});

 
$(document).ready(function () {
  try {
    // Stop JS execution if the component html is not prensent in the DOM
    if (!$(".careers-banner-section").length) {
      return;
    }
    initCareersBanner();
  } catch (error) {
    console.error(error);
  }

  function addEventOnCarouselChange(carouselElement) {
    if (carouselElement && carouselElement.length) {
      // trigger while carousel on change
      carouselElement.on("slide.bs.carousel", function (e) {
        const videoEle = carouselElement.find(".company-carousel-inner .carousel-item.active video");
        if (videoEle.length) {
          videoEle[0].pause();
        }
      });
      carouselElement.on("slid.bs.carousel", function (e) {
        const videoEle = carouselElement.find(".company-carousel-inner .carousel-item.active video");
        if (videoEle.length) {
          videoEle[0].play();
        }
      });
    }
  }

  function initCareersBanner() {
    $(".careers-banner-section").each(function (indx, cmpCareerBannerElement) {
      const popup = $(cmpCareerBannerElement).find(".popup");
      const bannerPopupVideo = popup.find("video");
      const carouselElement = $(cmpCareerBannerElement).find(".carousel");
      const videoElement = carouselElement.find(".company-carousel-inner .carousel-item .career-custom-video");
      const carouselItemElement = carouselElement.find(".company-carousel-inner .carousel-item");
      let dataInterval = carouselElement.attr("data-carousel-interval");
      dataInterval = dataInterval ? parseInt(dataInterval) : 5000;

      // if there is one banner hide arrows
      if (carouselItemElement.length <= 1) {
        carouselElement.find('.banner-wrapper-slide').hide();
      }

      carouselElement.carousel({
        interval: dataInterval
      });
      addEventOnCarouselChange(carouselElement);
      videoElement.off("play");

      carouselItemElement.each(function (b, carouselEle) {
        const custVideoEle = $(carouselEle).find('.career-custom-video');
        if (custVideoEle.length) {
          const videoEle = custVideoEle[0];
          $(carouselEle).find('.play-button-container .play-button').on("click", function () {
            const videoSrc = videoEle.currentSrc;
            if (videoSrc && bannerPopupVideo.length) {
              videoEle.pause();
              carouselElement.carousel("dispose");
              bannerPopupVideo[0].src = videoSrc;
              // Optionally, you can load and play the video immediately after setting the source
              bannerPopupVideo[0].load(); // Load the new source
              bannerPopupVideo[0].play(); // Play the video
              document.documentElement.classList.add('overflow-y-hidden');
              popup.css("display", "flex");
            }
          });
          $(carouselEle).find('.play-button-container .mute-button').on("click", function () {
            const iconElem = $(this).find('.mute-video > div');
            if (videoEle.muted) {
              // then unmute
              videoEle.muted = false;
              iconElem.removeClass("muted").addClass("unmuted");
            } else {
              // then mute
              videoEle.muted = true;
              iconElem.removeClass("unmuted").addClass("muted");
            }
          });
        }
      });

      // to close for video popup
      popup.find(".close-btn").on("click", function () {
        const videoEle = carouselElement.find(".company-carousel-inner .carousel-item.active video");
        if (bannerPopupVideo.length) {
          bannerPopupVideo[0].pause();
        }
        document.documentElement.classList.remove('overflow-y-hidden');
        // Add the fade-out class to start the animation
        popup.fadeOut();
        if (videoEle.length) {
          videoEle[0].play();
        }
        carouselElement.carousel({
          interval: dataInterval
        });
        addEventOnCarouselChange(carouselElement);
      });

      // Callback function for Intersection Observer
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry, careersCurrentCarouselIndex) => {
          if (entry.isIntersecting) {
            carouselElement.carousel({
              interval: dataInterval
            });
            addEventOnCarouselChange(carouselElement);
          } else {
            carouselElement.carousel("dispose");
          }
        });
      }, {
        threshold: 0.2, // Trigger when 50% of the video is visible
      });

      // Observe the video element
      observer.observe(cmpCareerBannerElement);
    });
  }
});

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".csrs-banner-section").length) {
            return;
        }
        initCSRsBanner();
    } catch (error) {
        console.error(error);
    }
});

function initCSRsBanner() {

    const allPlayButton = document.querySelectorAll(".csr-banner-wrapper .carousel .company-carousel-inner .csrs-banner .perks-and-benifit-container .play-button-container .play-button")
    if (allPlayButton && allPlayButton.length) {
        allPlayButton.forEach((playButton) => {
            playButton.addEventListener('click', function (event) {
                const ancestorDiv = event.target.closest('.csrs-banner').parentNode;
                if (ancestorDiv) {
                    const video = ancestorDiv.querySelector('.csr-custom-video');
                    if (video) {
                        const popup = document.querySelector('.csrs-banner-section .popup');
                        if (popup) {
                            const bannerPopupVideo = popup.querySelector('.popup-wrapper #bannerPopupVideo');
                            if (bannerPopupVideo) {
                                const videoSrc = video.currentSrc;
                                if (videoSrc) {
                                    bannerPopupVideo.src = videoSrc;
                                    // Optionally, you can load and play the video immediately after setting the source
                                    bannerPopupVideo.load(); // Load the new source
                                    bannerPopupVideo.play(); // Play the video
                                    popup.style.display = 'flex';
                                }
                            }
                        }
                    }
                }
            })
        })
    }

    // to close
    // for video popup
    const popupCloseBtn = document.querySelector('.csrs-banner-section .close-btn');
    if (popupCloseBtn) {
        popupCloseBtn.addEventListener('click', function () {
            // Get the parent element that you want to fade out (e.g., the popup itself)
            const popup = document.querySelector('.csrs-banner-section .popup');
            const bannerPopupVideo = popup.querySelector('.popup-wrapper #bannerPopupVideo');
            if (popup) {
                // Add the fade-out class to start the animation
                bannerPopupVideo.pause();
                popup.style.display = 'none';
            }
        })
    }

    $(".csrs-banner-section").each(function(idx, cmpCsrBannerElement) {
        const carouselElement = $(cmpCsrBannerElement).find(".carousel");
        const modelOpenBtnElement = carouselElement.find(".request-callback-buttons-container .company-modal-button > .cmp-modal-button");
        const modelCloseBtnElement = carouselElement.find(".request-callback-buttons-container .company-modal-button .company-modal-wrapper .company-modal-close");
        const progressElement = carouselElement.find('.progressbar');
        let dataInterval = carouselElement.data("interval");
        dataInterval = dataInterval ? parseInt(dataInterval) : 5000;
        $(progressElement).css({
            'transition': 'all ' + dataInterval + 'ms linear 0s',
            'background': '#f00'
        });

        carouselElement.carousel({
          interval: dataInterval
        });

        modelOpenBtnElement.on("click", function(e) {
            carouselElement.carousel("dispose");
        });

        modelCloseBtnElement.on("click", function(e) {
            carouselElement.carousel({
              interval: dataInterval
            });
        });
    });
}




$(document).ready(function () {
    if ($(window).width() < 768) {
        $('#joinourtalent-carousel-section .company-carousel-inner .carousel-item').attr('data-interval','false');
        $('#joinourtalent-carousel-section .carousel').carousel({
            pause: true,
            interval: false
        });
    }
});
$(document).ready(() => {
    if ($(".initiative-banner-section").length) {
        const initiativebanners = $("#initiative-banner-section .initiative-banner-wrapper .initiative-banner").toArray();
        const generictabList = $(".generictab .tab-wrapper > ul > li > a").toArray();
        if (initiativebanners.length > 0 && generictabList.length > 0) {
            generictabList.forEach((element, index) => {
                $(element).click(function (e) {
                    e.preventDefault();
                    updateInitiativeBanner(index);
                });
            });
            const updateInitiativeBanner = (ind) => {
                initiativebanners.forEach((element, index) => {
                    if (index == ind) {
                        $(element).addClass('initiative-active');
                    } else {
                        $(element).removeClass('initiative-active');
                    }
                });
            }
        }
    }
});
$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".press-release-banner-section").length) {
            return;
        }
        initPressReleaseBanner();
    } catch (error) {
        console.error(error);
    }

    function initPressReleaseBanner() {
        $('.press-release-banner-section').each(function (indx, cmpPressReleaseBannerElement) {
            const searchPath = $(cmpPressReleaseBannerElement).attr("data-search-path");
            if (searchPath) {
                const resourcePath = $(cmpPressReleaseBannerElement).attr("data-resource-path");
                const detailsPageLink = $(cmpPressReleaseBannerElement).find(".block--article-details-path").attr("href");
                const categorySet = $(cmpPressReleaseBannerElement).attr("data-category-set");
                const dataToShow = $(cmpPressReleaseBannerElement).attr("data-show-count") ? $(cmpPressReleaseBannerElement).attr("data-show-count") : "-1";
                const carouselElement = $(cmpPressReleaseBannerElement).find(".carousel");
                const carouselContainerElement = carouselElement.find(".company-carousel-inner");
                const carouselIndicatorsElement = carouselElement.find(".banner-wrapper-slide .custom-ul-automatic");
                const carouselIndicatorsOld = carouselElement.find(".banner-wrapper-slide .custom-ul");
                const carouselImageEle = carouselElement.find(".company-carousel-inner .carousel-item .press-release-banner .press-release-container .press-release-image");
                const carouselContentItemEle = carouselElement.find(".company-carousel-inner .carousel-item .press-release-banner .press-release-container .press-release-content");
                const carouselId = carouselElement.attr("id") ? carouselElement.attr("id") : "#";
                const carouselInterval = carouselElement.attr("data-carousel-interval") ? carouselElement.attr("data-carousel-interval") : "#";
                const bannerTitle = carouselContentItemEle.find(".press-title").text() ? carouselContentItemEle.find(".press-title").text() : "PRESS RELEASES";
                const bannerBtnText = carouselContentItemEle.find(".know-more-button").attr("data-btn-label") ? carouselContentItemEle.find(".know-more-button").attr("data-btn-label") : "KNOW MORE";
                let reqLink = `${resourcePath}.companyarticlesearch.json?searchRootPath=${searchPath}&searchTags=${categorySet}&resultsPerPage=${dataToShow}`;
                $.ajax({
                    type: "GET",
                    url: reqLink,
                    dataType: "JSON",
                    success: function (resp) {
                        const results = resp ? resp.filter((item) => item.moreMatchesExist == undefined) : [];
                        if (results && results.length) {
                            carouselContainerElement.empty();
                            results.forEach(function (item, idx) {
                                let isOpenNewTab = item.openInNewTab == "true" ? true : false;
                                let redirectLink = "#";
                                const imagePath = item.articlePageImagePath ? item.articlePageImagePath : item.tileImagePath;
                                if (item.pdfPath) {
                                    redirectLink = item.pdfPath;
                                } else {
                                    redirectLink = item.fragmentPath.split("/").pop();
                                    redirectLink = detailsPageLink ? `${detailsPageLink}.${redirectLink}.html` : "#";
                                }

                                const cardEle = `<div class="carousel-item${idx == 0 ? ' active' : ''}" id="carousel"
                                    data-interval="${carouselInterval}">
                                    <div class="press-release-banner">
                                        <div class="press-release-container">
                                            <div class="press-release-image">
                                                ${carouselImageEle.length ? carouselImageEle.get(0).innerHTML : `
                                                <div class="desktop-image-press">
                                                    <img class="press-release-image-container"
                                                    src="${imagePath}"
                                                    alt="banner image" />
                                                </div>
                                                <div class="mobile-image-press">
                                                    <img class="press-release-image-container-mob"
                                                    src="${imagePath}"
                                                    alt="banner image" />
                                                </div>`}
                                            </div>
                
                                            <div class="press-release-content">
                                                <div class="press-text">
                                                    <div class="press-title">${bannerTitle}</div>
                
                                                    <div class="press-date-para">
                                                        <div class="press-secondary-title">
                                                            ${item.articleDate}
                                                        </div>
                                                        <div class="press-subtitle">
                                                            <p>${item.tileTitle}</p>
                                                        </div>
                                                        <div class="press-secondary-subtitle">
                                                            ${item.externalArticlePublisher}
                                                        </div>
                                                    </div>
                                                    <button type="button" class="know-more-button">
                                                        <a href="${redirectLink}" ${isOpenNewTab ? 'target="_blank"' : ""}>
                                                            ${bannerBtnText}
                                                        </a>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>`;

                                const indicatorEle = `<li data-target="#${carouselId}" data-slide-to="${idx}"
                                class="${idx == 0 ? 'active' : ''}"></li>`;

                                carouselIndicatorsElement.append(indicatorEle);
                                carouselContainerElement.append(cardEle);
                            });
                            carouselIndicatorsOld.addClass("d-none");
                            carouselIndicatorsElement.removeClass("d-none").addClass("custom-ul");
                        }
                    },
                    error: function (err) {
                        console.error(err);
                    },
                });
            }
        });
    }
});  
$(document).ready(function () {
    const imageSlickSettings = {
        infinite: false,
        autoplay: false,
        dots: true,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1,
        width: "100%",
        dotsClass: "carousel-indicators",
        responsive: [
            {
                breakpoint: 9999,
                settings: "unslick"
            },
            {
                breakpoint: 767,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                }
            }
        ]
    };

    $('.company-future-mobility .mission-container .mission-card-container').slick(imageSlickSettings);
    $('.company-future-mobility .our-values-container .values-card-container').slick(imageSlickSettings);
});

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$("#this-is-us-section").length) {
            return;
        }
        initThisIsUs();
    } catch (error) {
        console.error(error);
    }
});

function initThisIsUs() {
    // Your code goes here
    const thisIsUsCarousel = document.querySelector('.hero-cards');
    const thisIsUsIndicator = document.querySelector('.this-is-us-card-indicator-container');
    const thisIsUsElements = document.querySelectorAll('.card-block-this-is-us');

    const foregroundImg = document.querySelector(".foreground-img");
    const imageContainer = document.querySelector(".image-container");

    if (thisIsUsCarousel && thisIsUsIndicator && thisIsUsElements && thisIsUsElements.length) {
        function renderIndicator(currentIndex) {
            thisIsUsIndicator.innerHTML = '';
            for (let i = 0; i < thisIsUsElements.length; i++) {
                let div = document.createElement('div');
                div.className = (i === currentIndex) ? 'cardIndicator active' : 'cardIndicator';
                div.onclick = function () {
                    thisIsUsElements[i].scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
                };
                thisIsUsIndicator.appendChild(div);
            }
        }

        const thisIsUsElementIndices = {};
        thisIsUsElements.forEach((element, index) => {
            if (!element.id) {
                element.id = 'this-is-us-' + index;
            }
            thisIsUsElementIndices[element.id] = index;
        });

        const thisIsUsObserver = new IntersectionObserver(function (entries) {
            const activated = entries.reduce(function (max, entry) {
                return (entry.intersectionRatio > max.intersectionRatio) ? entry : max;
            }, { intersectionRatio: 0 });

            if (activated.intersectionRatio > 0.3) { // Adjusted threshold value
                const currentIndex = thisIsUsElementIndices[activated.target.id];
                renderIndicator(currentIndex);
            }
        }, { root: thisIsUsCarousel, threshold: 0.3 }); // Adjusted threshold value

        thisIsUsElements.forEach(element => thisIsUsObserver.observe(element));

        renderIndicator(0);
    }


    function initPage() {
        if (foregroundImg && imageContainer) {
            const displayedWidth = foregroundImg.offsetWidth;
            const displayedHeight = foregroundImg.offsetHeight;

            imageContainer.style.width = `${displayedWidth - 5}px`;
            imageContainer.style.height = `${displayedHeight - 5}px`;
        }
    }

    window.addEventListener('resize', function () {
        initPage()
    });

    initPage()
}






$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".perks-container").length) {
            return;
        }
        initPerkAndBenifit();
    } catch (error) {
        console.error(error);
    }
});

function initPerkAndBenifit() {
    // Your code goes here
    const perkCarousel = document.querySelector('.perks-card-container-main');
    const perkIndicator = document.querySelector('.perks-cards-indicator-container');
    const perkElements = document.querySelectorAll('.perks-card-container-left, .perks-card-container-right');

    if (perkCarousel && perkIndicator && perkElements && perkElements.length) {
        function renderIndicator(currentIndex) {
            perkIndicator.innerHTML = '';
            for (let i = 0; i < perkElements.length; i++) {
                let div = document.createElement('div');
                div.className = (i === currentIndex) ? 'card-indicator active' : 'card-indicator';
                div.onclick = function () {
                    perkElements[i].scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
                };
                perkIndicator.appendChild(div);
            }
        }
        const perkElementIndices = {};
        perkElements.forEach((element, index) => {
            if (!element.id) {
                element.id = 'card-block-' + index;
            }
            perkElementIndices[element.id] = index;
        });

        const perkObserver = new IntersectionObserver(function (entries) {
            const activated = entries.reduce(function (max, entry) {
                return (entry.intersectionRatio > max.intersectionRatio) ? entry : max;
            }, { intersectionRatio: 0 });

            if (activated.intersectionRatio > 0.3) { // Adjusted threshold value
                const currentIndex = perkElementIndices[activated.target.id];
                renderIndicator(currentIndex);
            }
        }, { root: perkCarousel, threshold: 0.3 }); // Adjusted threshold value

        perkElements.forEach(element => perkObserver.observe(element));

        renderIndicator(0);
    }
}
$(document).ready(function () {
//popup section
 const appendingList = $('.perks-container .popup-inner-content .social-icon-items');
 $(appendingList).empty();
 $('.perks-container .gd-readmore').on('click', function () {
     const leadershipSocialList = $(this).find('.social-icon-empty-content').children();
     const appendingList = $('.perks-container .popup-inner-content .social-icon-items');
     let leadershipSocialListCount = $(leadershipSocialList).length;
     const title = $('.gd-popup').data('title');
     const description = $('.gd-popup').data('description');
     const role = $('.gd-popup').data('role');
     const img = $('.gd-popup').data('img');
     const alt = $('.gd-popup').data('alt');
     $(appendingList).empty();


     for (let i = 0; i < leadershipSocialListCount; i++) {
         // Create the item HTML structure
         const itemHTML = `
       <div class="single-item">
         <a href="">
           <img src="" alt="contactIcon">
         </a>
       </div>
     `;
         $(appendingList).append(itemHTML);       
     }
     $('.perks-container .popup-title').text(title);
     $('.perks-container .popup-card-role').text(role);
     $('.perks-container .popup-description').html(description);
     $('.perks-container .popup-img-container img').attr('src', img);
     $('.perks-container .popup-img-container img').attr('alt', alt);
     $('.perks-container .popup').css('display', 'flex');
     if (img) {
         $('.perks-container .popup-img-container img').css('display', 'block');
     } else {
         $('.perks-container .popup-img-container img').css('display', 'none');
     }

     $('.perks-container .social-icon-empty-content .single-item').each(function(index) {
         const icon = $(this).data('icon');
         const redirect = $(this).data('redirect');
         $('.perks-container .popup .icon-container .single-item').eq(index).children().attr('href', redirect);
         $('.perks-container .popup-inner-content .icon-container .single-item').eq(index).find('img').attr('src', icon);
       });
     document.documentElement.classList.add('overflow-y-hidden');
 });

 $('.perks-container .close-btn').on('click', function () {
     document.documentElement.classList.remove('overflow-y-hidden');
     $('.perks-container .popup').fadeOut();
 });
});

if ($("#company-article-list").length) {
    const cardTileCreate = function (respList, element) {
        if (!respList || respList.length === 0 || !element || element.length === 0) {
            return;
        }
        if (element.hasClass("no-result-found")) {
            element.removeClass("no-result-found");
        }

        const detailsPageLink = element
            .closest(".block--cards-section")
            .find(".block--article-details-path")
            .attr("href");

        respList.forEach((item) => {
            let isOpenNewTab = item.openInNewTab == "true" ? true : false;
            let redirectLink = "#";
            if (item.pdfPath) {
                redirectLink = item.pdfPath;
            } else {
                redirectLink = item.fragmentPath.split("/").pop();
                redirectLink = detailsPageLink ? `${detailsPageLink}.${redirectLink}.html` : "#";
            }
            const cardEle = `<a class="block--card-container" href="${redirectLink}" ${isOpenNewTab ? 'target="_blank"' : ""
                }>
              <div class="block--card-image">
                  <div class="top-icon">
                      <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/arrow-top-right.svg"
                          alt="active card icon" />
                  </div>
                  <img src="${item.tileImagePath}" alt="card image">
              </div>
              <div class="block--card-content">
                  <div class="block--card-tags">
                      <h5 class="block--card-title">${item.articleTag}</h5>
                      <div class="divider"></div>
                      <div class="block--card-date">${item.articleDate}</div>
                  </div>
                  <div class="block--card-heading">
                      ${item.tileTitle}
                  </div>
                  ${item.externalArticlePublisher
                    ? '<div class="block--card-subheading">' +
                    item.externalArticlePublisher +
                    "</div>"
                    : ""
                }
              </div>
          </a>`;

            element.append(cardEle);
        });
    };

    const noFoundCardCreate = function (element) {
        if (!element || element.length === 0) {
            return;
        }

        if (!element.hasClass("no-result-found")) {
            element.addClass("no-result-found");
        }

        const noResultFoundEle = `<div class="block--no-result-found">
          <div class="block--top-border"></div>
          <div class="block--no-result-container">
              <div class="block--no-result-image">
                  <svg xmlns="http://www.w3.org/2000/svg" width="162" height="114" viewBox="0 0 162 114" fill="none">
                      <rect x="61.5271" y="0.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
                      <rect x="66.8271" y="6" width="10" height="11" fill="#D9D9D9"/>
                      <path d="M81.8271 7H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                      <path d="M92.8271 12H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                      <path d="M105.827 17H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                      <rect x="31.5271" y="31.7" width="63.6" height="21.6" stroke="#FF0000" stroke-width="1.4"/>
                      <path d="M82.6271 46L81.8271 45.2L85.0271 42L81.8271 38.8L82.6271 38L85.8271 41.2L89.0271 38L89.8271 38.8L86.6271 42L89.8271 45.2L89.0271 46L85.8271 42.8L82.6271 46Z" fill="#FF0000"/>
                      <path d="M36.8271 38H74.8271" stroke="#FF0000" stroke-width="1.4"/>
                      <path d="M36.8271 43H63.8271" stroke="#FF0000" stroke-width="1.4"/>
                      <path d="M36.8271 48H50.8271" stroke="#FF0000" stroke-width="1.4"/>
                      <rect x="1.52715" y="62.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
                      <rect x="49.8271" y="68" width="10" height="11" fill="#D9D9D9"/>
                      <path d="M6.82715 69H44.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                      <path d="M6.82715 74H33.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                      <path d="M6.82715 79H20.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                      <circle cx="96.756" cy="49.5544" r="36.9289" stroke="#595959" stroke-width="4"/>
                      <path d="M124.462 76.5586L160.172 112.269" stroke="#595959" stroke-width="4"/>
                  </svg>
              </div>
              <div class="block--no-found-content">
                  <h2>No Result Found</h2>
                  <p>We couldn't find any matches. Try again</p>
              </div>
          </div>
          <div class="block--bottom-border"></div>
      </div>`;

        element.html(noResultFoundEle);
    };

    const loadCards = function (element, parentElement, filterObject) {
        if (!element || element.length === 0 || !parentElement || !filterObject) {
            return;
        }

        const resourcePath = element.attr("data-resource-path");
        const searchPath = element.attr("data-search-path");
        const categorySet = element.attr("data-category-set");
        const sortVal = filterObject.sortEle.find(".dropdown-menu li.active").attr("value");
        const yearVal = filterObject.yearEle.find(".dropdown-menu li.active").attr("value");
        const monthVal = filterObject.monthEle.find(".dropdown-menu li.active").attr("value");
        const searchVal = filterObject.searchEle.find("input").val();
        const renderedCount = filterObject.initialLoad ? 0 : element.children().length;
        const resultsPerPage = filterObject.resultsPerPage ? filterObject.resultsPerPage : 6;
        const cardCountToBe = renderedCount + resultsPerPage;

        let reqLink = `${resourcePath}.companyarticlesearch.json?searchRootPath=${searchPath}&searchTags=${categorySet}&startIndex=${renderedCount}&resultsPerPage=${resultsPerPage}`;
        if (sortVal) {
            reqLink = reqLink + "&sortOrder=" + sortVal;
        }
        if (yearVal && parseInt(yearVal)) {
            reqLink = reqLink + "&searchYear=" + parseInt(yearVal);
        }
        if (monthVal && parseInt(monthVal)) {
            reqLink = reqLink + "&searchMonth=" + parseInt(monthVal);
        }
        if (searchVal) {
            reqLink = reqLink + "&searchTerm=" + searchVal;
        }

        $.ajax({
            type: "GET",
            url: reqLink,
            dataType: "JSON",
            success: function (resp) {
                const results = resp ? resp.filter((item) => item.moreMatchesExist == undefined) : [];
                if (results && results.length) {
                    if (filterObject.initialLoad) {
                        element.html("");
                    }
                    if (cardCountToBe > results.length + renderedCount) {
                        filterObject.loadMoreEle.css("display", "none");
                    } else {
                        filterObject.loadMoreEle.css("display", "block");
                    }
                    cardTileCreate(results, element);
                } else {
                    filterObject.loadMoreEle.css("display", "none");
                    if (renderedCount === 0) {
                        noFoundCardCreate(element);
                    }
                }
            },
            error: function (err) {
                console.error(err);
                filterObject.loadMoreEle.css("display", "none");
                noFoundCardCreate(element);
            },
        });
    };

    const clearFilter = function (parentElement, isMobile, isSort = true) {
        if (!parentElement) {
            return;
        }

        const yearFilter = $(parentElement).find(
            ".block--header-action-group .block--filter-month-year_dropdown .year-drop-down"
        );
        const monthFilter = $(parentElement).find(
            ".block--header-action-group .block--filter-month-year_dropdown .month-drop-down"
        );
        const sortFilter = $(parentElement).find(
            ".block--header-action-group .block--sort-section"
        );
        $(parentElement)
            .find(
                ".block--header-action-group .block--filter-section .block--filter-month-year_dropdown"
            )
            .removeClass("show");
        document.documentElement.classList.remove("overflow-y-hidden");
        if (yearFilter) {
            const dropdownButton = yearFilter.find(".dropdown-toggle");
            const accordionButton = yearFilter.find(".cust-accordion-toggle");
            yearFilter.find(".dropdown-menu li").removeClass("active");
            dropdownButton.text(dropdownButton.attr("data-default-label"));
            accordionButton.text(accordionButton.attr("data-default-label"));
            if (dropdownButton.attr("aria-expanded") == "true") {
                dropdownButton.trigger("click");
            }
            if (accordionButton.attr("aria-expanded") == "true") {
                accordionButton.trigger("click");
            }
        }
        if (monthFilter) {
            const dropdownButton = monthFilter.find(".dropdown-toggle");
            const accordionButton = monthFilter.find(".cust-accordion-toggle");
            monthFilter.find(".dropdown-menu li").removeClass("active");
            dropdownButton.text(dropdownButton.attr("data-default-label"));
            accordionButton.text(accordionButton.attr("data-default-label"));
            if (dropdownButton.attr("aria-expanded") == "true") {
                dropdownButton.trigger("click");
            }
            if (accordionButton.attr("aria-expanded") == "true") {
                accordionButton.trigger("click");
            }
        }
        if (sortFilter && isSort) {
            sortFilter.find(".dropdown-menu li").removeClass("active");
            const textVal = sortFilter
                .find(".dropdown-menu .dropdown-item")
                .first()
                .addClass("active")
                .text();
            const button = sortFilter.find(".dropdown-toggle");
            if (isMobile) {
                button.text(sortFilter.find("h4").text());
            } else {
                button.text(textVal);
            }
            if (button.attr("aria-expanded") == "true") {
                button.trigger("click");
            }
        }
    };

    $(document).ready(function () {
        $(".section--company-article-list").each(function (a, cmpSectionArticleList) {
            const filterHeader = $(cmpSectionArticleList).find(".block--header-action-group");
            const yearFilter = $(cmpSectionArticleList).find(
                ".block--header-action-group .block--filter-month-year_dropdown .year-drop-down"
            );
            const monthFilter = $(cmpSectionArticleList).find(
                ".block--header-action-group .block--filter-month-year_dropdown .month-drop-down"
            );
            const sortFilter = $(cmpSectionArticleList).find(
                ".block--header-action-group .block--sort-section"
            );
            const searchFilter = $(cmpSectionArticleList).find(
                ".block--header-action-group .block--search-input"
            );
            const loadMoreContainer = $(cmpSectionArticleList).find(".block--load-more");
            const cardListElement = $(cmpSectionArticleList).find(".block--card-container-list");
            const sortButton = sortFilter.find(".dropdown-toggle");
            const sortFirstEle = sortFilter.find(".dropdown-menu .dropdown-item").first();
            const mobileScreenWidth = 767;

            let isMobile = $(window).width() < mobileScreenWidth;
            let filterObject = {
                yearEle: yearFilter,
                monthEle: monthFilter,
                sortEle: sortFilter,
                searchEle: searchFilter,
                loadMoreEle: loadMoreContainer,
                initialLoad: true,
                resultsPerPage: 6,
            };
            let bottomSheetState = {
                yearVal: "",
                monthVal: "",
            };

            sortFirstEle.addClass("active");
            if (isMobile) {
                sortButton.text(sortFilter.find("h4").text());
                filterObject.resultsPerPage = 4;
            } else {
                sortButton.text(sortFirstEle.text());
                filterObject.resultsPerPage = 6;
            }
            loadCards(cardListElement, cmpSectionArticleList, filterObject);

            filterHeader.find(".block--filter-section > h4").on("click", function (e) {
                if (isMobile) {
                    e.preventDefault();
                    filterHeader
                        .find(".block--filter-section .block--filter-month-year_dropdown")
                        .addClass("show");
                    document.documentElement.classList.add("overflow-y-hidden");
                    const yearVal = yearFilter.find(".dropdown-menu li.active").attr("value");
                    const monthVal = monthFilter.find(".dropdown-menu li.active").attr("value");
                    if (yearVal) {
                        bottomSheetState.yearVal = yearVal;
                    }
                    if (monthVal) {
                        bottomSheetState.monthVal = monthVal;
                    }
                }
            });
            filterHeader
                .find(
                    ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-header-container .block--close-icon"
                )
                .on("click", function (e) {
                    e.preventDefault();
                    clearFilter(cmpSectionArticleList, isMobile, false);
                    if (bottomSheetState.yearVal) {
                        yearFilter.find(".dropdown-menu li.dropdown-item").each(function (b, liItem) {
                            if ($(liItem).attr("value") == bottomSheetState.yearVal) {
                                $(liItem).addClass("active");
                                yearFilter.find(".cust-accordion-toggle").text($(liItem).text());
                            }
                        });
                        if (bottomSheetState.monthVal) {
                            const monthVal = parseInt(bottomSheetState.monthVal);
                            if (monthVal) {
                                const textVal = $(
                                    monthFilter.find(".dropdown-menu li.dropdown-item")[monthVal - 1]
                                )
                                    .addClass("active")
                                    .text();
                                monthFilter.find(".cust-accordion-toggle").text(textVal);
                            }
                        }
                    }
                    bottomSheetState.yearVal = "";
                    bottomSheetState.monthVal = "";
                });
            filterHeader
                .find(
                    ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-footer-container .block--clear-button"
                )
                .on("click", function (e) {
                    clearFilter(cmpSectionArticleList, isMobile, false);
                    filterObject.initialLoad = true;
                    loadCards(cardListElement, cmpSectionArticleList, filterObject);
                });
            filterHeader
                .find(
                    ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-footer-container .block--ok-button"
                )
                .on("click", function (e) {
                    e.preventDefault();
                    filterHeader
                        .find(".block--filter-section .block--filter-month-year_dropdown")
                        .removeClass("show");
                    document.documentElement.classList.remove("overflow-y-hidden");
                    filterObject.initialLoad = true;
                    loadCards(cardListElement, cmpSectionArticleList, filterObject);
                });
            yearFilter.find(".dropdown-menu").on("click", "li", function (e) {
                e.preventDefault();
                const dropdownButton = yearFilter.find(".dropdown-toggle");
                const accordionButton = yearFilter.find(".cust-accordion-toggle");

                yearFilter.find(".dropdown-menu li").removeClass("active");
                if ($(this).hasClass("dropdown-menu-heading")) {
                    dropdownButton.text(dropdownButton.attr("data-default-label"));
                } else {
                    dropdownButton.text($(this).text());
                    accordionButton.text($(this).text());
                    $(this).addClass("active");
                    if (accordionButton.attr("aria-expanded") == "true") {
                        accordionButton.trigger("click");
                    }
                }
                if (!isMobile) {
                    filterObject.initialLoad = true;
                    loadCards(cardListElement, cmpSectionArticleList, filterObject);
                }
            });
            yearFilter.find(".cust-accordion-toggle").on("click", function (e) {
                yearFilter.find(".dropdown-menu").toggleClass("show");
                $(this).attr("aria-expanded", function (i, attr) {
                    return attr == "true" ? "false" : "true";
                });
            });
            monthFilter.find(".dropdown-menu").on("click", "li", function (e) {
                const dropdownButton = monthFilter.find(".dropdown-toggle");
                if ($(this).hasClass("dropdown-menu-heading")) {
                    e.preventDefault();
                    dropdownButton.text(dropdownButton.attr("data-default-label"));
                    monthFilter.find(".dropdown-menu li").removeClass("active");
                }
                if (yearFilter.find(".dropdown-menu .dropdown-item").hasClass("active")) {
                    e.preventDefault();
                    const accordionButton = monthFilter.find(".cust-accordion-toggle");

                    monthFilter.find(".dropdown-menu li").removeClass("active");
                    if ($(this).hasClass("dropdown-menu-heading")) {
                        dropdownButton.text(dropdownButton.attr("data-default-label"));
                    } else {
                        dropdownButton.text($(this).text());
                        accordionButton.text($(this).text());
                        $(this).addClass("active");
                        if (accordionButton.attr("aria-expanded") == "true") {
                            accordionButton.trigger("click");
                        }
                    }
                    if (!isMobile) {
                        filterObject.initialLoad = true;
                        loadCards(cardListElement, cmpSectionArticleList, filterObject);
                    }
                }
            });
            monthFilter.find(".cust-accordion-toggle").on("click", function (e) {
                monthFilter.find(".dropdown-menu").toggleClass("show");
                $(this).attr("aria-expanded", function (i, attr) {
                    return attr == "true" ? "false" : "true";
                });
            });
            sortFilter.find(".dropdown-menu").on("click", "li", function (e) {
                if ($(this).hasClass("dropdown-item")) {
                    e.preventDefault();
                    if (isMobile) {
                        sortButton.text(sortFilter.find("h4").text());
                    } else {
                        sortButton.text($(this).text());
                    }
                    sortFilter.find(".dropdown-menu li").removeClass("active");
                    $(this).addClass("active");
                    filterObject.initialLoad = true;
                    loadCards(cardListElement, cmpSectionArticleList, filterObject);
                }
            });
            searchFilter.find("input").on("keyup", function (e) {
                const tabParent = $(cmpSectionArticleList).closest(".generictab");
                const tabs = tabParent.find(".tab-wrapper > .nav-tabs .nav-item");
                if (e.key === "Enter" || e.keyCode === 13) {
                    e.preventDefault();
                    if (
                        tabs.first().hasClass("slick-current") ||
                        tabs.first().children().hasClass("active")
                    ) {
                        filterObject.initialLoad = true;
                        clearFilter(cmpSectionArticleList, isMobile);
                        loadCards(cardListElement, cmpSectionArticleList, filterObject);
                    } else {
                        tabs.first().children().first().trigger("click");
                        const searchEle = tabParent
                            .find(".tab-content > .tab-pane")
                            .first()
                            .find(
                                ".section--company-article-list .block--header-action-group .block--search-input"
                            );
                        const textVal = $(this).val();
                        $(this).val("");
                        searchEle.find("input").val(textVal);
                        searchEle.find(".icon").trigger("click");
                    }
                }
                if (e.key === "Backspace") {
                    if (
                        (tabs.first().hasClass("slick-current") ||
                            tabs.first().children().hasClass("active")) &&
                        $(this).val() === ""
                    ) {
                        e.preventDefault();
                        filterObject.initialLoad = true;
                        clearFilter(cmpSectionArticleList, isMobile);
                        loadCards(cardListElement, cmpSectionArticleList, filterObject);
                    }
                }
            });
            searchFilter.find(".icon").on("click", function (e) {
                e.preventDefault();
                const tabParent = $(cmpSectionArticleList).closest(".generictab");
                const tabs = tabParent.find(".tab-wrapper > .nav-tabs .nav-item");
                if (tabs.first().hasClass("slick-current")) {
                    filterObject.initialLoad = true;
                    clearFilter(cmpSectionArticleList, isMobile);
                    loadCards(cardListElement, cmpSectionArticleList, filterObject);
                } else {
                    tabs.first().children().first().trigger("click");
                    const searchEle = tabParent
                        .find(".tab-content > .tab-pane")
                        .first()
                        .find(
                            ".section--company-article-list .block--header-action-group .block--search-input"
                        );
                    const searchInput = searchFilter.find("input");
                    const textVal = searchInput.val();
                    searchInput.val("");
                    searchEle.find("input").val(textVal);
                    searchEle.find(".icon").trigger("click");
                }
            });
            loadMoreContainer.find("button").on("click", function (e) {
                e.preventDefault();
                filterObject.initialLoad = false;
                loadCards(cardListElement, cmpSectionArticleList, filterObject);
            });
        });
    });
}

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$("#media-kit-container").length) {
            return;
        }
        initMediaKit();
    } catch (error) {
        console.error(error);
    }
});

function initMediaKit() {
    const tabs = document.querySelectorAll('#media-kit-container .tab-container .tab');
    const contents = document.querySelectorAll('#media-kit-container .tab-content .content');
    tabs.forEach((tab, tabIndex) => {
        tab.addEventListener('click', function () {

            tabs.forEach((allTab, key) => {
                allTab.classList.remove('active');
                contents[key].classList.remove('active');
            })

            tabs[tabIndex].classList.add('active');
            contents[tabIndex].classList.add('active');
        })

        if (tabIndex == 0) {
            tab.click()
        }
    });

    const buttons = document.querySelectorAll('#media-kit-container .container .button-container button');
    buttons.forEach((button) => {
        button.addEventListener('click', function () {
            var searchText = button.textContent || button.innerText;
            document.getElementById('searchInput').value = searchText;
            onSearchInput(searchText);
        })
    })

    let loadMoreBtn;
    let relativePath;
    let tags;
    const parameters = {
        mediaAssetPath: '',
        mediaTags: '',
        searchTerm: ''
    };


    // for products 
    function createGalleryItem(imageSrc, productName, imageCount, hideClass, redirectToProductUrl, key) {
        let productNameHypen = (productName !== null && productName !== undefined) ? encodeURIComponent(productName) : encodeURIComponent(productName);
        const redirctUrl = redirectToProductUrl ? `${redirectToProductUrl}.html?tag=${key}&product=${productNameHypen}` : "#";
        return ` <a class="gallery-item ${hideClass}" href="${redirctUrl}">
    <img src="${imageSrc}" />
    <div>
        <div>
            <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/grommet-icons_multiple.png" />
            <span>${imageCount}</span>
        </div>
        <span>${productName}</span>
    </div>
    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/arrow-redirect.png" />
    </a>
    `;
    }

    function generateGalleryHtml(api_response, key, search = false) {
        const gallery = document.querySelector('.product-photo-gallery');
        gallery.innerHTML = '';
        const products = api_response[key];
        console.log("here", products, key)
        const redirectToProductUrl = gallery.getAttribute('data-product-media-details-path');

        // Check if products has data
        if (!products || Object.keys(products).length === 0) {
            loadMoreBtn.style.display = "none";
            gallery.innerHTML = noDataPlaceholder(search);
            gallery.classList.add("full-width");
            return;
        }

        const itemsToShowInitially = 12;
        if (Object.keys(products).length <= itemsToShowInitially) {
            loadMoreBtn.style.display = "none";
        }
        gallery.classList.remove("full-width");
        Object.keys(products).forEach((productName, index) => {
            let previewImageUrl = products[productName][0].assetPreviewPath;
            const hideClass = index >= itemsToShowInitially ? 'hide' : '';
            gallery.innerHTML += createGalleryItem(previewImageUrl, productName, products[productName][0].assetCount, hideClass, redirectToProductUrl, key);
        });
    }

    function loadMoreItems() {
        const container = document.querySelector('.product-photo-gallery');
        const hiddenItems = container.querySelectorAll('.gallery-item.hide');
        // Show the next set of items
        for (let i = 0; i < 3 && i < hiddenItems.length; i++) {
            hiddenItems[i].classList.remove('hide');
        }

        // Optionally hide the 'Load More' button if all items are visible
        if (hiddenItems.length <= 3) {
            loadMoreBtn.style.display = 'none';
        }
    }

    // for logo and assets
    function createLogoAndAssetsItem(title, logos) {
        // Loop over the items and add them to the gallery
        let galleryDiv = ''
        const itemsToShowInitially = 12; // Number of items to show initially
        logos.forEach((item, index) => {
            // Add a class to hide items beyond the initial count
            const hideClass = index >= itemsToShowInitially ? 'hide' : '';
            galleryDiv += `
        <div class="logo-gallery-item ${hideClass}">
            <div>
                <input type="checkbox" class="logo-checkbox" name="checkbox${index + 1}">
                <img src="${item.assetPath}" />
            </div>
            <span>${item.assetTitle}</span>
        </div>
    `;
        });

        const loadMoreButtonHtml = logos.length > itemsToShowInitially ? `
        <div class="logo-and-assets-load-more">
            <button>Load More</button>
        </div>` : '';
        return `
    <div class="logo-and-assets-item">
        <div class="media-logo-header">
            <span>${title}</span>
            <div class="row-align-item-center checkbox-and-download-container">
                <div class="row-align-item-center">
                    <input type="checkbox" class="select-all" name="checkbox-heading">
                    <span>Select All</span>
                </div>
                <button class="download-btn row-align-item-center" disabled="true">
                    <span>DOWNLOAD</span>
                    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/download.svg" />
                </button>
            </div>
        </div>
        <!-- content -->
        <div class="logo-and-assets-gallery">
            ${galleryDiv}
        </div>
        ${loadMoreButtonHtml}
    </div>
    `;
    }

    function generateLogoAndAssetsHtml(api_response, key, search = false) {
        const gallery = document.querySelector('.logo-and-assets-container');
        const products = api_response[key];
        gallery.innerHTML = '';

        // Check if products has data
        if (!products || Object.keys(products).length === 0) {
            gallery.innerHTML = noDataPlaceholder(search);
            return;
        }

        Object.keys(products).forEach(productName => {
            gallery.innerHTML += createLogoAndAssetsItem(productName, products[productName]);
        });
    }

    // for leadership

    function createLeadershipItem(title, persons) {
        let galleryDiv = '';
        const itemsToShowInitially = 12; // Number of items to show initially
        persons.forEach((item, index) => {
            // Add a class to hide items beyond the initial count
            const hideClass = index >= itemsToShowInitially ? 'hide' : '';
            galleryDiv += `<div class="leadership-item ${hideClass}">
                    <div>
                        <input type="checkbox" class="leadership-checkbox" name="checkbox${index + 1}">
                        <img src="${item.assetPath}" />
                    </div>
                    <div>
                        <span>${item.assetTitle}</span>
                        <div></div>
                        <span>${item.assetDescription}</span>
                    </div>
                </div>`
        });

        const loadMoreButtonHtml = persons.length > itemsToShowInitially ? `
        <div class="logo-and-assets-load-more">
            <button>Load More</button>
        </div>` : '';
        return `
    <div class="leadership-item-container">
        <div class="leadership-header">
            <span>${title}</span>
            <div class="row-align-item-center checkbox-and-download-container">
                <div class="row-align-item-center">
                    <input type="checkbox" class="select-all" name="checkbox1">
                    <span>Select All</span>
                </div>
                <button class="download-btn row-align-item-center" disabled="true">
                    <span>DOWNLOAD</span>
                    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/download.svg" />
                </button>
            </div>
        </div>
        <div class="leadership-gallery">
            ${galleryDiv}
        </div>
        ${loadMoreButtonHtml}
    </div>
    `;
    }

    function generateLeadershipHtml(api_response, key, search = false) {
        const gallery = document.querySelector('.newsroom-leadership-container');
        const products = api_response[key];
        gallery.innerHTML = '';

        // Check if products has data
        if (!products || Object.keys(products).length === 0) {
            gallery.innerHTML = noDataPlaceholder(search);
            return;
        }

        Object.keys(products).forEach(productName => {
            gallery.innerHTML += createLeadershipItem(productName, products[productName]);
        });
    }

    function noDataPlaceholder(search = false) {
        return `<div class="error-container">
    <img src="${search ? '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/no-search-found.png' : '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/no-data-available.png'}" />
    <span>${search ? 'No Result Found' : 'No Data Available'}</span>
    <span>We couldn’t find any matches. Try again</span>
</div>`;
    }

    function downloadImage(url, filename) {
        fetch(url)
            .then(response => {
                return response.blob();
            }) // Convert the response to a blob
            .then(blob => {
                // Create a new URL for the blob
                const blobUrl = URL.createObjectURL(blob);

                // Create an anchor element and set its href to the blob URL
                const anchor = document.createElement('a');
                anchor.href = blobUrl;
                anchor.download = filename || 'download';

                // Append the anchor to the document
                document.body.appendChild(anchor);

                // Trigger the download by simulating a click
                anchor.click();

                // Remove the anchor from the document
                document.body.removeChild(anchor);

                // Revoke the blob URL after the download
                URL.revokeObjectURL(blobUrl);
            })
            .catch(e => console.error('Error in downloading image: ', e));
    }

    function updateDownloadButtonState(galleryGroup, checkbox_class) {
        const anyChecked = Array.from(galleryGroup.querySelectorAll(checkbox_class)).some(checkbox => checkbox.checked);
        const downloadBtn = galleryGroup.querySelector('.download-btn');
        downloadBtn.disabled = !anyChecked;
    }

    // Function to handle download action
    function handleDownload(galleryGroup, class_name) {
        const selectedImages = Array.from(galleryGroup.querySelectorAll(`${class_name}:checked`)).map(checkbox => {
            // Assuming the image is a sibling of the checkbox
            const image = checkbox.nextElementSibling;
            return image.src; // or any other identifier of the image
        });

        selectedImages.forEach((url) => {
            // using name from the url itself
            const name = url.split('/')[url.split('/').length - 1]
            downloadImage(url, name);
        })
        // Implement your download logic here
    }

    function onSearchInput(searchTerm) {
        if (parameters.searchTerm !== searchTerm) {
            parameters.searchTerm = searchTerm;
            startInit(searchTerm !== '');
        }
    }

    function setSearchText(button) {
        var searchText = button.textContent || button.innerText;
        document.getElementById('searchInput').value = searchText;
        onSearchInput(searchText);
    }

    function makeAjaxCall(relativePath, params) {
        return new Promise(function (resolve, reject) {
            // Get the element by ID
            $.ajax({
                type: "GET",
                url: relativePath,
                data: params,
                dataType: "json",
                success: function (data) {
                    resolve(data);
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function startInit(search = false) {
        try {
            // making api call for the intiail load
            makeAjaxCall(relativePath, parameters).then((response) => {
                                // const response = api_response;
                generateGalleryHtml(response, tags[0], search);
                generateLogoAndAssetsHtml(response, tags[1], search);
                generateLeadershipHtml(response, tags[2], search);
            }).catch((error) => {
                console.error(error);
            });
        } catch (error) {
            console.error(error);
        }
    }

    function startAddListener() {
        const searchInput = document.getElementById('searchInput');
        const searchIcon = document.getElementById('searchIcon');

        function onBackspace() {
            // Functionality for backspace key press
            if (searchInput.value === "") {
                onSearchInput("");
            }
        }

        searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                onSearchInput(searchInput.value);
            }
        });

        searchInput.addEventListener('keyup', function (e) {
            if (e.key === 'Backspace') {
                onBackspace();
            }
        });

        searchIcon.addEventListener('click', function () {
            onSearchInput(searchInput.value);
        });

        // for Initial relativePath and parameters
        loadMoreBtn = document.querySelector('.product-photos-load-more button');
        loadMoreBtn.addEventListener('click', loadMoreItems);

        // loading mediaTags from tab-content
        const tabsContent = document.querySelector(".tab-content")
        const data = tabsContent.getAttribute("data-mediatags-attribute");

        const tabContainer = document.querySelector(".tab-container");
        let mediaAssetPath = '';
        if (tabContainer) {
            mediaAssetPath = tabContainer.getAttribute("data-media-assets-path-attribute");
        }

        parameters.mediaAssetPath = mediaAssetPath;
        parameters.mediaTags = data;
        parameters.searchTerm = '';

        relativePath = document.querySelector('.tab').getAttribute("data-component-relativePath");
        tags = Array.from(document.querySelectorAll('.tab')).map((item) => {
            return item.getAttribute("data-mediatag-attribute");
        });

        // Attach a single event listener to a stable parent for select-all checkboxes
        document.querySelector('.logo-and-assets-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('select-all')) {
                const gallery = event.target.closest('.logo-and-assets-item');
                gallery.querySelectorAll('.logo-checkbox').forEach(function (checkbox) {
                    if (!checkbox.closest('.logo-gallery-item').classList.contains('hide')) {
                        checkbox.checked = event.target.checked;
                    }
                });
                updateDownloadButtonState(gallery, '.logo-checkbox');
            }
        });

        // Attach a single event listener to a stable parent for individual image checkboxes
        document.querySelector('.logo-and-assets-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('logo-checkbox')) {
                const galleryGroup = event.target.closest('.logo-and-assets-item');
                const selectAllCheckbox = galleryGroup.querySelector('.select-all');
                const allChecked = Array.from(galleryGroup.querySelectorAll('.logo-checkbox')).every(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked;
                updateDownloadButtonState(galleryGroup, '.logo-checkbox');
            }
        });

        // Attach a single event listener to a stable parent for download buttons
        document.querySelector('.logo-and-assets-container').addEventListener('click', function (event) {
            const downloadBtn = event.target.closest('.download-btn');
            const loadMore = event.target.closest('.logo-and-assets-load-more');
            if (downloadBtn) {
                const galleryGroup = event.target.closest('.logo-and-assets-item');
                handleDownload(galleryGroup, '.logo-checkbox');
            }

            if (loadMore) {
                const container = event.target.closest('.logo-and-assets-item');
                const hiddenItems = container.querySelectorAll('.logo-gallery-item.hide');
                const selectAllCheckbox = container.querySelector('.select-all');
                selectAllCheckbox.checked = false;
                // Show the next set of items
                for (let i = 0; i < 3 && i < hiddenItems.length; i++) {
                    hiddenItems[i].classList.remove('hide');
                }

                // Optionally hide the 'Load More' button if all items are visible
                if (hiddenItems.length <= 3) {
                    loadMore.style.display = 'none';
                }
            }
        });

        // Event delegation for 'Select All' checkboxes in leadership section
        document.querySelector('.newsroom-leadership-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('select-all')) {
                const gallery = event.target.closest('.leadership-item-container');
                gallery.querySelectorAll('.leadership-checkbox').forEach(function (checkbox) {
                    if (!checkbox.closest('.leadership-item').classList.contains('hide')) {
                        checkbox.checked = event.target.checked;
                    }
                });
                updateDownloadButtonState(gallery, '.leadership-checkbox');
            }
        });

        // Event delegation for individual image checkboxes in leadership section
        document.querySelector('.newsroom-leadership-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('leadership-checkbox')) {
                const galleryGroup = event.target.closest('.leadership-item-container');
                const selectAllCheckbox = galleryGroup.querySelector('.select-all');
                const allChecked = Array.from(galleryGroup.querySelectorAll('.leadership-checkbox')).every(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked;
                updateDownloadButtonState(galleryGroup, '.leadership-checkbox');
            }
        });

        // Event delegation for download buttons in leadership section
        document.querySelector('.newsroom-leadership-container').addEventListener('click', function (event) {
            const downloadBtn = event.target.closest('.download-btn');
            const loadMore = event.target.closest('.logo-and-assets-load-more');
            if (downloadBtn) {
                const galleryGroup = event.target.closest('.leadership-item-container');
                handleDownload(galleryGroup, '.leadership-checkbox');
            }

            if (loadMore) {
                const container = event.target.closest('.leadership-item-container');
                const hiddenItems = container.querySelectorAll('.leadership-item.hide');
                const selectAllCheckbox = container.querySelector('.select-all');
                selectAllCheckbox.checked = false;
                // Show the next set of items
                for (let i = 0; i < 3 && i < hiddenItems.length; i++) {
                    hiddenItems[i].classList.remove('hide');
                }

                // Optionally hide the 'Load More' button if all items are visible
                if (hiddenItems.length <= 3) {
                    loadMore.style.display = 'none';
                }
            }
        });

        function getQValue(url) {
            var parts = url.split("?");
            if (parts.length === 2) {
                var queryString = parts[1];
                var queryParams = queryString.split("&");
                for (var i = 0; i < queryParams.length; i++) {
                    var param = queryParams[i].split("=");
                    if (param[0] === "q") {
                        return param[1];
                    }
                }
            }
            return null;
        }
        let currentUrl = window.location.href;
        currentUrl = decodeURIComponent(currentUrl)
        var qValue = getQValue(currentUrl);
        if (qValue !== null) {
            $('#searchInput').val(qValue);
            onSearchInput(qValue);
        }
        // starting execution
        startInit(false);
    }

    startAddListener();
}




$(document).ready(function () {
    if ($('.section--company-article-details').length) {
        $(".section--company-article-details").each(function (a, cmpSectionArticleDetails) {
           if (window.history.length < 2){
            $(cmpSectionArticleDetails).find('.block--article-details-header-container .block--back-button-container button').attr('disabled','true').addClass('disabled');
           }
        });
    }
});
$(document).ready(function () {
  $('.section--company-suggestions').each(function (a, cmpSuggestionElement) {
    const cmpSuggestionListContainer = $(cmpSuggestionElement).find('.block--company-suggestions-list-conatiner');
    const imageSlickSettings = {
      infinite: false,
      autoplay: false,
      dots: true,
      arrows: false,
      autoplaySpeed: 5000,
      adaptiveHeight: true,
      slidesToShow: 1,
      slidesToScroll: 1,
      width: "100%",
      dotsClass: "carousel-indicators",
      responsive: [
        {
          breakpoint: 9999,
          settings: "unslick"
        },
        {
          breakpoint: 767,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1,
          }
        }
      ]
    };

    cmpSuggestionListContainer.slick(imageSlickSettings);
  });
});
$(document).ready(function () {
  if (
    document.getElementById("motorcrops-center") &&
    document.getElementById("motorcrops-center").children.length > 0
  ) {
    const randDCenterCaro = document.querySelector(
      ".motorcorps-randd-center-carousel"
    );
    const motoCaroIndicator = document.querySelector(
      ".motorcorps-indicator-container"
    );
    const elements = document.querySelectorAll(
      ".motorcorps-carousel-container"
    );
    var currentCarouselIndex = 0;
    var totalitems = $(".motorcorps-carousel-container").length;
    var randDCenterAutoplaySpeed = 1000;
    if ($(window).width() < 767) {
      $(".motorcorps-randd-center-carousel").slick({
        autoplay: false,
        prevArrow: ".previous-moto",
        nextArrow: ".next-moto",
        pauseOnHover: false,
        slidesToShow: 1,
        dots: true,
      });
    } else {
      $(".motorcorps-randd-center-carousel").slick({
        useTransform: true,
        autoplay: false,
        autoplaySpeed: randDCenterAutoplaySpeed,
        prevArrow: ".previous-moto",
        nextArrow: ".next-moto",
        cssEase: "ease-out",
      });
    }
    $(".motorcorps-container .next-moto").click(function () {
      currentCarouselIndex++;
      currentCarouselIndex = currentCarouselIndex % totalitems;
      renderIndicator(currentCarouselIndex);
    });
    $(".motorcorps-container .previous-moto").click(function () {
      currentCarouselIndex--;
      currentCarouselIndex = currentCarouselIndex % totalitems;
      renderIndicator(currentCarouselIndex);
    });
    function renderIndicator(currentCarouselIndex) {
      motoCaroIndicator.innerHTML = "";
      for (var i = 0; i < elements.length; i++) {
        var div = document.createElement("div");
        div.className =
          i === currentCarouselIndex ? "indicator active" : "indicator";
        if (currentCarouselIndex == totalitems - 1) {
          $(".next-moto").addClass("arrow-disabled");
        } else {
          $(".next-moto").removeClass("arrow-disabled");
        }
        if (currentCarouselIndex == 0) {
          $(".previous-moto").addClass("arrow-disabled");
        } else {
          $(".previous-moto").removeClass("arrow-disabled");
        }
        (function (i) {
          div.onclick = function () {
            elements[i].scrollIntoView({
              behavior: "smooth",
              block: "nearest",
              inline: "start",
            });
          };
        })(i);
        motoCaroIndicator.appendChild(div);
      }
    }
    if (motoCaroIndicator) {
      renderIndicator(currentCarouselIndex);
    }
    var observer = new IntersectionObserver(
      function (entries, observer) {
        var activated = entries.reduce(function (max, entry) {
          return entry.intersectionRatio > max.intersectionRatio ? entry : max;
        });
        if (activated.intersectionRatio > 0) {
          const currentIndex =
            elementIndices[activated.target.getAttribute("id")];
          renderIndicator(currentIndex);
        }
      },
      {
        root: randDCenterCaro,
        threshold: 0.5,
      }
    );
    var elementIndices = {};
    if (elements && elements.length) {
      for (var i = 0; i < elements.length; i++) {
        elementIndices[elements[i].getAttribute("id")] = i;
        observer.observe(elements[i]);
      }
    }
  }
});

$(document).ready(function () {
  if ($(".block--operational-acheivements").length) {
    $(".block--operational-acheivements").each(function (indx, cmpOPAelement) {
      const carouselDotIndicatorsElement = $(cmpOPAelement).find(".operational-acheivements-carousel-dot-indicators");
      const carouselArrowIndicatorsElement = $(cmpOPAelement).find(".operational-acheivements-carousel-arrow-indicators");

      $(cmpOPAelement).find(".operational-awards-container").slick({
        useTransform: true,
        autoplay: false,
        cssEase: "ease-out",
        dots: true,
        infinite: false,
        slidesToShow: 3,
        slidesToScroll: 3,
        prevArrow: `<button type='button' class='slick-prev'><i><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"><path d="M17 22.5L8 12L17 1.5" stroke="#FF0000" stroke-width="3"/></svg></i></button>`,
        nextArrow: `<button type='button' class='slick-next'><i><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"><path d="M7 22.5L16 12L7 1.5" stroke="#FF0000" stroke-width="3"/></svg></i></button>`,
        appendArrows: carouselArrowIndicatorsElement,
        dotsClass: "carousel-indicators",
        appendDots: carouselDotIndicatorsElement,
        responsive: [
          {
            breakpoint: 767,
            settings: {
              slidesToShow: 1,
              slidesToScroll: 1,
              arrows: false
            },
          },
          {
            breakpoint: 1250,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            },
          },
        ],
      });
    });
  }
});

$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$("#ourcsrpartners").length) {
            return;
        }
        initCSRPartner();
    } catch (error) {
        console.error(error);
    }
});

function initCSRPartner() {

    function createDynamicMarqueeAnimation(translateDistance) {
        // Create the <style> tag
        var style = document.createElement('style');
        style.type = 'text/css';

        // Keyframes content
        var keyFrames = `
            @keyframes marquee-left {
                from {
                    transform: translateX(${100}%);
                }
                to {
                    transform: translateX(-${translateDistance}px);
                }
            }`;

        // WebKit hack :(
        style.appendChild(document.createTextNode(""));

        // Append the keyframes to the style element
        style.innerHTML = keyFrames;

        // Inject the style element into the head of the document
        document.head.appendChild(style);

        // Optional: return the name of the animation for direct use
        return "marquee-left";
    }


    function init() {
        const awardsContainer = document.querySelector('.operational-awards-container');
        if (!awardsContainer) return;

        // Calculate the total width of all .operational-awards-contents elements
        const awardsContents = awardsContainer.querySelectorAll('.operational-awards-contents');
        let totalWidth = 0;
        awardsContents.forEach(content => {
            totalWidth += content.offsetWidth;
        });

        let duration = awardsContainer.getAttribute('data-animation-interval');
        if (!duration) {
            // Estimate a duration based on the total width. This is a simple example;
            // adjust the calculation based on the actual width and desired speed.
            duration = totalWidth / 200; // Example: 1 second for every 100px
        }

        // Apply the animation to each .operational-awards-contents element
        awardsContents.forEach(content => {
            content.style.animation = `${createDynamicMarqueeAnimation(totalWidth)} ${duration}s linear infinite`;
        });
    }

    window.onresize = init;

    init();
}
$(document).ready(function () {
  if (
    (document.getElementById("OurGoalsSustainability") &&
    document.getElementById("OurGoalsSustainability").children.length > 0) ||
    (document.getElementById("blockFacilitiesSustainability") &&
    document.getElementById("blockFacilitiesSustainability").children.length > 0)
  ) {
    // adding id for first tab element for default selection.
    var tabHeaderFirstElement = document.getElementsByClassName(
      "sustainability-tabs-header"
    )[0];
    tabHeaderFirstElement.id = "defaultOpen";

    var tabHeaderMobileFirstElement = document.getElementsByClassName(
      "sustainability-tabs-mobile-header"
    )[0];
    tabHeaderMobileFirstElement.id = "defaultOpenMobile";

    // Trigger while clicking on the tab header
    $(".sustainability-tabs-header").click(function (event) {
      showSelectedTabContent(
        event.target.getAttribute("data-id"),
        event.target
      );
    });

    $(".sustainability-tabs-mobile-header").click(function (event) {
      showSelectedMobileTabContent(
        event.target.getAttribute("data-id"),
        event.target
      );
    });

    // To show the selected tab content and hide the other contents
    function showSelectedTabContent(tabName, elmnt) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName(
        "sustainability-tabs-content"
      );
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("sustainability-tabs-header");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("sustainability-tab-active");
      }
      document.getElementById(tabName).style.display = "block";
      elmnt.classList.add("sustainability-tab-active");
    }

    function showSelectedMobileTabContent(tabName, elmnt) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName(
        "sustainability-tabs-mobile-content"
      );
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName(
        "sustainability-tabs-mobile-header"
      );
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("sustainability-tab-active");
      }
      document.getElementById(tabName).style.display = "block";
      elmnt.classList.add("sustainability-tab-active");
    }

    // Get the element with id="defaultOpen" and click on it
    if ($("#defaultOpen").length) {
      document.getElementById("defaultOpen").click();
    }
    if ($("#defaultOpenMobile").length) {
      document.getElementById("defaultOpenMobile").click();
    }
  }
});

$(document).ready(function () {
    let newResponse;
    let firstKey;
    let jsonResponse;
    let checkboxValues = {};
    let responce;
    let inputSearchValue;
    let redirectToBackUrl = document.referrer;

    if (document.getElementById("media-collection") && document.getElementById("media-collection").children.length > 0) {
        const ulAttach = $(".company-media-kit-collection .bike-model");
        const dataMediaProductPath = $('.product-details-component').data('media-product-path');
        function makeAjaxCall(elementId, params, mediaCollectionPath) {
            return new Promise(function (resolve, reject) {
                var element = document.getElementById(elementId);
                if (element) {
                    $.ajax({
                        type: "GET",
                        url: mediaCollectionPath,
                        data: params,
                        dataType: "json",
                        success: function (data) {
                            resolve(data);
                        },
                        error: function (error) {
                            console.error(error)
                            // reject(error);
                        }
                    });
                } else {
                    reject("Element with ID '" + elementId + "' not found.");
                }
            });
        }


        var elementId = "responseContainer";
        const queryParams = new URLSearchParams(window.location.search);
        var mediaParameters = {
            tag: queryParams.get('tag'),
            product: queryParams.get('product'),
            mediaAssetPath: dataMediaProductPath
        };
        var mediaCollectionPath = document.querySelector('.collection-content').getAttribute("data-component-mediaCollectionPath");

        document.getElementById("media-collection-header").innerHTML = queryParams.get('product');
        // Call the function with the element ID and parameters
        makeAjaxCall(elementId, mediaParameters, mediaCollectionPath)
            .then(function (response) {
                console.log("response", response)
                // Handle the successful response
                responce = response;
                firstKey = Object.keys(responce)[0];
                jsonResponse = responce[firstKey];
                for (const category in jsonResponse) {
                    if (jsonResponse[category].length > 0) {
                        for (const item of jsonResponse[category]) {
                            item.bikeModel = category;
                        }
                    }
                }

                for (const category in jsonResponse) {
                    for (const item of jsonResponse[category]) {
                        const assetSizeMB = convertBytesToMB(parseInt(item.assetSize));
                        item.assetSizeMB = assetSizeMB;
                        item.assetCategory = categorizeAssetSize(assetSizeMB);
                    }
                }
                for (const key in jsonResponse) {
                    ulAttach.append(`<li><input type="checkbox" value="${key}"><a href="#">${key}</a></li>`
                    );
                }
                ulAttach.prepend(`<li><h6 class="catogery-title">${firstKey}</h6></li>`);

                $('.company-media-kit-collection .dropdown-content li input[type="checkbox"]').change(function () {
                    const category = $(this).closest('.dropdown').find('.dropbtn').attr('value');
                    const value = $(this).val();
                    const isChecked = $(this).prop('checked');
                    updateCheckboxValues(category, value, isChecked);
                    let filteredResult = filterData(jsonResponse, checkboxValues);
                    generateLogoAndAssetsHtml(filteredResult)
                    $('.product-details-component .logo-gallery-item div img').on('click', function () {
                        var img = $(this).data('img');
                        $('.company-media-kit-collection .popup-img-container img').attr('src', img);
                        $('.company-media-kit-collection .popup-content .download-btn-desktop').data('image-url', img);
                        $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').data('image-url', img);
                        // $('.popup-img-container img').attr('alt' ,alt)
                        $('.company-media-kit-collection .popup').css('display', 'flex');
                    });

                    $('.company-media-kit-collection .popup .popup-wrapper .right-icon').on('click', function () {
                        $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '1');
                        $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '1');
                        var imgSrc = $(this).siblings().filter('.popup-img-container').children().attr('src');
                        // Select the element with the matching data-img value
                        var $matchedElement = $(' .product-details-component .logo-and-assets-container .logo-and-assets-item .logo-and-assets-gallery .logo-gallery-item  img[data-img="' + imgSrc + '"]');
                        // Check if the matched element exists
                        if ($matchedElement.length > 0) {
                            // Get the data-img value of the next element
                            var $nextElement = $matchedElement.closest('.logo-gallery-item').next('.logo-gallery-item ');
                            if ($nextElement.length > 0) {
                                var nextDataImg = $nextElement.find('img').attr('src');
                            } else {
                                $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '0.3');
                            }
                        } else {
                            console.log('No matching element found');
                        }


                        $('.company-media-kit-collection .popup-img-container img').attr('src', nextDataImg);
                        $('.company-media-kit-collection .popup-content .download-btn-desktop').data('image-url', nextDataImg);
                        $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').data('image-url', nextDataImg);
                        // $('.popup-img-container img').attr('alt' ,alt)
                        $('.company-media-kit-collection .popup').css('display', 'flex');
                    });
                    $('.company-media-kit-collection .popup .popup-wrapper .left-icon').on('click', function () {
                        $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '1');
                        $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '1');
                        var imgSrc = $(this).siblings().filter('.popup-img-container').children().attr('src');
                        // Select the element with the matching data-img value
                        var $matchedElement = $(' .product-details-component .logo-and-assets-container .logo-and-assets-item .logo-and-assets-gallery .logo-gallery-item  img[data-img="' + imgSrc + '"]');
                        // Check if the matched element exists
                        if ($matchedElement.length > 0) {
                            // Get the data-img value of the next element
                            var $prevElement = $matchedElement.closest('.logo-gallery-item').prev('.logo-gallery-item ');
                            if ($prevElement.length > 0) {
                                var nextDataImg = $prevElement.find('img').attr('src');
                            } else {
                                $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '0.3');
                            }
                        } else {
                            console.log('No matching element found');
                        }


                        $('.company-media-kit-collection .popup-img-container img').attr('src', nextDataImg);
                        $('.company-media-kit-collection .popup-content .download-btn-desktop').data('image-url', nextDataImg);
                        $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').data('image-url', nextDataImg);
                        // $('.popup-img-container img').attr('alt' ,alt)
                        $('.company-media-kit-collection .popup').css('display', 'flex');
                    });

                });
                $('.dropdown-content input[type="checkbox"]').on('change', function () {
                    let totalCount = $('.dropdown-content input[type="checkbox"]:checked').length;
                    let count = $(this).closest('.dropdown-content').find('input[type="checkbox"]:checked').length;
                    const dropdownBtn = $(this).closest('.dropdown').find('.dropbtn');
                    const dropdownMobileBtn = $('.filter-title-mobile .dropbtn-filter-count')
                    dropdownBtn.attr('data-count', count);

                    if (count > 0) {
                        if ($(window).width() > 767) {
                            $(dropdownBtn).find('.dropbtn-count').css('display', 'flex');
                            $(dropdownBtn).find('.dropbtn-count').text(count);
                            $(dropdownBtn).css('background', 'rgb(239, 239, 239)')
                        }
                        if ($(window).width() < 767) {
                            $(dropdownBtn).css('color', 'red')
                        }

                    }
                    else {
                        if ($(window).width() > 767) {
                            $(dropdownBtn).find('.dropbtn-count').css('display', 'none');
                            $(dropdownBtn).find('.dropbtn-count').text(count);
                            $(dropdownBtn).css('background', 'transparent');
                        }
                        if ($(window).width() < 767) {
                            $(dropdownBtn).css('color', '#000000')
                        }
                    }

                    if (totalCount > 0) {
                        if ($(window).width() <= 767) {
                            $(dropdownMobileBtn).css('display', 'flex');
                            $(dropdownMobileBtn).text(totalCount);
                            $('.filter-title-mobile').css({ 'padding': '8px 20px 8px 12px', 'background': '#f3f3f3' });
                        }
                    } else {
                        if ($(window).width() <= 767) {
                            $(dropdownMobileBtn).css('display', 'none');
                            $(dropdownMobileBtn).text(totalCount);
                            $('.filter-title-mobile').css({ 'padding': '0', 'background': '#fff' })

                        }
                    }

                });
                generateLogoAndAssetsHtml(jsonResponse);

                $('.product-details-component .logo-gallery-item div img').on('click', function () {
                    var img = $(this).data('img');

                    // var alt = $(this).data('alt')
                    $('.company-media-kit-collection .popup-img-container img').attr('src', img);
                    $('.company-media-kit-collection .popup-content .download-btn .download-btn-desktop').attr('data-image-url', img);
                    $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').attr('data-image-url', img);
                    // $('.popup-img-container img').attr('alt' ,alt)
                    $('.company-media-kit-collection .popup').css('display', 'flex');
                });

                $('.company-media-kit-collection .popup .popup-wrapper .right-icon').on('click', function () {
                    $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '1');
                    $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '1');
                    var imgSrc = $(this).siblings().filter('.popup-img-container').children().attr('src');
                    // Select the element with the matching data-img value
                    var $matchedElement = $(' .product-details-component .logo-and-assets-container .logo-and-assets-item .logo-and-assets-gallery .logo-gallery-item  img[data-img="' + imgSrc + '"]');
                    // Check if the matched element exists
                    if ($matchedElement.length > 0) {
                        // Get the data-img value of the next element
                        var $nextElement = $matchedElement.closest('.logo-gallery-item').next('.logo-gallery-item ');
                        if ($nextElement.length > 0) {
                            var nextDataImg = $nextElement.find('img').attr('src');
                        } else {
                            $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '0.3');
                        }
                    } else {
                        console.log('No matching element found');
                    }


                    $('.company-media-kit-collection .popup-img-container img').attr('src', nextDataImg);
                    $('.company-media-kit-collection .popup-content .download-btn-desktop').data('image-url', nextDataImg);
                    $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').data('image-url', nextDataImg);
                    // $('.popup-img-container img').attr('alt' ,alt)
                    $('.company-media-kit-collection .popup').css('display', 'flex');
                });
                $('.company-media-kit-collection .popup .popup-wrapper .left-icon').on('click', function () {
                    $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '1');
                    $('.company-media-kit-collection .popup .popup-wrapper .right-icon').css('opacity', '1');
                    var imgSrc = $(this).siblings().filter('.popup-img-container').children().attr('src');
                    // Select the element with the matching data-img value
                    var $matchedElement = $(' .product-details-component .logo-and-assets-container .logo-and-assets-item .logo-and-assets-gallery .logo-gallery-item  img[data-img="' + imgSrc + '"]');
                    // Check if the matched element exists
                    if ($matchedElement.length > 0) {
                        // Get the data-img value of the next element
                        var $prevElement = $matchedElement.closest('.logo-gallery-item').prev('.logo-gallery-item ');
                        if ($prevElement.length > 0) {
                            var nextDataImg = $prevElement.find('img').attr('src');
                        } else {
                            $('.company-media-kit-collection .popup .popup-wrapper .left-icon').css('opacity', '0.3');
                        }
                    } else {
                        console.log('No matching element found');
                    }


                    $('.company-media-kit-collection .popup-img-container img').attr('src', nextDataImg);
                    $('.company-media-kit-collection .popup-content .download-btn-desktop').data('image-url', nextDataImg);
                    $('.company-media-kit-collection .popup-content .download-btn-mobile .download-btn').data('image-url', nextDataImg);
                    // $('.popup-img-container img').attr('alt' ,alt)
                    $('.company-media-kit-collection .popup').css('display', 'flex');
                });
                // Attach a single event listener to a stable parent for select-all checkboxes
                document.querySelector('.company-media-kit-collection .logo-and-assets-container').addEventListener('change', function (event) {
                    if (event.target.classList.contains('select-all')) {
                        const gallery = event.target.closest('.logo-and-assets-item');
                        gallery.querySelectorAll('.logo-checkbox').forEach(function (checkbox) {
                            if (!checkbox.closest('.logo-gallery-item').classList.contains('hide')) {
                                checkbox.checked = event.target.checked;
                            }
                        });
                        updateDownloadButtonState(gallery, '.logo-checkbox');
                    }
                });
                // Attach a single event listener to a stable parent for individual image checkboxes
                document.querySelector('.company-media-kit-collection .logo-and-assets-container').addEventListener('change', function (event) {
                    if (event.target.classList.contains('logo-checkbox')) {
                        const galleryGroup = event.target.closest('.logo-and-assets-item');
                        const selectAllCheckbox = galleryGroup.querySelector('.select-all');
                        const allChecked = Array.from(galleryGroup.querySelectorAll('.logo-checkbox')).every(checkbox => checkbox.checked);
                        selectAllCheckbox.checked = allChecked;
                        updateDownloadButtonState(galleryGroup, '.logo-checkbox');
                    }
                });
                // Attach a single event listener to a stable parent for download buttons
                document.querySelector('.company-media-kit-collection .logo-and-assets-container').addEventListener('click', function (event) {
                    const downloadBtn = event.target.closest('.download-btn');
                    const loadMore = event.target.closest('.logo-and-assets-load-more');
                    if (downloadBtn) {
                        const galleryGroup = event.target.closest('.logo-and-assets-item');
                        handleDownload(galleryGroup, '.logo-checkbox');
                    }
                    if (loadMore) {
                        // handleDownload(galleryGroup, '.logo-checkbox');
                        const container = event.target.closest('.logo-and-assets-item');
                        const hiddenItems = container.querySelectorAll('.logo-gallery-item.hide');
                        const selectAllCheckbox = container.querySelector('.select-all');
                        selectAllCheckbox.checked = false;
                        // Show the next set of items
                        for (let i = 0; i < 12 && i < hiddenItems.length; i++) {
                            hiddenItems[i].classList.remove('hide');
                        }
                        // Optionally hide the 'Load More' button if all items are visible
                        if (hiddenItems.length <= 12) {
                            loadMore.style.display = 'none';
                        }
                    }
                });

            })
            .catch(function (error) {
                // Handle the error response
                // Optionally, update the content of the div container with an error message
                var responseContainer = document.getElementById(elementId);
                if (responseContainer) {
                    responseContainer.innerHTML = "Error: " + error;
                }
            });
    }

    // Function to convert bytes to megabytes and round to the nearest whole number
    function convertBytesToMB(bytes) {
        return Math.round((bytes / (1024 * 1024)) * 100) / 100;
    }

    // Function to categorize assetSizeMB
    function categorizeAssetSize(assetSizeMB) {
        if (assetSizeMB <= 2) {
            return '2 MB';
        } else if (assetSizeMB <= 5) {
            return '5 MB';
        } else if (assetSizeMB <= 10) {
            return '10 MB';
        } else {
            return '15 MB';
        }
    }

    function generateCardHTML(card) {
        return `
            <div class="logo-gallery-item">
                        <div>
                            <input type="checkbox" id="checkbox1" name="checkbox1">
                            <img data-img="image 916 (3).png" data-tags="${card.assetTags}" data-size="${card.assetSize}" data-format="${card.assetFormat}" src="${card.assetPath}">
                        </div>
                    </div>
        `;
    }

    // Function to generate HTML for category and cards
    function generateCategoryHTML(category, cards) {
        if (cards.length === 0) {
            return ''; // Skip categories with no cards
        }
        const cardsHTML = cards.map(generateCardHTML).join('');
        return `
            <div class="logo-and-assets-item">
                <div class="media-logo-header">
                    <span>${category}</span>
                    <div class="row-align-item-center checkbox-and-download-container">
                        <div class="row-align-item-center">
                            <input type="checkbox" id="checkbox1" name="checkbox1">
                            <span>Select All</span>
                        </div>
                        <div class="row-align-item-center">
                            <span>DOWNLOAD</span>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                                <path d="M7.16431 4.81871V7.6397H5.26014H3.35156L6.67063 10.9544L9.9853 14.2734L13.3 10.9544L16.619 7.6397H14.7105H12.8063V4.81871V1.99772H9.9853H7.16431V4.81871Z" fill="black"></path>
                                <path d="M3.375 17.0523V18H9.9867H16.5984V17.0523V16.1046H9.9867H3.375V17.0523Z" fill="black"></path>
                              </svg>
                        </div>
                    </div>
                </div>
                <!-- content -->
                <div class="logo-and-assets-gallery">${cardsHTML}</div>
                <div class="logo-and-assets-load-more">
                    <button>Load More</button>
                </div>
            </div>
        `;
    }

    function renderCategoriesAndCards(data) {
        const categoryContainer = document.getElementById('red');
        categoryContainer.innerHTML = "";
        Object.entries(data).forEach(([category, cards]) => {
            const categoryHTML = generateCategoryHTML(category, cards);
            categoryContainer.innerHTML += categoryHTML;
        });
    }

    // Function to update checkboxValues based on checkbox changes
    function updateCheckboxValues(category, value, isChecked) {
        if (!checkboxValues.hasOwnProperty(category)) {
            checkboxValues[category] = [];
        }

        if (isChecked) {
            checkboxValues[category].push(value);
        } else {
            checkboxValues[category] = checkboxValues[category].filter(item => item !== value);
        }
        if (checkboxValues[category].length === 0) {
            delete checkboxValues[category];
        }
        // console.log("checkbox", checkboxValues);
    }

    // function for filtering the data
    function filterData(data, passValue) {
        // console.log(passValue)
        const filteredData = {};

        for (let category in data) {
            const filteredCategory = data[category].filter(item => {
                return Object.entries(passValue).every(([key, values]) => {
                    return values.length === 0 || (item[key] && values.some(value => item[key].includes(value)));
                });
            });

            if (filteredCategory.length > 0) {
                filteredData[category] = filteredCategory;
            }
        }

        return filteredData;
    }

    // for dropdown
    $('.company-media-kit-collection .dropdown .dropbtn').on('click', function () {
        if ($('.company-media-kit-collection .dropdown .dropbtn').hasClass('active-btn-i')) {
            $('.company-media-kit-collection .dropdown .dropbtn').siblings().removeClass('show')
            $('.company-media-kit-collection .dropdown .dropbtn').children().removeClass('rotate')
            $('.company-media-kit-collection .dropdown .dropbtn').removeClass('active-btn-i')


        } else {
            $(this).siblings().toggleClass('show')
            $(this).find('svg').toggleClass('rotate')
            $(this).toggleClass('active-btn-i')
        }
    });

    // Close the dropdown if the user clicks outside of it
    window.onclick = function (event) {
        if (!event.target.matches('.dropbtn')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                    $('.dropbtn').children().removeClass('rotate')
                    $('.dropbtn').removeClass('active-btn-i')
                }
            }
        }
    }
    // for logo and assets
    function createLogoAndAssetsItem(title, logos) {
        // Loop over the items and add them to the gallery
        let galleryDiv = ''
        const itemsToShowInitially = 12; // Number of items to show initially
        logos.forEach((item, index) => {
            // Add a class to hide items beyond the initial count
            const hideClass = index >= itemsToShowInitially ? 'hide' : '';
            galleryDiv += `
        <div class="logo-gallery-item ${hideClass}">
            <div>
                <input type="checkbox" class="logo-checkbox" name="checkbox${index + 1}">
                <img data-img="${item.assetPath}" data-size="${item.assetSize}" data-tags="${item.assetTags}" data-format="${item.assetFormat}" src="${item.assetPath}" />
            </div>
        </div>
        
    `;
        });
        const loadMoreButtonHtml = logos.length > 12 ? `
        <div class="logo-and-assets-load-more">
            <button>Load More</button>
        </div>` : '';
        return `
    <div class="logo-and-assets-item">
        <div class="media-logo-header">
            <span>${title}</span>
            <div class="row-align-item-center checkbox-and-download-container">
                <div class="row-align-item-center">
                    <input type="checkbox" class="select-all" name="checkbox-heading">
                    <span>Select All</span>
                </div>
                <button class="download-btn row-align-item-center" disabled="true">
                    <span>DOWNLOAD</span>
                    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/download.svg" />
                </button>
            </div>
        </div>
        <!-- content -->
        <div class="logo-and-assets-gallery">
            ${galleryDiv}
        </div>
        ${loadMoreButtonHtml}
    </div>
    `;
    }

    function generateLogoAndAssetsHtml(api_response) {
        const gallery = document.querySelector('.logo-and-assets-container');
        const products = api_response;
        gallery.innerHTML = '';
        // Check if products has data
        if (!products || Object.keys(products).length === 0) {
            gallery.innerHTML = noDataPlaceholder();
            return;
        }
        Object.keys(products).forEach(productName => {
            gallery.innerHTML += createLogoAndAssetsItem(productName, products[productName]);
        });
    }
    function loadMoreItems() {
        const container = document.querySelector('.product-photo-gallery');
        const hiddenItems = container.querySelectorAll('.gallery-item.hide');
        // Show the next set of items
        for (let i = 0; i < 12 && i < hiddenItems.length; i++) {
            hiddenItems[i].classList.remove('hide');
        }

        // Optionally hide the 'Load More' button if all items are visible
        if (hiddenItems.length <= 12) {
            loadMoreBtn.style.display = 'none';
        }
    }

    function noDataPlaceholder(search = false) {
        return `<div class="error-container">
    <img src="${search ? '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/no-search-found.png' : '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/media-kit/no-data-available.png'}" />
    <span>${search ? 'No Result Found' : 'No Data Available'}</span>
    <span>We couldn’t find any matches. Try again</span>
</div>`;
    }

    function downloadImage(url, filename) {
        fetch('https://plus.unsplash.com/premium_photo-1669652639356-f5cb1a086976?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')
            .then(response => {
                return response.blob();
            }) // Convert the response to a blob
            .then(blob => {
                // Create a new URL for the blob
                const blobUrl = URL.createObjectURL(blob);
                // Create an anchor element and set its href to the blob URL
                const anchor = document.createElement('a');
                anchor.href = blobUrl;
                anchor.download = filename || 'download';
                // Append the anchor to the document
                document.body.appendChild(anchor);
                // Trigger the download by simulating a click
                anchor.click();
                // Remove the anchor from the document
                document.body.removeChild(anchor);
                // Revoke the blob URL after the download
                URL.revokeObjectURL(blobUrl);
            })
            .catch(e => console.error('Error in downloading image: ', e));
    }
    function updateDownloadButtonState(galleryGroup, checkbox_class) {
        const anyChecked = Array.from(galleryGroup.querySelectorAll(checkbox_class)).some(checkbox => checkbox.checked);
        const downloadBtn = galleryGroup.querySelector('.download-btn');
        downloadBtn.disabled = !anyChecked;
    }
    // Function to handle download action
    function handleDownload(galleryGroup, class_name) {
        const selectedImages = Array.from(galleryGroup.querySelectorAll(`${class_name}:checked`)).map(checkbox => {
            // Assuming the image is a sibling of the checkbox
            const image = checkbox.nextElementSibling;
            return image.src; // or any other identifier of the image
        });
        console.log('Selected images:', selectedImages);
        selectedImages.forEach((url) => {
            // using name from the url itself
            const name = url.split('/')[url.split('/').length - 1]
            downloadImage(url, name);
        })
    }

    document.addEventListener('DOMContentLoaded', function () {
        // for Initial relativePath and parameters
        loadMoreBtn = document.querySelector('.product-photos-load-more button');
        loadMoreBtn.addEventListener('click', loadMoreItems);
        // Attach a single event listener to a stable parent for select-all checkboxes
        document.querySelector('.logo-and-assets-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('select-all')) {
                const gallery = event.target.closest('.logo-and-assets-item');
                gallery.querySelectorAll('.logo-checkbox').forEach(function (checkbox) {
                    if (!checkbox.closest('.logo-gallery-item').classList.contains('hide')) {
                        checkbox.checked = event.target.checked;
                    }
                });
                updateDownloadButtonState(gallery, '.logo-checkbox');
            }
        });
        // Attach a single event listener to a stable parent for individual image checkboxes
        document.querySelector('.logo-and-assets-container').addEventListener('change', function (event) {
            if (event.target.classList.contains('logo-checkbox')) {
                const galleryGroup = event.target.closest('.logo-and-assets-item');
                const selectAllCheckbox = galleryGroup.querySelector('.select-all');
                const allChecked = Array.from(galleryGroup.querySelectorAll('.logo-checkbox')).every(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked;
                updateDownloadButtonState(galleryGroup, '.logo-checkbox');
            }
        });
        // Attach a single event listener to a stable parent for download buttons
        document.querySelector('.logo-and-assets-container').addEventListener('click', function (event) {
            const downloadBtn = event.target.closest('.download-btn');
            const loadMore = event.target.closest('.logo-and-assets-load-more');
            if (downloadBtn) {
                const galleryGroup = event.target.closest('.logo-and-assets-item');
                handleDownload(galleryGroup, '.logo-checkbox');
            }
            if (loadMore) {
                // handleDownload(galleryGroup, '.logo-checkbox');
                const container = event.target.closest('.logo-and-assets-item');
                const hiddenItems = container.querySelectorAll('.logo-gallery-item.hide');
                const selectAllCheckbox = container.querySelector('.select-all');
                selectAllCheckbox.checked = false;
                // Show the next set of items
                for (let i = 0; i < 12 && i < hiddenItems.length; i++) {
                    hiddenItems[i].classList.remove('hide');
                }
                // Optionally hide the 'Load More' button if all items are visible
                if (hiddenItems.length <= 12) {
                    loadMore.style.display = 'none';
                }
            }
        });
    });

    // generateLogoAndAssetsHtml(jsonResponse);
    let redirectToBackUrlWithot = redirectToBackUrl.split("?");
    redirectToBackUrlWithot = redirectToBackUrlWithot[0];
    $('.product-details-component .back-btn').attr('href', redirectToBackUrlWithot);

    $('.company-media-kit-collection .search-container .search-input').keydown(function (event) {
        inputSearchValue = $('.company-media-kit-collection .search-container .search-input').val();
        let redirectToBackUrlPath = `${redirectToBackUrlWithot}?q=${inputSearchValue}`;
        $('.company-media-kit-collection .search-icon').attr('href', redirectToBackUrlPath);

        // Check if Enter key was pressed (key code 13)
        if (event.keyCode === 13) {
            $('.company-media-kit-collection .search-container a')[0].click();
        }


    });

    $('.dropdown-content input[type="checkbox"]').on('change', function () {
        let totalCount = $('.dropdown-content input[type="checkbox"]:checked').length;
        let count = $(this).closest('.dropdown-content').find('input[type="checkbox"]:checked').length;
        const dropdownBtn = $(this).closest('.dropdown').find('.dropbtn');
        const dropdownMobileBtn = $('.filter-title-mobile .dropbtn-filter-count')
        dropdownBtn.attr('data-count', count);

        if (count > 0) {
            if ($(window).width() > 767) {
                $(dropdownBtn).find('.dropbtn-count').css('display', 'flex');
                $(dropdownBtn).find('.dropbtn-count').text(count);
                $(dropdownBtn).css('background', 'rgb(239, 239, 239)')
            }
        }
        else {
            if ($(window).width() > 767) {
                $(dropdownBtn).find('.dropbtn-count').css('display', 'none');
                $(dropdownBtn).find('.dropbtn-count').text(count);
                $(dropdownBtn).css('background', 'transparent');
            }
        }
        if (totalCount > 0) {
            if ($(window).width() <= 767) {
                $(dropdownMobileBtn).css('display', 'flex');
                $(dropdownMobileBtn).text(totalCount)
            }
        } else {
            if ($(window).width() <= 767) {
                $(dropdownMobileBtn).css('display', 'none');
                $(dropdownMobileBtn).text(totalCount)

            }
        }

    });

    $('.company-media-kit-collection .close-btn').on('click', function () {
        $('.popup').fadeOut();
    });
    $('.company-media-kit-collection .back-btn-inner').on('click', function () {
        $('.popup').fadeOut();
    });
    $('.product-details-component .filter-title-mobile').on('click', function () {
        $('.product-details-component .nav-links .overlay-mobile').css('display', 'flex');
        $('body').addClass('overlay');
    });
    $('.company-media-kit-collection .close-btn').on('click', function () {
        if ($(window).width() <= 767) {
            $('.product-details-component .nav-links .overlay-mobile').fadeOut();
        }

        $('body').removeClass('overlay');
    });
    $('.company-media-kit-collection .back-btn-inner').on('click', function () {
        if ($(window).width() <= 767) {
            $('.product-details-component .nav-links .overlay-mobile').fadeOut();
        }

        $('body').removeClass('overlay');
    });

    function downloadImage(imageUrl) {
        const downloadLink = document.createElement('a');
        downloadLink.href = imageUrl;
        downloadLink.download = 'company-image.jpg'; // You can change the filename here
        downloadLink.click();
    }

    // Click event handler for the download button
    $('.company-media-kit-collection .download-btn-mobile .download-btn').on('click', function () {
        let imageUrl = $(this).data('image-url');
        downloadImage(imageUrl);
    });

    $('.company-media-kit-collection .download-btn .download-btn-desktop').on('click', function () {
        let imageUrl = $(this).data('image-url');
        downloadImage(imageUrl);
    });

});
$(document).ready(function () {
  if (
    document.getElementsByClassName(
      "shareholder-inverstors-resouces-container"
    ) &&
    document.getElementsByClassName("shareholder-inverstors-resouces-container")
      .length > 0
  ) {
    // adding padding top only it have child element
    const shareHolderSection = $(".share-holders-link-wrapper");
    for (let i = 0; i < shareHolderSection.length; i++) {
      if (shareHolderSection[i].childElementCount > 0) {
        shareHolderSection[i].classList.add("padding-top");
      }
    }

    // to show and hide the description using read more/less
    if ($(window).width() < 767) {
      $(".share-holders-download-text").addClass("read-less-text-styles");
      $(".read-less-text").addClass("d-none");
      $(".read-more-text").click(function (e) {
        $(this)[0].previousElementSibling.classList.remove(
          "read-less-text-styles"
        );
        $(this).addClass("d-none");
        $(this)[0].nextElementSibling.classList.remove("d-none");
        e.preventDefault();
      });
      $(".read-less-text").click(function (e) {
        $(this)[0].previousElementSibling.previousElementSibling.classList.add(
          "read-less-text-styles"
        );
        $(this).addClass("d-none");
        $(this)[0].previousElementSibling.classList.remove("d-none");
        e.preventDefault();
      });
    } else {
      $(".read-less-text").addClass("d-none");
      $(".read-more-text").addClass("d-none");
    }
  }
});

$(document).ready(function () {
    try {
        if($('.contact-us-sidenav-container').length) {
            sideNavDropDown();
        }
    } catch (error) {
        console.error(error);
    }
    
    function clickedShow(element, container, scrollSpeed = 100) {
        const zeroLeft = $(element).position().left + $(container).scrollLeft();
        const offsetLeft = $(container).width() - $(element).width();
        const scrollTo = zeroLeft - offsetLeft;
        $(container).animate({ scrollLeft: scrollTo }, scrollSpeed);
    }

    function companyTab(element) {
        $(element).find('.tab-wrapper > .nav-tabs').each(function (indx, cmpTabsElement) {
            $(cmpTabsElement).on('click', '.nav-item .nav-link', function (e) {
                clickedShow(this, cmpTabsElement);
            });
        });
    }

    function sideNavDropDown() {
        $('.contact-us-sidenav-container').each(function (a, cmpContactUsSideNavElement) {
            const dropdownButtonElem = $(cmpContactUsSideNavElement).find('.contact-us-sidenav-dropdown .dropdown-toggle');
            const initalTextContent = $(cmpContactUsSideNavElement).find('.contact-us-sidenav-dropdown .dropdown-menu .nav-item .btn-item span').first().text();

            if (dropdownButtonElem) {
                if (initalTextContent) {
                    dropdownButtonElem.text(initalTextContent);
                } else {
                    dropdownButtonElem.text('');
                }
            }

            $(cmpContactUsSideNavElement).find('.contact-us-sidenav-dropdown .dropdown-menu').on('click', '.nav-item .btn-item', function(e) {
                const textContent = $(this).find('span').text();
                if (dropdownButtonElem) {
                    if (textContent) {
                        dropdownButtonElem.text(textContent);
                    } else {
                        dropdownButtonElem.text('');
                    }
                }
            });

            if ($(cmpContactUsSideNavElement).hasClass('contact-us-sidenav-with-title')) {
                companyTab(cmpContactUsSideNavElement);
            }
        });
    }
});

// $(document).ready(function () {
//     $("#addressList").change(function () {
//         const selectedAdd = this.value;
//         let x = document.querySelectorAll(".corpaorateOffice");
//         $(".corpaorateOffice").hide();
//         for (let i = 0; i < x.length; i++) {
//             var attadd = x[i].attributes.titleid.nodeValue;
//             if (attadd.includes(selectedAdd)) {
//                 x[i].classList.add('showAdd');
//             } else {
//                 x[i].classList.remove('showAdd');
//             }
//         }
//     });

//     function contactZone() {
//         var i;
//         var x = document.querySelectorAll(".contact-title");
//         var text = [];
//         for (i = 0; i < x.length; i++) {
//             text[i] = x[i].textContent;
//         }
//         var linkText, html = "";
//         for (i = 0; i < text.length; i++) {
//             linkText = text[i];
//             html += "<option value=" + linkText + ">" + linkText + "</option>";
//         }
//         $('#addressList').append(html);
//         $('#addressList').trigger('change');
//     }
//     contactZone();

//     $('.address-col-val#phoneNumber').each(function () {
//         let arr = []
//         let element = $(this);
//         arr = $(this)[0].innerText.split(",")
//         if (arr.length > 0) {
//             $(this)[0].innerHTML = ''
//             arr.forEach(function (ele) {
//                 element.append("<a href=Tel:" + ele + ">" + ele + "</a>")
//             }

//             )
//         }
//     })
// })

$(document).ready(function () {

    var initialText = $(".zoneal-dropdown .cust-dropdown-menu li:first").attr('data-label');
    var initialValue = $(".zoneal-dropdown .cust-dropdown-menu li:first").attr('value');
    $(".zoneal-dropdown .cust-dropdown-menu li:first").addClass('active')
    $(".zoneal-dropdown .dropdown-select").text(initialText);
    $(".zoneal-dropdown input[name='zonalSelectVal']").val(initialValue);



    $(document).on("click", ".zoneal-dropdown .cust-dropdown-menu li", function () {
        $(".zoneal-dropdown .cust-dropdown-menu li").removeClass("active");
        $(this).addClass("active");
        var selectedText = $(this).attr('data-label');
        var selectedValue = $(this).attr('value');
        renderDiv(selectedValue);

        var selectionGroup = $(this).closest(".cust-drop-down");
        var button = selectionGroup.find(".dropdown-select");
        var input = selectionGroup.find("input[name='zonalSelectVal']");

        button.text(selectedText);
        input.val(selectedValue);

    });
});

$(document).ready(function () {
    const allStar = document.querySelectorAll('.rating .star')
    const ratingValue = document.querySelector('.rating input')


    allStar.forEach((item, idx) => {
        item.addEventListener('click', function () {
            let click = 0;
            ratingValue.value = idx + 1;
            $(this).siblings('.form-input').removeClass('error');
            if ($('.rate-us-form input[name="rating"]').hasClass('error')) {
                $('..rate-us-form .rate-title').find('span').addClass('error');
            } else {
                $('.rate-us-form .rate-title').find('span').removeClass('error');
            }

            allStar.forEach(i => {
                i.classList.replace('bxs-star', 'bx-star')
                i.classList.remove('active')
            })
            for (let i = 0; i < allStar.length; i++) {
                if (i <= idx) {
                    allStar[i].classList.replace('bx-star', 'bxs-star')
                    allStar[i].classList.add('active')
                } else {
                    allStar[i].style.setProperty('--i', click)
                    click++
                }

            }
        })
    })
    $('.company-contact-us-feedback .form-input').focusin(function () {
        $(this).removeClass('error');
    });

    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".company-contact-us-feedback").length) {
            return;
        }
        initCompanyContactUsFeedback();

    } catch (error) {
        console.error(error);
    }

    function initCompanyContactUsFeedback() {
        const popupAction = document.querySelector('.company-contact-us-feedback .company-contact-us-provide-feedback-action');
        const popup = document.querySelector('.company-contact-us-feedback .popup');
        const popupCloseAction = document.querySelector('.company-contact-us-feedback .popup .popup-content .popup-wrapper .inner-section .btn-close')

        if (popupAction) {
            popupAction.addEventListener('click', function () {
                if (popup) {
                    popup.style.display = "block";
                    $('body').css('overflow','hidden');
                    $('body').css('height','100vh');
                }
            })
        }

        if (popupCloseAction) {
            popupCloseAction.addEventListener('click', function () {
                if (popup) {
                    popup.style.display = "none";
                    $('body').css('overflow','');
                    $('body').css('height','');
                }
            })
        }
    }
    let submitBtn = $('.company-contact-us-feedback .raise-query-btn');
    let closeBtn = $('.company-contact-us-feedback .sucsess-popup .btn-close');

    $(submitBtn).click(function (event) {
        // Validate form fields before submission
        let isValid = true;
        $('.rate-us-form .form-input').each(function () {
            if ($(this).val().trim() === '') {
                isValid = false;
                $(this).addClass('error');
            } else {
                $(this).removeClass('error');
            }
        });

        if ($('.rate-us-form input[name="rating"]').hasClass('error')) {
            $(this).closest('.raise-query-button-section').siblings('.rate-us-form').find('.rate-title').find('span').addClass('error');
        } else {
            $(this).closest('.raise-query-button-section').siblings('.rate-us-form').find('.rate-title').find('span').removeClass('error');
        }

        // If form is valid, submit the form
        if (isValid) {
            $('.rate-us-form').submit();
        } else {
            event.preventDefault();
        }
    });

    $('.rate-us-form').submit(function (event) {

        event.preventDefault();
        let formData = $(this).serializeArray();
        let data = {};
        $(formData).each(function (index, obj) {
            data[obj.name] = obj.value;
        });

        const feedbackFormUrl = $('.company-contact-us-feedback #feedbackFormUrl').val();

        $.ajax({
            url: feedbackFormUrl,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (response) {
                $('.company-contact-us-feedback .popup').css('display', 'none');
                $('.company-contact-us-feedback .rate-us-form').trigger('reset');
                $('.company-contact-us-feedback .rate-us-form').find('.form-input').val('');
                $('.company-contact-us-feedback .rating').find('i.active').each(function () {
                    $(this).removeClass('bxs-star').addClass('bx-star');
                });
                $('.company-contact-us-feedback .rating').find('i').removeClass('active');
                const responseObject = JSON.parse(response);
                if (responseObject && responseObject.PWSESSIONRS && responseObject.PWSESSIONRS.length > 0) {
                    let pwSessionRs = responseObject.PWSESSIONRS[0];
                    if (pwSessionRs.PWPROCESSRS && pwSessionRs.PWPROCESSRS.PWDATA && pwSessionRs.PWPROCESSRS.PWDATA.surge_forms && pwSessionRs.PWPROCESSRS.PWDATA.surge_forms.Row && pwSessionRs.PWPROCESSRS.PWDATA.surge_forms.Row.length > 0) {
                        const successMessage = pwSessionRs.PWPROCESSRS.PWDATA.surge_forms.Row[0].message;
                        const successVal = pwSessionRs.PWPROCESSRS.PWDATA.surge_forms.Row[0].success;
                        if (successVal.length && successVal == "1") {
                            // Show the success message to the user
                            if (successMessage.length) {
                                $('.company-contact-us-feedback .sucsess-popup .inner-section .thank-you-container-popup .first-text').text(successMessage);
                            }
                            if ($('.company-contact-us-feedback .like-icon img').length > 0) {
                                const firstIMG = $('.company-contact-us-feedback .sucsess-popup .like-icon img:first');
                                $(firstIMG).css('display', 'block');
                            };
                            $('.company-contact-us-feedback .sucsess-popup').css('display', 'block');
                            $('body').css('overflow','hidden');
                            $('body').css('height','100vh');
                        } else {
                            // Show the error message to the user
                            if (successMessage.length) {
                                $('.company-contact-us-feedback .sucsess-popup .inner-section .thank-you-container-popup .first-text').text(successMessage);
                            }

                            if ($('.company-contact-us-feedback .like-icon img').length > 0) {
                                const secondIMG = $('.company-contact-us-feedback .sucsess-popup .like-icon img:last');
                                $(secondIMG).css('display', 'block');
                            };

                            $('.company-contact-us-feedback .sucsess-popup').css('display', 'block');
                            $('body').css('overflow','hidden');
                            $('body').css('height','100vh');
                        }
                    }
                }

            },
            error: function (xhr, status, error) {

                console.error('Error submitting form:', error);
            }
        });
    });

    $(closeBtn).on('click', function () {
        $('.company-contact-us-feedback .sucsess-popup').css('display', 'none');
        $('body').css('overflow','');
        $('body').css('height','');
    })

});



$(document).ready(function () {
  $('#consentcheck').on('click', function(){
    if($("#consentcheck").prop("checked")) {
      $('.company-contact-us-corporate .submit-btn').prop("disabled", false);
    } else {
      $('.company-contact-us-corporate .submit-btn').prop("disabled", true);
    }
  })

  $('#consentcheck2').on('click', function(){
    if($("#consentcheck2").prop("checked")) {
      $('.company-contact-us-raise .submit-btn').prop("disabled", false);
    } else {
      $('.company-contact-us-raise .submit-btn').prop("disabled", true);
    }
  })

  if ($(".company-contact-us-raise, .company-contact-us-corporate").length > 0) {
    let defaultservlet = document.getElementById("defaultservlet").value;
    let url = defaultservlet + ".statelist.html";
    let captchText = "";
    let currentForm = $(".company-contact-us-raise form");
    createCaptcha(currentForm);
    function preventFutureDates() {
      let today = new Date();
      let dd = String(today.getDate()).padStart(2, "0");
      let mm = String(today.getMonth() + 1).padStart(2, "0");
      let yyyy = today.getFullYear();
      today = yyyy + "-" + mm + "-" + dd;
      $(".company-contact-us-raise input[type='date']").attr("max", today);
    }
    let title = $("title").text();
    let category = window.location.pathname.split("/")[2];
    let splitedUrl = window.location.origin.split("//");
    let splitedDomain = splitedUrl[1].split(".");
    let siteCategory;
    if (splitedDomain[1] === "heromotocorp") {
      siteCategory = "corporate";
    }
    if (splitedDomain[1] === "dealers") {
      siteCategory = "dealer";
    }

    const formSelect = document.querySelector(".media-forms");
    let formFields = document.querySelectorAll(
      ".company-contact-us-raise input, .company-contact-us-raise textarea, .company-contact-us-raise .dropdown-select"
    );
    let startEventSent = false;
    formFields.forEach((key) => {
      key.addEventListener("focus", () => {
        if (!startEventSent) {
          window.digitalData.push({
            event: "Form Start",
            formDetails: {
              formfield: key.name,
              formname: $(formSelect).find("form").attr("class"),
              formtype: $(formSelect).find("section").attr("id"),
            },
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          });
        }
        startEventSent = true;
      });
    });

    function preventPastDates() {
      let today = new Date();
      let dd = String(today.getDate()).padStart(2, "0");
      let mm = String(today.getMonth() + 1).padStart(2, "0");
      let yyyy = today.getFullYear();
      today = yyyy + "-" + mm + "-" + dd;
      $(".company-contact-us-raise input[type='date']").attr("min", today);
    }

    function defaultDate(getTestDate) {
      if (getTestDate == 0) {
        var today = new Date();
        var defaultDate = new Date();
        defaultDate.setDate(today.getDate() + 10);
        $("#expected-date").val(defaultDate.toISOString().substring(0, 10));
      } else {
        $("#expected-date").val(getTestDate);
        $("#expected-date").attr("min", getTestDate);
      }
    }

    if ($("section#suggestions").length > 0) {
      preventFutureDates();
    }

    if ($("section#test-ride").length > 0) {
      preventPastDates();
      defaultDate(0);
    }

    $("#testride-date").on("change", function () {
      let inputTestDate = $(this).val();
      defaultDate(inputTestDate);
    });

    $('.contact-us-form #cpatchaTextBox').keyup(function () {
      $(this).siblings('label').addClass('d-none');
    });

    function validateEmail(email) {
      var re =
        /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(email).toLowerCase());
    }

    let stateName = "";

    $("#txtComplaint").keyup(function () {
      let textLength = $(this).val().length;
      if (textLength > 2000) {
        $(this).val($(this).val().substring(0, 2000));
      }
    });

    function sortAscending(a, b) {
      return $(b).text().toUpperCase() < $(a).text().toUpperCase() ? 1 : -1;
    }

    $("#testride").change(function () {
      if (this.checked) {
        $("#test--date").show();
        $("#test--date input").attr("required", true);
      } else {
        var today = new Date();
        var defaultDate = new Date();
        defaultDate.setDate(today.getDate() + 10);
        $("#expected-date").val(defaultDate.toISOString().substring(0, 10));
        $("#test--date input").val("");
        $("#test--date").hide();
        $("#test--date input").attr("required", false);
      }
    });

    $(".company-contact-us-raise textarea").keyup(function () {
      $(this).siblings(".error-message").hide();
    });

    $(".company-contact-us-raise input").keyup(function () {
      $(this).siblings(".error-message").hide();
    });

    $("input#pin").on("input", function () {
      if (this.value.length > 6) {
        this.value = this.value.slice(0, 6);
      }
    });

    $("input#age").on("input", function () {
      if (this.value.length > 2) {
        this.value = this.value.slice(0, 2);
      }
    });

    $(document).on("change", '.company-contact-us-raise input[type="date"]', function () {
      $(this).siblings(".error-message").hide();
    });

    // DropDowns
    function populateDropdown(url, selector, keyword, selectedVal) {
      if (url) {
        fetch(url)
          .then(function (response) {
            if (!response.ok) {
              // make the promise be rejected if we didn't get a 2xx response
              throw new Error("Not 2xx response", {
                cause: response,
              });
            } else {
              return response.text();
            }
          })
          .then(function (html) {
            if (selector && selector.length) {
              selector[0].innerHTML = html;
            }
            let form = $(selector).closest("form");
            if (keyword == "state") {
              //sort in ascending order
              form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(
                  form
                    .find('[name="statename"]')
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu")
                );
              let dealerstatelist = form
                .find('[name="dealerstate"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu ");
              if (dealerstatelist.length) {
                dealerstatelist[0].innerHTML = html;
              }
            }

            if (keyword == "city") {
              let cityField = form.find('[name="cityname"]');
              let abbrCity = cityField.attr("data-default-label");
              cityField[0].disabled = false;
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrCity = selectedVal;
                form.find('[name="cityNameVal"]').val(selectedVal);
              }
              cityField.text(abbrCity);
              $("button[name='cityname']").siblings("ul").find("li:first").trigger("click");
            }
            if (keyword == "dealercity") {
              let dealerCityField = form.find('[name="dealercity"]');
              let dealerNameField = form.find('[name="dealername"]');
              let abbrCity = dealerCityField.attr("data-default-label");
              let abbrName = dealerNameField.attr("data-default-label");
              dealerCityField.attr("disabled", false);
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrCity = selectedVal;
                form.find('[name="dealerCityNameVal"]').val(selectedVal);
                abbrName = dealerNameField.text().trim();
                form.find('[name="dealerVal"]').val(form.find('[name="dealerVal"]').val());
                dealerNameField.attr("disabled", false);
              }
              if (abbrName == dealerNameField.attr("data-default-label")) {
                dealerNameField[0].disabled = true;
                form.find('[name="dealerVal"]').val("");
              }
              dealerCityField.text(abbrCity);
              dealerNameField.text(abbrName);
              $("button[name='dealercity']").siblings("ul").find("li:first").trigger("click");
            }
            if (keyword == "dealer") {
              //sort in ascending order
              let dealerField = form.find('[name="dealername"]');
              dealerField[0].disabled = false;
              dealerField
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu li")
                .sort(sortAscending)
                .appendTo(dealerField.parents(".cust-drop-down").find(".cust-dropdown-menu"));
              abbrDealer = dealerField.attr("data-default-label");
              if (
                selectedVal &&
                $(selector[0])
                  .children("li:contains(" + selectedVal.toLowerCase() + ")")
                  .attr("value")
              ) {
                abbrDealer = selectedVal;
                form.find('[name="dealerVal"]').val(form.find('[name="dealerVal"]').val());
              } else {
                form.find('[name="dealerVal"]').val("");
              }
              dealerField.text(abbrDealer);
              $("button[name='dealername']").siblings("ul").find("li:first").trigger("click");
            }
          });
      }
    }

    if ($(".company-contact-us-raise form, .company-contact-us-corporate form").length >= 1) {
      $(".company-contact-us-raise form, .company-contact-us-corporate form").each(function (
        item
      ) {
        if ($(item).find('button[name="statename"]').length) {
          let statelist = $(this)
            .find('[name="statename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          populateDropdown(
            defaultservlet + ".statelist.html",
            statelist,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        } else {
          let statelistDistrict = $(this)
            .find('[name="statenameDistrict"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu ");
          populateDropdown(
            defaultservlet + ".districtstatelist.html",
            statelistDistrict,
            "state",
            window && window.locations ? locations.State : null,
            false
          );
        }

        let vehiclelist = $(this)
          .find('[name="vehiclemodelname"]')
          .parents(".cust-drop-down")
          .find(".cust-dropdown-menu ");
        populateDropdown(
          defaultservlet + ".vehiclelist.html",
          vehiclelist,
          "vehicle",
          window && window.locations ? locations.State : null,
          false
        );
      });
    }

    $(
      ".company-contact-us-raise .cust-dropdown-menu, .company-contact-us-corporate .cust-dropdown-menu,.company-contact-us-raise-form.contact-us-form .cust-dropdown-menu"
    ).on("click", "li", function () {
      const subCategoryButton = $(this).find('button[name="complaintsubcategory"]');
      $(this).parents().siblings(".error-message").hide();
      let selectionGroup = $(this).parents(".cust-drop-down");
      var button = selectionGroup.find(".dropdown-select");
      button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
      var form = $(this).closest("form");
      selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
      $(this).parents("ul").siblings(".btn-drop").addClass("active");
      $(this).addClass("active");
      if ("vehiclemodelname" == button.attr("name")) {
        form.find('[name="vehicleNameVal"]').val($(this).attr("data-model-name"));
      } else if ("existingvehiclemodelname" == button.attr("name")) {
        form
          .find('[name="existingvehicleNameVal"]')
          .val($(this).text().trim().toLowerCase().replace(/ /g, "_"));
      } else if ("statename" == button.attr("name")) {
        $('button[name="statename"]').removeClass('dropdown-error');
        let cityField = form.find('[name="cityname"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var cityPath = defaultservlet + ".citylist." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "city", cityValue, true);
        form.find('[name="stateNameVal"]').val(button.text());
        form.find('[name="cityNameVal"]').val("");
      } else if ("statenameDistrict" == button.attr("name")) {
        $('button[name="statenameDistrict"]').removeClass('dropdown-error');
        let cityField = form.find('[name="cityname"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var cityPath = defaultservlet + ".districtlist." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "city", cityValue, true);
        form.find('[name="stateNameVal"]').val(button.text());
        form.find('[name="cityNameVal"]').val("");
      } else if ("dealerstate" == button.attr("name")) {
        $('button[name="dealerstate"]').removeClass('dropdown-error');
        let cityField = form.find('[name="dealercity"]');
        let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        stateName = $(this).attr("value");
        var cityPath = defaultservlet + ".dealercities." + $(this).attr("value") + ".html";
        let cityValue = null != (window && window.locations) ? locations.City : "";
        if (cityField.text().trim() !== cityField.attr("data-default-label")) {
          cityValue = cityField.text().trim();
        }
        populateDropdown(cityPath, list, "dealercity", cityValue);
        form.find('[name="dealerNameVal"]').val(button.text());
        form.find('[name="dealerCityNameVal"]').val("");
      } else if ("dealercity" == button.attr("name")) {
        $('button[name="dealercity"]').removeClass('dropdown-error');
        let dealerName = form.find('[name="dealerVal"]');
        let dealerField = form.find('[name="dealername"]');
        let list = dealerName.parents(".cust-drop-down").find(".cust-dropdown-menu ");
        var dealerNamePath =
          defaultservlet + ".dealercodes." + stateName + "." + $(this).attr("value") + ".html";
        if ($("#suggestions").length) {
          dealerNamePath =
            defaultservlet +
            ".dealercodesasc." +
            stateName +
            "." +
            $(this).attr("value") +
            ".html";
        }
        let dealerValue;
        if (dealerField.text().trim() !== dealerField.attr("data-default-label")) {
          dealerValue = dealerField.text().trim();
        }
        populateDropdown(dealerNamePath, list, "dealer", dealerValue);
        form.find('[name="dealerCityNameVal"]').val(button.text());
      } else if ("dealername" == button.attr("name")) {
        $('button[name="dealername"]').removeClass('dropdown-error');
        form.find('[name="dealerVal"]').val($(this).attr("value"));
      } else if ("complaintstream" == button.attr("name")) {
        $('button[name="complaintstream"]').removeClass('dropdown-error');
        if ($(this).text().toLowerCase().replace(/\s/g, "") == "sales") {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        subCategoryButton.attr("disabled", true);
        $(this).find('button[name="complaintcategory"]').attr("disabled", false);

        let complaintCatrgoryField = $('button[name="complaintcategory"]');
        let complaintSubCatrgoryField = $('button[name="complaintsubcategory"]');
        let abbrComplaint = complaintCatrgoryField.attr("data-default-label");
        let abbrSubComplaint = complaintSubCatrgoryField.attr("data-default-label");

        complaintCatrgoryField.text(abbrComplaint);
        complaintSubCatrgoryField.text(abbrSubComplaint);

        let complaintText = $(this).text().toLowerCase().replace(/\s/g, "");
        let raiseEmailPlaceholder = $('#sug-email input[type=email]').attr('placeholder-backup');
        let raiseDealerState = $('#sug-dstate .dropdown-select').attr('placeholder-backup');
        let raiseDealerCity = $('#sug-dcity .dropdown-select').attr('placeholder-backup');
        let raiseDealerName = $('#sug-dname .dropdown-select').attr('placeholder-backup');
        let raiseEmailPlaceholderAssign;
        let raiseDealerStateAssign;
        let raiseDealerCityAssign;
        let raiseDealerNameAssign;

        if (complaintText === "retailfinance") {
          $("#sug-tel, #sug-reg, #sug-odo, #sug-mal").hide();
          $("#sub-cat-form").removeClass("d-none");
          $(
            "#sug-email input, #sug-dstate input,#sug-dcity input,#sug-dname input,#sug-mal #malfunction-date"
          ).attr("required", false);
          $("#sub-cat-form input").attr("required", true);
          $("#vin-number input").attr('required',true);
          $(
            "#sug-email span sup, #sug-dstate span sup, #sug-dstate .select-span, #sug-dstate .select-span, #sug-dcity span sup, #sug-dcity .select-span, #sug-dname span sup, #sug-dname .select-span"
          ).hide();
          //Email
          if (raiseEmailPlaceholder.indexOf('*') !== -1) {
            // Remove the '*' character and update the string
            raiseEmailPlaceholderAssign = raiseEmailPlaceholder.replace('*', '');
          }
          $('#sug-email input[type=email]').attr('placeholder',raiseEmailPlaceholderAssign);
          $('#sug-email input[type=email]').removeClass('placeholder-error');
          //Dealer State
          if (raiseDealerState.indexOf('*') !== -1) {
            // Remove the '*' character and update the string
            raiseDealerStateAssign = raiseDealerState.replace('*', '');
          }
          $('#sug-dstate .dropdown-select').text(raiseDealerStateAssign);

          //Dealer City
          if (raiseDealerCity.indexOf('*') !== -1) {
            // Remove the '*' character and update the string
            raiseDealerCityAssign = raiseDealerCity.replace('*', '');
          }
          $('#sug-dcity .dropdown-select').text(raiseDealerCityAssign);

          //Dealer Name
          if (raiseDealerName.indexOf('*') !== -1) {
            // Remove the '*' character and update the string
            raiseDealerNameAssign = raiseDealerName.replace('*', '');
          }
          $('#sug-dname .dropdown-select').text(raiseDealerNameAssign);


          $('#sug-email input[email-enquiries]').attr('placeholder','Email')
          $(".flex-change").addClass("fb-100");
          $('#sug-reg input').attr("required", false);
          $('#sug-odo input').attr("required", false);
          $('.company-contact-us-raise input:not([required])').siblings('.dropdown-select').removeClass('dropdown-error')
        } else {
          
          $("#sug-tel, #sug-reg, #sug-odo, #sug-mal ").show();
          $('#sug-email input[email-enquiries]').attr('placeholder','Email*');
          $("#sub-cat-form").addClass("d-none");
          $(
            "#sug-email input, #sug-dstate input,#sug-dcity input,#sug-dname input"
          ).attr("required", true);
          $("#sub-cat-form input").attr("required", false);

          $(
            "#sug-email span sup, #sug-dstate span sup, #sug-dstate .select-span, #sug-dcity span sup, #sug-dcity .select-span, #sug-dname span sup, #sug-dname .select-span"
          ).show();
          $('#sug-email input[type=email]').attr('placeholder',raiseEmailPlaceholder);
          $(".flex-change").removeClass("fb-100");
        }

        $('button[name="complaintcategory"]').attr("disabled", false);

        $('button[name="complaintcategory"]').siblings("input").attr("value", "");

        $('button[name="complaintsubcategory"]').siblings("input").attr("value", "");

        $('button[name="complaintstream"]').siblings("input").attr("value", complaintText);
        $("button[name='complaintcategory'] ~ ul li").removeClass("show");
        $("button[name='complaintcategory'] ~ ul li").each(function () {
          let dataCategory = $(this).data("category").toLowerCase().replace(/\s/g, "");
          if (dataCategory === complaintText) {
            $(this).addClass("show");
          }
        });
      } else if ("complaintcategory" == button.attr("name")) {
        $('button[name="complaintcategory"]').removeClass('dropdown-error');
        let categoryValue = $('button[name="complaintstream"]')
          .text()
          .toLowerCase()
          .replace(/\s/g, "");

        let complaintText = $(this).text().toLowerCase().replace(/\s/g, "");

        let complaintSubCatrgoryField = $('button[name="complaintsubcategory"]');
        let abbrSubComplaint = complaintSubCatrgoryField.attr("data-default-label");
        complaintSubCatrgoryField.text(abbrSubComplaint);

        $('button[name="complaintcategory"]').siblings("input").attr("value", complaintText);
        if (categoryValue != "sales") {
          $("#vin-number").removeClass("d-none");
          $("#vin-number input").attr("required", true);
        } else {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        if (categoryValue === "retailfinance") {
          $("#vin-number").addClass("d-none");
          $("#vin-number input").attr("required", false);
        }

        $("button[name='complaintsubcategory']").attr("disabled", false);

        $('button[name="complaintsubcategory"]').siblings("input").attr("value", "");
        let complaintsubText = $(this).text().toLowerCase().replace(/\s/g, "");
        $("button[name='complaintsubcategory'] ~ ul li").removeClass("show");
        $("button[name='complaintsubcategory'] ~ ul li").each(function () {
          let dataSubCategory = $(this).data("subcategory").toLowerCase().replace(/\s/g, "");
          if (dataSubCategory === complaintsubText) {
            $(this).addClass("show");
          }
        });
      } else if ("category-name" == button.attr("name")) {
        $('button[name="category-name"]').removeClass('dropdown-error');
        let category = $(this).text().replace(/\s+/g, "").toLowerCase();
        $('button[name="category-name"]').siblings("input").attr("value", category);
        if (category == "globalbusiness") {
          $("#state-og").hide();
          $("#state-og input").attr("required", false);
          $("#city-og").hide();
          $("#city-og input").attr("required", false);
          $("#text--state").show();
          $("#text--state input").attr("required", true);
          $("#text--city").show();
          $("#text--city input").attr("required", true);
        } else {
          $("#state-og").show();
          $("#state-og input").attr("required", true);
          $("#city-og").show();
          $("#city-og input").attr("required", true);
          $("#text--state").hide();
          $("#text--state input").attr("required", false);
          $("#text--city").hide();
          $("#text--city input").attr("required", false);
        }
      } else if ("gender" == button.attr("name")) {
        $('button[name="gender"]').removeClass('dropdown-error');
        let gender = $(this).text().replace(/\s+/g, "").toLowerCase();
        $('button[name="gender"]').siblings("input").attr("value", gender);
      } else if ("cityname" == button.attr("name")) {
        $('button[name="cityname"]').removeClass('dropdown-error');
        form.find('[name="cityNameVal"]').val(button.text());
      } else if ("complaintsubcategory" == button.attr("name")) {
        $('button[name="complaintsubcategory"]').removeClass('dropdown-error');
        let complaintSubText = $(this).text().toLowerCase().replace(/\s/g, "");
        $('button[name="complaintsubcategory"]')
          .siblings("input")
          .attr("value", complaintSubText);
      }
    });

    $("#complaint-stream-enq").on("change", function () {
      const subCategoryButton = $("#complaint-category-enq");
      const selectedValue = $(this).val();
      if (selectedValue == "sales") {
        $("#vin-number").addClass("d-none");
        $("#vin-number input").attr("required", false);
      }

      subCategoryButton[0].disabled = false;
      subCategoryButton.val("");

      if (selectedValue === "retailfinance") {
        $("#sug-tel, #sug-reg, #sug-odo, #sug-mal").hide();

        $("#sub-cat-form").removeClass("d-none");
        $(
          "#email, #state,#district,#dealer-name-enq,#dealer-state-enq,#dealer-town-enq, #malfunction-date"
        ).attr("required", false);
        $(".flex-change").addClass("fb-100");
        $("#complaint-subcategory-enq").attr("required", true);
        $(
          "#sug-email span sup, #sug-dstate span sup,#sug-dcity span sup,#sug-dname span sup"
        ).hide();
      } else {
        $("#sug-tel, #sug-reg, #sug-odo, #sug-mal").show();
        $("#sub-cat-form").addClass("d-none");
        $(
          "#email, #state,#district,#dealer-name-enq,#dealer-state-enq,#dealer-town-enq, #malfunction-date"
        ).attr("required", true);
        $(".flex-change").removeClass("fb-100");
        $("#complaint-subcategory-enq").attr("required", false);
        $(
          "#sug-email span sup, #sug-dstate span sup,#sug-dcity span sup,#sug-dname span sup"
        ).show();
      }
      $("#complaint-category-enq").attr("value", "");

      $("#complaint-subcategory-enq").attr("value", "");

      $("#complaint-category-enq option").addClass("d-none");

      $("#complaint-category-enq option").each(function () {
        let dataCategory = $(this).attr("value").toLowerCase().replace(/\s/g, "");
        if (dataCategory === selectedValue) {
          $(this).removeClass("d-none");
        }
      });
    });

    $("#complaint-category-enq").on("change", function () {
      let categoryValue = $("#complaint-stream-enq").val();
      let complaintText = $(this).find("option:selected").data("subcategory");
      let complaintSubCatrgoryField = $("#complaint-subcategory-enq");

      if (categoryValue != "sales") {
        $("#vin-number").removeClass("d-none");
        $("#vin-number input").attr("required", true);
      } else {
        $("#vin-number").addClass("d-none");
        $("#vin-number input").attr("required", false);
      }

      if (categoryValue === "retailfinance") {
        $("#vin-number").addClass("d-none");
        $("#vin-number input").attr("required", false);
        complaintSubCatrgoryField.attr("disabled", false);
        complaintSubCatrgoryField.val("");
      }
      $("#complaint-subcategory-enq option").addClass("d-none");
      $("#complaint-subcategory-enq option").each(function () {
        let dataSubCategory = $(this).attr("value").toLowerCase().replace(/\s/g, "");
        if (dataSubCategory === complaintText) {
          $(this).removeClass("d-none");
        }
      });
    });

    // Cta Clicks
    let originalText = [];
    $(".contact-us-form button.dropdown-select").each(function () {
      originalText.push($(this).text().trim());
    });
    let originalraiseText = [];
    $(".company-contact-us-raise-form button.dropdown-select").each(function () {
      originalraiseText.push($(this).text().trim());
    });
    let originalEnquiryText = [];
    $(".company-contact-us-corporate-form button.dropdown-select").each(function () {
      originalEnquiryText.push($(this).text().trim());
    });
    let originalEnquiryBackupPlaceholder = [];
    $(".company-contact-us-corporate-form .input-container input[placeholder-backup]").each(function () {
      originalEnquiryBackupPlaceholder.push($(this).attr('placeholder-backup').trim());
    });

    let originalComplainBackupPlaceholder = [];
    $(".company-contact-us-raise-form .input-container input[placeholder-backup]").each(function () {
      originalComplainBackupPlaceholder.push($(this).attr('placeholder-backup').trim());
    });


    $(
      ".company-contact-us-raise button[name='submit'], .company-contact-us-corporate button[name='submit']"
    ).click(function () {

      let contactUsClassName = "." + $(this).closest("form").attr("class").split(" ")[0];
      // Update dropdown labels
      const dropdowns = document.querySelectorAll('.company-contact-us-raise-form .select-dropdown');
      dropdowns.forEach(function (dropdown) {
        // .dropdown-select
        const dropdownInput = dropdown.querySelector(contactUsClassName + ' input[required]');
        if (dropdownInput) {
          const dropdownBtn = dropdown.querySelector(contactUsClassName + ' .dropdown-select');
          if (dropdownInput && $(dropdownInput).val() == "") {
            $(dropdownBtn).addClass('dropdown-error');
            dropdownBtn.textContent = `${$(dropdownBtn).attr('placeholder-backup')} (${$(dropdownBtn).attr('error-msg')})`;
          } else {
            $(dropdownBtn).removeClass('dropdown-error');
          }

        }
      });

      const companydropdowns = document.querySelectorAll('.company-contact-us-corporate-form .select-dropdown');
      companydropdowns.forEach(function (dropdown) {
        // .dropdown-select
        const dropdownInput = dropdown.querySelector(contactUsClassName + ' input[required]');
        if (dropdownInput) {
          const dropdownBtn = dropdown.querySelector(contactUsClassName + ' .dropdown-select');
          if (dropdownInput && $(dropdownInput).val() == "") {
            $(dropdownBtn).addClass('dropdown-error');
            dropdownBtn.textContent = `${$(dropdownBtn).attr('placeholder-backup')} (${$(dropdownBtn).attr('error-msg')})`;
          } else {
            $(dropdownBtn).removeClass('dropdown-error');
          }

        }
      });

      const streamValue = $(contactUsClassName + ' input[name="complaintstreamVal"]').val();
      let title = $(contactUsClassName + " title").text();
      let errorFields = [];
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      let validation = true;
      $(contactUsClassName + " .error-message").css("display", "none");
      $(contactUsClassName + " .invalid-otp-message").addClass("d-none");
      if (
        $(contactUsClassName + " #cpatchaTextBox").length > 0 &&
        $(contactUsClassName + " #cpatchaTextBox").val() != captchText
      ) {
        validation = false;
        errorFields.push($(contactUsClassName + " #cpatchaTextBox").attr("name"));
        if ($(contactUsClassName + " #cpatchaTextBox").val().length !== 0) {
        $(contactUsClassName + " .invalid-otp-message").removeClass("d-none");
        }
      }

      //  Input
      $(contactUsClassName + " input[required]").each(function () {
        if ($(this).val() == "") {
          // $(this).parent().parent().find(".error-message").css("display", "block");
          $(this).addClass('placeholder-error');
          $(this).attr('placeholder', `${$(this).attr('placeholder-backup')} (${$(this).attr('error-msg')})`);
          errorFields.push($(this).attr("name"));
          validation = false;
        } else {
          $(this).removeClass('placeholder-error');
          $(this).attr('placeholder', $(this).attr('placeholder-backup'));
        }
      });

      if($('#sug-mal input[name="date"]').hasClass('placeholder-error')){
        $('#sug-mal input[name="date"]').siblings('.malfunction-date-label').addClass('placeholder-error');
      }else{
        $('#sug-mal input[name="date"]').siblings('.malfunction-date-label').removeClass('placeholder-error')
      }

      // textarea
      $(".company-contact-us-raise textarea[required]").each(function () {
        if ($(this).val() == "") {
          $(this).siblings("span.error-message").css("display", "block");
          errorFields.push($(this).attr("name"));
          validation = false;
        }
      });

      // mobile no
      $(contactUsClassName + " input[name='mobileno']").each(function () {
        let mobileNumber = $(this).val();
        if (mobileNumber == "") {
          $(contactUsClassName + " input[name='mobileno']")
            .parent()
            .siblings(".validate--msg")
            .hide();
          $(contactUsClassName + " input[name='mobileno']").attr('placeholder', `${$(this).attr('placeholder-backup')} (${$(this).attr('error-msg')})`);

          errorFields.push($(this).attr("name"));
          validation = false;
        } else {
          $(contactUsClassName + " input[name='mobileno']")
            .parent()
            .siblings(".validate--msg")
            .hide();
          let invalidArr = [
            "1234567890",
            "0000000000",
            "1111111111",
            "2222222222",
            "3333333333",
            "4444444444",
            "5555555555",
            "6666666666",
            "7777777777",
            "8888888888",
            "9999999999",
            "0123456789",
          ];
          if ($(this).val().length < 10) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
          if ($.inArray($(this).val(), invalidArr) != -1) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
        }
      });


      // Phone number
      $(contactUsClassName + " input[name='phone-enquiries']").each(function () {
        let phoneNumber = $(this).val();
        if (phoneNumber == "") {
          $(contactUsClassName + " input[name='phone-enquiries']")
            .parent()
            .siblings(".validate--msg")
            .hide();
          $(contactUsClassName + " input[name='phone-enquiries']").attr('placeholder', `${$(this).attr('placeholder-backup')} (${$(this).attr('error-msg')})`);

          errorFields.push($(this).attr("name"));
          validation = false;
        } else {
          $(contactUsClassName + " input[name='phone-enquiries']")
            .parent()
            .siblings(".validate--msg")
            .hide();
          let invalidArr = [
            "1234567890",
            "12345678901",
            "123456789012",
            "000000000000",
            "00000000000",
            "0000000000",
            "111111111111",
            "11111111111",
            "1111111111",
            "222222222222",
            "22222222222",
            "2222222222",
            "333333333333",
            "33333333333",
            "3333333333",
            "444444444444",
            "44444444444",
            "4444444444",
            "555555555555",
            "55555555555",
            "5555555555",
            "666666666666",
            "66666666666",
            "6666666666",
            "777777777777",
            "77777777777",
            "7777777777",
            "888888888888",
            "88888888888",
            "8888888888",
            "999999999999",
            "99999999999",
            "9999999999",
            "012345678901",
            "0123456789",
            "01234567890",
          ];
          if ($(this).val().length < 10) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }

          if ($.inArray($(this).val(), invalidArr) != -1) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
        }
      });

      // Telephone number
      $(contactUsClassName + " input[name='telephone']").each(function () {
        let TelephoneNumber = $(this).val();
        if ($(this).is("[required]")) {
          if (TelephoneNumber == "") {
            $(contactUsClassName + " input[name='telephone']")
              .parent()
              .siblings(".validate--msg")
              .hide();
            $(contactUsClassName + " input[name='telephone']").attr('placeholder', `${$(this).attr('placeholder-backup')} (${$(this).attr('error-msg')})`);

            errorFields.push($(this).attr("name"));
            validation = false;
          } else {
            $(contactUsClassName + " input[name='telephone']")
              .parent()
              .siblings(".validate--msg")
              .hide();
            let invalidArr = [
              "1234567890",
              "12345678901",
              "123456789012",
              "000000000000",
              "00000000000",
              "0000000000",
              "111111111111",
              "11111111111",
              "1111111111",
              "222222222222",
              "22222222222",
              "2222222222",
              "333333333333",
              "33333333333",
              "3333333333",
              "444444444444",
              "44444444444",
              "4444444444",
              "555555555555",
              "55555555555",
              "5555555555",
              "666666666666",
              "66666666666",
              "6666666666",
              "777777777777",
              "77777777777",
              "7777777777",
              "888888888888",
              "88888888888",
              "8888888888",
              "999999999999",
              "99999999999",
              "9999999999",
              "012345678901",
              "0123456789",
              "01234567890",
            ];
            if ($(this).val().length < 12) {
              $(this).parent().siblings(".validate--msg").css("display", "block");
              errorFields.push($(this).attr("name"));
              validation = false;
            }

            if ($.inArray($(this).val(), invalidArr) != -1) {
              $(this).parent().siblings(".validate--msg").css("display", "block");
              errorFields.push($(this).attr("name"));
              validation = false;
            }
          }
        } 
        else {
          if (TelephoneNumber !== "") {
            $(contactUsClassName + " input[name='telephone']")
            .parent()
            .siblings(".validate--msg")
            .hide();
          let invalidArr = [
            "1234567890",
            "12345678901",
            "123456789012",
            "000000000000",
            "00000000000",
            "0000000000",
            "111111111111",
            "11111111111",
            "1111111111",
            "222222222222",
            "22222222222",
            "2222222222",
            "333333333333",
            "33333333333",
            "3333333333",
            "444444444444",
            "44444444444",
            "4444444444",
            "555555555555",
            "55555555555",
            "5555555555",
            "666666666666",
            "66666666666",
            "6666666666",
            "777777777777",
            "77777777777",
            "7777777777",
            "888888888888",
            "88888888888",
            "8888888888",
            "999999999999",
            "99999999999",
            "9999999999",
            "012345678901",
            "0123456789",
            "01234567890",
          ];
          if ($(this).val().length < 10) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }

          if ($.inArray($(this).val(), invalidArr) != -1) {
            $(this).parent().siblings(".validate--msg").css("display", "block");
            errorFields.push($(this).attr("name"));
            validation = false;
          }
          }
          
        }
      
      });

      //Email
      $(contactUsClassName + " input[type='email']").each(function () {
        let email = $(this).val();
        if ($(this).is("[required]")) {
          if (email == "") {
            $(contactUsClassName + " input[type='email']")
              .parent()
              .siblings(".validate--msg")
              .hide();
            $(contactUsClassName + " input[type='email']").attr('placeholder', `${$(this).attr('placeholder-backup')} (${$(this).attr('error-msg')})`);
            errorFields.push($(this).attr("name"));
            validation = false;
          } 
          else {
            if (!validateEmail(email)) {
              $(contactUsClassName + " input[type='email']")
                .parent()
                .siblings(".validate--msg")
                .show();
              $(contactUsClassName + " input[type='email']")
                .parent()
                .siblings(".error-message")
                .hide();
              errorFields.push($(this).attr("name"));
              validation = false;
            }else{
              $(contactUsClassName + " input[type='email']")
              .parent()
              .siblings(".validate--msg")
              .hide();
            }
          }
        } else {
          if (email != "") {
            if (!validateEmail(email)) {
              $(contactUsClassName + " input[type='email']")
                .parent()
                .siblings(".validate--msg")
                .show();
              $(contactUsClassName + " input[type='email']")
                .parent()
                .siblings(".error-message")
                .hide();
              errorFields.push($(this).attr("name"));
              validation = false;
            }
          }
        }
      });
      let currentForm = $(this).closest("form");
      if (validation) {
        mediaSubmitForm(currentForm, streamValue, contactUsClassName);
      } else {
        let fields = errorFields
          .filter((value, index, self) => self.indexOf(value) === index)
          .join("|");
        window.digitalData = {
          form: {
            formerrorfields: fields,
            formname: $(formSelect).find("form").attr("class"),
            formtype: $(formSelect).find("section").attr("id"),
          },
          page: {
            siteType: "AEM",
            siteCategory: siteCategory,
            fullReferringUrl: document.referrer,
            pageName: title,
            pageUrl: window.location.href,
            path: window.location.pathname,
            category: category ? category : "",
          },
        };
        _satellite.track("formError");
        console.log("fields required");
      }
      let errorMessages = $(
        contactUsClassName + " input[required], " + contactUsClassName + " textarea[required]"
      ).filter(function () {
        return !this.value;
      });
    });

    $('.company-contact-us-js .sucsess-popup .btn-close').on('click', function () {
      $('.company-contact-us-js .sucsess-popup').css('display', 'none');
      $('body').css('overflow','');
      $('body').css('height','');
    })

    async function mediaSubmitForm(currentForm, streamValue, formClass) {
      let firstName = "";
      let lastName = "";
      let title = $("title").text();
      let category = window.location.pathname.split("/")[2];
      let splitedUrl = window.location.origin.split("//");
      let splitedDomain = splitedUrl[1].split(".");
      let siteCategory;
      if (splitedDomain[1] === "heromotocorp") {
        siteCategory = "corporate";
      }
      if (splitedDomain[1] === "dealers") {
        siteCategory = "dealer";
      }
      $(".media-loader-div").removeClass("d-none");
      if (formClass === ".company-contact-us-raise-form") {
        firstName = $('[name="firstname"]').val().trim();
        lastName = $('[name="lastname"]').val().trim();
        let malfunctionDateAssign =  $("#malfunction-date").val().trim();
        if (malfunctionDateAssign !== ""){
          // Split the date string into parts using the hyphen as the delimiter
          let partsDate = malfunctionDateAssign.split("-");
          // Rearrange the parts to the desired format (MM/DD/YYYY)
          malfunctionDateAssign = partsDate[1] + "/" + partsDate[2] + "/" + partsDate[0];
        }else{
          malfunctionDateAssign = "";
        } 
        const currentDate = new Date();
        // Outputs the current date in a localized format
        const formattedDate = currentDate.toLocaleDateString();
        if (streamValue === "retailfinance") {
          var dataObj = {
            body: {
              FirstName: $('[name="firstname"]').val().trim(),
              LastName: $('[name="lastname"]').val().trim(),
              CellularPhone: $('.company-contact-us-raise-form input[name="mobileno"]').val().trim(),
              Category: "Retail Finance",
              SubCategory: $('[name="complaintcategory"]').text(),
              EmailAddress: $(".company-contact-us-raise-form #email").val().trim(),
              CustomerAddress: $("#address-1").val().trim(),
              Address: $("#address-2").val().trim(),
              Model: $('[name="vehicleNameVal"]').val().trim(),
              VehicleRegistrationNumber: $("#vehicle-reg-no").val().trim(),
              OdometerReading: $("#odometer").val().trim(),
              MalfunctionDate: malfunctionDateAssign,
              DealerCode: "",
              // AreaOffice: "",
              // HHMLVINNumber: "",
              BriefAboutComplaint: $("#txtComplaint").val().trim(),
              SubSubCategory: $('[name="complaintsubcategory"]').text(),
              // OwnedById: "",
              SRType: "Complaints",
              // SRNumber: "",
              // Status: "Open",
              // CompRepFlag: "",
              HomePhone: $('.company-contact-us-raise-form input[name="telephone"]').val().trim(),
              // PartnerName: "",
              ReportedDate: formattedDate,
              Source: "Corporate Website",
              Priority: "3-Medium",
              // Location: "",
            },
          };
        } else {
          console.log("mobile value other", $('[name="mobileno"]').val().trim())
          var dataObj = {
            body: {
              SubCategory: $('[name="complaintcategory"]').text(),
              SRNumber: "",
              MalfunctionDate: malfunctionDateAssign,
              FirstName: $('[name="firstname"]').val().trim(),
              BriefAboutComplaint: $("#txtComplaint").val().trim(),
              VehicleRegistrationNumber: $("#vehicle-reg-no").val().trim(),
              Status: "Open",
              Address: $("#address-1").val().trim(),
              SRType: "Complaints",
              OwnedById: "",
              OdometerReading: $("#odometer").val().trim(),
              Model: $('[name="vehicleNameVal"]').val().trim(),
              EmailAddress: $("#email.campaign-input").val(),
              SubSubCategory: "",
              AreaOffice: "",
              CompRepFlag: "",
              HomePhone: $("#phone-enquiries.campaign-input").val(),
              HHMLVINNumber: $('[name="vin-number"]').val().trim(),
              PartnerName: "",
              LastName: $('[name="lastname"]').val().trim(),
              ReportedDate: formattedDate,
              CustomerAddress: $("#address-1").val().trim(),
              CellularPhone: $('#mobile-enquiries').val().trim(),
              Source: "Corporate Website",
              Priority: "3-Medium",
              Location: "",
              DealerCode: $('[name="dealerVal"]').val().trim(),
              Category: $('[name="complaintstream"]').text()
            }
          }
        }
      } else if (formClass === ".company-contact-us-corporate-form") {
        firstName = $("#fullname-enquiries").val().trim();
        var dataObj = {
          full_name: $("#fullname-enquiries").val().trim(),
          designation: $("#designation-enquiries").val().trim(),
          category: $("#category-now").val().trim(),
          company: $('[name="company-enquiries"]').val(),
          address: $("#address-enq").val().trim(),
          state_global: $('[name="stateNameVal"]').val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          city_global: $('[name="cityNameVal"]').val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          phone_number: $("#phone-enquiries").val().trim(),
          mobile_number: $("#mobile-enquiries-corp").val().trim(),
          email: $("#email").val().trim(),
          requirements: $("#txtReq").val().trim(),
          addt_info: $("#txtInfo").val().trim(),
          countryId: "",
          enquiry_date: "",
        };
      } else if ($("#test-ride").length) {
        firstName = $("#firstname").val().trim();
        lastName = $("#lastname").val().trim();
        var dataObj = {
          first_name: $("#firstname").val().trim(),
          last_name: $("#lastname").val().trim(),
          mobile_number: $("#number").val().trim(),
          tel_number: $("#tel-number").val().trim(),
          email: $("#email").val().trim(),
          vehicle_name: $('[name="vehicleNameVal"]').val().trim(),
          state: $('[name="stateNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          district: $('[name="cityNameVal"]')
            .val()
            .replaceAll("&amp;", "and")
            .replaceAll("&", "and")
            .trim(),
          city: $("#town").val().trim(),
          existing_vehicle: $('[name="existingvehicleNameVal"]').val().trim(),
          testride_date: $("#testride-date").val().trim(),
          dealer_state: $('[name="dealerNameVal"]').val().trim(),
          dealer_city: $('[name="dealerCityNameVal"]').val().trim(),
          dealer: $('[name="dealerVal"]').val().trim(),
          enquiry: $("#txtEnquiry").val().trim(),
          expected_purchase_date: $("#expected-date").val().trim(),
          gender: $('[name="genderVal"]').val().trim(),
          age: $("#age").val().trim(),
          occupation: $('[name="occupation"]').text().trim(),
          intended_usage: $('[name="intendedusage"]').text().trim(),
        };
      }

      console.log("dataObj", dataObj);

      let customURL = $('.company-contact-us-raise [name="action_url"]').val();
      
      if (formClass === '.company-contact-us-corporate-form') {
        customURL = $('.company-contact-us-corporate input[name="action_url"]').val();
      }

      if (streamValue === "retailfinance") {
        customURL = customURL.replace("suggestionsRest.html", "suggestionsRFMRest.html");
      }

      $.ajax({
        url: customURL,
        type: "POST",
        data: JSON.stringify(dataObj),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
          $(".media-loader-div").addClass("d-none");
          let response = JSON.parse(JSON.stringify(resp));
          const successTxt = $('.company-contact-us-corporate .sucsess-popup .thank-you-container-popup .sucess-text');
          const FailureTxt = $('.company-contact-us-corporate .sucsess-popup .thank-you-container-popup .failure-text');
          const firstIMG = $('.company-contact-us-corporate .sucsess-popup .like-icon img:first');
          const secondIMG = $('.company-contact-us-corporate .sucsess-popup .like-icon img:last');
          const successTxtT = $('.company-contact-us-raise  .sucsess-popup .thank-you-container-popup .sucess-text');
          const FailureTxtT = $('.company-contact-us-raise  .sucsess-popup .thank-you-container-popup .failure-text');
          const firstIMGT = $('.company-contact-us-raise  .sucsess-popup .like-icon img:first');
          const secondIMGT = $('.company-contact-us-raise  .sucsess-popup .like-icon img:last');

          if (response.message) {
            if (response.message == "success" ) {
              $(secondIMG).css('display', 'none');
                $(FailureTxt).css('display', 'none');
                $(firstIMG).css('display', 'block');
                $(successTxt).css('display', 'block');
              $(".contact-submit-btn button[name='reset']").click();
              $('.company-contact-us-corporate .sucsess-popup').css('display', 'block');
              $('body').css('overflow','hidden');
              $('body').css('height','100vh');
            }else{
              $(firstIMG).css('display', 'none');
              $(successTxt).css('display', 'none');
              $(secondIMG).css('display', 'block');
              $(FailureTxt).css('display', 'block');
              $('.company-contact-us-corporate .sucsess-popup').css('display', 'block');
              $('body').css('overflow','hidden');
              $('body').css('height','100vh');
            }
            
          }
          if (response.StatusCode) {
            if (response.StatusCode == "SBL-HMCL-200") {
              $(secondIMGT).css('display', 'none');
                $(FailureTxtT).css('display', 'none');
                $(firstIMGT).css('display', 'block');
                $(successTxtT).css('display', 'block');
              $(".contact-submit-btn button[name='reset']").click();
              $('.company-contact-us-raise .sucsess-popup').css('display', 'block');
              $('body').css('overflow','hidden');
              $('body').css('height','100vh');
            } 
            else {
              $(firstIMGT).css('display', 'none');
              $(successTxtT).css('display', 'none');
              $(secondIMGT).css('display', 'block');
              $(FailureTxtT).css('display', 'block');
              $('.company-contact-us-raise .sucsess-popup').css('display', 'block');
              $('body').css('overflow','hidden');
              $('body').css('height','100vh');
            }
          }

          if (response.status == "success" || response.ComplaintNumber) {

            if ($("#suggestions").length > 0) {
              successFunc(response);
              let ticketNumber = getTicketNumber(response.responseString);
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
              if (window.digitalData) {
                window.digitalData = {
                  event: "Suggestions Form Submitted",
                  FormDetails: {
                    CustomerState: $('[name="stateNameVal"]')
                      .val()
                      .replaceAll("&amp;", "and")
                      .replaceAll("&", "and")
                      .trim(),
                    CustomerCity: $("#town").val().trim(),
                    CustomerPincode: $("#pin").val().trim(),
                    SelectedVehicle: $('[name="vehicleNameVal"]').val().trim(),
                    DealerTown: $('[name="dealerCityNameVal"]').val().trim(),
                    ComplaintStream: $('[name="complaintstream"]').text(),
                    ComplaintCategory: $('[name="complaintcategory"]').text(),
                    RequestID: ticketNumber,
                    FormName: "Suggestions Form",
                    FromType: "Suggestions Form",
                  },
                  page: {
                    siteType: "AEM",
                    siteCategory: siteCategory,
                    fullReferringUrl: document.referrer,
                    pageName: title,
                    pageUrl: window.location.href,
                    path: window.location.pathname,
                    category: category ? category : "",
                  },
                };
              }
            }
            if ($("#corporate-enq").length > 0) {
              successFunc(response);
              $('.company-contact-us-js .sucsess-popup').css('display', 'block');
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
            }
            if ($("#test-ride").length > 0) {
              successFunc(response);
              let ticketNumber = "";
              $("#successFirstName").text(firstName);
              $("#successLastName").text(lastName);
              if (window.digitalData) {
                window.digitalData = {
                  event: "Product Enquiry Form Submitted",
                  FormDetails: {
                    CustomerState: $('[name="stateNameVal"]')
                      .val()
                      .replaceAll("&amp;", "and")
                      .replaceAll("&", "and")
                      .trim(),
                    CustomerCity: $("#town").val().trim(),
                    SelectedVehicle: $('[name="vehicleNameVal"]').val().trim(),
                    DealerName: $('[name="dealerVal"]').val().trim(),
                    DealerState: $('[name="dealerNameVal"]').val().trim(),
                    DealerTown: $('[name="dealerCityNameVal"]').val().trim(),
                    ExpectedPurchaseDate: $("#expected-date").val().trim(),
                    TestRideDate: $("#testride-date").val().trim(),
                    RequestID: ticketNumber,
                    FormName: "Product Enquiry Form",
                    FromType: "Product Enquiry Form",
                    Gender: $('[name="genderVal"]').val().trim(),
                    Age: $("#age").val().trim(),
                    IntendedUsage: $('[name="intendedusage"]').text().trim(),
                  },
                  page: {
                    siteType: "AEM",
                    siteCategory: siteCategory,
                    fullReferringUrl: document.referrer,
                    pageName: title,
                    pageUrl: window.location.href,
                    path: window.location.pathname,
                    category: category ? category : "",
                  },
                };
              }
            } else {
              $(currentForm).find(".book-test-submit").removeAttr("disabled");
            }
          } else {
            $(
              ".company-contact-us-raise .addressPan, .company-contact-us-corporate .addressPan"
            ).addClass("d-none");
            $(
              ".company-contact-us-raise .query--para, .company-contact-us-corporate .query--para"
            ).addClass("d-none");
            $(
              ".company-contact-us-raise .form--note, .company-contact-us-corporate .form--note"
            ).addClass("d-none");
            $(".server-fail-msg").removeClass("d-none");
          }
        },
        error: function (error) {
          $(".media-loader-div").addClass("d-none");
          $(
            ".company-contact-us-raise .addressPan, .company-contact-us-corporate .addressPan"
          ).addClass("d-none");
          $(
            ".company-contact-us-raise .query--para, .company-contact-us-corporate .query--para"
          ).addClass("d-none");
          $(
            ".company-contact-us-raise .form--note, .company-contact-us-corporate .form--note"
          ).addClass("d-none");
          $(".server-fail-msg").removeClass("d-none");
          console.log("error: invalid input", error);
        },
      });
    }

    function getTicketNumber(response) {
      let ticketNo = response;
      let match = ticketNo.match(/(\d{5}-\d{4}-\d{4})/);
      if (match && match[0]) {
        return $("#ticketNo").text(match[0]);
      } else {
        return "";
      }
    }

    function successFunc(response) {
      $(".server-success-msg").removeClass("d-none");
      $(
        ".company-contact-us-raise .query--para, .company-contact-us-corporate .query--para"
      ).addClass("d-none");
      $(
        ".company-contact-us-raise .form--note, .company-contact-us-corporate .form--note"
      ).addClass("d-none");
      $(
        ".company-contact-us-raise .addressPan, .company-contact-us-corporate .addressPan"
      ).addClass("d-none");
    }

    $(".contact-submit-btn button[name='reset']").click(function () {
      const closestForm = $(this).closest(".contact-us-form");
      const dropdownBtnReset = $(closestForm).find('.dropdown-select');
      $(closestForm).trigger('reset');
      $(closestForm).find('.refresh').click();
      $(closestForm).find('.form-input').val('');
      closestForm.find(".company-contact-us-raise .error-message").css("display", "none");
      closestForm.find("input.campaign-input").val("");
      closestForm.find("input[type='hidden']").val("");
      closestForm.find(".form--wrap textarea").val("");
      closestForm.find('input[type="checkbox"]').prop("checked", false);
      closestForm.find("#email").parent().siblings(".error-message").hide();
      closestForm.find(".form-container").find(".validate--msg").hide();
      closestForm.find("button.dropdown-select").removeClass("active");
      if (closestForm.hasClass('company-contact-us-corporate-form')) {
        closestForm.find("button.dropdown-select").each(function (index) {
          $(this).text(originalEnquiryText[index]);
        });
        closestForm.find(".input-container input[placeholder-backup]").each(function (index) {
          $(this).attr('placeholder', originalEnquiryBackupPlaceholder[index]);
          $(this).removeClass('placeholder-error')
        });
      }
      if (closestForm.hasClass('company-contact-us-raise-form')) {
        closestForm.find("button.dropdown-select").each(function (index) {
          $(this).text(originalraiseText[index]);
          $(this).removeClass('dropdown-error')
        });
        closestForm.find(".input-container input[placeholder-backup]").each(function (index) {
          $(this).attr('placeholder', originalComplainBackupPlaceholder[index]);
          $(this).removeClass('placeholder-error')
        });
        closestForm.find(".input-container input[name='date']").siblings('.malfunction-date-label').removeClass('placeholder-error');

        $("#sug-tel, #sug-reg, #sug-odo, #sug-mal ").show();
          $("#sub-cat-form").addClass("d-none");
          $(
            "#sug-email input, #sug-dstate input, #sug-dcity input, #sug-dname input, #sug-mal input"
          ).attr("required", true);
          $("#sub-cat-form input").attr("required", false);

          $(
            "#sug-email span sup, #sug-dstate span sup, #sug-dstate .select-span, #sug-dcity span sup, #sug-dcity .select-span, #sug-dname span sup, #sug-dname .select-span"
          ).show();
          $(".flex-change").removeClass("fb-100");
          $("#vin-number").removeClass("d-none");
          $("#vin-number input").attr("required", true);
      }
      closestForm.find('.dropdown-menu li').removeClass('active');
      closestForm.find("#sub-cat-form").addClass("d-none");
      $(dropdownBtnReset).removeClass('dropdown-error');
    });

    // CAPTCHA CODE
    function dec2hex(dec) {
      return dec.toString(16).padStart(2, "0");
    }
    function generateId(len) {
      var arr = new Uint8Array((len || 40) / 2);
      window.crypto.getRandomValues(arr);
      return Array.from(arr, dec2hex).join("");
    }
    $(".refresh").on("click", function () {
      createCaptcha($(this).parents("form"));
    });
    function createCaptcha(currentForm) {
      sessionStorage.setItem("tempID", generateId());
      var captchaData = {
        reqID: sessionStorage.getItem("tempID"),
      };
      $.ajax({
        url: defaultservlet + ".captcha.html",
        type: "POST",
        data: captchaData,
        success: function (resp) {
          $(currentForm).find("#captcha-img").remove();
          createCaptchaImage(resp);
          captchText = resp;
        },
        error: function () { },
      });
    }
    function createCaptchaImage(resp) {
      var canv = document.createElement("canvas");
      canv.id = "captcha-img";
      canv.width = 200;
      canv.height = 50;
      var context = canv.getContext("2d");

      context.font = "bold 20px Arial";
      const spaceWidth = canv.width - context.measureText(resp).width - 40;
      const wordSpace = Math.floor(spaceWidth / resp.length);
      let left = 10;
      for (let i = 0; i < resp.length; i++) {
        const deg = (Math.random() * 30 * Math.PI) / 180;
        const x = left;
        const y = canv.height / 2 + Math.random() * 10;

        context.translate(x, y);
        context.rotate(deg);

        context.fillStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.fillText(resp[i], 0, 0);

        context.rotate(-deg);
        context.translate(-x, -y);

        left += context.measureText(resp[i]).width + wordSpace + Math.floor(Math.random() * 5);
      }

      const strokeLength = resp.length * Math.round(Math.random() + 1) + 3;
      for (let i = 0; i < strokeLength; i++) {
        context.strokeStyle = "rgb(" + 238 + "," + 35 + "," + 38 + ")";
        context.beginPath();
        context.moveTo(Math.random() * 100, Math.random() * 50);
        //context.lineTo(Math.random() * 100, Math.random() * 50);
        const x = Math.random() * 100;
        const y = Math.random() * 50;
        context.moveTo(x, y);
        //context.lineTo(x + 1, y + 1);
        context.stroke();
      }
      if ($("#captcha").length > 0) {
        document.getElementById("captcha").appendChild(canv); // adds the canvas to the body element
      }
    }
  }
  $('#raise-stream-dropdown ul li').on('click', function () {
    setTimeout(function () {
      $('#raise-stream-dropdown input').val($('#raise-stream-dropdown button').text().toLowerCase().replace(/\s/g, ''));
    }, 500);
  })

  $('#raise-catogery-dropdown ul li').on('click', function () {
    setTimeout(function () {
      $('#raise-catogery-dropdown input').val($('#raise-catogery-dropdown button').text().toLowerCase().replace(/\s/g, ''));
    }, 500);

  })
  $('#raise-subcatogery-dropdown ul li').on('click', function () {
    setTimeout(function () {
      $('#raise-subcatogery-dropdown input').val($('#raise-subcatogery-dropdown button').text().toLowerCase().replace(/\s/g, ''));
    }, 500);

  })
  $('#malfunction-date').focusout(function(){
    $(this).removeClass('placeholder-error');
    if(!$(this).val() == ""){
      $(this).siblings('.malfunction-date-label').removeClass('placeholder-error');
    }
  });
});

var currentPage = 1;
var itemsPerPage = 10;
var items = document.querySelectorAll(".pagination-items");
var totalPages = Math.ceil(items.length / itemsPerPage);
var paginationContainer = document.getElementById("dynamicPagination");
var spanTag = `<span class="disclosureContentPage container-wrapper" data-page=""></span>`;
var leftarrow=document.querySelector(".previous-investor");
var rightarrow=document.querySelector(".next-investor");


let pointer;
function updatePagination() {
 
  for (var i = 1; i <= totalPages; i++) {
    if (i == 1) {
      paginationContainer.innerHTML +=
        '<span class="disclosureContentPage container-wrapper active" data-page="' +
        i +
        '">' +
        i +
        "</span>";
    } else {
      paginationContainer.innerHTML +=
        '<span class="disclosureContentPage container-wrapper inactive" data-page="' +
        i +
        '">' +
        i +
        "</span>";
    }
  }

  document
    .querySelectorAll(".disclosureContentPage")
    .forEach(function (button) {
      button.addEventListener("click", function () {
        var page = parseInt(this.getAttribute("data-page"));
        currentPage = page;
        this.classList.add("active");
        

        pointer = Number(this.innerText);

        showPage(page);

        updatePageNumber(pointer);
        if(currentPage<=1){
          leftarrow.classList.add("disabled")
        }else{
          leftarrow.classList.remove("disabled")
        }
      });
    });
}
updatePagination();

function showPage(page) {
  var start = (page - 1) * itemsPerPage;
  var end = start + itemsPerPage;

  items.forEach(function (item, index) {
    if (index >= start && index < end) {
      item.style.display = "flex";
    } else {
      item.style.display = "none";
    }
  });
}


function nextPage() {
  if (currentPage < totalPages) {
    leftarrow.classList.remove("disabled")
    currentPage++;
    showPage(currentPage);
    updatePageNumber(currentPage);
  }
  const arr = document.querySelectorAll("#dynamicPagination span");
  if(currentPage>=arr.length){
    rightarrow.classList.add("disabled")
  }else{
    rightarrow.classList.remove("disabled")
  }
 
}

function prevPage() {
  if (currentPage > 1) {
    currentPage--;
    showPage(currentPage);
    updatePageNumber(currentPage);
  }
  
  if(currentPage<=1){
    leftarrow.classList.add("disabled")
  }
}
const updatePageNumber = (pointer) => {
  if(currentPage<=1){
    leftarrow.classList.add("disabled")
  }else{
    leftarrow.classList.remove("disabled")
  }

  const arr = document.querySelectorAll("#dynamicPagination span");
  if(currentPage>=arr.length){
    rightarrow.classList.add("disabled")
  }else{
    rightarrow.classList.remove("disabled")
  }


  arr.forEach((element, index) => {
    if (index + 1 == pointer) {
      element.classList.add("active");
      element.classList.remove("inactive");
    } else {
      element.classList.remove("active");
      element.classList.add("inactive");
    }
  });

  return this.innerText;
};
showPage(currentPage);
//  function goToPage(pageNumber) {
//       // Add logic to handle navigation to the specified page
//  }


$(document).ready(function () {
    const carouselSettings = {
        autoplay: false,
        infinite: false,
        arrows: false,
        dots: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        width: "100%",
        dotsClass: "carousel-indicators",
        responsive: [
            {
                breakpoint: 9999,
                settings: "unslick"
            },
            {
                breakpoint: 767,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                }
            }
        ]
    }

    $('.esg-framework-wrapper').each(function (inde, cmpEsgframeworkElement) {
        const cardContainer = $(cmpEsgframeworkElement).find('.card-container');
        cardContainer.slick(carouselSettings);
        $(window).on('resize', function () {
            if (cardContainer.length && !cardContainer.hasClass('slick-initialized')) {
                cardContainer.slick(carouselSettings, 500);
            }
        });
    });

});


$(document).ready(function () {
    $('.company-achivements-wrapper').each(function (a, cmpImpactCreatedElement) {
        const cmpImpactCreatedListContainer = $(cmpImpactCreatedElement).find('.carousel-slides');
        const imageSlickSettings = {
            autoplay: false,
            infinite: true,
            prevArrow: '.previous',
            nextArrow: '.next',
            arrows: true,
            dots: true,
            slidesToShow: 1,
            slidesToScroll: 1,
            adaptiveHeight: false,
            width: "100%",
            appendDots: $('.achivements-indicator-position'),
            responsive: [
                {
                    breakpoint: 767,
                    settings: {
                        draggable: true, 
                        variableWidth: false,
                        adaptiveHeight: false,
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
            ]
        }
    
        cmpImpactCreatedListContainer.slick(imageSlickSettings);
    });

    //popup section
    const appendingList = $('.company-achivements-wrapper .popup-inner-content .social-icon-items');
    $(appendingList).empty();
    $('.company-achivements-wrapper .company-achivements-popup').on('click', function () {
        const leadershipSocialList = $(this).find('.social-icon-empty-content').children();
        const appendingList = $('.company-achivements-wrapper .popup-inner-content .social-icon-items');
        let leadershipSocialListCount = $(leadershipSocialList).length;
        const title = $('.slick-active .content-wrapper').data('title');
        const description = $('.slick-active .content-wrapper').data('description');
        const role = $('.slick-active .content-wrapper').data('role');
        const img = $('.slick-active .content-wrapper').data('img');
        const alt = $('.slick-active .content-wrapper').data('alt');
        $(appendingList).empty();


        for (let i = 0; i < leadershipSocialListCount; i++) {
            // Create the item HTML structure
            const itemHTML = `
          <div class="single-item">
            <a href="">
              <img src="" alt="contactIcon">
            </a>
          </div>
        `;
            $(appendingList).append(itemHTML);       
        }
        $('.company-achivements-wrapper .popup-title').text(title);
        $('.company-achivements-wrapper .popup-card-role').text(role);
        $('.company-achivements-wrapper .popup-description').html(description);
        $('.company-achivements-wrapper .popup-img-container img').attr('src', img);
        $('.company-achivements-wrapper .popup-img-container img').attr('alt', alt);
        $('.company-achivements-wrapper .popup').css('display', 'flex');
        if (img) {
            $('.company-achivements-wrapper .popup-img-container img').css('display', 'block');
        } else {
            $('.company-achivements-wrapper .popup-img-container img').css('display', 'none');
        }

        $('.company-achivements-wrapper .social-icon-empty-content .single-item').each(function(index) {
            const icon = $(this).data('icon');
            const redirect = $(this).data('redirect');
            $('.company-achivements-wrapper .popup .icon-container .single-item').eq(index).children().attr('href', redirect);
            $('.company-achivements-wrapper .popup-inner-content .icon-container .single-item').eq(index).find('img').attr('src', icon);
          });
        document.documentElement.classList.add('overflow-y-hidden');
    });

    $('.company-achivements-wrapper .close-btn').on('click', function () {
        document.documentElement.classList.remove('overflow-y-hidden');
        $('.company-achivements-wrapper .popup').fadeOut();
    });
});
$(document).ready(function () {
  document.querySelectorAll('.arrow').forEach(function (arrow, index) {
    arrow.addEventListener("click", function () {
      updateCard(index);
    });
    if($(window).width() < 767) {
      updateCard(0);
    }
  });
  
  function updateCard(index) {
    const uarrow = document.querySelectorAll(".uparrow")
    const darrow = document.querySelectorAll(".downarrow")
  
    document.querySelectorAll(".investors-cards").forEach(function (card, cardIndex) {
  
      if (index === cardIndex) {
        uarrow.item(index).classList.remove("temclass")
        darrow.item(index).classList.add("temclass")
        card.style.display = "block"
      }
      else {
        card.style.display = "none"
        darrow.item(cardIndex).classList.remove("temclass")
        uarrow.item(cardIndex).classList.add("temclass")
      }
    })
  
    document.querySelectorAll(".investors-card-group").forEach(function (card, value) {
  
      if (index === value) {
        card.style.height = "100%"
        card.style.clipPath = "polygon(0 0, 100% 0, 100% calc(100% - 34px), calc(100% - 34px) 100%, 0 100%, 0 0)"
        card.style.borderLeft = "4px solid #FF0000"
      }
      else {
        card.style.height = "0px"
        card.style.clipPath = "polygon(0 0, 100% 0, 100% calc(100% - 0px), calc(100% - 0px) 100%, 0 100%, 0 0)"
        card.style.borderLeft = "none"
      }
  
    })
  
    document.querySelectorAll(".investors-cards-image").forEach(function (card, value) {
  
      if (index === value) {
        card.style.display = "block"
      }
      else {
        card.style.display = "none"
      }
  
    })
  }
});
$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$("#partner-with-us-container").length) {
            return;
        }
        initPartnerWithUs();
    } catch (error) {
        console.error(error);
    }
});

function initPartnerWithUs() {

    function init() {
        const partnerWithUsContainer = document.getElementById("partner-with-us-container");
        if (partnerWithUsContainer) {
            const desktopImg = partnerWithUsContainer.getAttribute("desktop-img");
            const mobileImg = partnerWithUsContainer.getAttribute("mobile-img");
            if (window.innerWidth >= 767) {
                if (desktopImg) {
                    partnerWithUsContainer.style.backgroundImage = `linear-gradient(90deg, #FFFFFF 49.59%, rgba(255, 255, 255, 0) 89.77%),url('${desktopImg}')`;
                }
            } else {
                if (mobileImg) {
                    partnerWithUsContainer.style.backgroundImage = `linear-gradient(180deg, #FFFFFF 40%, rgba(255, 255, 255, 0) 89.77%),url('${mobileImg}')`;
                } else if (desktopImg) {
                    partnerWithUsContainer.style.backgroundImage = `linear-gradient(180deg, #FFFFFF 40%, rgba(255, 255, 255, 0) 89.77%),url('${desktopImg}')`;
                }
            }
        }
    }

    window.onresize = init;
    init()
}
$(document).ready(function () {
  var searchTerm = "";
  var searchYear = "";
  if (
    document.getElementById("company-polices-container") &&
    document.getElementById("company-polices-container").children.length > 0
  ) {
    const searchBar = $(".company-polices-search-input .polices-search");
    const searchYearDropdown = $(
      ".company-polices-tab-wrapper .company-polices-dropdown-container .dropdown"
    );

    // for storing the search year value and doing year func.
    searchYearDropdown.each(function (indx, dropdownElement) {
      const dropdownButton = $(dropdownElement).find(".dropdown-toggle");
      const dropdownMenu = $(dropdownElement).find(".dropdown-menu");
      if (dropdownMenu && dropdownMenu.children().length) {
        dropdownButton.text(dropdownMenu.find("li a").first().text());
        searchYear = dropdownMenu.find("li a").first()[0].getAttribute("value");
        dropdownMenu.on("click", "li a", function (e) {
          dropdownButton.text($(this).text());
          searchYear = $(this)[0].getAttribute("value");
          dropdownMenu.find("li a").removeClass("active");
          $(this).addClass("active");
          getCardData(searchTerm, searchYear);
        });
      } else {
        dropdownButton.text("");
      }
    });

    // for storing the search value and doing search func.
    searchBar.keyup(function (e) {
      if (e.key === "Enter" || e.keyCode === 13) {
        searchTerm = $(this).val();
        sendDataToReportsPolicies();
      }
      if (e.key === "Backspace") {
        if ($(this).val() == "") {
          searchTerm = $(this).val();
          sendDataToReportsPolicies();
        }
      }
    });

    // adding click func to the search icon
    $(".company-polices-search-input .search-icon").click(function (e) {
      if ($(window).width() < 767) {
        if (searchBar[0].value.length > 0) {
          searchTerm = searchBar[0].value;
          sendDataToReportsPolicies();
        }
      } else {
        if (searchBar[1].value.length > 0) {
          searchTerm = searchBar[1].value;
          sendDataToReportsPolicies();
        }
      }
    });

    var selectedIndex;
    const params = new Proxy(new URLSearchParams(window.location.search), {
      get: (searchParams, prop) => searchParams.get(prop),
    });
    let queryStringTab = params.key1;
    let queryStringYear = params.key2;
    const tabHeaders = document.getElementsByClassName(
      "company-polices-tab-header"
    );
    var attributeLastString;
    if (queryStringTab && queryStringTab.length > 0) {
      for (i = 0; i < tabHeaders.length; i++) {
        var tabHeadersDataAttribute = tabHeaders[i]
          .getAttribute("data-id")
          .split("/");
        attributeLastString =
          tabHeadersDataAttribute[tabHeadersDataAttribute.length - 1];
        if (attributeLastString == queryStringTab) {
          selectedIndex = i;
        }
      }
    }
    defaultTabSelection(selectedIndex);
    if (queryStringYear && queryStringYear.length > 0) {
      defaultYearSelection(queryStringYear);
    }

    // adding styles to the clicked tabs
    $(".company-polices-tab-header").click(function (event) {
      showSelectedTabContent(
        event.currentTarget.getAttribute("data-id"),
        event.currentTarget
      );
      if ($(window).width() < 767) {
        event.currentTarget.scrollIntoView({ behavior: "smooth" });
      }
    });

    // To show the selected tab content and hide the other contents
    function showSelectedTabContent(tabName, elmnt) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName(
        "company-polices-tab-content"
      );
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("company-polices-tab-header");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("company-polices-tab-active");
      }
      const tabContElement = document.getElementById(tabName);
      const subheadingEle = $(tabContElement).closest(".company-polices-tab-wrapper").find(".company-polices-download-text");
      const subTitle = $(elmnt).data("subtitle") ? $(elmnt).data("subtitle") : subheadingEle.data("subheading");
      subheadingEle.find("p").text(subTitle);
      if (tabName.indexOf("investor-calendar") !== -1
        || tabName.indexOf("quarterly-call-recordings") !== -1) {
        subheadingEle.addClass("cmp-mobile-hidden").css("visibility","hidden");
      } else {
        subheadingEle.removeClass("cmp-mobile-hidden").css("visibility","visible");
      }
      tabContElement.style.display = "block";
      elmnt.classList.add("company-polices-tab-active");

      // while clicking on the tabs for reamoving the accordian expand cls and minuc icon
      var accordianPanel = document.getElementsByClassName(
        "company-polices-faq-accordian-panel"
      );
      var accordianHeaderPanel = document.getElementsByClassName(
        "company-polices-faq-accordian-wrapper"
      );

      for (let t = 0; t < accordianPanel.length; t++) {
        if (accordianPanel[t].classList.contains("accordian-expand")) {
          accordianPanel[t].classList.add("accordian-collapse");
          accordianPanel[t].classList.remove("accordian-expand");
          accordianHeaderPanel[t].children[1].classList.add("d-none");
          accordianHeaderPanel[t].children[2].classList.remove("d-none");
        }
      }
    }

    // Get the element with id="defaultOpen" and click on it
    if ($("#defaultOpen").length) {
      document.getElementById("defaultOpen").click();
    }

    // calling this func to get the data from AJAX while on load.
    sendDataToReportsPolicies();
  }

  // doing AJAX call for getting data
  function getCardData(searchTerm, searchYear) {
    const resourcePath = $("#company-polices-container").attr(
      "data-resource-path"
    );
    const searchPath = $("#company-polices-container").attr("data-search-path");
    var categoryData = "";
    const tadHeaderDataIDs = $(".company-polices-tab-header");
    for (let i = 0; i < tadHeaderDataIDs.length; i++) {
      categoryData += tadHeaderDataIDs[i].getAttribute("data-id") + ",";
    }
    categoryData = categoryData.slice(0, -1);
    let reqLink;
    if (
      document
        .getElementById("company-polices-container")
        .hasAttribute("data-variation")
    ) {
      reqLink = `${resourcePath}.companyreportspolicies.json?searchRootPath=${searchPath}&searchTags=${categoryData}&searchTerm=${searchTerm}&searchYear=${searchYear}`;
    } else {
      reqLink = `${resourcePath}.companyreportspolicies.json?searchRootPath=${searchPath}&searchTags=${categoryData}&searchTerm=${searchTerm}`;
    }
    $.ajax({
      type: "GET",
      url: reqLink,
      dataType: "JSON",
      success: function (resp) {
        if (resp) {
          sendCardData(resp);
        }
      },
      error: function (err) {
        console.error(err);
      },
    });
  }

  // getting data from the response through data-id attribute of tab header
  function sendCardData(tabData) {
    const headerData = $(
      ".company-polices-tab-header-wrapper .company-polices-tab-header"
    );
    var searchedData = [];
    for (var i = 0; i < headerData.length; i++) {
      if (headerData[i].hasAttribute("data-id")) {
        const dataAttribute = headerData[i].getAttribute("data-id");
        let tabContents = tabData[dataAttribute];
        createCard(tabContents, dataAttribute);
        if(tabContents){
          searchedData.push(tabContents.length);
        }
        if (searchTerm.length > 0) {
          searchToTriggerActiveTab(searchedData);
        }
      }
    }
  }

  // comparing the header data-id attr and content id attr for fetching the relavent data respective to the tabs
  function createCard(tabcontent, dataAttribute) {
    const tabContentDiv = $(".company-polices-tab-content");
    const headerContentDiv = $(".company-polices-tab-header");
    const downloadLabel = $("#company-polices-container").attr(
      "data-download-label"
    );
    for (var i = 0; i < tabContentDiv.length; i++) {
      for (var j = 0; j < headerContentDiv.length; j++) {
        if (
          headerContentDiv[i].getAttribute("data-id") ==
          tabContentDiv[j].getAttribute("id")
        ) {
          if (dataAttribute == tabContentDiv[i].getAttribute("id")) {
            if (
              document
                .getElementById("company-polices-container")
                .hasAttribute("data-variation")
            ) {
              if (tabcontent && tabcontent.length > 0) {
                if (dataAttribute.indexOf("investor-calendar") !== -1
                  || dataAttribute.indexOf("quarterly-call-recordings") !== -1) {
                  createEventCalendar(tabcontent, tabContentDiv[i], downloadLabel, dataAttribute.indexOf("investor-calendar") !== -1);
                } else {
                  creatBanner(tabcontent, tabContentDiv[i], downloadLabel);
                }
              } else {
                dataNotAvailable(tabContentDiv[i]);
              }
            } else {
              if (tabcontent && tabcontent.length > 0) {
                createAccordion(tabcontent, tabContentDiv[i], downloadLabel);
              } else {
                dataNotAvailable(tabContentDiv[i]);
              }
            }
          }
        }
      }
    }
  }

  // validating to show whether data not available or report not found banner
  function dataNotAvailable(tabcontent) {
    if (searchTerm.length > 0) {
      noReportsFoundBanner(tabcontent);
    } else {
      noDataFound(tabcontent);
    }
  }

  // from AJAX call data is not there showing data not available banner
  function noDataFound(element) {
    element.innerHTML = "";
    const noDataFoundElement = `<div class="policies--no-result-found">
  <div class="policies--top-border"></div>
  <div class="policies--no-result-container">
      <div class="policies--no-result-image">
      <svg width="131" height="133" viewBox="0 0 131 133" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M24.9688 128.508C22.2021 128.508 19.6021 127.983 17.1687 126.933C14.7354 125.883 12.6188 124.458 10.8187 122.658C9.01875 120.858 7.59375 118.741 6.54375 116.308C5.49375 113.874 4.96875 111.274 4.96875 108.508C4.96875 105.741 5.49375 103.141 6.54375 100.708C7.59375 98.2745 9.01875 96.1578 10.8187 94.3578C12.6188 92.5578 14.7354 91.1328 17.1687 90.0828C19.6021 89.0328 22.2021 88.5078 24.9688 88.5078C27.7354 88.5078 30.3354 89.0328 32.7688 90.0828C35.2021 91.1328 37.3188 92.5578 39.1188 94.3578C40.9188 96.1578 42.3438 98.2745 43.3937 100.708C44.4438 103.141 44.9688 105.741 44.9688 108.508C44.9688 111.274 44.4438 113.874 43.3937 116.308C42.3438 118.741 40.9188 120.858 39.1188 122.658C37.3188 124.458 35.2021 125.883 32.7688 126.933C30.3354 127.983 27.7354 128.508 24.9688 128.508ZM24.9688 124.508C26.7688 124.508 28.5021 124.216 30.1688 123.633C31.8354 123.049 33.3687 122.208 34.7688 121.108L12.3688 98.7078C11.2688 100.108 10.4271 101.641 9.84375 103.308C9.26042 104.974 8.96875 106.708 8.96875 108.508C8.96875 112.974 10.5188 116.758 13.6188 119.858C16.7188 122.958 20.5021 124.508 24.9688 124.508ZM37.5688 118.308C38.6688 116.908 39.5104 115.374 40.0938 113.708C40.6771 112.041 40.9688 110.308 40.9688 108.508C40.9688 104.041 39.4188 100.258 36.3188 97.1578C33.2188 94.0578 29.4354 92.5078 24.9688 92.5078C23.1688 92.5078 21.4354 92.7995 19.7688 93.3828C18.1021 93.9661 16.5688 94.8078 15.1687 95.9078L37.5688 118.308Z" fill="#FF0000"/>
      <path d="M39.918 9.05469V2H121.878V35.456M32.8594 48.0714V9.05469H114.819V35.456M24.9922 79.8607V53.4828H92.312L104.435 41.3594H129.031V128.336H42.7538M26.8906 53.4375V42.4453H32.8594M24.9688 67.8438H128.859" stroke="#B1B1B1" stroke-width="3" stroke-linecap="round"/>
      <path d="M46.5664 18.9062H101.754M46.5664 27.2266H101.754M46.5664 35.5469H101.754M46.5664 43.8672H81.7578" stroke="#B1B1B1" stroke-width="3" stroke-linecap="round"/>
      </svg>
      </div>
      <div class="policies--no-found-content">
          <h2>No Data Found</h2>
      </div>
  </div>
  <div class="policies--bottom-border"></div>
</div>`;
    element.innerHTML += noDataFoundElement;
  }

  // while searching the data is not there showing report not available banner
  function noReportsFoundBanner(element) {
    element.innerHTML = "";
    const noReportsFoundElement = `<div class="policies--no-result-found">
  <div class="policies--top-border"></div>
  <div class="policies--no-result-container">
      <div class="policies--no-result-image">
          <svg xmlns="http://www.w3.org/2000/svg" width="162" height="114" viewBox="0 0 162 114" fill="none">
              <rect x="61.5271" y="0.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
              <rect x="66.8271" y="6" width="10" height="11" fill="#D9D9D9"/>
              <path d="M81.8271 7H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
              <path d="M92.8271 12H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
              <path d="M105.827 17H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
              <rect x="31.5271" y="31.7" width="63.6" height="21.6" stroke="#FF0000" stroke-width="1.4"/>
              <path d="M82.6271 46L81.8271 45.2L85.0271 42L81.8271 38.8L82.6271 38L85.8271 41.2L89.0271 38L89.8271 38.8L86.6271 42L89.8271 45.2L89.0271 46L85.8271 42.8L82.6271 46Z" fill="#FF0000"/>
              <path d="M36.8271 38H74.8271" stroke="#FF0000" stroke-width="1.4"/>
              <path d="M36.8271 43H63.8271" stroke="#FF0000" stroke-width="1.4"/>
              <path d="M36.8271 48H50.8271" stroke="#FF0000" stroke-width="1.4"/>
              <rect x="1.52715" y="62.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
              <rect x="49.8271" y="68" width="10" height="11" fill="#D9D9D9"/>
              <path d="M6.82715 69H44.8271" stroke="#D9D9D9" stroke-width="1.4"/>
              <path d="M6.82715 74H33.8271" stroke="#D9D9D9" stroke-width="1.4"/>
              <path d="M6.82715 79H20.8271" stroke="#D9D9D9" stroke-width="1.4"/>
              <circle cx="96.756" cy="49.5544" r="36.9289" stroke="#595959" stroke-width="4"/>
              <path d="M124.462 76.5586L160.172 112.269" stroke="#595959" stroke-width="4"/>
          </svg>
      </div>
      <div class="policies--no-found-content">
          <h2>No Result Found</h2>
          <p>We couldn't find any matches. Try again</p>
      </div>
  </div>
  <div class="policies--bottom-border"></div>
</div>`;
    element.innerHTML += noReportsFoundElement;
  }

  // for creating the HTML of polices
  function createAccordion(data, element, downloadLabel) {
    element.innerHTML = "";
    data.forEach((item) => {
      const cardEle = `<div class="company-polices-faq-accordian">
    <div class="company-polices-faq-accordian-wrapper">
        <p>${item.tileTitle}</p>
        <div class="minus-icon d-none">
            <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
            >
                <path
                        d="M7.04797 6.79688H7.04778H1.3335H1.0835V7.04688V8.95164V9.20164H1.3335H7.04778H8.95254H14.6668H14.9168V8.95164V7.04688V6.79688H14.6668H8.95254H8.70254V6.79809L7.04797 6.79688Z"
                        fill="#FF0000"
                        stroke="#FF0000"
                        stroke-width="0.5"
                />
            </svg>
        </div>
        <div class="add-icon">
            <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
            >
                <g clip-path="url(#clip0_8552_14814)">
                    <path
                            d="M7.04754 1.08398H6.79754V1.33398V6.79827H1.33325H1.08325V7.04827V8.95303V9.20303H1.33325H6.79754V14.6673V14.9173H7.04754H8.9523H9.2023V14.6673V9.20303H14.6666H14.9166V8.95303V7.04827V6.79827H14.6666H9.2023V1.33398V1.08398H8.9523H7.04754Z"
                            fill="#FF0000"
                            stroke="#FF0000"
                            stroke-width="0.5"
                    />
                </g>
                <defs>
                    <clipPath id="clip0_8552_14814">
                        <rect width="16" height="16" fill="white" />
                    </clipPath>
                </defs>
            </svg>
        </div>
    </div>
    <!-- This div holds the content to be displayed-->
    <div class="company-polices-faq-accordian-panel">
           <p>${item.tileSubtitle}</p>
    </div>
    <a class="company-polices-download-section" target="_blank" href=${item.pdfPath}>
    <div class="company-polices-download-icon">
    <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="24" height="23.9922" transform="translate(0.867188 0.00292969)" fill="white"/>
    <path d="M9.91431 6.99185V9.98816H7.89113H5.86328L9.38978 13.5088L12.9116 17.0342L16.4334 13.5088L19.9599 9.98816H17.9321H15.9089V6.99185V3.99553H12.9116H9.91431V6.99185Z" fill="#FF0000"/>
    <path d="M5.88867 19.9882V20.9951H12.9136H19.9385V19.9882V18.9813H12.9136H5.88867V19.9882Z" fill="#FF0000"/>
    </svg></div>
    <p>${downloadLabel}</p></a>
  </div>   `;

      element.innerHTML += cardEle;
    });
    $(element).find(".company-polices-faq-accordian .company-polices-faq-accordian-wrapper")
      .on("click", (e) => {
        toCloseOpenAccordian(e.currentTarget);
      });
  }

  // for creating the HTML of report
  function creatBanner(data, element, downloadLabel) {
    element.innerHTML = "";
    var cardElement = "";
    var cardElement2 = "";
    var combineElement = "";
    data.forEach((item) => {
      if (item.tileImagePath != "") {
        cardElement += `<div class="company-reports__wrapper"><div class="company-reports__container" style="background: linear-gradient(0deg,rgba(0, 0, 0, 0.6) 0%,rgba(0, 0, 0, 0.6) 100%),url('${item.tileImagePath}') lightgrey 50% / cover no-repeat;">
      <h6 class="company-reports-header">${item.tileTitle}</h6>
      <p class="company-reports-file-size">${item.attachmentSize}</p>
      <a class="company-reports-download-button" target="_blank" href="${item.pdfPath}">
        <p class="company-reports-download-text">${downloadLabel}</p>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="21"
          viewBox="0 0 20 21"
          fill="none"
        >
          <path
            d="M7.16431 5.40074V8.22173H5.26014H3.35156L6.67063 11.5364L9.9853 14.8555L13.3 11.5364L16.619 8.22173H14.7105H12.8063V5.40074V2.57975H9.9853H7.16431V5.40074Z"
            fill="white"
          />
          <path
            d="M3.375 17.6344V18.582H9.9867H16.5984V17.6344V16.6867H9.9867H3.375V17.6344Z"
            fill="white"
          />
        </svg>
      </a>
    </div></div>`;
      } else {
        cardElement2 += `<div class="aem-reports-notices">
      <div class="aem-reports-notices-header-section">
        <p class="aem-reports-notices-header-text">${item.tileTitle} -<span class="aem-reports-notices-download-size">&nbsp;${item.attachmentSize}</span></p>
        
      </div>
      <a class="aem-reports-download-section" target="_blank" href="${item.pdfPath}">
        <div class="aem-reports-download-icon">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="25"
            viewBox="0 0 24 25"
            fill="none"
          >
            <rect
              width="24"
              height="23.9922"
              transform="translate(0 0.582031)"
              fill="white"
            />
            <path
              d="M9.04712 7.57485V10.5712H7.02395H4.99609L8.52259 14.0918L12.0444 17.6172L15.5662 14.0918L19.0927 10.5712H17.0649H15.0417V7.57485V4.57854H12.0444H9.04712V7.57485Z"
              fill="#FF0000"
            />
            <path
              d="M5.02148 20.5673V21.5742H12.0464H19.0713V20.5673V19.5604H12.0464H5.02148V20.5673Z"
              fill="#FF0000"
            />
          </svg>
        </div>
        <p class="aem-reports-download-size">
          ${downloadLabel}
        </p>
      </a>
    </div>`;
      }
      combineElement = `<div>` + cardElement + cardElement2 + `</div>`;
    });
    element.innerHTML += combineElement;
  }

  // for creating the HTML of Event Calendar
  function createEventCalendar(data, element, downloadLabel, isCalendarEvent = true) {
    element.innerHTML = "";
    const eventElement = $("<div></div>").addClass("block--cmp-event-calendar-container");
    if (isCalendarEvent) {
      const uniqueQuarters = data.length
        ? [...new Set(data.map((item) => item.quarters))].sort(
          (a, b) => b.localeCompare(a)
        )
        : [];

      if (uniqueQuarters.length) {
        const quaterContainer = `<div class="select-year-div d-flex">
            <p> Select Quarter: </p>
            <div class="block--cmp-select-quarter dropdown">
              <button type="button" class="data-toggle" data-toggle="dropdown" data-display="static"></button>
              <ul class="dropdown-menu"></ul>
            </div>
          </div>
          <div class="cmp-calendar-events-wrapper"></div>`;
        eventElement.append(quaterContainer);
        const quarterDropdown = eventElement.find(".dropdown-menu");
        uniqueQuarters.forEach((quarter) => {
          if (quarter) {
            let option = $("<li></li>").attr("value", quarter).text(quarter);
            quarterDropdown.append(option);
          }
        });

        quarterDropdown.find("li").on("click", function (e) {
          const selectedQuaterText = $(this).text();
          const selectedQuater = $(this).attr("value");
          const parentElement = eventElement.find(".cmp-calendar-events-wrapper");
          parentElement.html("");
          let reportsYear = data.filter(
            (ele) => ele.quarters == selectedQuater
          ).sort(function (a, b) {
            let aa = moment(a.articleDate, "DD MMM, YYYY").format("YYYY-MM-DD"),
              bb = moment(b.articleDate, "DD MMM, YYYY").format("YYYY-MM-DD");
            return aa > bb ? -1 : bb > aa ? 1 : 0;
          });
          if (selectedQuater) {
            quarterDropdown.find("li").removeClass("active");
            $(this).addClass("active");
            quarterDropdown.siblings(".data-toggle").text(selectedQuaterText);

            reportsYear.forEach((ele) => {
              const elements = `<div class="events-calender-wrapper">
                  <div>
                      <div class="events-calender-wrapper-label">${ele.tileSubtitle}</div>
                      <div class="events-calender-wrapper-desc">${ele.tileTitle}</div>
                  </div>
                  <div class="date-wrapper">
                      <div class="events-calender-wrapper-date">${moment(ele.articleDate, "DD MMM, YYYY").format("DD-MM-YYYY")}</div>
                      <div class="events-calender-wrapper-venue">${ele.venue}</div>
                  </div>
                </div>`;
              parentElement.append(elements);
            });
          } else {
            const elements = `<div class="events-calender-no-data">
                <p class="events-calender-wrapper-desc">The data for selected year doesn't exist</p>
              </div>`;
            parentElement.append(elements);
          }
        });

        const firstQEle = quarterDropdown.find("li").first();
        if (firstQEle.length) {
          firstQEle.addClass("active");
          quarterDropdown.siblings(".data-toggle").text(firstQEle.text());
          firstQEle.trigger("click");
        } else {
          quarterDropdown.closest(".select-year-div").addClass("d-none").removeClass("d-flex");
          const parentElement = eventElement.find(".cmp-calendar-events-wrapper");
          const elements = `<div class="events-calender-no-data">
              <p class="events-calender-wrapper-desc">The data for selected year doesn't exist.</p>
            </div>`;
          parentElement.html("").append(elements);
        }
      } else {
        const elements = `<div class="cmp-calendar-events-wrapper">
            <div class="events-calender-no-data">
              <p class="events-calender-wrapper-desc">The data for selected year doesn't exist.</p>
            </div>
          </div>`;
        eventElement.html("").append(elements);
      }
    } else {
      const uniqueQuarters = data.length ? data.sort((a, b) => {
        if (
          a.quarter &&
          b.quarter &&
          parseInt(a.quarter) > parseInt(b.quarter)
        ) {
          return -1;
        }
      }) : [];
      const subTitle = $(element).data("subtitle");
      const callRecHeaderEle = `<div class="quarterly-call-container">
          <div class="quarterly-main-heading">Quarterly Call Recordings</div>
          <div class="d-flex quarterly-content-wrap">
            <div class="quarterly-content-heading">
              <p class="b2-text-std">${subTitle}</p>
            </div>
            <div class="quarterly-report-container"></div>
          </div>
        </div>`;
      eventElement.append(callRecHeaderEle);
      const reportElement = eventElement.find(".quarterly-report-container");

      if (uniqueQuarters.length) {
        uniqueQuarters.forEach((ele, id) => {
          const element = `<div class="quarterly-reports-wrapper">
              <div class="reports-quarterly-heading-container">
                <div class="reports-quarterly-heading">${ele.tileTitle}</div>
                ${ele.tileSubtitle ? '<div class="reports-quarterly-subheading">' + ele.tileSubtitle + "</div>" : ""}
                <a class="d-flex align-items-center block--quarterly-download-link" href="${ele.pdfPath}"
                 target="_blank" download>
                    <div class="quarterly-download-wrapper">
                        <img class="quarterly-download-image-toolkit" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/download_red.svg">
                    </div>
                    <div class="single-reports-quarter-download">${downloadLabel}</div>
                </a>
              </div>
              <div class="quarterly-file-wrapper">
                  <div class="quarter-audio-wrapper-image" data-toggle="modal" data-target="#audioModal-${id}">
                      <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
                        alt="audio" />
                      <span class="audio-label-text d-none">Audio Clip</span>
                  </div>
                  <div class="modal fade cmp-audio-model-dialog" id="audioModal-${id}" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                      <div class="modal-dialog modal-dialog-centered" role="document">
                          <div class="modal-content">
                                <audio src="${ele.pdfPath}" id="audioFile">
                                  Audio is not supported.
                              </audio>
                              <div class="music_volume">
                                  <div class="quarterly-clickable-container">
                                      <div id="btnPlay" class="audio-btn-play"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_pause.png"></div>
                                      <div id="btnPause" class="audio-btn-pause"><img  class="music-pause-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_play.svg"></div>
                                      <label id="lblTime" class="label-text audio-lbl-time">00:00</label>
                                      <input type="range" step="any" id="seekbar" class="audio-seekbar">
                                      <label id="lblTimeDuration" class="label-text audio-lbl-time-duration"></label>
                                      <div id="btnMute" class="audio-btn-mute"><img  class="music-volume-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"></div>
                                  </div>
                                  <div id="btnClose" data-dismiss="modal" class="audio-btn-close"><img  class="music-close-img" src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_close.svg"></div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
            </div>`;
          reportElement.append(element);
        });
        callRecordings(reportElement);
      } else {
        const elements = `<div class="quarterly-reports-wrapper">
            <div class="events-calender-no-data">
              <p class="events-calender-wrapper-desc">The data for selected year doesn't exist.</p>
            </div>
          </div>`;
        reportElement.html("").append(elements);
      }
    }
    $(element).append(eventElement);
  }

  // handle call recording audio dialog events
  function callRecordings(callRecordingEle) {
    const audiodefault = callRecordingEle.find(".quarterly-reports-wrapper .reports-quarterly-heading-container a:first").attr("href");
    let audio;

    callRecordingEle.find(".quarter-audio-wrapper-image").on("click", function (e) {
      const actionContainerEle = $(this)
        .siblings(".modal")
        .find(".quarterly-clickable-container");
      $(actionContainerEle)
        .find(".audio-btn-play img")
        .removeClass("d-none");
      $(actionContainerEle).find(".audio-btn-pause img").addClass("d-none");
      const audioEle = $(this).siblings(".modal").find("audio");
      if (audioEle.attr("src") === "undefined") {
        const audioSrc = $(this)
          .closest(".quarterly-reports-wrapper")
          .find(
            ".reports-quarterly-heading-container .block--quarterly-download-link"
          )
          .attr("href");
        if (audioSrc) {
          audioEle.attr("src", audioSrc);
        } else {
          audioEle.attr("src", audiodefault);
        }
      }

      audio = audioEle[0];

      audio.play();
      audio.addEventListener(
        "timeupdate",
        function () {
          updateTheTime(actionContainerEle);
        },
        false
      );
      audio.addEventListener(
        "durationchange",
        function () {
          setSeekBar(actionContainerEle);
        },
        false
      );
    }
    );

    callRecordingEle.find(".quarterly-reports-wrapper .audio-btn-pause").click(function () {
      $(this).siblings(".audio-btn-play").find("img").removeClass("d-none");
      $(this).find("img").addClass("d-none");
      if (audio.paused) {
        audio.play();
      } else if (audio.ended) {
        audio.currentTime = 0;
        audio.play();
      }
    });

    callRecordingEle.find(".music_volume .quarterly-clickable-container").on("click", function (clickEvent) {
      clickEvent.preventDefault();
      clickEvent.stopPropagation();
    });

    callRecordingEle.find(".quarterly-reports-wrapper .audio-btn-play").on("click", function () {
      if (audio.play) {
        $(this)
          .siblings(".audio-btn-pause")
          .find("img")
          .removeClass("d-none");
        $(this).find("img").addClass("d-none");
        audio.pause();
      }
    });

    callRecordingEle.find(".quarterly-reports-wrapper .audio-btn-mute").on("click", function () {
      if (audio.muted) {
        audio.muted = false;
        $(this)
          .find("img")
          .attr(
            "src",
            "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
          );
      } else {
        audio.muted = true;
        $(this)
          .find("img")
          .attr(
            "src",
            "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_mute_black.svg"
          );
      }
    });

    callRecordingEle.find(".quarterly-reports-wrapper .audio-seekbar").on("change", function () {
      audio.currentTime = this.value;
    });

    // fires when page loads, it sets the min and max range of the video
    function setSeekBar(parentElement) {
      const seekbar = parentElement.find(".audio-seekbar");
      if (seekbar.length) {
        seekbar[0].min = 0;
        seekbar[0].max = audio.duration;
      }
    }

    function updateTheTime(parentElement) {
      let sec = audio.currentTime;
      sec = sec % 3600;
      let min = Math.floor(sec / 60);
      sec = Math.floor(sec % 60);
      if (sec.toString().length < 2) sec = "0" + sec;
      if (min.toString().length < 2) min = "0" + min;
      parentElement.find(".audio-lbl-time").text(`${min}:${sec}`);
      const durationMinutes = Math.floor(Math.round(audio.duration) / 60);
      const durationSeconds =
        Math.round(audio.duration) - durationMinutes * 60;
      parentElement
        .find(".audio-lbl-time-duration")
        .text(`${durationMinutes}:${durationSeconds}`);
      if (audio.currentTime === audio.duration) {
        parentElement.find(".audio-btn-pause img").removeClass("d-none");
        parentElement.find(".audio-btn-play img").addClass("d-none");
      }
      const seekbar = parentElement.find(".audio-seekbar");
      if (seekbar.length) {
        seekbar[0].min = audio.startTime;
        seekbar[0].max = audio.duration;
        seekbar[0].value = audio.currentTime;
      }
    }

    callRecordingEle.find(".quarterly-reports-wrapper .cmp-audio-model-dialog").on("hide.bs.modal", function () {
      if (audio.play) {
        audio.pause();
      }
      audio.currentTime = 0;
      if (audio.muted) {
        audio.muted = false;
        $(this)
          .find(".audio-btn-mute img")
          .attr(
            "src",
            "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/music_volume_black.svg"
          );
      }
      audio.removeAttribute("src");
    });
  }

  // tab content Accordian to close and open func.
  function toCloseOpenAccordian(clickedElement) {
    if (document.getElementsByClassName("company-polices-faq-accordian")) {
      var accordianPanelClicked = $(clickedElement)[0].nextElementSibling;
      var accordianPanel = document.getElementsByClassName(
        "company-polices-faq-accordian-panel"
      );
      var courseAccordionPlus = document.getElementsByClassName("add-icon");
      var courseAccordionminus = document.getElementsByClassName("minus-icon");

      //when one of the buttons are clicked run this function

      /*if pannel is already open - minimize*/
      if (accordianPanelClicked.classList.contains("accordian-expand")) {
        //minifies current pannel if already open
        accordianPanelClicked.classList.add("accordian-collapse");
        accordianPanelClicked.classList.remove("accordian-expand");

        //toggle minus and add icon
        $(clickedElement)[0].children[1].classList.add("d-none");
        $(clickedElement)[0].children[2].classList.remove("d-none");
      } else {
        for (var j = 0; j < courseAccordionPlus.length; j++) {
          courseAccordionPlus[j].classList.remove("d-none");
        }
        for (var k = 0; k < courseAccordionminus.length; k++) {
          courseAccordionminus[k].classList.add("d-none");
        }

        // //Goes through and removes 'activ' from the css, also minifies any 'panels' that might be open
        for (var l = 0; l < accordianPanel.length; l++) {
          accordianPanel[l].classList.remove("accordian-expand");
        }
        //opens the specified pannel
        accordianPanelClicked.classList.remove("accordian-collapse");
        accordianPanelClicked.classList.add("accordian-expand");

        //toggle minus and add icon
        $(clickedElement)[0].children[1].classList.remove("d-none");
        $(clickedElement)[0].children[2].classList.add("d-none");
      }
    } //closing to the for loop.
  }

  // for default selection of tab
  function defaultTabSelection(index) {
    const tabHeaderLinks = document.getElementsByClassName(
      "company-polices-tab-header"
    );
    if (index != undefined) {
      tabHeaderLinks[index].id = "defaultOpen";
    } else {
      tabHeaderLinks[0].id = "defaultOpen";
    }
  }

  // for default selection of year
  function defaultYearSelection(queryStringYear) {
    const reportsYearDropdown = $(
      ".company-polices-tab-wrapper .company-polices-dropdown-container .dropdown"
    );

    reportsYearDropdown.each(function (indx, dropdownElement) {
      const dropdownButtons = $(dropdownElement).find(".dropdown-toggle");
      const dropdownMenus = $(dropdownElement).find(".dropdown-menu");
      const dropDownLinks = $(dropdownElement)
        .find(".dropdown-menu")
        .find("li a");
      var selectedYearIndex;
      for (let i = 0; i < dropDownLinks.length; i++) {
        if (dropDownLinks[i].text == queryStringYear) {
          selectedYearIndex = i;
        }
      }
      if (selectedYearIndex) {
        dropdownButtons.text(
          dropdownMenus.find("li a")[selectedYearIndex].text
        );
        dropDownLinks[selectedYearIndex].click();
      }
    });
  }

  // while searching to make the tab as active which have relavent content
  function searchToTriggerActiveTab(searchedData) {
    const headerWrapper = $(".company-polices-tab-sub-header-wrapper")[0]
      .children;
    var selectedTabIndex;
    var selectedTabContent;
    if (searchedData.length == headerWrapper.length) {
      for (let i = 0; i < headerWrapper.length; i++) {
        if (headerWrapper[i].classList.contains("company-polices-tab-active")) {
          selectedTabIndex = i;
        }
      }
      for (let i = 0; i < searchedData.length; i++) {
        if (searchedData[i] > 0) {
          if (i == selectedTabIndex) {
            selectedTabContent = i;
          }
        }
      }
      if (selectedTabContent == undefined) {
        for (let i = 0; i < searchedData.length; i++) {
          if (searchedData[i] > 0) {
            document
              .getElementsByClassName("company-polices-tab-header")
              [i].click();
            if ($(window).width() < 767) {
              document
                .getElementsByClassName("company-polices-tab-header")
                [i].scrollIntoView({ behavior: "smooth" });
            }
            return;
          }
        }
      }
    }
  }

  // sending datas for AJAX call
  function sendDataToReportsPolicies() {
    if (
      document
        .getElementById("company-polices-container")
        .hasAttribute("data-variation")
    ) {
      getCardData(searchTerm, searchYear);
    } else {
      getCardData(searchTerm, "");
    }
  }
});

$(document).ready(function () {
  try {
    if (!$(".investor-toolkit-wrapper").length) {
      return;
    }
    initInvestorToolkit();
  } catch (error) {
    console.log(error);
  }

  function initInvestorToolkit() {
    function clickedShow(element, container, scrollSpeed = 100) {
      const zeroLeft = $(element).position().left + $(container).scrollLeft();
      const offsetLeft = $(container).width() - $(element).width();
      const scrollTo = zeroLeft - offsetLeft;
      $(container).animate({ scrollLeft: scrollTo }, scrollSpeed);
    }

    $(".investor-toolkit-wrapper .nav-tabs").each(function (
      indx,
      cmpTabsElement
    ) {
      $(cmpTabsElement).on("click", ".nav-item .nav-link", function (e) {
        clickedShow(this, cmpTabsElement);
      });
    });

    function populateInvestorToolkitData(parentEle, currentEle, resp, dataAttribute, index) {
      const data = resp[dataAttribute];
      if (data.length) {
        const cardTitleEle = $(currentEle).find(".cards-title");
        const viewAllEle = $(currentEle).find(".mobile-view-viewAll");
        const currentEleMob = $(parentEle).find(".mobile-card-view .mov-list .tab-content .tab-pane").get(index);
        const viewAllEleMob = $(currentEleMob).find(".mobile-view-viewAll");
        const wrapperEleMob = $("<div></div>").addClass("nav-mobile-items");
        $(currentEle).empty();
        $(currentEleMob).empty();
        $(currentEle).append(cardTitleEle);
        const len = data.length - 1;
        const quartersData = data.sort((a, b) => {
          if (
            a.quarter &&
            b.quarter &&
            parseInt(a.quarter) > parseInt(b.quarter)
          ) {
            return -1;
          }
        });
        quartersData.forEach((item, idx) => {
          const desktopElement = `<a class="cards-content ${item.pdfPath ? '' : 'pt-event-none'}" href="${item.pdfPath}">
              <div class="cards-flex">
                <div class="cards-content-indicator">
                  <svg xmlns="http://www.w3.org/2000/svg" width="6" height="2" viewBox="0 0 6 2" fill="none">
                    <path d="M0 1H5.35021" stroke="black"></path>
                  </svg>
                </div>
                <p class="cards-content-text">${item.tileTitle}</p>
              </div>
              <div>
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <rect width="24" height="24" fill="#F5F5F5"></rect>
                    <path d="M9.04712 6.99346V9.99075H7.02395H4.99609L8.52259 13.5126L12.0444 17.0391L15.5662 13.5126L19.0927 9.99075H17.0649H15.0417V6.99346V3.99617H12.0444H9.04712V6.99346Z" fill="black"></path>
                    <path d="M5.02148 19.9931V21H12.0464H19.0713V19.9931V18.9862H12.0464H5.02148V19.9931Z" fill="black"></path>
                  </svg>  
              </div>
            </a>
            ${idx !== len ? '<div class="divider"></div>' : ''}`;

          const mobileElement = `<div class="cards-content">
              <div class="cards-flex">
                <div class="cards-content-indicator">
                  <svg xmlns="http://www.w3.org/2000/svg" width="6" height="2" viewBox="0 0 6 2" fill="none">
                    <path d="M0 1H5.35021" stroke="black"></path>
                  </svg>
                </div>
                <a href="${item.pdfPath}">
                  <p class="cards-content-text">${item.tileTitle}</p>
                </a>
              </div>
              <a href="${item.pdfPath}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <rect width="24" height="24" fill="#F5F5F5"></rect>
                    <path d="M9.04712 6.99346V9.99075H7.02395H4.99609L8.52259 13.5126L12.0444 17.0391L15.5662 13.5126L19.0927 9.99075H17.0649H15.0417V6.99346V3.99617H12.0444H9.04712V6.99346Z" fill="black"></path>
                    <path d="M5.02148 19.9931V21H12.0464H19.0713V19.9931V18.9862H12.0464H5.02148V19.9931Z" fill="black"></path>
                  </svg>
              </a>
            </div>
            ${idx !== len ? '<div class="divider"></div>' : ''}`;

          $(currentEle).append(desktopElement);
          wrapperEleMob.append(mobileElement);
        });

        $(currentEle).append(viewAllEle);
        $(currentEleMob).append(wrapperEleMob);
        $(currentEleMob).append(viewAllEleMob);
      }
    }

    $(".investor-toolkit-wrapper").each(function (idx, cmpInvToolkitEle) {
      const searchPath = $(cmpInvToolkitEle).attr("data-search-path");
      const resourcePath = $(cmpInvToolkitEle).attr("data-resource-path");

      $(cmpInvToolkitEle).find(".toolkit-card-wrapper > .cards").each(function (indx, cmpInvToolkitCardEle) {
        const categoryData = $(cmpInvToolkitCardEle).attr("data-category-set");
        if (categoryData) {
          const searchYear = $(cmpInvToolkitCardEle).attr("data-search-year") ? $(cmpInvToolkitCardEle).attr("data-search-year") : "";
          const dataToShow = $(cmpInvToolkitCardEle).attr("data-show-count") ? $(cmpInvToolkitCardEle).attr("data-show-count") : "-1";
          let reqLink = `${resourcePath}.companyreportspolicies.json?searchRootPath=${searchPath}&searchTags=${categoryData}&searchYear=${searchYear}&resultsPerPage=${dataToShow}`;
          $.ajax({
            type: "GET",
            url: reqLink,
            dataType: "JSON",
            success: function (resp) {
              if (resp) {
                populateInvestorToolkitData(cmpInvToolkitEle, cmpInvToolkitCardEle, resp, categoryData, indx);
              }
            },
            error: function (err) {
              console.error(err);
            },
          });
        }
      });
    });
  }
});
if ($("#blogs--page").length) {
  window.digitalData = [];
  let pagePath = window.location.pathname;
  let slug = pagePath.split("/");
  let actualSlug = slug[1].replace(".html", "");
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split("//");
  let pcSplit = fullSplit[1].split(".");
  let title = $("title").text();
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }

  function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(";");
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }

  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }

  if (window.digitalData) {
    window.digitalData.push({
      event: "pageView",
      page: {
        pagename: title,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        country: "India",
        hostName: window.location.origin,
        previousPageValue: document.referrer,
        platform: getOS(),
        loggedIn: isSignedIn(),
        fullURL: window.location.href,
      },
    });
  }

  const cardtileCreateBlog = function (respList, element) {
    if (!respList || respList.length === 0 || !element || element.length === 0) {
      return;
    }
    if (element.hasClass("no-result-found")) {
      element.removeClass("no-result-found");
    }

    const detailsPageLink = element
      .closest(".block--cards-section")
      .find(".block--article-details-path")
      .attr("href");

    respList.forEach((item) => {
      let isOpenNewTab = item.openInNewTab == "true" ? true : false;
      let redirectLink = "#";
      if (item.pdfPath) {
        redirectLink = item.pdfPath;
      } else {
        redirectLink = item.fragmentPath.split("/").pop();
        redirectLink = detailsPageLink ? `${detailsPageLink}.${redirectLink}.html` : "#";
      }
      const cardEle = `<a class="block--card-container" href="${redirectLink}" ${
        isOpenNewTab ? 'target="_blank"' : ""
      }>
            <div class="block--card-image">
                <div class="top-icon">
                    <img src="/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/arrow-top-right.svg"
                        alt="active card icon" />
                </div>
                <img class="d-md-block d-none" src="${item.tileImagePath}" alt="card image">
                <img class="d-md-none d-block" src="${item.tileMobileImagePath ? item.tileMobileImagePath : item.tileImagePath}" alt="card image">
            </div>
            <div class="block--card-content">
                <div class="block--card-tags">
                    <h5 class="block--card-title">${item.articleTag}</h5>
                    <div class="divider"></div>
                    <div class="block--card-date">${item.articleDate}</div>
                </div>
                <div class="block--card-heading">
                    ${item.tileTitle}
                </div>
                ${
                  item.externalArticlePublisher
                    ? '<div class="block--card-subheading">' +
                      item.externalArticlePublisher +
                      "</div>"
                    : ""
                }
            </div>
        </a>`;

      element.append(cardEle);
    });
  };

  const noFoundCardCreateBlog = function (element) {
    if (!element || element.length === 0) {
      return;
    }

    if (!element.hasClass("no-result-found")) {
      element.addClass("no-result-found");
    }

    const noResultFoundEle = `<div class="block--no-result-found">
        <div class="block--top-border"></div>
        <div class="block--no-result-container">
            <div class="block--no-result-image">
                <svg xmlns="http://www.w3.org/2000/svg" width="162" height="114" viewBox="0 0 162 114" fill="none">
                    <rect x="61.5271" y="0.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
                    <rect x="66.8271" y="6" width="10" height="11" fill="#D9D9D9"/>
                    <path d="M81.8271 7H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                    <path d="M92.8271 12H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                    <path d="M105.827 17H119.827" stroke="#D9D9D9" stroke-width="1.4"/>
                    <rect x="31.5271" y="31.7" width="63.6" height="21.6" stroke="#FF0000" stroke-width="1.4"/>
                    <path d="M82.6271 46L81.8271 45.2L85.0271 42L81.8271 38.8L82.6271 38L85.8271 41.2L89.0271 38L89.8271 38.8L86.6271 42L89.8271 45.2L89.0271 46L85.8271 42.8L82.6271 46Z" fill="#FF0000"/>
                    <path d="M36.8271 38H74.8271" stroke="#FF0000" stroke-width="1.4"/>
                    <path d="M36.8271 43H63.8271" stroke="#FF0000" stroke-width="1.4"/>
                    <path d="M36.8271 48H50.8271" stroke="#FF0000" stroke-width="1.4"/>
                    <rect x="1.52715" y="62.7" width="63.6" height="21.6" stroke="#D9D9D9" stroke-width="1.4"/>
                    <rect x="49.8271" y="68" width="10" height="11" fill="#D9D9D9"/>
                    <path d="M6.82715 69H44.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                    <path d="M6.82715 74H33.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                    <path d="M6.82715 79H20.8271" stroke="#D9D9D9" stroke-width="1.4"/>
                    <circle cx="96.756" cy="49.5544" r="36.9289" stroke="#595959" stroke-width="4"/>
                    <path d="M124.462 76.5586L160.172 112.269" stroke="#595959" stroke-width="4"/>
                </svg>
            </div>
            <div class="block--no-found-content">
                <h2>No Result Found</h2>
                <p>We couldn't find any matches. Try again</p>
            </div>
        </div>
        <div class="block--bottom-border"></div>
    </div>`;

    element.html(noResultFoundEle);
  };

  const loadCardsBlog = function (element, parentElement, filterObject) {
    if (!element || element.length === 0 || !parentElement || !filterObject) {
      return;
    }
    const resourcePath = element.attr("data-resource-path");
    const searchPath = element.attr("data-search-path");
    const categorySet = element.attr("data-category-set");
    const sortVal = filterObject.sortEle.find(".dropdown-menu li.active").attr("value");

    const activeMotoItems = filterObject.motoEle.find(".dropdown-menu li.active");
    const activeScooterItems = filterObject.scooterEle.find(".dropdown-menu li.active");
    const activeEventItems = filterObject.eventEle.find(".dropdown-menu li.active");
    let motoVal = activeMotoItems
      .map(function () {
        return $(this).attr("value");
      })
      .get()
      .join(",");

    let scooterVal = activeScooterItems
      .map(function () {
        return $(this).attr("value");
      })
      .get()
      .join(",");

    let eventVal = activeEventItems
      .map(function () {
        return $(this).attr("value");
      })
      .get()
      .join(",");

    const searchVal = filterObject.searchEle.find("input").val();
    const renderedCount = filterObject.initialLoad ? 0 : element.children().length;
    const resultsPerPage = filterObject.resultsPerPage ? filterObject.resultsPerPage : 6;
    const cardCountToBe = renderedCount + resultsPerPage;

    let reqLink = `${resourcePath}.companyarticlesearch.json?searchRootPath=${searchPath}&searchTags=${categorySet}&startIndex=${renderedCount}&resultsPerPage=${resultsPerPage}`;

    if (sortVal) {
      reqLink = reqLink + "&sortOrder=" + sortVal;
    }

    if (motoVal || scooterVal || eventVal) {
      let searchTagsParam = "";

      if (motoVal) {
        searchTagsParam += `${motoVal},`;
      }

      if (scooterVal) {
        searchTagsParam += `${scooterVal},`;
      }

      if (eventVal) {
        reqLink += `&eventTags=${eventVal}`;
      } else {
        reqLink = reqLink.replace(/&eventTags=[^&]*/, "");
      }

      reqLink = reqLink.replace(/&searchTags=[^&]*/, "");

      searchTagsParam = searchTagsParam.replace(/,$/, "");
      reqLink = `${reqLink}&searchTags=${searchTagsParam}`;
    } else {
      reqLink = reqLink.replace(/&searchTags=[^&]*/, `&searchTags=${categorySet}`);
      reqLink = reqLink.replace(/&eventTags=[^&]*/, "");
    }

    if (searchVal) {
      reqLink = reqLink + "&searchTerm=" + searchVal;
    }

    $.ajax({
      type: "GET",
      url: reqLink,
      dataType: "JSON",
      success: function (resp) {
        if (resp && resp.length) {
          const moreMatchesExist = resp.find(
            (item) => item.moreMatchesExist
          )?.moreMatchesExist;

          if (filterObject.initialLoad) {
            element.html("");
          }
          if (cardCountToBe > resp.length + renderedCount || moreMatchesExist === "false") {
            filterObject.loadMoreEle.css("display", "none");
          } else {
            filterObject.loadMoreEle.css("display", "block");
          }
          cardtileCreateBlog(resp, element);
        } else {
          filterObject.loadMoreEle.css("display", "none");
          if (renderedCount === 0) {
            noFoundCardCreateBlog(element);
          }
        }
      },
      error: function (err) {
        console.error(err);
        filterObject.loadMoreEle.css("display", "none");
        noFoundCardCreateBlog(element);
      },
    });
  };

  const clearFilterBlog = function (parentElement, isMobile, isSort = true) {
    if (!parentElement) {
      return;
    }

    const motoFilter = $(parentElement).find(
      ".block--header-action-group .block--filter-month-year_dropdown .motorcycle-dropdown"
    );

    const scooterFilter = $(parentElement).find(
      ".block--header-action-group .block--filter-month-year_dropdown .scooter-dropdown"
    );

    const eventFilter = $(parentElement).find(
      ".block--header-action-group .block--filter-month-year_dropdown .event-dropdown"
    );

    const sortFilter = $(parentElement).find(
      ".block--header-action-group .block--sort-section"
    );

    $(parentElement)
      .find(
        ".block--header-action-group .block--filter-section .block--filter-month-year_dropdown"
      )
      .removeClass("show");
    document.documentElement.classList.remove("overflow-y-hidden");
    if (motoFilter) {
      const dropdownButton = motoFilter.find(".dropdown-toggle");
      const accordionButton = motoFilter.find(".cust-accordion-toggle");
      motoFilter.find(".dropdown-menu li").removeClass("active");
      motoFilter.find(".dropdown-menu input:checked").prop("checked", false);
      if (dropdownButton.attr("aria-expanded") == "true") {
        dropdownButton.trigger("click");
      }
      if (accordionButton.attr("aria-expanded") == "true") {
        accordionButton.trigger("click");
      }
    }
    if (scooterFilter) {
      const dropdownButton = scooterFilter.find(".dropdown-toggle");
      const accordionButton = scooterFilter.find(".cust-accordion-toggle");
      scooterFilter.find(".dropdown-menu li").removeClass("active");
      scooterFilter.find(".dropdown-menu input:checked").prop("checked", false);
      if (dropdownButton.attr("aria-expanded") == "true") {
        dropdownButton.trigger("click");
      }
      if (accordionButton.attr("aria-expanded") == "true") {
        accordionButton.trigger("click");
      }
    }
    if (eventFilter) {
      const dropdownButton = eventFilter.find(".dropdown-toggle");
      const accordionButton = eventFilter.find(".cust-accordion-toggle");
      eventFilter.find(".dropdown-menu li").removeClass("active");
      eventFilter.find(".dropdown-menu input:checked").prop("checked", false);
      if (dropdownButton.attr("aria-expanded") == "true") {
        dropdownButton.trigger("click");
      }
      if (accordionButton.attr("aria-expanded") == "true") {
        accordionButton.trigger("click");
      }
    }
    if (sortFilter && isSort) {
      sortFilter.find(".dropdown-menu li").removeClass("active");
      const textVal = sortFilter
        .find(".dropdown-menu .dropdown-item")
        .first()
        .addClass("active")
        .text();
      const button = sortFilter.find(".dropdown-toggle");
      if (isMobile) {
        button.text(sortFilter.find("h4").text());
      } else {
        button.text(textVal);
      }
      if (button.attr("aria-expanded") == "true") {
        button.trigger("click");
      }
    }
  };

  $(document).ready(function () {
    $(".section--company-article-list").each(function (a, cmpSectionArticleList) {
      const filterHeader = $(cmpSectionArticleList).find(".block--header-action-group");

      const motoFilter = $(cmpSectionArticleList).find(
        ".block--header-action-group .block--filter-month-year_dropdown .motorcycle-dropdown"
      );

      const scooterFilter = $(cmpSectionArticleList).find(
        ".block--header-action-group .block--filter-month-year_dropdown .scooter-dropdown"
      );

      const eventFilter = $(cmpSectionArticleList).find(
        ".block--header-action-group .block--filter-month-year_dropdown .event-dropdown"
      );

      const sortFilter = $(cmpSectionArticleList).find(
        ".block--header-action-group .block--sort-section"
      );

      const searchFilter = $(cmpSectionArticleList).find(
        ".block--header-action-group .block--search-input"
      );

      const loadMoreContainer = $(cmpSectionArticleList).find(".block--load-more");
      const cardListElement = $(cmpSectionArticleList).find(".block--card-container-list");
      const sortButton = sortFilter.find(".dropdown-toggle");
      const sortFirstEle = sortFilter.find(".dropdown-menu .dropdown-item").first();
      const mobileScreenWidth = 767;

      let isMobile = $(window).width() < mobileScreenWidth;

      let filterObject = {
        motoEle: motoFilter,
        scooterEle: scooterFilter,
        eventEle: eventFilter,
        sortEle: sortFilter,
        searchEle: searchFilter,
        loadMoreEle: loadMoreContainer,
        initialLoad: true,
        resultsPerPage: 6,
      };

      let bottomSheetState = {
        motoVal: "",
        scooterVal: "",
        eventVal: "",
      };

      if (isMobile) {
        filterObject.resultsPerPage = 4;
      } else {
        filterObject.resultsPerPage = 6;
      }

      loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);

      window.addEventListener("resize", () => {
        isMobile = $(window).width() < mobileScreenWidth;
        if (isMobile) {
          filterObject.resultsPerPage = 4;
        } else {
          filterObject.resultsPerPage = 6;
          filterObject.initialLoad = true;
          clearFilterBlog(cmpSectionArticleList, isMobile);
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        }
      });

      filterHeader.find(".block--filter-section > h4").on("click", function (e) {
        if (isMobile) {
          e.preventDefault();
          filterHeader
            .find(".block--filter-section .block--filter-month-year_dropdown")
            .addClass("show");
          document.documentElement.classList.add("overflow-y-hidden");

          const motoVal = motoFilter.find(".dropdown-menu li.active").attr("value");
          const scooterVal = scooterFilter.find(".dropdown-menu li.active").attr("value");
          const eventVal = eventFilter.find(".dropdown-menu li.active").attr("value");

          if (motoVal) {
            bottomSheetState.motoVal = motoVal;
          }
          if (scooterVal) {
            bottomSheetState.scooterVal = scooterVal;
          }
          if (eventVal) {
            bottomSheetState.eventVal = eventVal;
          }
        }
      });

      filterHeader
        .find(
          ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-header-container .block--close-icon"
        )
        .on("click", function (e) {
          e.preventDefault();
          clearFilterBlog(cmpSectionArticleList, isMobile, false);
          if (bottomSheetState.motoVal) {
            motoFilter.find(".dropdown-menu li.dropdown-item").each(function (b, liItem) {
              if ($(liItem).attr("value") == bottomSheetState.motoVal) {
                $(liItem).addClass("active");
                motoFilter.find(".cust-accordion-toggle").text($(liItem).text());
              }
            });
            if (bottomSheetState.scooterVal) {
              const scooterVal = parseInt(bottomSheetState.scooterVal);
              if (scooterVal) {
                const textVal = $(
                  scooterFilter.find(".dropdown-menu li.dropdown-item")[scooterVal - 1]
                )
                  .addClass("active")
                  .text();
                scooterFilter.find(".cust-accordion-toggle").text(textVal);
              }
            }
          }
          bottomSheetState.motoVal = "";
          bottomSheetState.scooterVal = "";
        });
      filterHeader
        .find(
          ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-footer-container .block--clear-button"
        )
        .on("click", function (e) {
          clearFilterBlog(cmpSectionArticleList, isMobile, false);
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        });
      filterHeader
        .find(
          ".block--filter-section .block--filter-month-year_dropdown .block--bottomsheet-footer-container .block--ok-button"
        )
        .on("click", function (e) {
          e.preventDefault();
          filterHeader
            .find(".block--filter-section .block--filter-month-year_dropdown")
            .removeClass("show");
          document.documentElement.classList.remove("overflow-y-hidden");
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        });

      motoFilter.find(".dropdown-menu").on("click", "li", function (e) {
        e.preventDefault();
        e.stopPropagation();
        const dropdownButton = motoFilter.find(".dropdown-toggle");
        const accordionButton = motoFilter.find(".cust-accordion-toggle");
        const checkbox = $(this).find("input[type='checkbox']");
        if ($(this).hasClass("dropdown-menu-heading")) {
          dropdownButton.text(dropdownButton.attr("data-default-label"));
        } else {
          // dropdownButton.text($(this).text().trim());
          // accordionButton.text($(this).text().trim());

          $(this).toggleClass("active");
          checkbox.prop("checked", !checkbox.prop("checked"));

          // if (accordionButton.attr("aria-expanded") == "true") {
          //   accordionButton.trigger("click");
          // }
        }
        if (!isMobile) {
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        }
        motoFilter.find(".dropdown-menu").addClass("show");
      });

      motoFilter.find(".cust-accordion-toggle").on("click", function (e) {
        motoFilter.find(".dropdown-menu").toggleClass("show");
        $(this).attr("aria-expanded", function (i, attr) {
          return attr == "true" ? "false" : "true";
        });
      });

      scooterFilter.find(".dropdown-menu").on("click", "li", function (e) {
        e.preventDefault();
        e.stopPropagation();
        const dropdownButton = scooterFilter.find(".dropdown-toggle");
        const checkbox = $(this).find("input[type='checkbox']");
        if ($(this).hasClass("dropdown-menu-heading")) {
          dropdownButton.text(dropdownButton.attr("data-default-label"));
        } else {
          $(this).toggleClass("active");
          checkbox.prop("checked", !checkbox.prop("checked"));
        }
        if (!isMobile) {
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        }
        scooterFilter.find(".dropdown-menu").addClass("show");
      });

      scooterFilter.find(".cust-accordion-toggle").on("click", function (e) {
        scooterFilter.find(".dropdown-menu").toggleClass("show");
        $(this).attr("aria-expanded", function (i, attr) {
          return attr == "true" ? "false" : "true";
        });
      });

      eventFilter.find(".dropdown-menu").on("click", "li", function (e) {
        e.preventDefault();
        e.stopPropagation();
        const dropdownButton = eventFilter.find(".dropdown-toggle");
        const accordionButton = eventFilter.find(".cust-accordion-toggle");
        const checkbox = $(this).find("input[type='checkbox']");
        if ($(this).hasClass("dropdown-menu-heading")) {
          dropdownButton.text(dropdownButton.attr("data-default-label"));
        } else {
          $(this).toggleClass("active");
          checkbox.prop("checked", !checkbox.prop("checked"));
        }
        if (!isMobile) {
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        }
        eventFilter.find(".dropdown-menu").addClass("show");
      });

      eventFilter.find(".cust-accordion-toggle").on("click", function (e) {
        eventFilter.find(".dropdown-menu").toggleClass("show");
        $(this).attr("aria-expanded", function (i, attr) {
          return attr == "true" ? "false" : "true";
        });
      });

      sortFilter.find(".dropdown-menu").on("click", "li", function (e) {
        if ($(this).hasClass("dropdown-item")) {
          e.preventDefault();
          sortButton.text($(this).text());
          sortFilter.find(".dropdown-menu li").removeClass("active");
          $(this).addClass("active");
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        }
      });

      searchFilter.find("input").on("keyup", (e) => {
        if (e.key === "Enter" || e.keyCode === 13) {
          filterObject.initialLoad = true;
          loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
          $(this).find(".icon").trigger("click");
        }
        if (e.key === "Backspace") {
          if ($(this).val() === "") {
            e.preventDefault();
            filterObject.initialLoad = true;
            clearFilterBlog(cmpSectionArticleList, isMobile);
            loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
          }
        }
      });

      searchFilter.find(".icon").on("click", function (e) {
        e.preventDefault();
        filterObject.initialLoad = true;
        clearFilterBlog(cmpSectionArticleList, isMobile);
        loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
        const searchEle = searchFilter.find(
          ".section--company-article-list .block--header-action-group .block--search-input"
        );
        const searchInput = searchFilter.find("input");
        const textVal = searchInput.val();
        searchInput.val("");
        searchEle.find("input").val(textVal);
        searchEle.find(".icon").trigger("click");
      });

      loadMoreContainer.find("button").on("click", function (e) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: "Load More", // cta name
              URL: "NA",
              position: "SEO Blogs", // location of the cta
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
        e.preventDefault();
        filterObject.initialLoad = false;
        loadCardsBlog(cardListElement, cmpSectionArticleList, filterObject);
      });

      $(document).on("click", "#blogs--page .block--card-container", function (e) {
        window.digitalData.push({
          event: "blogClicked",
          web: {
            webInteraction: {
              name: "Blog Card",
              URL: $(this).attr("href"),
              position: "SEO Blogs",
              blogName: $(this).find(".block--card-heading").text().trim(),
              product: $(this).find(".block--card-title").text().trim(),
            },
          },
          page: {
            pagename: title,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            country: "India",
            hostName: window.location.origin,
            previousPageValue: document.referrer,
            platform: getOS(),
            loggedIn: isSignedIn(),
            fullURL: window.location.href,
          },
        });
      });
    });
  });
}

$(document).ready(function () {
  if ($(".greendealers-gallery-section").length) {
    initImageGallerySlider();
    }
    else{
      return;
    }
});

function initImageGallerySlider() {

  function isMobile(){
    if($(window).width() < 767){
      return true;
    }else{
      return false;
    }
  }

  function changeImageHeight() {
    let height = window.innerHeight;
    let headerElement = document.querySelector(".header-main");
    let headerHeight = headerElement.offsetHeight;
    if (!isMobile()) {
      height = height - headerHeight;
    }
    $(".image-gallery-slider .image-gallery-slider-item").css(
      "height",
      height + "px"
    );
  }
  changeImageHeight();

  function isIphone() {
    return /iPhone/i.test(navigator.userAgent);
  }

  if (isIphone()) {
    $(".image-gallery-slider").slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      centerMode: isMobile() ? false : true,
      variableWidth: isMobile() ? false : true,
      focusOnSelect: true,
      arrows: false,
      zIndex: 1,
      autoplay: true,
      autoplaySpeed: 3500,
      asNavFor: ".image-gallery-slider-nav",
    });
    var deviceWidth = $(window).width();
    $(".image-gallery-slider-nav").width(deviceWidth);
    var $navSlider = $(".image-gallery-slider-nav");
    $navSlider.slick({
      focusOnSelect: true,
      centerMode: true,
      centerPadding: "36%",
      arrows: false,
      asNavFor: ".image-gallery-slider", // Synchronize with main slider
    });
  } else {
    var $navSlider = $(".image-gallery-slider-nav").slick({
      slidesToShow: 1,
      focusOnSelect: true,
      centerMode: true,
      variableWidth: isIphone() ? false : true,
      centerPadding: "36%",
      arrows: false,
      asNavFor: ".image-gallery-slider", // Synchronize with main slider
    });
    $(".image-gallery-slider").slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      centerMode: isMobile() ? false : true,
      variableWidth: isMobile() ? false : true,
      focusOnSelect: true,
      arrows: false,
      zIndex: 1,
      autoplay: true,
      autoplaySpeed: 3500,
      asNavFor: ".image-gallery-slider-nav",
    });
  }

  if (!isMobile()) {
    const logoLeftOffset = $(".acaa-header-logo-wrapper")?.offset()?.left;
    $(".image-gallery-text").css("left", logoLeftOffset + "px");

    let numberOfSlidesInMainSlider = $(".image-gallery-slider").slick(
      "getSlick"
    ).slideCount;
    if (numberOfSlidesInMainSlider <= 4) {
      $(".image-gallery-slider-nav").css("width", "16rem");
    } else if (numberOfSlidesInMainSlider <= 6) {
      $(".image-gallery-slider-nav").css("width", "22rem");
    } else {
      $(".image-gallery-slider-nav").css("width", "39.75rem");
    }
    $(".image-gallery-slider").on(
      "init",
      function (event, slick, currentSlide) {
        $(slick.$slides)
          .find(".image-gallery-wrapper-button")
          .removeClass("active-button");
        $(slick.$slides[currentSlide])
          .find(".image-gallery-wrapper-button")
          .addClass("active-button");
        $(slick.$slides[currentSlide]).css("transform", "scale(1.1)");
        $(slick.$slides).css("transform", "scale(1)");
      }
    );

    $(".image-gallery-slider").on(
      "afterChange",
      function (event, slick, currentSlide) {
        $(slick.$slides).find("img").css("transform", "scale(1)");
        $(slick.$slides)
          .find(".image-gallery-wrapper-button")
          .removeClass("active-button");

        $(slick.$slides[currentSlide])
          .find(".image-gallery-wrapper-button")
          .addClass("active-button");
        $(slick.$slides[currentSlide])
          .find("img")
          .css("transform", "scale(1.1)");
      }
    );
  }

  function getActiveSlideImageUrl() {
    var $activeSlide = $(".image-gallery-slider .slick-active");
    var $image = $activeSlide.find("img");

    if ($image.length > 0) {
      return $image.attr("src");
    }

    return null;
  }

  function downloadActiveSlideImage() {
    var imageUrl = getActiveSlideImageUrl();

    if (imageUrl) {
      var link = document.createElement("a");
      link.href = imageUrl;
      link.download = "image.png"; // file name
      link.click();
    }
  }

  $("#downloadButton").on("click", function () {
    downloadActiveSlideImage();
  });

  $("#expand-image").on("click", function () {
    $(".image-gallery-slider").slick("slickPause");
    $(".image-gallery-popup img").attr("src", getActiveSlideImageUrl());
    $(".image-gallery-popup").css({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    });
    $(".image-gallery-slider .slick-active").find("img").css("display", "none");
    setPopUPheightBasedOnImageHeight();
  });
  $(".image-gallery-slider").on("click", ".active-button", function () {
    downloadActiveSlideImage();
  });
  $(".image-gallery-popup ").on("click", function (e) {
    if (e.target === this) {
      $(".image-gallery-popup").css("display", "none");
      $(".image-gallery-slider .slick-active")
        .find("img")
        .css("display", "block");
      $(".image-gallery-slider").slick("slickPlay");
    }
  });
  function setPopUPheightBasedOnImageHeight() {
    $(".image-gallery-popup img").each(function () {
      var $image = $(this);
      var objectFit = $image.css("object-fit");
      var parentWidth = $image.parent().width();
      var parentHeight = $image.parent().height();
      var naturalWidth = $image[0].naturalWidth;
      var naturalHeight = $image[0].naturalHeight;
      var aspectRatio = naturalWidth / naturalHeight;
      var imageHeight;
      if (objectFit === "contain") {
        imageHeight = parentWidth / aspectRatio;
      } else {
        imageHeight = parentHeight;
      }
      $image.css("height", imageHeight + "px");
    });
  }
}


$(document).ready(function () {
  $('#consentcheck3').on('click', function(){
    if($("#consentcheck3").prop("checked")) {
      $('.form-step-2 .btn-submit').prop("disabled", false);
    } else {
      $('.form-step-2 .btn-submit').prop("disabled", true);
    }
  })

  try {
    // Stop JS execution if the component html is not prensent in the DOM
    if (!$(".company-modal-form__section .company-enquire-popup").length) {
      return;
    }
    onInitCompanyModalForm();
  } catch (err) {
    console.error(err);
  }
});

function onInitCompanyModalForm() {
  let timerOn = false;
  var timeoutRef;
  const otpIntiaalTime$ = document.querySelector(".company-enquire-popup #otpTimer")
    .dataset.otptime;
  $(".company-thank-you-wrapper #successMessage").show();
  $(".company-thank-you-wrapper #errorMessage").hide();
  const enquireNowoptbox$ = $(".otpbox");
  const pageType = "HTRTS";
  const defaultServletPath = document.getElementById("defaultservlet").value;
  const monthList = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  const sendOtp$ = $(".cmp-enquire-now-form .send-btn");
  let formError = {};
  let title = "";
  let gender = "";
  let userAge = "";
  let email = "";
  let mobile = "";
  let otp = "";
  let userAddress = "";
  let city = "";
  let state = "";
  let newList = "";
  let isPossessLicense = false;
  let isRideBicycle = false;
  let isRideTwoWheeler = false;
  let licenseDetails = "";
  let preferredState = "";
  let preferredStateShortName = "";
  let preferredCity = "";
  let preferredCityShortName = "";
  let preferredLocation = "";
  let preferredLocationShortName = "";
  let occupation = "";
  let trainingMonth = "";
  let trainingWeek = "";
  let trainingBatchTime = "";
  let slotAvailabilityData = [];
  let selectedSlotData = {};
  $("#cmp-enquire-now-form .otp-timer").hide();
  $("#cmp-enquire-now-form .otp-success-icon").hide();
  $("#cmp-enquire-now-form .error-message").hide();
  $("#cmp-enquire-now-form-2 .error-message").hide();
  $(".company-thank-you-wrapper").hide();
  $(".cmp-enquire-now-form .userName").bind("keyup keydown keypress input propertychange blur", function (e) {
    title = "";
    const regex = /^[a-zA-Z]+([a-zA-Z ])*$/;
    if (isAlphaAndSpace(e)) {
      if (!$(this).val()) {
        formError["userName"] = true;
        $(this).parents(".form-group").find(".error-message").show();
      } else if (regex.test($(this).val())) {
        formError["userName"] = false;
        $(this).parents(".form-group").find(".error-message").hide();
        isFormEmpty();
      } else {
        formError["userName"] = true;
        $(this).parents(".form-group").find(".error-message").show();
      }
    } else if (e.keyKode === undefined && regex.test($(this).val())) {
      formError["userName"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });
  $(".cmp-enquire-now-form #genderVal").bind("input propertychange", function () {
    gender = "";
    formError["enquireGender"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["enquireGender"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });
  $(".cmp-enquire-now-form #userAge").bind("keyup keydown keypress input propertychange blur", function (e) {
    userAge = "";
    let regex = /^[0-9]+$/;
    if (isNumeric(e)) {
      if (!$(this).val()) {
        formError["userAge"] = true;
        $(this).parents(".form-group").find(".error-message").show();
      } else {
        if (parseInt($(this).val()) < 18 || parseInt($(this).val()) > 100) {
          formError["userAge"] = true;
          $(this).parents(".form-group").find(".error-message").show();
        } else {
          formError["userAge"] = false;
          $(this).parents(".form-group").find(".error-message").hide();
          isFormEmpty();
        }
      }
    } else if (e.keyKode === undefined && regex.test($(this).val())) {
      formError["userAge"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });
  $(".cmp-enquire-now-form #userAddress").bind("input propertychange", function (e) {
    userAddress = "";
    if (!$(this).val()) {
      formError["userAddress"] = true;
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      if ($(this).val().length > 150) {
        formError["userAddress"] = true;
        $(this).parents(".form-group").find(".error-message").show();
      } else {
        formError["userAddress"] = false;
        $(this).parents(".form-group").find(".error-message").hide();
        isFormEmpty();
      }
    }
  });
  $(".cmp-enquire-now-form #stateNameVal").bind("input propertychange", function () {
    state = "";
    formError["enquireState"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["enquireState"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });
  $(".cmp-enquire-now-form #cityNameVal").bind("input propertychange", function () {
    city = "";
    formError["enquireCity"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["enquireCity"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });
  // form email field validation
  $(".cmp-enquire-now-form .userMail").bind("input propertychange", function () {
    email = "";
    const emailRgx =
      /^[a-z0-9][a-zA-Z0-9_-]+(?:\.\w+)*@[a-zA-Z0-9+]+(?:\.[a-z+]+)*(?:\.[a-z]{2,})$/;
    formError["email"] = true;
    if (!$(this).val().match(emailRgx)) {
      $(this).parents(".form-group").find(".error-message").text("Invalid email format").show();
    } else {
      formError["email"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      email = $(this).val();
    }
  });
  // form contact field validation
  $(".cmp-enquire-now-form .mobileNumber").on(
    "keyup keydown keypress input propertychange blur",
    function (e) {
      mobile = "";
      let self = this;
      debounce(validatePhone(e, self));
    }
  );
  // auto otp box section

  $("#cmp-enquire-now-form .otp-container").each((index, element) => {
    const $inp = $(element).find("input");

    $inp.on({
      paste(ev) { // Handle Pasting

        const clip = ev.originalEvent.clipboardData.getData('text').trim();
        // Allow numbers only
        if (!/\d{6}/.test(clip)) return ev.preventDefault(); // Invalid. Exit here
        // Split string to Array or characters
        const s = [...clip];
        // Populate inputs. Focus last input.
        $inp.val(i => s[i]).eq(5).focus();

        let parent = $($(this).parent());
        otp = "";
        for (let i = 1; i < 7; i++) {
          otp += parent.find('#digit-' + i).val();
        }

        if (otp?.length == 6) {
          otp = parseInt(otp, 10);
          mobile = parent.closest('.custom-row').find('#mobileNumer').val();
          if (isValidOtp(mobile, otp)) {
            $(".otp-error-message-space").hide();
            $("#cmp-enquire-now-form .otp-success-icon").show();
          } else {
            validateOTP();
          }
        }
      },
      input(ev) { // Handle typing

        const i = $inp.index(this);
        if (this.value) $inp.eq(i + 1).focus();

        let parent = $($(this).parent());
        otp = "";
        for (let i = 1; i < 7; i++) {
          otp += parent.find('#digit-' + i).val();
        }

        if (otp?.length == 6) {
          otp = parseInt(otp, 10);
          mobile = parent.closest('.custom-row').find('#mobileNumer').val();
          if (isValidOtp(mobile, otp)) {
            $(".otp-error-message-space").hide();
            $("#cmp-enquire-now-form .otp-success-icon").show();
          } else {
            validateOTP();
          }
        }
      },
      keydown(ev) { // Handle Deleting

        const i = $inp.index(this);
        if (!this.value && ev.key === "Backspace" && i) $inp.eq(i - 1).focus();

        let parent = $($(this).parent());
        otp = "";
        for (let i = 1; i < 7; i++) {
          otp += parent.find('#digit-' + i).val();
        }

        if (otp?.length == 6) {
          otp = parseInt(otp, 10);
          mobile = parent.closest('.custom-row').find('#mobileNumer').val();
          if (isValidOtp(mobile, otp)) {
            $(".otp-error-message-space").hide();
            $("#cmp-enquire-now-form .otp-success-icon").show();
          } else {
            validateOTP();
          }
        }
      }

    });
  });

  $(".cmp-enquire-now-form .select-dropdown")
    .find(".btn-drop ")
    .removeClass("active");
  if ($(".company-enquire-popup").length > 0) {
    const cityStateJSONURL$ = $('[name="statecitylist_url"]').val();
    if (cityStateJSONURL$ !== undefined) {
      fetch(cityStateJSONURL$)
        .then(function (response) {
          if (!response.ok) {
            throw new Error("Not 2xx response", { cause: response });
          } else {
            return response.text();
          }
        })
        .then(function (html) {
          if (html) {
            newList = JSON.parse(html);
            for (const key of Object.keys(newList)) {
              const capitalizedKey = key
                .split(" ")
                .map(
                  (word) =>
                    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                )
                .join(" ");
              const capitalizedValue = newList[key]
                .split(" ")
                .map(
                  (word) =>
                    word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                )
                .join(" ");

              delete newList[key];
              newList[capitalizedKey] = capitalizedValue;
            }
          }

          $(".cmp-enquire-now-form").each(function (item) {
            let statelist = $(this)
              .find('[name="statename"]')
              .parents(".cust-drop-down")
              .find(".cust-dropdown-menu ");
            generateStateDropDown(statelist);
          });
        });
    }

    const stateListEle = $(".company-enquire-popup #preferredStateDropdownList");
    stateListEle.each(function (indx, listEle) {
      populatePreferredDropdown(listEle, "state");
    });

    const trainingMonthEle = $(".company-enquire-popup #trainingMonthDropdownList");
    trainingMonthEle.empty();
    const today = new Date();
    let monthVal = today.getMonth();
    if (populateTrainingWeekDropdown(null, monthVal, true)) {
      monthVal++;
    }
    for (let indx = monthVal; indx < monthList.length; indx++) {
      let newItem = document.createElement("li");
      newItem.setAttribute("value", indx);
      newItem.innerHTML = "<a href=javascript:void(0)>" + monthList[indx] + "</a>";
      trainingMonthEle.append(newItem);
    }
  }

  $(".cmp-enquire-now-form-2 #possessLicenseVal").bind("input propertychange", function (e) {
    formError["possessLicense"] = true;
    if (!$(this).val()) {
      isPossessLicense = false;
      $(this).closest(".form-group").find(".error-message").show();
    } else {
      formError["possessLicense"] = false;
      isPossessLicense = true;
      $(this).closest(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #licenseDetailsVal").bind("input propertychange", function () {
    licenseDetails = "";
    formError["licenseDetails"] = true;
    if (isPossessLicense && !$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["licenseDetails"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #preferredStateNameVal").bind("input propertychange", function () {
    preferredState = "";
    preferredStateShortName = "";
    formError["preferredState"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["preferredState"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #preferredCityNameVal").bind("input propertychange", function () {
    preferredCity = "";
    preferredCityShortName = "";
    formError["preferredCity"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["preferredCity"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #preferredLocationNameVal").bind("input propertychange", function () {
    preferredLocation = "";
    preferredLocationShortName = "";
    formError["preferredLocation"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["preferredLocation"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #occupationVal").bind("input propertychange", function () {
    occupation = "";
    formError["occupation"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["occupation"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #trainingMonthNameVal").bind("input propertychange", function () {
    trainingMonth = "";
    formError["trainingMonth"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["trainingMonth"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #trainingWeekVal").bind("input propertychange", function () {
    trainingWeek = "";
    formError["trainingWeek"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["trainingWeek"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #trainingBatTimeVal").bind("input propertychange", function () {
    trainingBatchTime = "";
    formError["trainingBatchTime"] = true;
    if (!$(this).val()) {
      $(this).parents(".form-group").find(".error-message").show();
    } else {
      formError["trainingBatchTime"] = false;
      $(this).parents(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #rideBicycleVal").bind("input propertychange", function (e) {
    formError["rideBicycle"] = true;
    if (!$(this).val()) {
      isRideBicycle = false;
      $(this).closest(".form-group").find(".error-message").show();
    } else {
      formError["rideBicycle"] = false;
      isRideBicycle = true;
      $(this).closest(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  $(".cmp-enquire-now-form-2 #rideTwoWheelerVal").bind("input propertychange", function (e) {
    formError["rideTwoWheeler"] = true;
    if (!$(this).val()) {
      isRideTwoWheeler = false;
      $(this).closest(".form-group").find(".error-message").show();
    } else {
      formError["rideTwoWheeler"] = false;
      isRideTwoWheeler = true;
      $(this).closest(".form-group").find(".error-message").hide();
      isFormEmpty();
    }
  });

  const inputsList = [
    ".cmp-enquire-now-form .userName",
    ".cmp-enquire-now-form .mobileNumber",
    ".cmp-enquire-now-form #stateNameVal",
    ".cmp-enquire-now-form #cityNameVal",
    ".cmp-enquire-now-form #userAge",
    ".cmp-enquire-now-form #userAddress",
    ".cmp-enquire-now-form-2 #possessLicenseVal",
    ".cmp-enquire-now-form-2 #licenseDetailsVal",
    ".cmp-enquire-now-form-2 #preferredStateNameVal",
    ".cmp-enquire-now-form-2 #preferredCityNameVal",
    ".cmp-enquire-now-form-2 #preferredLocationNameVal",
    ".cmp-enquire-now-form-2 #occupationVal",
    ".cmp-enquire-now-form-2 #trainingMonthNameVal",
    ".cmp-enquire-now-form-2 #trainingWeekVal",
    ".cmp-enquire-now-form-2 #trainingBatchTime",
    ".cmp-enquire-now-form-2 #rideBicycleVal",
    ".cmp-enquire-now-form-2 #rideTwoWheelerVal"
  ].join(", ");

  $(inputsList).on(
    "blur focus input",
    isFormEmpty()
  );

  $(".cmp-enquire-now-form").on("click", "#stateDropdownList li", function (e) {
    city = "";
    const cityName$ = $(this).closest("form").find("#cityname");
    cityName$.text(cityName$.data("default-label")).removeClass("active").removeClass("disabled");
    cityName$.next("#cityNameVal").val("");
    let stateShortName = $(this).attr("value");
    state = $(this).text();
    let cityField = $(this).closest("form").find('[name="cityname"]');
    let list = cityField
      .parents(".cust-drop-down")
      .find(".cust-dropdown-menu ");
    populateCityDropdown(list, stateShortName, cityName$.data("default-label"));
    $(this).parents(".select-dropdown").find('input[name="stateNameVal"]').val(state);
    $(this).parents(".select-dropdown").find(".btn-drop").text(state).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["enquireState"] = false;
    formError["enquireCity"] = true;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form #cityDropdownList").on("click", "li", function (e) {
    let cityShortName = $(this).attr("value");
    city = $(this).text();
    $(this).parents(".select-dropdown").find('input[name="cityNameVal"]').val(city);
    $(this).parents(".select-dropdown").find(".btn-drop").text(city).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["enquireCity"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form #genderDropdownList").on("click", "li", function (e) {
    gender = $(this).attr("value");
    genderShortName = $(this).text();
    $(this).parents(".select-dropdown").find('input[name="genderVal"]').val(gender);
    $(this).parents(".select-dropdown").find(".btn-drop").text(genderShortName).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["enquireGender"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #possessLicenseDropdownList").on("click", "li", function (e) {
    let possessLicenseText = $(this).text();
    let possessLicenseVal = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="possessLicenseVal"]').val(possessLicenseVal);
    $(this).parents(".select-dropdown").find(".btn-drop").text(possessLicenseText).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    if (possessLicenseVal.toLowerCase() == "yes") {
      isPossessLicense = true;
      $(this).closest("form").find("#licenseDetailsVal").attr("required", "");
      $(this).closest("form").find("#licenseDetailsContainer").removeClass("d-none");
    } else {
      isPossessLicense = false;
      licenseDetails = "";
      const licenseDetails$ = $(this).closest("form").find("#licenseDetails");
      $(licenseDetails$).text(licenseDetails$.data("default-label")).removeClass("active");
      $(this).closest("form").find("#licenseDetailsVal").val("").removeAttr("required");
      formError["licenseDetails"] = false;
      $(licenseDetails$).closest(".form-group").find(".error-message").hide();
      $(this).closest("form").find("#licenseDetailsContainer").addClass("d-none");
    }
    formError["possessLicense"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #licenseDetailsDropdownList").on("click", "li", function (e) {
    let licenseDetailsText = $(this).text();
    licenseDetails = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="licenseDetailsVal"]').val(licenseDetails);
    $(this).parents(".select-dropdown").find(".btn-drop").text(licenseDetailsText).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["licenseDetails"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2").on("click", "#preferredStateDropdownList li", function (e) {
    preferredCity = "";
    preferredCityShortName = "";
    preferredLocation = "";
    preferredLocationShortName = "";
    const preferredCity$ = $(this).closest("form").find("#preferredcityname");
    const preferredLocation$ = $(this).closest("form").find("#preferredLocationName");
    const userAddress$ = $(this).closest("form").find("#addressDeatils");
    preferredCity$.text(preferredCity$.data("default-label")).removeClass("active").removeClass("disabled");
    preferredLocation$.text(preferredLocation$.data("default-label")).removeClass("active").addClass("disabled");
    $(this).closest("form").find("#preferredCityNameVal").val("");
    $(this).closest("form").find("#preferredLocationNameVal").val("");
    userAddress$.text(userAddress$.data("default-label")).addClass("address-deatils");
    clearTrainingTimeFields($(this).closest("form"));
    preferredStateShortName = $(this).attr("value");
    preferredState = $(this).text().trim();
    let cityField = $(this).closest("form").find('[name="preferredcityname"]');
    let list = cityField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
    populatePreferredDropdown(list, "city");
    $(this).parents(".select-dropdown").find('input[name="preferredStateNameVal"]').val(preferredState);
    $(this).parents(".select-dropdown").find(".btn-drop").text(preferredState).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["preferredState"] = false;
    formError["preferredCity"] = true;
    formError["preferredLocation"] = true;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #preferredCityDropdownList").on("click", "li", function (e) {
    preferredLocation = "";
    preferredLocationShortName = "";
    const preferredLocation$ = $(this).closest("form").find("#preferredLocationName");
    const userAddress$ = $(this).closest("form").find("#addressDeatils");
    preferredLocation$.text(preferredLocation$.data("default-label")).removeClass("active").removeClass("disabled");
    $(this).closest("form").find("#preferredLocationNameVal").val("");
    userAddress$.text(userAddress$.data("default-label")).addClass("address-deatils");
    clearTrainingTimeFields($(this).closest("form"));
    preferredCityShortName = $(this).attr("value");
    preferredCity = $(this).text().trim();
    let preferredLocationField = $(this).closest("form").find('[name="preferredLocationName"]');
    let list = preferredLocationField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
    populatePreferredDropdown(list, "location");
    $(this).parents(".select-dropdown").find('input[name="preferredCityNameVal"]').val(preferredCity);
    $(this).parents(".select-dropdown").find(".btn-drop").text(preferredCity).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["preferredCity"] = false;
    formError["preferredLocation"] = true;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #preferredLocationDropdownList").on("click", "li", function (e) {
    clearTrainingTimeFields($(this).closest("form"));
    preferredLocation = $(this).text().trim();
    preferredLocationShortName = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="preferredLocationNameVal"]').val(preferredLocation);
    $(this).parents(".select-dropdown").find(".btn-drop").text(preferredLocation).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["preferredLocation"] = false;
    const address = $(this).data("location-address");
    $(this).closest("form").find("#addressDeatils").text(address).removeClass("address-deatils");
    isFormEmpty();
    let currentForm = $(this).closest("form");
    let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
    grecaptcha.ready(function () {
      grecaptcha.execute(sitKey).then(function (token) {
        fetchSlotAvailability(currentForm, token, preferredLocation);
      });
    });
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #occupationDropdownList").on("click", "li", function (e) {
    let occupationText = $(this).text();
    occupation = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="occupationVal"]').val(occupation);
    $(this).parents(".select-dropdown").find(".btn-drop").text(occupationText).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["occupation"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2").on("click", "#trainingMonthDropdownList li", function (e) {
    trainingWeek = "";
    trainingBatchTime = "";
    const trainingWeek$ = $(this).closest("form").find("#trainingWeek");
    const trainingBatTime$ = $(this).closest("form").find("#trainingBatTime");
    trainingWeek$.text(trainingWeek$.data("default-label")).removeClass("active");
    trainingBatTime$.text(trainingBatTime$.data("default-label")).removeClass("active").addClass("disabled");
    $(this).closest("form").find("#trainingWeekVal").val("");
    $(this).closest("form").find("#trainingBatTimeVal").val("");
    let trainingMonthVal = parseInt($(this).attr("value"));
    trainingMonth = $(this).text();
    let trainingWeekField = $(this).closest("form").find('[name="trainingWeek"]');
    let list = trainingWeekField.parents(".cust-drop-down").find(".cust-dropdown-menu ");
    populateTrainingWeekDropdown(list, trainingMonthVal);
    checkSlotAvailability(list, "week", $(this).data("item-key"));
    trainingWeek$.removeClass("disabled");
    $(this).parents(".select-dropdown").find('input[name="trainingMonthNameVal"]').val(trainingMonth);
    $(this).parents(".select-dropdown").find(".btn-drop").text(trainingMonth).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["trainingMonth"] = false;
    formError["trainingWeek"] = true;
    formError["trainingBatTime"] = true;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2").on("click", "#trainingWeekDropdownList li", function (e) {
    trainingBatchTime = "";
    const trainingBatTime$ = $(this).closest("form").find("#trainingBatTime");
    trainingBatTime$.text(trainingBatTime$.data("default-label")).removeClass("active");
    $(this).closest("form").find("#trainingBatTimeVal").val("");
    let trainingWeekVal = $(this).attr("value");
    trainingWeek = $(this).text();
    let list = $(this).closest("form").find('#trainingBatTimeDropdownList');
    checkSlotAvailability(list, "time", $(this).data("item-key"));
    trainingBatTime$.removeClass("disabled");
    $(this).parents(".select-dropdown").find('input[name="trainingWeekVal"]').val(trainingWeek);
    $(this).parents(".select-dropdown").find(".btn-drop").text(trainingWeek).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["trainingWeek"] = false;
    formError["trainingBatTime"] = true;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #trainingBatTimeDropdownList").on("click", "li", function (e) {
    let trainingBatchTimeVal = $(this).text();
    trainingBatchTime = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="trainingBatTimeVal"]').val(trainingBatchTime);
    $(this).parents(".select-dropdown").find(".btn-drop").text(trainingBatchTimeVal).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    formError["trainingBatTime"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #rideBicycleDropdownList").on("click", "li", function (e) {
    let rideBicycleText = $(this).text();
    let rideBicycleVal = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="rideBicycleVal"]').val(rideBicycleVal);
    $(this).parents(".select-dropdown").find(".btn-drop").text(rideBicycleText).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    if (rideBicycleVal.toLowerCase() == "yes") {
      isRideBicycle = true;
    } else {
      isRideBicycle = false;
    }
    formError["rideBicycle"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(".cmp-enquire-now-form-2 #rideTwoWheelerDropdownList").on("click", "li", function (e) {
    let rideTwoWheelerText = $(this).text();
    let rideTwoWheelerVal = $(this).attr("value");
    $(this).parents(".select-dropdown").find('input[name="rideTwoWheelerVal"]').val(rideTwoWheelerVal);
    $(this).parents(".select-dropdown").find(".btn-drop").text(rideTwoWheelerText).addClass("active");
    $(this).parent().removeClass("show-dropdown");
    $(this).parents(".form-group").find(".error-message").hide();
    if (rideTwoWheelerVal.toLowerCase() == "yes") {
      isRideTwoWheeler = true;
    } else {
      isRideTwoWheeler = false;
    }
    formError["rideTwoWheeler"] = false;
    isFormEmpty();
    if (
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .hasClass("dropdown-toggle-active")
    ) {
      $(this)
        .parents(".select-dropdown")
        .find(".btn-drop")
        .removeClass("dropdown-toggle-active");
    }
  });

  $(window).click(function (e) {
    if (!$(e.target).hasClass("dropdown-select btn-drop btn-primary")) {
      $(".cmp-enquire-now-form #stateDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form #cityDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form #genderDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #possessLicenseDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #licenseDetailsDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #preferredStateDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #preferredCityDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #preferredLocationDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #occupationDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #trainingMonthDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #trainingWeekDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #trainingBatTimeDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #rideBicycleDropdownList").removeClass("show-dropdown");
      $(".cmp-enquire-now-form-2 #rideTwoWheelerDropdownList").removeClass("show-dropdown");
      const stateName$ = $(".cmp-enquire-now-form #statename");
      const cityName$ = $(".cmp-enquire-now-form #cityname");
      const genderName$ = $(".cmp-enquire-now-form #gender");
      const possessLicense$ = $(".cmp-enquire-now-form-2 #possessLicenseDropdownBtn");
      const licenseDetails$ = $(".cmp-enquire-now-form-2 #licenseDetails");
      const preferredState$ = $(".cmp-enquire-now-form-2 #preferredstatename");
      const preferredCity$ = $(".cmp-enquire-now-form-2 #preferredcityname");
      const preferredLocation$ = $(".cmp-enquire-now-form-2 #preferredLocationName");
      const occupationName$ = $(".cmp-enquire-now-form-2 #occupationName");
      const trainingMonthName$ = $(".cmp-enquire-now-form-2 #trainingMonthName");
      const trainingWeek$ = $(".cmp-enquire-now-form-2 #trainingWeek");
      const trainingBatTime$ = $(".cmp-enquire-now-form-2 #trainingBatTime");
      const rideBicycle$ = $(".cmp-enquire-now-form-2 #rideBicycleDropdownBtn");
      const rideTwoWheeler$ = $(".cmp-enquire-now-form-2 #rideTwoWheelerDropdownBtn");
      removeToggleIcon(stateName$);
      removeToggleIcon(cityName$);
      removeToggleIcon(genderName$);
      removeToggleIcon(possessLicense$);
      removeToggleIcon(licenseDetails$);
      removeToggleIcon(preferredState$);
      removeToggleIcon(preferredCity$);
      removeToggleIcon(preferredLocation$);
      removeToggleIcon(occupationName$);
      removeToggleIcon(trainingMonthName$);
      removeToggleIcon(trainingWeek$);
      removeToggleIcon(trainingBatTime$);
      removeToggleIcon(rideBicycle$);
      removeToggleIcon(rideTwoWheeler$);
    }
  });

  const dropdownElementList = [
    "#cmp-enquire-now-form #statename",
    "#cmp-enquire-now-form #cityname",
    "#cmp-enquire-now-form #gender",
    "#cmp-enquire-now-form-2 #possessLicenseDropdownBtn",
    "#cmp-enquire-now-form-2 #licenseDetails",
    "#cmp-enquire-now-form-2 #preferredstatename",
    "#cmp-enquire-now-form-2 #preferredcityname",
    "#cmp-enquire-now-form-2 #preferredLocationName",
    "#cmp-enquire-now-form-2 #occupationName",
    "#cmp-enquire-now-form-2 #trainingMonthName",
    "#cmp-enquire-now-form-2 #trainingWeek",
    "#cmp-enquire-now-form-2 #trainingBatTime",
    "#cmp-enquire-now-form-2 #rideBicycleDropdownBtn",
    "#cmp-enquire-now-form-2 #rideTwoWheelerDropdownBtn"
  ].join(", ");

  $(dropdownElementList).click(
    toggleDropdownIcon
  );

  $(".company-thank-you-wrapper .company-modal-close").click(closeModal);

  $("#cmp-enquire-now-form .btn-submit").click(function () {
    let currentForm = $(this).closest('form');
    let mobile = currentForm.find('#mobileNumer').val();
    let otp = "";
    for (let i = 1; i < 7; i++) {
      otp += currentForm.find("#digit-" + i).val();
    }

    if (isModalFormEmpty(currentForm) && isValidOtp(mobile, otp)) {
      currentForm.find(".error-message").hide();
      const parentElement = $(this).closest(".company-enquire-popup");
      parentElement.find(".form-step-1").addClass("d-none");
      parentElement.find(".form-step-2").removeClass("d-none");
      let popupContainer = parentElement.find(".popup-steper-container");
      popupContainer.find(".step-title span").text("2");
      popupContainer.find(".step-progress-container .step-progress").css("width", "100%");
    } else {
      currentForm.find('.error-message').each(function () {
        const currentElement = $(this).parent(".form-group").find("input");
        if (!currentElement.val() && currentElement.attr("required")) {
          $(this).show();
        }
      });
    }
  });
  $("#cmp-enquire-now-form-2 .btn-submit").click(function () {
    let currentForm = $(this).closest('form');
    if (isModalForm2Empty(currentForm)) {
      currentForm.find(".error-message").hide();
      let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
      grecaptcha.ready(function () {
        grecaptcha.execute(sitKey).then(function (token) {
          sendHtrtsFormData(currentForm, token);
        });
      });
    } else {
      currentForm.find('.error-message').each(function () {
        const currentElement = $(this).parent(".form-group").find("input");
        if (!currentElement.val() && currentElement.attr("required")) {
          $(this).show();
        }
      });
    }
  });

  function isNumeric(e) {
    let charCode = e.which ? e.which : e.keyCode;
    if (
      e.type === "blur" ||
      e.type === "touchend" ||
      (charCode > 95 && charCode < 106) ||
      (charCode > 47 && charCode < 58) ||
      charCode == 8 ||
      charCode == 9
    ) {
      return true;
    }
    e.preventDefault();
    return false;
  }
  function isAlphaAndSpace(e) {
    let charCode = e.which ? e.which : e.keyCode;
    if (
      e.type === "blur" ||
      e.type === "touchend" ||
      (charCode > 96 && charCode < 123) ||
      (charCode > 64 && charCode < 91) ||
      charCode == 32 ||
      charCode == 8 ||
      charCode == 9
    ) {
      return true;
    }
    e.preventDefault();
    return false;
  }
  function validatePhone(e, self) {
    let regex = /^[6-9][0-9]{9}$/;
    $(self)
      .val()
      .replace(/[0-5][^0-9]/g, "");

    if (isNumeric(e)) {
      sendOtp$.removeClass("active").addClass("disabled");
      formError["mobileNumber"] = true;
      if (!$(self).val()) {
        $(self).parents(".form-group").find(".error-message").show();
      } else if ($(self).val().length < 10 || $(self).val().length > 10) {
        $(self)
          .parents(".form-group")
          .find(".error-message")
          .text("Phone number must be 10 digits")
          .show();
      } else if (!regex.test($(self).val())) {
        $(self)
          .parents(".form-group")
          .find(".error-message")
          .text("Enter correct mobile number")
          .show();
      } else {
        sendOtp$.addClass("active").removeClass("disabled");
        $(self).parents(".form-group").find(".error-message").hide();
        formError["mobileNumber"] = false;
        isFormEmpty();
      }
    } else if (e.keyKode === undefined && regex.test($(self).val())) {
      sendOtp$.addClass("active").removeClass("disabled");
      $(self).parents(".form-group").find(".error-message").hide();
      formError["mobileNumber"] = false;
      isFormEmpty();
    }
  }
  function generateStateDropDown(selector) {
    let form = $(selector).closest("form");
    let stateList = form
      .find('[name="statename"]')
      .parents(".cust-drop-down")
      .find(".cust-dropdown-menu");

    Object.keys(newList).forEach(function (stateName) {
      $("<li>")
        .attr("value", stateName)
        .append($("<a>").attr("href", "javascript:void(0)").text(stateName))
        .appendTo(stateList);
    });
  }

  function populateCityDropdown(listSelector, selectedState, cityName) {
    if (cityName != "") {
      let form = $(listSelector).closest("form");
      let cityField = form.find('[name="cityname"]');
      cityField.text(form.find('[name="cityname"]').attr("data-default-label"));
    }

    if (listSelector[0] !== undefined) {
      for (const key of Object.keys(newList)) {
        const capitalizedKey = key
          .split(" ")
          .map(
            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
          )
          .join(" ");
        const capitalizedValue = newList[key]
          .split(" ")
          .map(
            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
          )
          .join(" ");
        delete newList[key];
        newList[capitalizedKey] = capitalizedValue;
      }

      let cities = newList[selectedState];
      if (!cities) {
        throw new Error("Selected state not found in data");
      }

      listSelector.empty();
      let cityArray = cities.slice(1, -1).split(",");
      $.each(cityArray, function (index, city) {
        let newItem = document.createElement("li");
        newItem.innerHTML =
          "<a href=javascript:void(0)>" + city.trim() + "</a>";
        listSelector.append(newItem);
      });
    }
  }

  function populatePreferredDropdown(selector, keyword) {
    let form = $(selector).closest("form");
    let url = defaultServletPath + ".htrtsprefstatecitylocation";
    $(selector).empty();
    $('#hero-loader').removeClass('d-none');
    if (keyword == "state") {
      url = `${url}.html`;
      fetch(url)
        .then(function (response) {
          $('#hero-loader').addClass('d-none');
          if (!response.ok) {
            // make the promise be rejected if we didn't get a 2xx response
            throw new Error("Not 2xx response", { cause: response });
          } else {
            return response.text();
          }
        })
        .then(function (html) {
          $(selector).append(html);
          //sort in ascending order
          form
            .find('[name="preferredstatename"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="preferredstatename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
                .sort(sortAscending)
            );
        });
    } else if (keyword == "city") {
      url = `${url}.${preferredStateShortName}.html`;
      fetch(url)
        .then(function (response) {
          $('#hero-loader').addClass('d-none');
          if (!response.ok) {
            // make the promise be rejected if we didn't get a 2xx response
            throw new Error("Not 2xx response", { cause: response });
          } else {
            return response.text();
          }
        })
        .then(function (html) {
          $(selector).append(html);
          //sort in ascending order
          form
            .find('[name="preferredcityname"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="preferredcityname"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
                .sort(sortAscending)
            );
          const nextDropdownList = $(selector).find("li");
          if (nextDropdownList.length == 1) {
            nextDropdownList.trigger("click");
          }
        });
    } else if (keyword == "location") {
      url = `${url}.${preferredStateShortName}.${preferredCityShortName}.html`;
      fetch(url)
        .then(function (response) {
          $('#hero-loader').addClass('d-none');
          if (!response.ok) {
            // make the promise be rejected if we didn't get a 2xx response
            throw new Error("Not 2xx response", { cause: response });
          } else {
            return response.text();
          }
        })
        .then(function (html) {
          $(selector).append(html);
          //sort in ascending order
          form
            .find('[name="preferredLocationName"]')
            .parents(".cust-drop-down")
            .find(".cust-dropdown-menu li")
            .sort(sortAscending)
            .appendTo(
              form
                .find('[name="preferredLocationName"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu")
                .sort(sortAscending)
            );
          const nextDropdownList = $(selector).find("li");
          if (nextDropdownList.length == 1) {
            nextDropdownList.trigger("click");
          }
        });
    }
  }

  function checkSlotAvailability(listSelector, keyword, selectedKey) {
    if (keyword == "month") {
      $(listSelector).each(function (idx, ele) {
        let eleVal = parseInt($(ele).attr("value"));
        let monthVal = monthList[eleVal];
        if (monthVal && slotAvailabilityData && slotAvailabilityData.length) {
          for (let itemKey in slotAvailabilityData) {
            let item = slotAvailabilityData[itemKey];
            if (monthVal.toUpperCase() == item.month) {
              const nowDate = new Date();
              const monVal = nowDate.getMonth();
              let isAvailable = false;
              if (item.weekAvailability) {
                if (monVal == eleVal) {
                  for(let weekKey in item.weekAvailability) {
                    let temp = weekKey.split(":");
                    temp = temp.length > 1 ? temp[1].split("-") : [];
                    temp = temp.length > 1 ? parseInt(temp[1]) : 0;
                    if (nowDate.getDate() > temp) {
                      continue;
                    }
                    if (item.weekAvailability[weekKey].isAvailable == "true") {
                      isAvailable = true;
                      break;
                    }
                  }
                } else {
                  for(let weekKey in item.weekAvailability) {
                    if (item.weekAvailability[weekKey].isAvailable == "true") {
                      isAvailable = true;
                      break;
                    }
                  }
                }
              }
              if (isAvailable) {
                $(ele).data("item-key", itemKey).removeClass("disabled");
              } else {
                $(ele).data("item-key", itemKey).addClass("disabled");
              }
              break;
            }
          }
        }
      });
    } else if (keyword == "week") {
      if (slotAvailabilityData && slotAvailabilityData.length) {
        selectedSlotData = slotAvailabilityData[selectedKey];
      }
      $(listSelector).find("li").each(function (idx, ele) {
        let eleVal = $(ele).attr("value");
        if (eleVal && selectedSlotData && selectedSlotData.weekAvailability) {
          let weekAvailability = selectedSlotData.weekAvailability;
          for (let itemKey in weekAvailability) {
            let weekTemp = itemKey.split(":");
            if (eleVal == weekTemp[0]) {
              if (weekAvailability[itemKey].isAvailable == "true") {
                $(ele).data("item-key", itemKey).removeClass("disabled");
              } else {
                $(ele).data("item-key", itemKey).addClass("disabled");
              }
              break;
            }
          }
        }
      });
    } else if (keyword == "time") {
      $(listSelector).find("li").each(function (idx, ele) {
        let eleVal = $(ele).attr("value");
        if (eleVal && selectedSlotData && selectedSlotData.slotAvailability) {
          let timeAvailability = selectedSlotData.slotAvailability[selectedKey];
          for (let itemKey in timeAvailability) {
            if (eleVal.toUpperCase() == itemKey) {
              if (timeAvailability[itemKey].isAvailable) {
                $(ele).data("item-key", itemKey).removeClass("disabled");
              } else {
                $(ele).data("item-key", itemKey).addClass("disabled");
              }
              break;
            }
          }
        }
      });
    }
  }

  function fetchSlotAvailability(currentForm, token, preferredLocation) {
    const url = currentForm.find('[name="productpath"]').val() + ".htrtsgetslots.json";
    const dataObj = {
      token: token,
      location: preferredLocation
    };
    const settings = {
      url: url,
      method: "POST",
      data: JSON.stringify(dataObj),
      dataType: "json",
      contentType: "application/json",
    };
    $('#hero-loader').removeClass('d-none');
    $.ajax(settings)
      .done(function (response) {
        $('#hero-loader').addClass('d-none');
        if (response && (response.message == "Availability fetched successfully" || response.success == true)) {
          slotAvailabilityData = response.data;
          let trainingMonthEle = currentForm.find("#trainingMonthDropdownList li");
          checkSlotAvailability(trainingMonthEle, "month");
          currentForm.find("#trainingMonthName").removeClass("disabled");
        } else {
          console.error(response);
        }
      }).fail(function (err) {
        $('#hero-loader').addClass('d-none');
        console.error(err);
      });
  }

  function populateTrainingWeekDropdown(listSelector, month, checkWeek = false) {
    let today = new Date(),
      year = today.getFullYear(),
      monthVal = today.getMonth(),
      dayVal = today.getDate(),
      firstWeekday = new Date(year, month, 1).getDay(),
      lastDateOfMonth = new Date(year, month + 1, 0).getDate(),
      index = 1, // start index at 0 or 1, your choice
      monShortName = monthList[month].substring(0, 3),
      noOfWeeks = 4,
      isFifthWeek = false,
      endDate,
      startDate,
      weekText;

    if (firstWeekday < 3) { // Week is from Tuesday to Sunday
      startDate = 3 - firstWeekday;
    } else {
      startDate = 10 - firstWeekday; // (7 - firstWeekday) + 3
    }
    endDate = startDate + 5;

    if (monthVal == month) {
      while (startDate <= dayVal) {
        startDate = endDate + 2;
        endDate = startDate + 5;
        index++;
      }
    }
    if (index >= noOfWeeks && startDate <= lastDateOfMonth) {
      if (checkWeek) { // check for populate month
        return false;
      }
      if (index > noOfWeeks) {
        isFifthWeek = true;
        endDate = startDate - 2;
      }
    }
    if (checkWeek) { // check for populate month
      if (index > noOfWeeks) {
        return true;
      } else {
        return false;
      }
    }
    listSelector.empty();
    while (index < noOfWeeks) {
      weekText = `Week ${index}: ${startDate} ${monShortName} - ${endDate} ${monShortName}`;
      let newItem = document.createElement("li");
      newItem.setAttribute("value", `Week ${index}`);
      newItem.innerHTML = "<a href=javascript:void(0)>" + weekText + "</a>";
      listSelector.append(newItem);
      startDate = endDate + 2;
      endDate = startDate + 5;
      index++;
    }
    if (index == noOfWeeks) {
      let nextMonShortName = monShortName;
      if (endDate > lastDateOfMonth) {
        endDate = endDate - lastDateOfMonth;
        let nextMonth = month + 1;
        if (month === (monthList.length - 1)){
          nextMonth = 0;
        }
        nextMonShortName = monthList[nextMonth].substring(0, 3);
      } else if (endDate + 2 <= lastDateOfMonth) {
        isFifthWeek = true;
      }
      weekText = `Week ${index}: ${startDate} ${monShortName} - ${endDate} ${nextMonShortName}`;
      let newItem = document.createElement("li");
      newItem.setAttribute("value", `Week ${index}`);
      newItem.innerHTML = "<a href=javascript:void(0)>" + weekText + "</a>";
      listSelector.append(newItem);
      index++;
    }
    if (isFifthWeek) {
      let nextMonth = month + 1;
      if (month === (monthList.length - 1)){
        nextMonth = 0;
      }
      let nextMonShortName = monthList[nextMonth].substring(0, 3);
      startDate = endDate + 2;
      endDate = startDate + 5 - lastDateOfMonth;
      weekText = `Week ${index}: ${startDate} ${monShortName} - ${endDate} ${nextMonShortName}`;
      let newItem = document.createElement("li");
      newItem.setAttribute("value", `Week ${index}`);
      newItem.innerHTML = "<a href=javascript:void(0)>" + weekText + "</a>";
      listSelector.append(newItem);
    }
  }

  function sortAscending(a, b) {
    return $(b).text().toUpperCase() < $(a).text().toUpperCase() ? 1 : -1;
  }

  function isValidOtp(mobile, otp) {
    const reqId = sessionStorage.getItem("tempID");
    return (
      otp.toString().padStart(6, "0") ===
      (Math.abs(hashCode(mobile + reqId)) % 1000000).toString().padStart(6, "0")
    );
  }
  function validateOTP() {
    if (!isValidOtp(mobile, otp)) {
      $("#cmp-enquire-now-form .otp-success-icon").hide();
      $(".otp-error-message-space").text("OTP does not match").show();
      otp = "";
    } else {
      $("#cmp-enquire-now-form .otp-success-icon").show();
      $(".otp-error-message-space").hide();
    }
  }

  function clearOTPFields() {
    otp = "";
    for (let i = 1; i <= 6; i++) {
      $(`#digit-${i}`).val("");
    }
  }

  function clearTrainingTimeFields(element) {
    trainingMonth = "";
    trainingWeek = "";
    trainingBatchTime = "";
    const trainingMonthName$ = $(element).find("#trainingMonthName");
    const trainingWeek$ = $(element).find("#trainingWeek");
    const trainingBatTime$ = $(element).find("#trainingBatTime");
    trainingMonthName$.text(trainingMonthName$.data("default-label")).removeClass("active").addClass("disabled");
    trainingWeek$.text(trainingWeek$.data("default-label")).removeClass("active").addClass("disabled");
    trainingBatTime$.text(trainingBatTime$.data("default-label")).removeClass("active").addClass("disabled");
    $(element).find("#trainingMonthNameVal").val("");
    $(element).find("#trainingWeekVal").val("");
    $(element).find("#trainingBatTimeVal").val("");
  }

  async function getformData() {
    title = $("#userName").val();
    userAge = $("#userAge").val();
    email = $("#email").val();
    mobile = $("#mobileNumer").val();
    userAddress = $("#userAddress").val();
    gender = $('input[name="genderVal"]').val();
    state = $('input[name="stateNameVal"]').val();
    city = $('input[name="cityNameVal"]').val();
    licenseDetails = $('input[name="licenseDetailsVal"]').val();
    occupation = $('input[name="occupationVal"]').val();
    trainingMonth = $('input[name="trainingMonthNameVal"]').val();
    trainingWeek = $('input[name="trainingWeekVal"]').val();
    trainingBatchTime = $('input[name="trainingBatTimeVal"]').val();
  }

  async function getModalformData(currentForm) {
    title = currentForm.find("#userName").val();
    userAge = currentForm.find("#userAge").val();
    email = currentForm.find("#email").val();
    mobile = currentForm.find("#mobileNumer").val();
    userAddress = currentForm.find("#userAddress").val();
    gender = currentForm.find('input[name="genderVal"]').val();
    state = currentForm.find('input[name="stateNameVal"]').val();
    city = currentForm.find('input[name="cityNameVal"]').val();
  }

  async function getModalform2Data(currentForm) {
    licenseDetails = currentForm.find('input[name="licenseDetailsVal"]').val();
    preferredState = currentForm.find('input[name="preferredStateNameVal"]').val();
    preferredCity = currentForm.find('input[name="preferredCityNameVal"]').val();
    preferredLocation = currentForm.find('input[name="preferredLocationNameVal"]').val();
    occupation = currentForm.find('input[name="occupationVal"]').val();
    trainingMonth = currentForm.find('input[name="trainingMonthNameVal"]').val();
    trainingWeek = currentForm.find('input[name="trainingWeekVal"]').val();
    trainingBatchTime = currentForm.find('input[name="trainingBatTimeVal"]').val();
  }

  // on success form submission  call this function to show thank you component
  function onSuccessEnquireThankYou(status) {
    resetForm();
    $('.cmp-enquire-now-form').trigger("reset");
    $('.cmp-enquire-now-form-2').trigger("reset");
    if (status !== "error") {
      $(".company-thank-you-wrapper #successMessage").show();
      $(".company-thank-you-wrapper #errorMessage").hide();

      $(".company-thank-you-wrapper").css("display", "block");
      $(".company-enquire-popup").css("display", "none");
    } else {
      $(".company-thank-you-wrapper").css("display", "block");
      $(".company-enquire-popup").css("display", "none");
      $(".company-thank-you-wrapper #successMessage").hide();
      $(".company-thank-you-wrapper #errorMessage").show();
    }
  }

  function isFormEmpty() {
    getformData();
    if (
      title &&
      gender &&
      userAge &&
      userAddress &&
      mobile &&
      state &&
      city &&
      (!isPossessLicense || licenseDetails) &&
      preferredState &&
      preferredCity &&
      preferredLocation &&
      occupation &&
      trainingMonth &&
      trainingWeek &&
      trainingBatchTime &&
      !Object.values(formError).includes(true)
    ) {
      return true;
    } else {
      return false;
    }
  }

  function isModalFormEmpty(currentFormEle) {
    getModalformData(currentFormEle);
    if (
      title &&
      gender &&
      userAge &&
      userAddress &&
      mobile &&
      state &&
      city &&
      !Object.values(formError).includes(true)
    ) {
      return true;
    } else {
      return false;
    }
  }

  function isModalForm2Empty(currentFormEle) {
    getModalform2Data(currentFormEle);
    if (
      (!isPossessLicense || licenseDetails) &&
      preferredState &&
      preferredCity &&
      preferredLocation &&
      occupation &&
      trainingMonth &&
      trainingWeek &&
      trainingBatchTime &&
      !Object.values(formError).includes(true)
    ) {
      return true;
    } else {
      return false;
    }
  }

  async function sendHtrtsFormData(currentForm, token) {
    let currentForm1 = currentForm.parent().prev().find('form');
    let mobile = currentForm1.find('#mobileNumer').val();
    let otp = "";
    for (let i = 1; i < 7; i++) {
      otp += currentForm1.find("#digit-" + i).val();
    }
    if (isValidOtp(mobile, otp) &&
      isModalFormEmpty(currentForm1) &&
      isModalForm2Empty(currentForm)) {
      const url = currentForm.find('input[name="action_url"]').val();
      const dataObj = {
        mobile: mobile,
        otp: otp,
        reqID: sessionStorage.getItem("tempID"),
        email: email,
        token: token,
        REQ_FORMAT: {
          name: title,
          gender: gender,
          age: parseInt(userAge),
          city: city.replaceAll("&amp;", "and").replaceAll("&", "and"),
          state: state.replaceAll("&amp;", "and").replaceAll("&", "and"),
          residentialAddress: userAddress,
          mobileNumber: mobile,
          email: email,
          possessLicense: isPossessLicense,
          licenseType: licenseDetails,
          preferredStateForTraining: preferredState.replaceAll("&amp;", "and").replaceAll("&", "and").trim(),
          preferredCityForTraining: preferredCity.replaceAll("&amp;", "and").replaceAll("&", "and").trim(),
          preferredLocationForTraining: preferredLocation.replaceAll("&amp;", "and").replaceAll("&", "and").trim(),
          occupation: occupation,
          monthOfTraining: trainingMonth,
          weeklySlotBooking: trainingWeek,
          trainingBatchTiming: trainingBatchTime,
          knowRideBicycle: isRideBicycle,
          knowRideTwoWheeler: isRideTwoWheeler
        }
      };
      const settings = {
        url: url,
        method: "POST",
        data: JSON.stringify(dataObj),
        dataType: "json",
        contentType: "application/json",
      };

      $('#hero-loader').removeClass('d-none');
      $.ajax(settings)
        .done(function (response) {
          $('#hero-loader').addClass('d-none');
          if (response && (response.message == "Training enrollment successful" || response.success == true)) {
            onSuccessEnquireThankYou("success");
            otp = "";
            sendOtp$.removeClass("active").addClass("disabled");
            if (window.digitalData && window._satellite) {
              window.digitalData = {
                FormDetails: {
                  formname: 'HTRTS Training Form',
                  formtype: 'popup',
                },
                page: getPageDetails(),
              };
              _satellite.track("formSuccess");
              sessionStorage.setItem('startEvent', 'not sent')
            }
          } else {
            onSuccessEnquireThankYou("error");
            if (window.digitalData && window._satellite) {
              window.digitalData = {
                form: {
                  formname: 'HTRTS Training Form',
                  formtype: 'popup',
                },
                page: getPageDetails(),
              };
              _satellite.track("formError");
              sessionStorage.setItem('startEvent', 'not sent')
            }
          }
        })
        .fail(function () {
          $('#hero-loader').addClass('d-none');
          onSuccessEnquireThankYou("error");
          if (window.digitalData && window._satellite) {
            window.digitalData = {
              form: {
                formname: 'HTRTS Training Form',
                formtype: 'popup',
              },
              page: getPageDetails(),
            };
            _satellite.track("formError");
            sessionStorage.setItem('startEvent', 'not sent')
          }
        });
    }
  }

  function toggleDropdownIcon(self) {
    const targetElement = `#${$(self.target)
      .next()
      .next(".cust-dropdown-menu")
      .attr("id")}`;
    if (isVisible(targetElement)) {
      $(targetElement).addClass("dorpdown-up-down");
    } else {
      $(targetElement).removeClass("dorpdown-up-down");
    }
    if (!$(self.target).hasClass("dropdown-toggle-active")) {
      $(self.target)
        .addClass("dropdown-toggle-active");
    }
    $(self.target)
      .parent(".btn-drop-v1")
      .find(".cust-dropdown-menu")
      .toggleClass("show-dropdown");
  }

  function closeModal() {
    $(".company-thank-you-wrapper").css("display", "none");
    $(".company-enquire-popup").css("display", "block");
  }

  function onSendOTP(token, mobNumber, formElement) {
    if (mobNumber) {
      if (window.digitalData && window._satellite) {
        window.digitalData = {
          form: {
            formname: 'HTRTS Training Form',
            formtype: 'popup',
          },
          page: getPageDetails() || '',
        };
        _satellite.track("OTP Requested");
      }
      enquireNowoptbox$.removeAttr("disabled");
      requestOtp(mobNumber, pageType, token, formElement);
    }
  }
  $("#cmp-enquire-now-form .send-btn").on("click", function () {
    let mobNumber = $(this).parent().find('.mobileNumber').val();
    $(this).hide();
    const formElement = $(this).closest(".cmp-enquire-now-form");
    let sitKey = $('[name="sitekeyinfo"]').attr("sitekeyinfo");
    grecaptcha.ready(function () {
      grecaptcha.execute(sitKey).then(function (token) {
        onSendOTP(token, mobNumber, formElement);
      });
    });
  });

  function requestOtp(contactNumber, pageType, token, formElement) {
    // generateId() is defined here >> js\util.js
    sessionStorage.setItem("tempID", generateId());
    let form = new FormData();
    form.append("phoneNum", contactNumber);
    form.append("pageType", pageType);
    form.append("reqID", sessionStorage.getItem("tempID"));
    form.append("token", token);

    const settings = {
      url: defaultServletPath + ".sendotp.html",
      method: "POST",
      headers: {},
      mimeType: "multipart/form-data",
      processData: false,
      contentType: false,
      data: form,
      success: function () {
        autoPopulateOTP(formElement);
        if (window.digitalData) {
          window.digitalData = {
            event: "OTP Success",
            form: {
              formname: 'HTRTS Training Form',
              formtype: 'popup',
            },
            page: getPageDetails(),
          };
        }
      },
      error: function () {
        if (window.digitalData) {
          window.digitalData = {
            event: "OTP fails",
            form: {
              formname: 'HTRTS Training Form',
              formtype: 'popup',
            },
            page: getPageDetails(),
          };
        }
      },
    };

    $.ajax(settings).done(function (response) {
      if (response) {
        const result = JSON.parse(response);
        if (JSON.parse(result["New smsResult"]).STATUS === "OK") {
          clearOTPFields();
          timerOn = true;
          OTPTimer(otpIntiaalTime$);
          $("#cmp-enquire-now-form .otp-label").removeClass("disabled");
          $("#cmp-enquire-now-form .otp-label-container").removeClass("disabled");
          $("#cmp-enquire-now-form .otpbox").prop("disabled", false);
        } else {
          console.error(
            "Something went wrong. We got an error Response.",
            response
          );
        }
      }
    });
  }

  $(".company-enquire-popup .company-modal-close").click(resetForm);

  function resetForm() {
    sessionStorage.setItem('startEvent', 'not sent');
    clearTimeout(timeoutRef);
    timerOn = false;
    $(sendOtp$).text("SEND OTP").show();
    formError = {};
    otp = "";
    slotAvailabilityData = [];
    selectedSlotData = {};
    isPossessLicense = false;
    isRideBicycle = false;
    isRideTwoWheeler = false;
    let popupContainer = $(".company-enquire-popup .popup-steper-container");
    popupContainer.find(".step-title span").text("1");
    popupContainer.find(".step-progress-container .step-progress").css("width", "50%");
    $(".company-enquire-popup .form-step-1").removeClass("d-none");
    $(".company-enquire-popup .form-step-2").addClass("d-none");
    $("#cmp-enquire-now-form .mobileNumber").removeClass("disabled-mobilenumber");
    $("#cmp-enquire-now-form .mobileNumber").attr("readonly", false);
    $("#cmp-enquire-now-form .otp-label").addClass("disabled");
    $("#cmp-enquire-now-form .otp-label-container").addClass("disabled");
    $("#cmp-enquire-now-form .otp-timer").hide();
    $("#cmp-enquire-now-form .otp-success-icon").hide();
    $(".cmp-enquire-now-form .send-btn").text("SEND OTP").removeClass("active");
    $(".cmp-enquire-now-form-2 #addressDeatils").text($(".cmp-enquire-now-form-2 #addressDeatils").data("default-label")).addClass("address-deatils");
    $(".cmp-enquire-now-form-2 #licenseDetailsContainer").addClass("d-none");
    const stateName$ = $(".cmp-enquire-now-form #statename");
    $(stateName$).text(stateName$.data("default-label")).removeClass("active");
    const cityName$ = $(".cmp-enquire-now-form #cityname");
    $(cityName$).text(cityName$.data("default-label")).removeClass("active").addClass("disabled");
    const gender$ = $(".cmp-enquire-now-form #gender");
    $(gender$).text(gender$.data("default-label")).removeClass("active");
    const possessLicense$ = $(".cmp-enquire-now-form-2 #possessLicenseDropdownBtn");
    $(possessLicense$).text(possessLicense$.data("default-label")).removeClass("active");
    const licenseDetails$ = $(".cmp-enquire-now-form-2 #licenseDetails");
    $(licenseDetails$).text(licenseDetails$.data("default-label")).removeClass("active");
    const preferredState$ = $(".cmp-enquire-now-form-2 #preferredstatename");
    $(preferredState$).text(preferredState$.data("default-label")).removeClass("active");
    const preferredCity$ = $(".cmp-enquire-now-form-2 #preferredcityname");
    $(preferredCity$).text(preferredCity$.data("default-label")).removeClass("active").addClass("disabled");
    const preferredLocation$ = $(".cmp-enquire-now-form-2 #preferredLocationName");
    $(preferredLocation$).text(preferredLocation$.data("default-label")).removeClass("active").addClass("disabled");
    const occupationName$ = $(".cmp-enquire-now-form-2 #occupationName");
    $(occupationName$).text(occupationName$.data("default-label")).removeClass("active");
    const trainingMonthName$ = $(".cmp-enquire-now-form-2 #trainingMonthName");
    $(trainingMonthName$).text(trainingMonthName$.data("default-label")).removeClass("active").addClass("disabled");
    const trainingWeek$ = $(".cmp-enquire-now-form-2 #trainingWeek");
    $(trainingWeek$).text(trainingWeek$.data("default-label")).removeClass("active").addClass("disabled");
    const trainingBatTime$ = $(".cmp-enquire-now-form-2 #trainingBatTime");
    $(trainingBatTime$).text(trainingBatTime$.data("default-label")).removeClass("active").addClass("disabled");
    const rideBicycle$ = $(".cmp-enquire-now-form-2 #rideBicycleDropdownBtn");
    $(rideBicycle$).text(rideBicycle$.data("default-label")).removeClass("active");
    const rideTwoWheeler$ = $(".cmp-enquire-now-form-2 #rideTwoWheelerDropdownBtn");
    $(rideTwoWheeler$).text(rideTwoWheeler$.data("default-label")).removeClass("active");
    $(".cmp-enquire-now-form .error-message").hide();
    $(".cmp-enquire-now-form").trigger("reset");
    $(".cmp-enquire-now-form-2 .error-message").hide();
    $(".cmp-enquire-now-form-2").trigger("reset");
    $("#cmp-enquire-now-form #stateNameVal").val("");
    $("#cmp-enquire-now-form #cityNameVal").val("");
    $("#cmp-enquire-now-form #genderVal").val("");
    $("#cmp-enquire-now-form-2 #possessLicenseVal").val("");
    $("#cmp-enquire-now-form-2 #licenseDetailsVal").val("").removeAttr("required");
    $("#cmp-enquire-now-form-2 #preferredStateNameVal").val("");
    $("#cmp-enquire-now-form-2 #preferredCityNameVal").val("");
    $("#cmp-enquire-now-form-2 #preferredLocationNameVal").val("");
    $("#cmp-enquire-now-form-2 #occupationVal").val("");
    $("#cmp-enquire-now-form-2 #trainingMonthNameVal").val("");
    $("#cmp-enquire-now-form-2 #trainingWeekVal").val("");
    $("#cmp-enquire-now-form-2 #trainingBatTimeVal").val("");
    $("#cmp-enquire-now-form-2 #rideBicycleVal").val("");
    $("#cmp-enquire-now-form-2 #rideTwoWheelerVal").val("");
    removeToggleIcon(stateName$);
    removeToggleIcon(cityName$);
    removeToggleIcon(gender$);
    removeToggleIcon(possessLicense$);
    removeToggleIcon(licenseDetails$);
    removeToggleIcon(preferredState$);
    removeToggleIcon(preferredCity$);
    removeToggleIcon(preferredLocation$);
    removeToggleIcon(occupationName$);
    removeToggleIcon(trainingMonthName$);
    removeToggleIcon(trainingWeek$);
    removeToggleIcon(trainingBatTime$);
    removeToggleIcon(rideBicycle$);
    removeToggleIcon(rideTwoWheeler$);
  }

  function removeToggleIcon(target) {
    $(target).removeClass("dropdown-toggle-active");
  }

  function isVisible(targetElement) {
    const element = document.querySelector(targetElement);
    if (
      Math.ceil(element.getBoundingClientRect().bottom) >= window.innerHeight
    ) {
      return true;
    }
    return false;
  }

  function OTPTimer(remaining) {
    let m = Math.floor(remaining / 60);
    let s = remaining % 60;

    let s$ = s < 10 ? "0" + s : s;
    let m$ = m < 10 ? "0" + m : m;
    $("#cmp-enquire-now-form #otpTimer").text(m$ + ":" + s$);
    remaining -= 1;
    if (remaining >= 0 && timerOn) {
      $(sendOtp$).hide();
      $("#cmp-enquire-now-form .mobileNumber").addClass("disabled-mobilenumber");
      $("#cmp-enquire-now-form .mobileNumber").attr("readonly", true);
      $("#cmp-enquire-now-form .otp-timer").show();
      timeoutRef = setTimeout(function () {
        OTPTimer(remaining);
      }, 1000);
      return;
    } else if (remaining < 1) {
      timerOn = false;
      $("#cmp-enquire-now-form .otp-timer").hide();
      $(".mobileNumber").removeClass("disabled-mobilenumber");
      $(".mobileNumber").attr("readonly", false);
      $(sendOtp$).text("RESEND OTP").show();
    } else {
      desableOTPbox();
      $(sendOtp$).text("SEND OTP").show();
    }
  }

  function desableOTPbox() {
    $("#cmp-enquire-now-form .otp-label-container").addClass("disabled");
    $("#cmp-enquire-now-form .otpbox").prop("disabled", true);
  }

  var autoPopulateOTP = (formElement) => {
    if ('OTPCredential' in window) {
      const ac = new AbortController();
      navigator.credentials.get({
        otp: { transport: ['sms'] },
        signal: ac.signal
      }).then(otp => {
        const $inp = $(formElement).find(".otp-container input");
        $inp.each(function (index) {
          $(this).val(otp.code[index]);
        });
        $inp.trigger('input');
        ac.abort();
      }).catch(err => {
        console.log(err);
      });
    }
  }
}

function getOS() {
  var userAgent = window.navigator.userAgent,
    platform =
      window.navigator?.userAgentData?.platform || window.navigator.platform,
    macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
    windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
    iosPlatforms = ["iPhone", "iPad", "iPod"],
    os = null;

  if (macosPlatforms.indexOf(platform) !== -1) {
    os = "Mac OS";
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os = "iOS";
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os = "Windows";
  } else if (/Android/.test(userAgent)) {
    os = "Android";
  } else if (/Linux/.test(platform)) {
    os = "Linux";
  }

  return os;
}

function generateId(len) {
  var arr = new Uint8Array((len || 40) / 2);
  window.crypto.getRandomValues(arr);
  return Array.from(arr, dec2hex).join("");
}

function dec2hex(dec) {
  return dec.toString(16).padStart(2, "0");
}

function hashCode(s) {
  var h = 0,
    l = s.length,
    i = 0;
  if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
  return h;
}

function debounce(fn, d) {
  let timer;
  return function () {
    let context = this;
    let args = arguments;
    clearTimeout(timer);
    timer = setTimeout(() => {
      fn.apply(context, args);
    }, d);
  };
}

$(document).ready(function () {
  try {
    // Stop JS execution if the component html is not prensent in the DOM
    if (!$(".company-modal-wrapper").length) {
      return;
    }
    initCompanyModalButton();
  } catch (error) {
    console.error(error);
  }
});

function initCompanyModalButton() {
  const MODAL_BTN = $(".cmp-modal-button");
  const CLOSE_BTN = $(".company-modal-close");
  $(MODAL_BTN).on('click', function() {
    $(this).next(".company-modal-wrapper").css("display", "block");
    $("html, body").addClass("overflow-hidden");
  });
  $(CLOSE_BTN).on('click', function() {
    $("html, body").removeClass("overflow-hidden");
    $(this).closest(".company-modal-wrapper").css("display", "none");
  });
}

document.addEventListener('DOMContentLoaded', function () {
  // get meta tag with priceApi name
  const metaTag = document.querySelector('meta[name="priceApi"]');
  if (metaTag) {
    let priceApiDomain = metaTag.getAttribute('priceApiDomain');
    const priceApiUrl = metaTag.getAttribute('priceApiUrl');

    if (!priceApiDomain) {
      // if domain not availabel use current page domain
      priceApiDomain = window.location.hostname;
    }
    if (priceApiDomain && priceApiUrl) {         
      fetchApi(`${priceApiDomain}/${priceApiUrl}`)
        .then((res) => {
          const { data } = res;
          if (data?.products?.items?.length > 0) {
  			    setTimeout(()=>{
 				    const price =
              		data.products.items[0].minimum_price_variant.minimum_price.regular_price.value;
                	var customElement = document.querySelector('evolve-root');
                	customElement.setAttribute('price', price);
			      },1000)
          }
        })
        .catch((err) => console.error('Error getting price'));
    }
  } else {
    console.log('Meta tag not found.');
  }
});

function fetchApi(url) {
  return new Promise((resolve, reject) => {
    fetch(url)
      .then((res) => resolve(res.json()))
      .catch((error) => reject(error));
  });
}
$(document).ready(function () {
    try {
        // Stop JS execution if the component html is not prensent in the DOM
        if (!$(".section--festive-season-landing").length) {
            return;
        }
        onInitFestiveSeasonLanding();
    } catch (err) {
        console.error(err);
    }
    function getOS() {
        var userAgent = window.navigator.userAgent,
            platform =
                window.navigator?.userAgentData?.platform ||
                window.navigator.platform,
            macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
            windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
            iosPlatforms = ["iPhone", "iPad", "iPod"],
            os = null;

        if (macosPlatforms.indexOf(platform) !== -1) {
            os = "Mac OS";
        } else if (iosPlatforms.indexOf(platform) !== -1) {
            os = "iOS";
        } else if (windowsPlatforms.indexOf(platform) !== -1) {
            os = "Windows";
        } else if (/Android/.test(userAgent)) {
            os = "Android";
        } else if (/Linux/.test(platform)) {
            os = "Linux";
        }

        return os;
    }
    function isSignedIn() {
        let isSignedIn = "No";
        if (sessionStorage.getItem("data")) isSignedIn = "Yes";
        return isSignedIn;
    }
    function getPageDetails(isErrorPage = false) {
        let pagePath = window.location.pathname;
        let slug = pagePath.split("/");
        let title = $("title").text();
        let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
        let countryCode = "in";
        if (countryRegrex && countryRegrex.length > 1) {
            countryCode = countryRegrex[1];
        }
        let sub1 = "";
        let sub2 = "";
        let sub3 = "";
        let sub4 = "";
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
            sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
                sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
                sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
                sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
        } else {
            if (slug[2]) sub1 = slug[2].replace(".html", "");
            if (slug[3]) sub2 = slug[3].replace(".html", "");
            if (slug[4]) sub3 = slug[4].replace(".html", "");
            if (slug[5]) sub4 = slug[5].replace(".html", "");
        }
        return {
            pagename: title,
            server: window.location.hostname,
            fullURL: window.location.href,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            isErrorPage: isErrorPage,
            pageType: "AEM",
            language: "en",
            country: countryCode,
            platform: getOS(),
            custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
            loggedIn: isSignedIn(),
            previousPageValue: document.referrer,
        };
    }

    function onInitFestiveSeasonLanding() {
        const ctaElements = $(".section--festive-season-landing .block--festive-action-container .block--festive-action-anchor");
        ctaElements.on("click", function () {
            const ctaUrl = $(this).attr("href");
            let ctaName = $(this).find(".block--festive-cta-label-container").text();
            ctaName = ctaName ? ctaName.trim() : "Festive Landing CTA";
            if (window.digitalData) {
                window.digitalData.push({
                    event: "linkClicked",
                    web: {
                        webInteraction: {
                            name: ctaName || "",
                            URL: ctaUrl ?? "NA",
                            position: "Festive-Season-Landing",
                        },
                    },
                    productDetails: {
                        productName: "NA",
                        variant: "NA",
                        colour: "NA",
                        dealer: "NA",
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails(),
                });
            }
        });
    }
});
$("document").ready(function () {

    const sitekey = window.aemConfigs.apiEndpoints.googleCaptchaSiteKey;
    const scriptStart = document.createElement('script');
    scriptStart.src = 'https://www.google.com/recaptcha/api.js';
    scriptStart.async = true;
    document.head.appendChild(scriptStart);

    const scriptEnd = document.createElement('script');
    scriptEnd.src = 'https://www.google.com/recaptcha/api.js?render=' + sitekey;
    scriptEnd.async = true;
    document.head.appendChild(scriptEnd);

    if ($('.festive-campaign').length > 0) {
        
        window.scrollTo(0,0);

        let key = '63C09AE37D4254AD7D13A7HGF$F88411';
        let iv = '1234567890123456';
        let sessionCampaignId = sessionStorage.getItem("festivecampaignID");
        let requestCampaignID = "";

        if (sessionCampaignId) {
            requestCampaignID = decryptData(sessionCampaignId, key, iv);
        }

        if (requestCampaignID.length > 0) {
            $('.pre-stepper-wrap').addClass('d-none').removeClass('active');
            $('.stepper-wrapper').addClass('active').removeClass('d-none');
            let skippedButton = $('.book-test-drive-form .book-test-submit');
            navigationStepper(skippedButton);
        }

        callStateCityApi();

        const elements = document.querySelectorAll('.subheader-text');
        let currentIndex = 0;

        function showNextElement() {
            elements[currentIndex].classList.remove('active');

            currentIndex = (currentIndex + 1) % elements.length;

            elements[currentIndex].classList.add('active');
        }

        $('.book-test-drive-form .form-checkbox-mark').click();
        $('.book-test-drive-form .form-checkbox-mark').toggleClass('active');

        if ($('.festive-campaign-form').length > 0 && $('.carousel-item.active').length > 0) {
            $('.carousel-item.active img').addClass('w-100');
        }

        // Set initial element to be visible
        elements[currentIndex].classList.add('active');

        // Start the loop
        setInterval(showNextElement, 4000);

        function isSignedIn() {
            let isSignedIn = "No";
            if (sessionStorage.getItem("data")) isSignedIn = "Yes";
            return isSignedIn;
        }

        function hashCode(s) {
            var h = 0,
                l = s.length,
                i = 0;
            if (l > 0)
                while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;
            return h;
        }

        function isValidOtp(mobile, otp) {
            const reqId = sessionStorage.getItem("tempID");
            return (
                otp.toString() ===
                (Math.abs(hashCode(mobile + reqId)) % 1000000)
                    .toString()
                    .padStart(6, "0")
            );
        }

        function generateId(len) {
            var arr = new Uint8Array((len || 40) / 2);
            window.crypto.getRandomValues(arr);
            return Array.from(arr, dec2hex).join("");
        }

        function dec2hex(dec) {
            return dec.toString(16).padStart(2, "0");
        }

        function decryptData(encryptedData, key, iv) {
            var base64DecodedData = atob(encryptedData);
            var decryptedBytes = CryptoJS.AES.decrypt(base64DecodedData, CryptoJS.enc.Utf8.parse(key), { mode: CryptoJS.mode.CBC, iv: CryptoJS.enc.Utf8.parse(iv) });
            var decryptedText = decryptedBytes.toString(CryptoJS.enc.Utf8);
            return decryptedText;
        }

        function getEncryptString(data) {
            const getKey = "63C09AE37D4254AD7D13A7HGF$F88411";
            const getIv = "1234567890123456";
            const getData = data;

            var authpass = CryptoJS.AES.encrypt(getData, CryptoJS.enc.Utf8.parse(getKey), {
                mode: CryptoJS.mode.CBC,
                iv: CryptoJS.enc.Utf8.parse(getIv),
            });
            var token = base64(authpass);
            return token;
        }

        function base64(data) {
            var wordArray = CryptoJS.enc.Utf8.parse(data);
            var final = CryptoJS.enc.Base64.stringify(wordArray);
            return final;
        }

        async function hashedValue(message) {
            const hashBuffer = await crypto.subtle.digest(
                "SHA-256",
                new TextEncoder().encode(message)
            );
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashValue = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
            return hashValue;
        }

        async function apicall(url, method, body) {
            let options = {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(body),
            };
            try {
                let response = await fetch(url, options);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                else {
                    let jsonData = await response.json();
                    return jsonData;
                }
            }
            catch (e) {
                console.error(e);
            }
        }

        /* Method to get State City from Data from Commerce */
        async function getStateCityList() {
            let jsonData = await apicall(
                "/content/hero-commerce/in/en/products/product-page/buy-now/jcr:content.state-and-city.json",
                "GET",
            );
            return jsonData.data.stateCity;
        }

        async function callStateCityApi() {
            getStateCityList()
                .then(function (html) {
                    sessionStorage.setItem("stateCityList", JSON.stringify(html));
                    let statelist = $('.festive-campaign')
                        .find('[name="statename"]')
                        .parents(".cust-drop-down")
                        .find(".cust-dropdown-menu ");
                    generateStateDropDown(statelist);
                })
                .catch(function (err) {
                    console.log("Something went wrong.", err);
                });
        }

        async function sendOtp(currentForm, token) {
            checkStepperProgress();
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let otpField = currentForm.find('[name="otp"]');
            sessionStorage.setItem("tempID", generateId());
            var otpdata = {
                phoneNum: $(currentForm).find('[name="mobileno"]').val(),
                pageType: "campaignpage",
                vehicleName: "",
                reqID: sessionStorage.getItem("tempID"),
                token: token
            };
            const phCodemobNumber = "+91" + otpdata.phoneNum;
            let hashedMobile = await hashedValue(phCodemobNumber);
            localStorage.setItem("analyticsHashedMobile", hashedMobile);

            const phCodemobNumberMeta = "91" + otpdata.phoneNum;
            let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
            localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);

            $.ajax({
                url: defaultservlet + ".sendotp.html",
                type: "POST",
                data: otpdata,
                success: function (resp) {
                    getOTPevents('success');
                },
                error: function () {
                    getOTPevents('fails');
                },
            });
        }

        $(".mobile-number").on("keyup", function () {
            if ($(this).val().length == 10 && $(this).valid()) {
                $(this).parent(".cust-form-group").find(".send-otp-btn").addClass("show");
            } else {
                $(this).parent(".cust-form-group").find(".send-otp-btn").removeClass("show");
                $(this).parents("form").find(".otp-value").prop("disabled", true);
            }
        });

        $("[name='fullname'], [name='mobileno']").on('focus', function () {
            $('.pre-stepper-wrap').addClass('animate fadeOutStepper');

            const analyticsValues = {
                formfield: $(this).attr('name'),
                formname: "Join Us Form",
                formtype: "static",
            }

            sendFormStartEvent(analyticsValues);
            setTimeout(() => {
                $('.pre-stepper-wrap').addClass('d-none').removeClass('active');
                $('.stepper-wrapper').addClass('active animate fadeInUpStand').removeClass('d-none');
            }, 200);
            if (window.innerWidth < 768) {
                $('html, body').animate({ scrollTop: $('#carousel').outerHeight() + 10 });
            }
        });

        $("[name='vehiclename'], [name='statename'], [name='cityname']").on('click', function () {
            $('.pre-stepper-wrap').addClass('animate fadeOutStepper')

            const analyticsValues = {
                formfield: $(this).attr('name'),
                formname: "Join Us Form",
                formtype: "static",
            }

            sendFormStartEvent(analyticsValues);

            setTimeout(() => {
                $('.pre-stepper-wrap').addClass('d-none').removeClass('active');
                $('.stepper-wrapper').addClass('active animate fadeInUpStand').removeClass('d-none');
            }, 200);
        });

        function checkStepperProgress() {

            let countFilledInputs = 0;

            if (/^[A-Za-z]+$/i.test($("[name='fullname']").val()) && $("[name='fullname']").val().length >= 3) {
                countFilledInputs++;
                $("[name='fullname']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $("[name='fullname']").parent().find('.cust-title').removeClass('isfilled');
            }
            if ($("[name='mobileno']").val().length == 10 && !($("[name='otp']").attr("disabled") == "disabled")) {
                countFilledInputs++;
                $("[name='mobileno']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $("[name='mobileno']").parent().find('.cust-title').removeClass('isfilled');
            }
            if ($("[name='otp']").val().length == 6 && $("[name='otp']").parent().hasClass('valid--otp')) {
                countFilledInputs++;
                $("[name='otp']").parent().find('.cust-title').addClass('isfilled');
            } else {
                $("[name='otp']").parent().find('.cust-title').removeClass('isfilled');
            }
            if (!($('[name="vehiclename"]').text().includes('Select Vehicle'))) {
                countFilledInputs++;
                $("[name='vehiclename']").parent().parent().find('.cust-title').addClass('isfilled');
            }
            if (!($('[name="statename"]').text().includes('Select your State'))) {
                countFilledInputs++;
                $("[name='statename']").parent().parent().find('.cust-title').addClass('isfilled');
            }
            if (!($('[name="cityname"]').text().includes('Select your City'))) {
                countFilledInputs++;
                $("[name='cityname']").parent().parent().find('.cust-title').addClass('isfilled');
            }

            if (countFilledInputs > 0 && countFilledInputs <= 6) {
                $('.step .progress-line').eq(0).css("background", `linear-gradient(to right, #fff ${(countFilledInputs - 1) * (10) + (30)}%, transparent ${(countFilledInputs - 1) * (10) + (30)}%`);
            }

            if (countFilledInputs == 6 && $('.form-checkbox-mark.active').length > 0) {
                $('.book-test-submit').addClass('active');
            } else {
                $('.book-test-submit').removeClass('active');
            }

            return  countFilledInputs;
        }

        $("[name='fullname'], [name='mobileno'], [name='otp']").on('input', function () {
            checkStepperProgress();
        });

        $(".festive-campaign .send-otp-btn").on("click", function () {
            getOTPevents('request');
            var currentForm = $(this).parents("form");
            $(currentForm).find(".otp-value").attr("disabled", false);
            $(currentForm).find(".otp-value").val('');
            $(currentForm).find(".otp-form").removeClass('valid--otp');

            let timerVal = 30;
            let interval = setInterval(() => {
                timerVal--;
                if (timerVal === 0) {
                    clearInterval(interval);
                    $(".send-otp-btn").text("Resend OTP");
                } else {
                    if (timerVal < 10) {
                        $(".send-otp-btn").text(`00:0${timerVal}`);
                        $(this).removeClass("no-click");
                    } else {
                        $(this).addClass("no-click");
                        $(".send-otp-btn").text(`00:${timerVal}`);
                    }
                }
            }, 1000);
            setTimeout(() => {
                $(this).addClass('show');
            }, 1000)

            $(this).removeClass("show");
            grecaptcha.ready(function () {
                grecaptcha.execute(sitekey).then(function (token) {
                    sendOtp(currentForm, token);
                });
            });

        });


        $(".festive-campaign .form-checkbox-mark").on("click", function () {
            $(this).toggleClass('active');
            checkStepperProgress();
        })

        $(".book-test-drive-parent .cust-dropdown-menu, .book-test-ride-campaign .cust-dropdown-menu"
        ).on("click", "li", function () {
            let selectionGroup = $(this).parents(".cust-drop-down");
            var button = selectionGroup.find(".dropdown-select");
            button.text($(this).find("a")[0].innerHTML.replaceAll("&amp;", "&"));
            var form = $(this).closest("form");
            selectionGroup.find(".cust-dropdown-menu li").removeClass("active");
            $(this).addClass("active");
            if ("vehiclename" == button.attr("name")) {
                setTimeout(function () {
                    if ($('[name="vehicleNameVal"]').val()) {
                        $('[name="vehicleNameVal"]').parent().children('label').remove()
                    }
                }, 500);
                form.find('[name="vehicleNameVal"]').val($(this).attr("value"));
                $('#vehicleDropdown').html($(this).attr("value"));
                $('#vehicleDropdown').addClass('selected-vals');
                checkStepperProgress();
            } else if ("statename" == button.attr("name")) {
                let cityField = form.find('[name="cityname"]');
                let list = cityField
                    .parents(".cust-drop-down")
                    .find(".cust-dropdown-menu ");
                stateName = $(this).attr("value");

                setTimeout(function () {
                    if ($('[name="stateNameVal"]').val()) {
                        $('[name="stateNameVal"]').parent().children('label').remove()
                    }
                }, 500);

                // var cityPath = "/bin/statecitylist";

                let cityValue = form.find('[name="cityNameVal"]').val();
                populateCityDropdown(list, stateName, cityValue);

                form.find('[name="stateNameVal"]').val(button.text());
                form.find('[name="cityNameVal"]').val("");
                $('#stateDropdown').html($(this).attr("value"));
                $('#stateDropdown').addClass('selected-vals');
                checkStepperProgress();
            } else if ("cityname" == button.attr("name")) {

                setTimeout(function () {
                    if ($('[name="cityNameVal"]').val()) {
                        $('[name="cityNameVal"]').parent().children('label').remove()
                    }
                }, 500);

                form.find('[name="cityNameVal"]').val(button.text());
                $('#cityDropdown').html(button.text().replace(/(<([^>]+)>)/ig, ''));
                $('#cityDropdown').addClass('selected-vals');
                checkStepperProgress();
            }
        });

        $(".otp-value").on("input keyup", async function (event) {
            console.log('Keyup Data',  $(this).val());
            var pastedData;

            var clipboardData = event.originalEvent.clipboardData || window.clipboardData;

            if (clipboardData) {
                pastedData = clipboardData.getData('text');
                $(".otp-value").val(pastedData).trigger("input");
            }

            console.log('Pasted Data Input', pastedData);

            if ($(this).val().length == 6) {
                let mobNumber = $('.book-test-drive-form').find('[name="mobileno"]').val();
                let otpEntered = $(this).val();
                if (isValidOtp(mobNumber, otpEntered)) {
                    $(this).parent().removeClass('invalid--otp').addClass('valid--otp');
                    const phCodemobNumber = "+91" + mobNumber;
                    let hashedMobile = await hashedValue(phCodemobNumber);
                    localStorage.setItem("analyticsHashedMobile", hashedMobile);

                    const phCodemobNumberMeta = "91" + mobNumber;
                    let hashedMobileMeta = await hashedValue(phCodemobNumberMeta);
                    localStorage.setItem("analyticsHashedMobileMeta", hashedMobileMeta);
                    checkStepperProgress();

                    getOTPevents('verified');
                }
                else {
                    $(this).parent().removeClass('valid--otp');
                    $(this).parent().addClass('invalid--otp');
                    checkStepperProgress();
                }
            }
            else {
                $(this).parent().removeClass('valid--otp');
                $(this).parent().removeClass('invalid--otp');
            }
        });

        function navigationStepper(currentButton) {
            $('.festive-campaign .step.active .step-number').replaceWith('<img class="step-number tick-img" src="/content/dam/hero-aem-website/festive-campaign/finished-stepper.png" alt="Tick Image" />');
            $('.festive-campaign .step.active .line').css("background", `linear-gradient(to right, #fff 100%, transparent 100%`);
            let currentStep = currentButton.attr('data-next');
            $(`#step${currentStep}`).removeClass('active-content');
            $('.step').eq(currentStep - 1).removeClass('active');

            currentStep = parseInt(currentStep) + 1;

            if (currentStep == 3) {
                $('.thanks-wrapper .sub-text span').html($('.influencer-radio.active .influencer-text').text());
                $('.thanks-wrapper .decorator-top').addClass('animate fadeInDownStand');
                $('.thanks-wrapper .text-wrapper, .thanks-wrapper .final-cta-campaign').addClass('animate fadeInUpStand');
            }

            $(`#step${currentStep}`).addClass('active-content');
            $('.step').eq(currentStep - 1).addClass('active');
        }

        if ($(".book-test-drive-form").length > 0) {
            customValidation($(".book-test-drive-form"));
        }

        function customValidation($form) {
            // for mobile no fields
            jQuery.validator.addMethod("mobilenoOnly", function (value, element) {
                return /^(6|7|8|9)[0-9]\d{8}$/i.test(value);
            });
            //for allow numbers only
            jQuery.validator.addMethod("numbersOnly", function (value) {
                return /^[0-9]+$/i.test(value);
            });
            //for allow only character
            jQuery.validator.addMethod("alphabetsOnly", function (value) {
                return /^[A-Za-z]+$/i.test(value);
            });
            jQuery.validator.addMethod("otpverified", function (value) {
                return isValidOtp($form.find('[name="mobileno"]').val(), $form.find('[name="otp"]').val());
            });
            //   book-test-drive-form
            $form.validate({
                ignore: [],
                rules: {
                    fullname: {
                        required: true,
                        alphabetsOnly: true,
                    },
                    mobileno: {
                        required: true,
                        numbersOnly: true,
                        mobilenoOnly: true,
                    },
                    otp: {
                        required: true,
                        numbersOnly: true,
                        otpverified: true,
                    },
                    vehicleNameVal: {
                        required: true,
                    },
                    stateNameVal: {
                        required: true,
                    },
                    cityNameVal: {
                        required: true,
                    },
                    captcha: {
                        required: ".ignore-validation:visible",
                    }
                },
                messages: {
                    fullname: {
                        required: $('[name="fullname"]').data("validation-msg-req"),
                        alphabetsOnly: $('[name="fullname"]').data(
                            "validation-msg-format"
                        ),
                    },
                    mobileno: {
                        required: $('[name="mobileno"]').data("validation-msg-req"),
                        numbersOnly: $('[name="mobileno"]').data("validation-msg-req"),
                        mobilenoOnly: $('[name="mobileno"]').data("validation-msg-req"),
                    },
                    otp: {
                        required: $('[name="otp"]').data("validation-msg-req"),
                        numbersOnly: $('[name="otp"]').data("validation-msg-format"),
                        otpverified: $('[name="otp"]').data("validation-msg-format"),
                    },
                    vehicleNameVal: {
                        required: $('[name="vehicleNameVal"]').data("validation-msg-req")
                    },
                    stateNameVal: {
                        required: $('[name="stateNameVal"]').data("validation-msg-req"),
                    },
                    cityNameVal: {
                        required: $('[name="cityNameVal"]').data("validation-msg-req"),
                    },
                    captcha: {
                        required: $('[name="captcha"]').data("validation-msg-req"),
                    }
                },
            });
        }

        function generateStateDropDown(selector) {
            let form = $(selector).closest("form");
            let stateListNew = form
                .find('[name="statename"]')
                .parents(".cust-drop-down")
                .find(".cust-dropdown-menu");

            form.find('[name="cityname"]').attr("disabled", true);

            let stateCityList = JSON.parse(sessionStorage.getItem("stateCityList"));

            stateCityList?.forEach(function (listData, index) {
                const appendHtml = `<li class="font-montserrat-regular font-weight-500" value="${listData.label}"><a
                                       href="javascript:void(0)">${listData.label}</a></li>`;
                $(stateListNew).append(appendHtml);
            })
        }

        function populateCityDropdown(listSelector, selectedState, cityName) {
            if (cityName != "") {
                let form = $(listSelector).closest("form");
                let cityField = form.find('[name="cityname"]');
                cityField.text(
                    form.find('[name="cityname"]').attr("data-default-label")
                );
            }

            if (listSelector[0] !== undefined) {
                let newList = JSON.parse(sessionStorage.getItem("stateCityList"));

                listSelector.empty();

                let matchedCity = newList.filter(state => state.label == selectedState);

                if (matchedCity.length > 0) {

                    const [{ cities }] = matchedCity;
                    cities?.forEach(function (listData, index) {
                        const appendHtml = `<li class="font-montserrat-regular font-weight-500 hero-commerce" value="${listData.label}">
                                                <a href="javascript:void(0)">${listData.label}</a>
                                            </li>`;
                        $(listSelector).append(appendHtml);
                    })
                    $('[name="cityname"]').removeAttr("disabled");
                } else {
                    throw new Error("Selected state not found in data");
                }
            }
        }

        function getQueryParams(search) {
            let params = {};
            let definitions = search.split("&");
            definitions.forEach(function (val, key) {
                let parts = val.split("=", 2);
                if (parts[1] != undefined && parts[1].length > 1) {
                    params[parts[0]] = decodeURIComponent(parts[1]);
                }
            });
            return {
                utm_source: params["utm_source"],
                utm_medium: params["utm_medium"],
                utm_term: params["utm_term"],
                utm_content: params["utm_content"],
                utm_campaign: params["utm_campaign"],
            };
        }

        async function bookridesubmit(currentForm, currentBtn) {
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let category = window.location.pathname.split("/")[2];
            $(currentForm).find(".book-test-submit").attr("disabled", "disabled");
            let vehicleName = $('.book-test-drive-form').find('[name="vehiclename"]').text();
            var validationType = "otp";
            let _utmContent = $("#utmcontent").data("utmcontent");
            let _getParams = getQueryParams(window.location.search.slice(1));
            let _utmsource = $("#utmsource").data("utmsource");
            let pageTitle = document.title;
            let source;

            source = _getParams.utm_source
                ? _getParams.utm_source
                : _utmsource
                    ? `AEM-${getOS()}-${_utmsource}`
                    : `AEM-${getOS()}-${category}-${pageTitle}-${validationType}`;
            var dataObj = {
                vehicle_purchase_plan: '',
                mx_Interested_in_Buying_Used_Vehicle: '',
                bike_model: vehicleName,
                name: $(currentForm).find('[name="fullname"]').val().trim(),
                mobile: $(currentForm).find('[name="mobileno"]').val(),
                otp: validationType == "otp" ? $(currentForm).find('[name="otp"]').val() : "",
                captcha:
                    validationType == "captcha" ? $(currentForm).find('[name="captcha"]').val() : "",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                reqID: sessionStorage.getItem("tempID"),
                dealer_code: null,
                variation_type: "festive-influencer-campaign",
                dealer_name: "",
                topic: null,
                suggestion: null,
                section: null,
                source: source,
                enqsource: "",
                utm_source: _getParams.utm_source,
                utm_medium: _getParams.utm_medium,
                utm_term: _getParams.utm_term,
                utm_content: _utmContent ? _utmContent : _getParams.utm_content,
                utm_campaign: _getParams.utm_campaign,
                source_campaign: $('.book-test-submit').data('utm-label')
            };

            let analyticsValue = {
                formname: "Join Us Form",
                formtype: "static",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                influencername: "NA",
                preferredlanguage: "NA"
            }

            let errorAnalyticsValue = {
                formname: "Join Us Form",
                formtype: "static",
                errorfields: "API",
                city: $(currentForm)
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $(currentForm)
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and")
            }

            try {
                $.ajax({
                    url: defaultservlet + ".generatelead.html",
                    type: "POST",
                    data: JSON.stringify(dataObj),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (resp) {
                        if (resp && JSON.parse(JSON.stringify(resp)).login == "true") {
                            $(currentForm).find(".book-test-submit").removeAttr("disabled");
                        } else {
                            $(currentForm).find(".book-test-submit").removeAttr("disabled");
                        }
                        if (resp?.RelatedId) {
                            let encRelatedID = getEncryptString(resp.RelatedId);
                            sessionStorage.setItem('festivecampaignID', encRelatedID);
                            sendFormSuccessEvent(analyticsValue);
                        }
                        navigationStepper(currentBtn);
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                    error: function (error) {
                        console.log('Error', error);
                        $(currentForm).find(".book-test-submit").removeAttr("disabled");
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                        sendFormErrorEvent(errorAnalyticsValue);
                    },
                });
            }
            catch (e) {
                console.log('Error', e);
                $(currentForm).find(".book-test-submit").removeAttr("disabled");
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                sendFormErrorEvent(errorAnalyticsValue);
            }

        }

        $(".book-test-submit").on("click", function (e) {
            $('.festive-loader').removeClass('d-none');
            $('.festive-loader .festive-loader-icon').addClass('animate fadeInUpStand');
            let currentForm = $(this).closest("form");
            let currentBtn = $(this);
            const checkValidation = checkStepperProgress();
            if (checkValidation == 6 && $('.form-checkbox-mark.active').length > 0) {
                submitClicked = true;
                bookridesubmit(currentForm, currentBtn);
            } else {
                let formerrorList = currentForm.data("validator").errorList;
                let fieldlist = "";
                $.each(formerrorList, function (key, value) {
                    if ("" !== fieldlist) {
                        fieldlist = fieldlist + "|";
                    }
                    fieldlist = fieldlist + formerrorList[key].element.name;
                });
                if (!fieldlist.includes("otp") && $('#otp').val() === '') {

                    fieldlist = fieldlist + '|' + 'otp'
                }
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                let errorAnalyticsValue = {
                    formname: "Join Us Form",
                    formtype: "static",
                    errorfields: fieldlist,
                    city: $(currentForm)
                        .find('[name="cityname"]')
                        .text()
                        .replaceAll("&amp;", "and")
                        .replaceAll("&", "and")
                        .trim(),
                    state: $(currentForm)
                        .find('[name="statename"]')
                        .text()
                        .replaceAll("&amp;", "and")
                        .replaceAll("&", "and")
                        .trim()
                }
                sendFormErrorEvent(errorAnalyticsValue);
            }
        });

        $('.submit-influencer-btn').on("click", function (e) {
            $('.festive-loader').removeClass('d-none');
            $('.festive-loader .festive-loader-icon').addClass('animate fadeInUpStand');
            let defaultservlet = document.getElementById("defaultservlet").value + "/jcr:content";
            let currentBtn = $(this);

            let sessionCampaignId = sessionStorage.getItem("festivecampaignID");
            let requestCampaignID = "";
            requestCampaignID = decryptData(sessionCampaignId, key, iv);

            var dataObj = {
                variation_type: "festive-update-lead",
                leadId: requestCampaignID,
                mx_Language: $('.language-options .lang-content-options.active-option-checks input').attr('value'),
                mx_Influencer_Name: $(".left-module .influencer-radio.active .influencer-text").text()
            };

            let analyticsValue = {
                formname: "Influencer Form",
                formtype: "static",
                city: $('.book-test-drive-form')
                    .find('[name="cityname"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                state: $('.book-test-drive-form')
                    .find('[name="statename"]')
                    .text()
                    .replaceAll("&amp;", "and")
                    .replaceAll("&", "and"),
                influencername: $(".left-module .influencer-radio.active .influencer-text").text(),
                preferredlanguage: $('.language-options .lang-content-options.active-option-checks input').attr('value')
            }

            try {
                $.ajax({
                    url: defaultservlet + ".updatelead.html",
                    type: "POST",
                    data: JSON.stringify(dataObj),
                    dataType: "json",
                    contentType: "application/json",
                    success: function (resp) {
                        if (resp?.Status == "Success") {
                            sessionStorage.removeItem("festivecampaignID");
                            sendFormSuccessEvent(analyticsValue);
                            navigationStepper(currentBtn);
                        }
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                    error: function (error) {
                        console.log('Error', error);
                        $('.festive-loader').addClass('d-none');
                        $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
                    },
                });
            }
            catch (e) {
                console.log('Error', e);
                $('.festive-loader').addClass('d-none');
                $('.festive-loader .festive-loader-icon').removeClass('animate fadeInUpStand');
            }
        })

        $('.final-cta-campaign').on("click", function (e) {
            const analyticsValues = {
                name: $(this).data('cta-val'),
                URL: $(this).data('url') ? $(this).data('url') : 'NA',
                position: $(this).data('cta-position'),
            }
            sendLinkCkickEvent(analyticsValues);
            let urlRedirector = $(this).data('url');
            if (urlRedirector) {
                window.location.href = urlRedirector;
            }
        })

        $(".influencer-radio .thumbnail-img, .influencer-radio .influencer-options").on("click", function (e) {
            $('.influencer-radio').removeClass('active');
            $(this).parent().addClass('active');
            $(this).parent().find('.influencer-options').prop("checked", true);
        });

        $(".language-options .lang-content-options").on("click", function (e) {
            $('.lang-content-options').removeClass('active-option-checks');
            $(this).addClass('active-option-checks');
            $(this).find('.options').prop("checked", true);
        });


        $('.influencer-radio').eq(0).find('.influencer-options').prop("checked", true);
    }

    // Analytics Changes

    function checkDuplicateArray(arr, eventName) {
        const index = arr.findIndex(obj => obj?.event == eventName);

        return index;
    }

    function getPageDetails(isErrorPage = false) {
        let pagePath = window.location.pathname;
        let slug = pagePath.split("/");
        let actualSlug = slug[1].replace(".html", "");
        let primary_category = window.location.origin;
        let fullSplit = primary_category.split("//");
        let pcSplit = fullSplit[1].split(".");
        let title = $("title").text();
        let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
        let countryCode = "in";
        if (countryRegrex && countryRegrex.length > 1) {
            countryCode = countryRegrex[1];
        }
        let sub1 = "";
        let sub2 = "";
        let sub3 = "";
        let sub4 = "";
        if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
            sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
                sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
                sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
            if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
                sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
        } else {
            if (slug[2]) sub1 = slug[2].replace(".html", "");
            if (slug[3]) sub2 = slug[3].replace(".html", "");
            if (slug[4]) sub3 = slug[4].replace(".html", "");
            if (slug[5]) sub4 = slug[5].replace(".html", "");
        }
        return {
            pagename: title,
            server: window.location.hostname,
            fullURL: window.location.href,
            category: sub1,
            categoryLevel1: sub2,
            categoryLevel2: sub3,
            categoryLevel3: sub4,
            isErrorPage: isErrorPage,
            pageType: "AEM",
            language: "en",
            country: countryCode,
            platform: getOS(),
            custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
            loggedIn: isSignedIn(),
            previousPageValue: document.referrer,
        };
    }

    function sendLinkCkickEvent(webValue) {
        if (window.digitalData) {
            const pageData = {
                event: "linkClicked",
                web: {
                    webInteraction: webValue,
                },
                user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
            }
            window.digitalData.push(pageData);
        }
    }

    function sendFormSuccessEvent(formValues) {
        if (window.digitalData) {
            const pageData = {
                event: "Form Success",
                formDetails: formValues,
                user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
            }
            window.digitalData.push(pageData);
        }
    }

    function sendFormErrorEvent(formValues) {
        if (window.digitalData) {
            const pageData = {
                event: "Form Error",
                formDetails: formValues,
                user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
            }
            window.digitalData.push(pageData);
        }
    }

    function sendFormStartEvent(formValues) {
        if (window.digitalData) {
            const pageData = {
                event: "Form Start",
                formDetails: formValues,
                user: {
                    hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                    hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                    hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                    customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                },
                page: getPageDetails(),
            }

            const isEventPresent = checkDuplicateArray(window.digitalData, "Form Start");
            if (isEventPresent == -1) {
                window.digitalData.push(pageData);
            }
        }
    }

    function getOTPevents(otpState) {
        if(otpState == 'request') {
            if (window.digitalData) {
                const pageData = {
                    event: "OTP Requested",
                    formDetails: {
                        formname: "Influencer Form",
                        formtype: "static",
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails()
                };
                window.digitalData.push(pageData);
                _satellite.track("OTP Requested");
            }
        }
        if(otpState == 'success') {
            if (window.digitalData) {
                const pageData = {
                    event: "OTP Success",
                    formDetails: {
                        formname: "Influencer Form",
                        formtype: "static",
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails()
                }
                window.digitalData.push(pageData);
            }
        }
        if(otpState == 'fails') {
            if (window.digitalData) {
                const pageData = {
                    event: "OTP Fails",
                    formDetails: {
                        formname: "Influencer Form",
                        formtype: "static",
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails()
                }
                window.digitalData.push(pageData);
            }
        }
        if(otpState == 'verified') {
            if (window.digitalData) {
                const pageData = {
                    event: "OTP Verified",
                    formDetails: {
                        formname: "Influencer Form",
                        formtype: "static",
                    },
                    user: {
                        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
                        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
                        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
                        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
                    },
                    page: getPageDetails()
                }
                window.digitalData.push(pageData);
            }
        }
    }
})
$(document).ready(function () {
  try {
    if (!$("#festive-popup-container").length) {
      return;
    }
    festivepopup();
  } catch (error) {
    console.error(error);
  }
});
 
function festivepopup() {
  let overlay = document.getElementById("festive-popup-overlay");
  let popup = document.getElementById("festive-popup");
  let closePopupBtn = document.getElementById("closePopupBtn");
  var videoduration = $(".video-container").data("videoDuration");
  var gif = $('#festive-popup-gif').length > 0;
  var video = ('#festive-popup-gif').length > 0;
  setTimeout(function () {
    $("#flag-image").attr(
      "src",
      "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/festive-popup-left.png"
    );
    $("#flag-image-right").attr(
      "src",
      "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/festive-popup-right.png"
    );
    $("#close-popup-icon").attr(
      "src",
      "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/close-icon-festive-popup.png"
    );
    $(".festive-gif1, .festive-gif2, .festive-gif3, .festive-gif4").attr(
      "src",
      "/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/festive-popup-gif.gif"
    );
    $("#overlay").fadeIn();
    $("#festive-popup").css({
      transform: "translateY(0%)",
      opacity: "1",
    });
  }, 3000);
  $("#festive-popup").on("transitionend", function (event) {
    openPopup();
 
    if (gif) {
      $("#festive-popup-gif").css("display", "block");
      $(".popup-title").css("font-size", "32px");
 
      setTimeout(() => {
        $("#festive-popup-gif").css("display", "none");
        $(".carousel-feature-container").css({
          transform: "translateY(0%)",
          opacity: "1",
        });
        $(".flag-container").css({
          transform: "translateY(-0%)",
          opacity: "1",
        });
      }, videoduration * 1000);
    }
    if (video) {
      $("#festive-popup-video").css("display", "block");
    }
 
  });
  function openPopup() {
    $("html").css("overflow", "hidden");
    const element$ = $(".festive-carousel-wrapper");
    var autoplay = element$.data("slick-autoplay");
    var autoplaySpeedpre = element$.data("slick-autoplay-speed");
    var videoduration = $(".video-container").data("videoDuration");
    var autoplaySpeed = autoplaySpeedpre + videoduration * 1000;
    var speed = element$.data("slick-speed");
    $(".festive-popup-carousel").slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      dots: true,
      autoplay: true,
      autoplaySpeed: autoplaySpeed,
      infinite: false,
      rtl: false,
      speed:speed,
    });
    if (autoplay) {
      let carouselDurationSeconds = autoplaySpeed / 1000 + "s";
      $(".slick-dots button").css(
        "animation-duration",
        carouselDurationSeconds
      );
 
      $("#festive-popup-video").on("ended", function () {
        $("#festive-popup-video").css("display", "none");
        $(".flag-container").css({
          transform: "translateY(-0%)",
          opacity: "1",
        });
        $(".popup-title").css("font-size", "32px");
        $(".carousel-feature-container").css({
          transform: "translateY(0%)",
          opacity: "1",
        });
      });
 
      $(".festive-popup-carousel").on(
        'beforeChange',
        function
        (event, slick, currentSlide, nextSlide){
           if(nextSlide!=0){
            $(".popup-title").css({
              'line-height':'28.4px',
              "font-size":"24px"
            });
            $(".flag-container").css({
              transform: "translateY(-100%)",
              opacity: "1",
            });
            $('.video-container').css("display", "none")
            $("#festive-popup-video").css("display", "none");
            $(".carousel-feature-container").css("display", "flex");
            $("#festive-button-container").css({
              transform: "translateY(-110%)",
              opacity: "1",
            });
           }
           if(nextSlide==0){
            $(".popup-title").css({
              'line-height':'38.4px',
              "font-size":"32px"
            });
            $(".flag-container").css({
              transform: "translateY(-0%)",
              opacity: "1",
            });
            $("#festive-button-container").css({
              transform: "translateY(0%)",
              opacity: "0",
            });
           }
          });
 
 
      $(".festive-popup-carousel").on(
        "afterChange",
        function (event, slick, currentSlide, nextSlide) {
 
          if (currentSlide != 0) {
            $(this).slick("setOption", "autoplaySpeed", autoplaySpeedpre, true);
            let carouselDurationSeconds = autoplaySpeedpre / 1000 + "s";
            $(".slick-dots button").css(
              "animation-duration",
              carouselDurationSeconds
            );
            if (currentSlide === slick.$slides.length - 1) {
             
              setTimeout(() => {
              slick.slickSetOption("autoplay", false, true);
              autoplaySpeedpre =0;
            },autoplaySpeedpre);
            }
          }
          if (currentSlide == 0) {
            let carouselDurationSeconds = autoplaySpeedpre / 1000 + "s";
            $(".slick-dots button").css(
              "animation-duration",
              carouselDurationSeconds
            );
           
          }
        }
      );
    }
    $("li.cmp-carousel__indicator").click(function () {
      var clickedIndex = $(this).index();
      $(".festive-popup-carousel.carousel").slick("slickGoTo", clickedIndex);
      $(this).slick("slickPause");
    });
    $(".festive-popup-carousel").on(
      "afterChange",
      function (event, slick, currentSlide, nextSlide) {
        $(".current-transitioning-slide").removeClass(
          "current-transitioning-slide"
        );
      }
    );
  }
 
  function closePopup() {
    $("html").css("overflow-y", "scroll");
    $("#overlay").fadeOut();
    $(popup).css({
      transform: "translateY(150%)",
    });
    setTimeout(function () {
      $('#festive-popup-container').addClass("d-none");
      $("html").css("overflow-y", "scroll");
      $(popup).addClass("d-none");
    }, 400);
  }
 
  closePopupBtn.addEventListener("click", closePopup);
  window.addEventListener("click", function (event) {
    if (event.target === overlay) {
      closePopup();
    }
  });
 
}
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
r=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k<a;k++)c[j+k>>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535<e.length)for(k=0;k<a;k+=4)c[j+k>>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e<a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++){var k=c[j>>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j+=2)e[j>>>3]|=parseInt(a.substr(j,
2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++)e.push(String.fromCharCode(c[j>>>2]>>>24-8*(j%4)&255));return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j++)e[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},
q=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q<a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,
e)).finalize(b)}}});var n=d.algo={};return d}(Math);
(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join("")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<
l;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),
f=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,
m,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,
E,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/
4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);
(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,
l)}})();
CryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},
finalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return("string"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return("string"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=
c[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,
e,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,
this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,
1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},
decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,
b.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();
(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,
16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>
8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=
d[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();
function implementDigitalData() {
  if ($('#contact-us-container').length > 0) {
    if (window.digitalData) {
      if (!$(this).parent().is('[data-office]')) {
        window.digitalData = {
          event: "Phone Number Clicked",
          PhoneDetails: {
            phonenumber: $(this).text().replace(/[\n,]/g, "").trim(),
            DealerName: "Not Applicable",
            State: $('.showAdd h1').text().trim(),
            City: "Not Applicable",
            Vehicle: "Not Applicable",
            Page: "Contact Us",
          },
        };
      }
      else {
        window.digitalData = {
          event: "Phone Number Clicked",
          PhoneDetails: {
            phonenumber: $(this).text().replace(/[\n,]/g, "").trim(),
            DealerName: $(this).parent().data("office"),
            State: $('.showAdd h1').text().trim(),
            City: "Not Applicable",
            Vehicle: "Not Applicable",
            Page: "Contact Us",
          },
        };
      }
    }
  }
  if ($('#contact-metrology-datalayer').length > 0) {
    window.digitalData = {
      event: "Phone Number Clicked",
      PhoneDetails: {
        phonenumber: $(this).text().replace(/[\n,]/g, "").trim(),
        Page: "Contact Us - Legal Metrology",
      },
    };
  }
  if ($('#find-dealer-link').length > 0) {
    window.digitalData = {
      event: "Phone Number Clicked",
      PhoneDetails: {
        PhoneNumber: $(this).text().replace(/[\n,]/g, "").trim(),
        DealerName: $(this).parent().parent().parent().find('.near-you-h3').text().trim(),
        State: $('.near-you-section button#stateDropdown').text().trim(),
        City: $('.near-you-section button#cityDropdown').text().trim(),
        Vehicle: pageTitle,
        Page: pageTitle
      }
    };
  }
}

function goodlifeAnalytics() {
  let loginStatus = sessionStorage.getItem("data");
  let planSelected = $(this).val().toLowerCase().replace(/\s*select\s*/g, '');
  if (window.digitalData) {
    window.digitalData = {
      event: "Good Life Plan Selected",
      GoodLifeDetails: {
        PageName: $('title').text(),
        SignedIn: (loginStatus != null) ? "LoggedIn" : "Not LoggedIn",
        PlanName: planSelected
      }
    }
  }
}

function generateDataLayer(e){
  let ridename = e.currentTarget.querySelector('div.durationdetails').textContent.trim();
  let ridedate = e.currentTarget.querySelector('div.date-month').textContent.trim();
  window.digitalData = {
    event: 'Xclan Ride Selected',
    XclanRideDetails: {
      RideName: ridename,
      Date: ridedate
    }
  }
}

function generatexclanDatalayer(){
  let destination = '';
  $(".ride-list").each(function () {
    if ($(this).text().includes('Destination'))
      destination = $(this).text().replace('Destination', '').trim();
  });
  window.digitalData = {
    event: 'Xclan Ride Registration Step 1',
    XclanRideDetails: {
      RideName: $('.xclan-heading h2').text(),
      Date: $('.ride-date').text(),
      Destination: destination
    }
  }
}

let submitClicked = false;
function getOS() {
  var userAgent = window.navigator.userAgent,
    platform =
      window.navigator?.userAgentData?.platform ||
      window.navigator.platform,
    macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
    windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
    iosPlatforms = ["iPhone", "iPad", "iPod"],
    os = null;

  if (macosPlatforms.indexOf(platform) !== -1) {
    os = "Mac OS";
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os = "iOS";
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os = "Windows";
  } else if (/Android/.test(userAgent)) {
    os = "Android";
  } else if (/Linux/.test(platform)) {
    os = "Linux";
  }

  return os;
}

$(document).ready(function () {
  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
    let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }

  $("form").attr("translate", "no");

  $('a[href^="tel"]').bind("click", implementDigitalData);

  $("a, button").on("click", function () {
    let btnVal = $(this).text();
    let bookNow = 'book now';
    let requestCallBack = 'request call back';
    let requestCallBack2 = 'request callback'
    let knowMore = 'know more';
    let knowMore2 = 'Know More >'
    let view = 'view 360';
    let view2 = 'explore';
    let testRide = 'test ride';
    let component = $(this).parent().attr("id");
    let pageTitle = $("title").text();
    let slideNum = 0;
    let category = window.location.pathname.split("/")[2];
    let splitedUrl = window.location.origin.split('//');
    let splitedDomain = splitedUrl[1].split('.');
    let siteCategory;
    if(splitedDomain[1] === 'heromotocorp'){
      siteCategory = 'corporate'
    }
    if(splitedDomain[1] === 'dealers'){
      siteCategory = 'dealer'
    }
    if ($(this).parent().attr('id') == "adcarousel") {
      $('.carousel-item#adcarousel').each(function () {
        if ($(this).hasClass('active')) {
          slideNum = $(this).index() + 1;
        }
      })
    }
    else {
      $('.carousel-item#carousel').each(function () {
        if ($(this).hasClass('active')) {
          slideNum = $(this).index() + 1;
        }
      })
    }
    if(!$('#student__campaign').length) {
      $(this).parent().find('.send-otp-btn').removeClass("show")
    }
    if ($(this).attr('aa-data-cta')) {
      component = $(this).attr('aa-data-cta');
    }
    else if ($(this).parent().attr("id")) {
      component = $(this).parent().attr("id");
    }
    if (component == undefined) {
      component = 'Not a Slider';
      slideNum = 0;
    }
    if (
      btnVal &&
      (btnVal.toLowerCase().trim() == bookNow.toLowerCase()) &&
      (!$("#rideseventlp").length)
    ) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: btnVal.trim(),
              URL: $(this).attr("href") || "NA",
              position: pageTitle + "-" + component + "-" + slideNum,
            },
          },
          productDetails:{
            productName : "NA",
            variant: "NA", // selected variant
            colour: "NA", // selected color
            dealer: "NA", // selected dealer name
          },
          user:{
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
    if (
      btnVal && ((btnVal.toLowerCase().trim() == requestCallBack.toLowerCase()) ||
      (btnVal.toLowerCase().trim() == requestCallBack2.toLowerCase()))
    ) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: btnVal.trim(),
              URL: $(this).attr("href") || "NA",
              position: pageTitle + "-" + component + "-" + slideNum,
            },
          },
          productDetails:{
            productName : "NA",
            variant: "NA", // selected variant
            colour: "NA", // selected color
            dealer: "NA", // selected dealer name
          },
          user:{
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
    if (
      btnVal &&
      ((btnVal.toLowerCase().trim() == knowMore.toLowerCase()) ||
        (btnVal.toLowerCase().trim() == knowMore2.toLowerCase())) &&
      (!$("#rideseventlp").length)
    ) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: btnVal.trim(),
              URL: $(this).attr("href") || "NA",
              position: pageTitle + "-" + component + "-" + slideNum,
            },
          },
          productDetails:{
            productName : "NA",
            variant: "NA", // selected variant
            colour: "NA", // selected color
            dealer: "NA", // selected dealer name
          },
          user:{
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
    if (
      btnVal && ((btnVal.toLowerCase().trim() == view.toLowerCase()) ||
      (btnVal.toLowerCase().trim() == view2.toLowerCase()))
    ) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: btnVal.trim(),
              URL: $(this).attr("href") || "NA",
              position: pageTitle + "-" + component + "-" + slideNum,
            },
          },
          productDetails:{
            productName : "NA",
            variant: "NA", // selected variant
            colour: "NA", // selected color
            dealer: "NA", // selected dealer name
          },
          user:{
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
    if (btnVal && btnVal.toLowerCase().trim() == testRide.toLowerCase()) {
      if (window.digitalData) {
        window.digitalData.push({
          event: "linkClicked",
          web: {
            webInteraction: {
              name: btnVal.trim(),
              URL: $(this).attr("href") || "NA",
              position: pageTitle + "-" + component + "-" + slideNum,
            },
          },
          productDetails:{
            productName : "NA",
            variant: "NA", // selected variant
            colour: "NA", // selected color
            dealer: "NA", // selected dealer name
          },
          user:{
            hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
            hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
            hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
            customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
          },
          page: getPageDetails(),
        });
      }
    }
  });

  let pagePath = window.location.pathname;
  let slug = pagePath.split('/');
  let actualSlug = slug[1].replace('.html', '');
  let primary_category = window.location.origin;
  let fullSplit = primary_category.split('//');
  let pcSplit = fullSplit[1].split('.');
  let title = $('title').text();
  let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
  let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
  let sub1 = "";
  let sub2 = "";
  let sub3 = "";
  let sub4 = "";
  if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
    sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
      sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
      sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
      sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
  } else {
    if (slug[2]) sub1 = slug[2].replace(".html", "");
    if (slug[3]) sub2 = slug[3].replace(".html", "");
    if (slug[4]) sub3 = slug[4].replace(".html", "");
    if (slug[5]) sub4 = slug[5].replace(".html", "");
  }

  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }

  if (window.digitalData) {
    window.digitalData.push({
      event: "pageView",
      user: {
        hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
        hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
        hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
        customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
      },
      page: {
        pagename: title,
        server: window.location.hostname,
        fullURL: window.location.href,
        category: sub1,
        categoryLevel1: sub2,
        categoryLevel2: sub3,
        categoryLevel3: sub4,
        isErrorPage: false,
        pageType: "AEM",
        language: "en",
        country: countryCode,
        platform: getOS(),
        custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
        loggedIn: isSignedIn(),
        previousPageValue: document.referrer,
      },
    });
  }

  $('header .dropdown-item.logout-dd-linkWrap').click(function (event) {
    let spanText = $(this).find('span').text();
    let lowercaseString = spanText.replace(/\s+/g, '').toLowerCase();
    // let cookieData = decodeURIComponent(atob(sessionStorage.getItem("data")));
    // let parseCookieData = JSON.parse(cookieData);
    // let userId = parseCookieData && parseCookieData.mobile;
    if (window.digitalData) {
      if (lowercaseString == "myaccount") {
        if (window.digitalData) {
          window.digitalData.push({
            event: "My Account Link Clicked",
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: {
              pagename: title,
              server: window.location.hostname,
              fullURL: window.location.href,
              category: sub1,
              categoryLevel1: sub2,
              categoryLevel2: sub3,
              categoryLevel3: sub4,
              isErrorPage: false,
              pageType: "AEM",
              language: "en",
              country: "in",
              platform: getOS(),
              custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
              loggedIn: isSignedIn(),
              previousPageValue: document.referrer,
            },
          });
        }
      } else if (lowercaseString == "myvehicle") {
        if (window.digitalData) {
          window.digitalData.push({
            event: "My Vehicles Link Clicked",
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: {
              pagename: title,
              server: window.location.hostname,
              fullURL: window.location.href,
              category: sub1,
              categoryLevel1: sub2,
              categoryLevel2: sub3,
              categoryLevel3: sub4,
              isErrorPage: false,
              pageType: "AEM",
              language: "en",
              country: "in",
              platform: getOS(),
              custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
              loggedIn: isSignedIn(),
              previousPageValue: document.referrer,
            },
          });
        }
      } else if (lowercaseString == "logout") {
        if (window.digitalData) {
          window.digitalData.push({
            event: "Logout",
            user: {
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: {
              pagename: title,
              server: window.location.hostname,
              fullURL: window.location.href,
              category: sub1,
              categoryLevel1: sub2,
              categoryLevel2: sub3,
              categoryLevel3: sub4,
              isErrorPage: false,
              pageType: "AEM",
              language: "en",
              country: "in",
              platform: getOS(),
              custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
              loggedIn: isSignedIn(),
              previousPageValue: document.referrer,
            },
          });
        }
      }
    }
  })

  if ($(".view-plan-container .text .cmp-text#re-new-plans p").hasClass("d-none")) {
    localStorage.setItem('renewal', 'no');
  }
  else if ($(".view-plan-container .text .cmp-text#re-new-plans p a span").text().toLowerCase() == 'renew plans') {
    localStorage.setItem('renewal', 'yes');
  }

  $('.enrollment-form-wrapper .proceed').on('click', function () {
    let isSignedIn = "Not Logged In";
    let gender = "";
    let renew = sessionStorage.getItem("renewal");
    if ($('input[name="GEDNER"]:checked').val() == 1) gender = "Male";
    else if ($('input[name="GEDNER"]:checked').val() == 2) gender = "Female";
    else gender = "";
    if (sessionStorage.getItem("data")) isSignedIn = "Logged In";
    if (
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-499" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-399" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-299" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") == "good-life-199"
    ) {
      window.digitalData.push({
        event: "Goodlife Step1",
        goodlifeDetails: {
          city: $('select[name="CITY"] option:selected').val(),
          state: $('select[name="STATE"] option:selected').val(),
          vinNumber: $("input[name=VIN]").val(),
          vehicleModel: $("input[name=MODEL_CODE]").val(),
          membershipFor: $('input[name="IS_OWNER_USER"]:checked').val(),
          gender: gender,
          planName: $(".xClan-banner-title").text(),
          isRenewal: renew,
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
        },
        page: {
          pagename: title,
          server: window.location.hostname,
          fullURL: window.location.href,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          isErrorPage: false,
          pageType: "AEM",
          language: "en",
          country: "in",
          platform: getOS(),
          custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
          loggedIn: isSignedIn,
          previousPageValue: document.referrer,
        },
      });
    }

    if ($('.enrollment-form .enrollment-form-wrapper').attr('data-formtype') == 'xclan' && $('input[name=VIN]').val() == '') {
      window.digitalData = {
        event: 'Xclan Registration Step 1',
        XclanMembershipDetails: {
          SignedIn: isSignedIn,
          Renewal: '',
          Model: $('select[name="model"] option:selected').text(),
          City: $('select[name="chapter"] option:selected').text()
        }
      }
    }

    if ($('.enrollment-form .enrollment-form-wrapper').attr('data-formtype') == 'xclan' && $('input[name=VIN]').val() != '') {
      if ($('input[name="GEDNER"]:checked').val() == 1)
        gender = "Male";
      else if ($('input[name="GEDNER"]:checked').val() == 2)
        gender = "Female";
      else if ($('input[name="GEDNER"]:checked').val() == 3)
        gender = "Others";
      else
        gender = "";
      window.digitalData = {
        event: 'Xclan registration Step 2',
        XclanMembershipDetails: {
          SignedIn: isSignedIn,
          Renewal: '',
          PlanName: $('.xClan-banner-title').text(),
          VinNumber: $('input[name=VIN]').val(),
          CardNumber: $('input[name=Card_Number]').val(),
          City: $('select[name="CITY"] option:selected').val(),
          Model: $('input[name=MODEL_CODE]').val(),
          Membershipfor: $('input[name="IS_OWNER_USER"]:checked').val(),
          Gender: gender,
          State: $('select[name="STATE"] option:selected').val()
        }
      }
    }
  });

  $('.submit-button-wrapper .join-ride-form-submit').on('click', function(){
    sessionStorage.setItem('paymentFor', 'xclan')
    window.digitalData={
        event: 'Xclan Ride Registration Step 2',
        XclanRideDetails:{
            Model : $('select[name="model"] option:selected').text(),
            Gender :$('input[name="GEDNER"]:checked').val(),
            Age : $('input[name=age]').val(),
            City: $('input[name=city]').val() ,
            Ride_fees:$('input[name=fees]').val()
        }
    }
})


  $('.enrollment-step .submit-button-wrapper .payment').on('click', function () {
    let isSignedIn = "Not Logged In";
    let isHeroEmployee = "No";
    let renew = sessionStorage.getItem("renewal");
    let gender = "";
    if ($('input[name="GEDNER"]:checked').val() == 1) gender = "Male";
    else if ($('input[name="GEDNER"]:checked').val() == 2) gender = "Female";
    else gender = "";
    if (sessionStorage.getItem("data")) isSignedIn = "Logged In";
    if ($('input[name="IsHeroEmployee"]:checked').val() == 1) isHeroEmployee = "Yes";
    if (
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-499" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-399" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") ==
        "good-life-299" ||
      $(".enrollment-form .enrollment-form-wrapper").attr("data-formtype") == "good-life-199"
    ) {
      sessionStorage.setItem("paymentFor", "good-life");
      window.digitalData.push({
        event: "Goodlife Step2",
        goodlifeDetails: {
          city: $('select[name="CITY"] option:selected').val() ?? "",
          state: $('select[name="STATE"] option:selected').val() ?? "",
          vinNumber: $("input[name=VIN]").val() ?? "",
          vehicleModel: $("input[name=MODEL_CODE]").val() ?? "",
          membershipFor: $('input[name="IS_OWNER_USER"]:checked').val() ?? "",
          gender: gender,
          planName: $(".xClan-banner-title").text() ?? "",
          isRenewal: renew,
          heroFamilyMember: isHeroEmployee,
        },
        user: {
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "",
        },
        page: {
          pagename: title,
          server: window.location.hostname,
          fullURL: window.location.href,
          category: sub1,
          categoryLevel1: sub2,
          categoryLevel2: sub3,
          categoryLevel3: sub4,
          isErrorPage: false,
          pageType: "AEM",
          language: "en",
          country: "in",
          platform: getOS(),
          custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
          loggedIn: isSignedIn,
          previousPageValue: document.referrer,
        },
      });
    }

    if ($('.enrollment-form .enrollment-form-wrapper').attr('data-formtype') == 'xclan') {
      sessionStorage.setItem('paymentFor', 'xclan');
      window.digitalData = {
        event: 'Xclan registration Step 3',
        XclanMembershipDetails: {
          SignedIn: isSignedIn
        }
      }
    }
  });


  $('.profile-update .myvehicle-profile-pic a').click(function (event) {
    let ctaString = $(this).text().replace(/\s+/g, '').toLowerCase();
    if (window.digitalData) {
      if (ctaString == "viewaccount") {
        window.digitalData = {
          event: "View Account Link Clicked",
          profileDetails: {
          },
        };
      }
    }
  });

  $('.cardTiles .my-vehicle-card .card a.cardFooter').click(function (event) {
    let ctaString = $(this).find('.cardFootLink').text().replace(/\s+/g, '').toLowerCase();
    let clickSection = $(this).parent().data('subtype')
    if (window.digitalData) {
      if (clickSection == "book-service") {
        if (ctaString == "booknow") {
          window.digitalData.push({
            event: "linkClicked",
            web: {
              webInteraction: {
                name: "Service Book Now", // cta name
                URL: "NA", // if it is an anchor tag set the href value, else 'na'
                position: "my-vehicle-card", // position of the CTA
              },
            },          
            serviceDetails: {
              productName: $('.myVehicle-name .myVehicle-modal').text().toLowerCase(),
              VehicleVinNumber: $('.details .vin-no').text().toLowerCase()
            },
            productDetails:{
              productName : $('.myVehicle-name .myVehicle-modal').text().toLowerCase(), 
              variant: "NA", 
              colour: "NA", 
              dealer: "NA",
            },          
            user:{
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),
          })
        }
        else if (ctaString == "viewdetails") {
          window.digitalData.push({
            event: "linkClicked",
            web: {
              webInteraction: {
                name: "Service View Details", // cta name
                URL: "NA", // if it is an anchor tag set the href value, else 'na'
                position: "my-vehicle-card", // position of the CTA
              },
            },   
            serviceDetails: {
              productName: $('.myVehicle-name .myVehicle-modal').text().toLowerCase(),
              VehicleVinNumber: $('.details .vin-no').text().toLowerCase()
            },
            productDetails:{
              productName : $('.myVehicle-name .myVehicle-modal').text().toLowerCase(), 
              variant: "NA",   
              colour: "NA",  
              dealer: "NA",
            },          
            user:{
              hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
              hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
              hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
              customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
            },
            page: getPageDetails(),    
          })
        }
      }
      else if (clickSection == "goodlife") {
        if (ctaString == "joinnow") {
          window.digitalData.push({
            event: "Good Life Join Now Link Clicked",
            serviceDetails: {
              VehicleName: $('.myVehicle-name .myVehicle-modal').text().toLowerCase(),
              VehicleVinNumber: $('.details .vin-no').text().toLowerCase()
            }
          });
        }
        else if (ctaString == "viewdetails") {
          window.digitalData.push({
            event: "Good Life View Details Link Clicked",
            serviceDetails: {
              VehicleName: $('.myVehicle-name .myVehicle-modal').text().toLowerCase(),
              VehicleVinNumber: $('.details .vin-no').text().toLowerCase()
            }
          });
        }
      }
      else if (clickSection == "joyride") {
        if (ctaString == "joinnow") {
          window.digitalData.push({
            event: "Joy Ride Join Now Link Clicked",
            serviceDetails: {
              VehicleName: $('.myVehicle-name .myVehicle-modal').text().toLowerCase(),
              VehicleVinNumber: $('.details .vin-no').text().toLowerCase()
            }
          });
        }
      }
    }
  })

  $('#book-serve-first .book-now-btn.nxt-btn').click(function (event) {
    if (window.digitalData) {
      window.digitalData.push({
        event: "Service Booking Step1",
        serviceDetails: {
          productName: $('.hero-text .bikeName').text().toLowerCase(),
          VehicleVinNumber: JSON.parse(atob(sessionStorage.getItem('selectedVehicleData'))).vinNO,
          date: $('.rescalendar_controls .refDate').val(),
          time: $('.active.selected .time-wrap').text(),
          serviceType: $('.service-type-container .service-type-process.active .service-type-form-chk .servicetype-label').text().toLowerCase()
        },     
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  })

  $('#details .location-icon').click(function (event) {
    if (window.digitalData) {
      window.digitalData.push({
        event: "linkClicked",
        web: {
          webInteraction: {
            name: "Use Location", // cta name
            URL: "NA", // if it is an anchor tag set the href value, else 'na'
            position: "serive-details", // position of the CTA
          },
        },
        serviceDetails: {
          productName: $('.hero-text .bikeName').text().toLowerCase(),
          VehicleVinNumber: JSON.parse(atob(sessionStorage.getItem('selectedVehicleData'))).vinNO
        },
        productDetails:{
          productName : $('.hero-text .bikeName').text().toLowerCase(),
          variant: "NA",  
          colour: "NA", 
          dealer: "NA", 
        },      
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  })

  $('#dealer-sec-container .dealer-button-container .foot-btn .book-now-btn.nxt-btn.dealer-nxt').click(function (event) {
    if (window.digitalData) {
      window.digitalData.push({
        event: "Service Booking Step2",
        serviceDetails: {
          productName: $('.hero-text .bikeName').text().toLowerCase(),
          VehicleVinNumber: JSON.parse(atob(sessionStorage.getItem('selectedVehicleData'))).vinNO,
          date: $('.rescalendar_controls .refDate').val(),
          time: $('.active.selected .time-wrap').text(),
          serviceType: $('.service-type-container .service-type-process.active .service-type-form-chk .servicetype-label').text().toLowerCase(),
          state: $('#details .formfield #dealerstateDropdown').text().toLowerCase(),
          city: $('#details .formfield #dealercityDropdown').text().toLowerCase(),
          dealer: $('.dealers-card input[type="checkbox"]:checked').siblings('.dealer-address').find('#dealerName').text().toLowerCase(),
        },
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  })

  $('#self-jobcard-container .dealer-button-container .foot-btn #job-crd-nxt-btn').click(function (event) {
    if (window.digitalData) {
      let checkedValues = [];
      $('.job-card-check-box input[type="checkbox"]:checked').each(function () {
        checkedValues.push($(this).data('checkbox-value'));
      });
      let displayedValues = checkedValues.join(' | ');
      if (displayedValues.length > 0) {
        displayedValues = displayedValues.substring(displayedValues.indexOf(' ') + 1);
        displayedValues = displayedValues.replace(/^[\s|]+/g, '');
      }
      window.digitalData.push({
        event: "Service Booking Step3",
        serviceDetails: {
          productName: $('.hero-text .bikeName').text().toLowerCase(),
          VehicleVinNumber: JSON.parse(atob(sessionStorage.getItem('selectedVehicleData'))).vinNO,
          date: $('.rescalendar_controls .refDate').val(),
          time: $('.active.selected .time-wrap').text(),
          serviceType: $('.service-type-container .service-type-process.active .service-type-form-chk .servicetype-label').text().toLowerCase(),
          state: $('#details .formfield #dealerstateDropdown').text().toLowerCase(),
          city: $('#details .formfield #dealercityDropdown').text().toLowerCase(),
          dealer: $('.dealers-card input[type="checkbox"]:checked').siblings('.dealer-address').find('#dealerName').text().toLowerCase(),
          selectedIssues: displayedValues,
        },
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  })

  $('.view-plan-container span.btn').click(function () {
    let ctaText = $(this).text().replace(/\s+/g, '').toLowerCase();
    let loginStatus = sessionStorage.getItem("data");
    if (window.digitalData) {
      if (ctaText == "viewplans") {
        window.digitalData = {
          event: "View Plans Clicked",
          GoodLifeDetails: {
            PageName: $('title').text(),
            SignedIn: (loginStatus != null) ? "LoggedIn" : "Not LoggedIn"
          }
        }
      }
    }
  })

  $('.view-plan-container span.good-life a').click(function () {
    let loginStatus = sessionStorage.getItem("data");
    if (window.digitalData) {
      window.digitalData = {
        event: "Join Now Clicked",
        GoodLifeDetails: {
          PageName: $('title').text(),
          SignedIn: (loginStatus != null) ? "LoggedIn" : "Not LoggedIn"
        }
      };
    }
  })

  $('.earning-and-redemption-banner .earning-view-details a').click(function () {
    let loginStatus = sessionStorage.getItem("data");
    if (window.digitalData) {
      window.digitalData = {
        event: "View Details Clicked Points Section",
        GoodLifeDetails: {
          PageName: $('title').text(),
          SignedIn: (loginStatus != null) ? "LoggedIn" : "Not LoggedIn"
        }
      };
    }
  })

  $('.buttonconT.memberInfo').click(function () {
    if (window.digitalData) {
      window.digitalData = {
        event: "Xclan Join Now Clicked",
        XclanDetails: {
          PageName: $('title').text(),
        }
      };
    }
  })

  $('.buttonconT.memberInfo').click(function () {
    if (window.digitalData) {
      window.digitalData = {
        event: "Xclan Join Now Clicked",
        XclanDetails: {
          PageName: $('title').text(),
        }
      };
    }
  })

  $('.good-life-plan-wrapper .good-life-plans-wrapper .banner-select-plans a input.select-plan-button,.good-life-plan-wrapper .good-life-plans-wrapper .select-plans a input.select-plan-button, .good-life-plan-wrapper  .mobile-good-life-plans-wrapper .select-plans a input.select-plan-button').click(goodlifeAnalytics);
 
  $('#logIn .login-modal .login-content .close').on('click',function(){
    $('html').css({
      overflow: '',
      height: ''
    });
    if(window.location.href.includes('/en-in/good-life/goodlife-plans'))
    {
      history.back()
    }    
  })

  $('.header-main .navbar-toggler').on('click', function(){
    let countryFlag = $('.top-bar-option.order-1').hasClass('d-none');
    let hamburgerClose = '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/hamburger-close.svg';
    let hamburger= '/etc.clientlibs/hero-aem-website/clientlibs/clientlib-site/resources/images/icons/hamburger-icon.svg';
    if(countryFlag){
      $('html').css({
        overflow: 'hidden',
        height: '100vh'
      });
      $('.navbar-toggler .img-fluid').attr('src' , hamburgerClose);
      $('.top-bar-option.order-1').removeClass('d-none');
    }else{
      $('html').css({
        overflow: '',
        height: ''
      });
      $('.navbar-toggler .img-fluid').attr('src' , hamburger);
      $('.top-bar-option.order-1').addClass('d-none');
    }
  })
  if (window.innerWidth <= 991) {
    $('.top-bar-option.order-1').addClass('d-none');
  }
  
  $(".view-plan-container .text .cmp-text#re-new-plans p a span").on('click', function () {
    window.digitalData = {
      event: 'Good Life Renew Plan Selected',
      GoodLifeDetails: {
        PageName: $('title').text(),
        PlanName: $('.membership-heading .membership-details .vehicle-heading h3').text()
      }
    }
  })

   // Popup on Inactivity

   let inactivityTime = 10000;
   let modalTimer;
 
   function modalIsOpen() {
     return $("#requestCallBack").hasClass("show");
   }
 
   function resetTimer() {
     clearTimeout(modalTimer);
     modalTimer = setTimeout(function () {
       if (!modalIsOpen() && !submitClicked) {
         openModal();
       }
     }, inactivityTime);
   }
 
   function openModal() {
     $("#requestCallBack").modal("show");
   }
 
   if (window.location.href.indexOf("/en-in/scooters") !== -1 || window.location.href.indexOf("/en-in/motorcycles") !== -1) {
     modalTimer = setTimeout(function () {
       if (!modalIsOpen()) {
         openModal();
       }
     }, inactivityTime);
     $("#requestCallBack").on("hidden.bs.modal", function () {
       resetTimer();
     });
 
     $(window).on("scroll", function () {
       resetTimer();
     });
 
     $('#requestCallBack .modal-body button.close:not(.form-close)').click(function () {
       submitClicked = true;
     })
 
     $(document).on("click", function () {
       resetTimer();
     });
   }
  let servicePath = window.location.href
  if( servicePath.indexOf("/en-in/service") != -1 ){
    var hash = window.location.hash;
    hash &&
    $("html, body").animate(
      {
        scrollTop: $(hash).offset().top - 166,
      },
      "slow"
    );
  }

  const getVehicleDetails = sessionStorage.getItem('vehicleDetails') ? JSON.parse(atob(sessionStorage.getItem('vehicleDetails'))) : [];
  if(!getVehicleDetails || getVehicleDetails.length == 0 ) {
    $('.dropdown-menu .check-vehicle,.sideNav-menu.check-vehicle').addClass('hiding-vehicle-check');
  } else {
    $('.dropdown-menu .check-vehicle,.sideNav-menu.check-vehicle').removeClass('hiding-vehicle-check');
  }

  //activate R&E when user in rides & event page
  let navUrl = window.location.pathname;
  let menuItem = 'rides-and-community';
  let menuItem2 = 'rides-event-listing';
  if(navUrl.indexOf(menuItem) != -1 || navUrl.indexOf(menuItem2) != -1 ) {
    $('#ridesandevents').css('font-family',' var(--font-tstar-bold)');
  }
});

var getCookie = function (name) {
  let cookies = document.cookie.split(";");
  for (let i = 0; i < cookies.length; ++i) {
    let pair = cookies[i].trim().split("=");
    if (pair[0] == name) return pair[1];
  }
  return null;
};

var autoPopulateOTP = (otpField) => {
  if ('OTPCredential' in window) {
    const ac = new AbortController();
    navigator.credentials.get({
      otp: { transport:['sms'] },
      signal: ac.signal
    }).then(otp => {
      otpField.val(otp.code).trigger('input');
      ac.abort()
    }).catch(err => {
      console.log(err);
    });
}
}
$(document).ready(function () {
  function getOS() {
    var userAgent = window.navigator.userAgent,
      platform = window.navigator?.userAgentData?.platform || window.navigator.platform,
      macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K", "macOS"],
      windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
      iosPlatforms = ["iPhone", "iPad", "iPod"],
      os = null;
  
    if (macosPlatforms.indexOf(platform) !== -1) {
      os = "Mac OS";
    } else if (iosPlatforms.indexOf(platform) !== -1) {
      os = "iOS";
    } else if (windowsPlatforms.indexOf(platform) !== -1) {
      os = "Windows";
    } else if (/Android/.test(userAgent)) {
      os = "Android";
    } else if (/Linux/.test(platform)) {
      os = "Linux";
    }
    return os;
  }
  function isSignedIn() {
    let isSignedIn = "No";
    if (sessionStorage.getItem("data")) isSignedIn = "Yes";
    return isSignedIn;
  }
  function getPageDetails(isErrorPage = false) {
    let pagePath = window.location.pathname;
    let slug = pagePath.split("/");
    let actualSlug = slug[1].replace(".html", "");
    let primary_category = window.location.origin;
    let fullSplit = primary_category.split("//");
    let pcSplit = fullSplit[1].split(".");
    let title = $("title").text();
    let countryRegrex = pagePath.match(/\/en-(.{2})[\/\.]/);
    let countryCode = "in";
      if (countryRegrex && countryRegrex.length > 1) {
        countryCode = countryRegrex[1];
      }
    let sub1 = "";
    let sub2 = "";
    let sub3 = "";
    let sub4 = "";
    if ($(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text()) {
      sub1 = $(".cmp-breadcrumb .breadcrumb-item:eq(0) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text())
        sub2 = $(".cmp-breadcrumb .breadcrumb-item:eq(1) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text())
        sub3 = $(".cmp-breadcrumb .breadcrumb-item:eq(2) span").text();
      if ($(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text())
        sub4 = $(".cmp-breadcrumb .breadcrumb-item:eq(3) span").text();
    } else {
      if (slug[2]) sub1 = slug[2].replace(".html", "");
      if (slug[3]) sub2 = slug[3].replace(".html", "");
      if (slug[4]) sub3 = slug[4].replace(".html", "");
      if (slug[5]) sub4 = slug[5].replace(".html", "");
    }
    return {
      pagename: title,
      server: window.location.hostname,
      fullURL: window.location.href,
      category: sub1,
      categoryLevel1: sub2,
      categoryLevel2: sub3,
      categoryLevel3: sub4,
      isErrorPage: isErrorPage,
      pageType: "AEM",
      language: "en",
      country: countryCode,
      platform: getOS(),
      custSeqNo: localStorage.getItem("analyticsCustSeqNo") ?? "",
      loggedIn: isSignedIn(),
      previousPageValue: document.referrer,
    };
  }

  function dispatchCTADatalayer(location, ctaText, sectionType, blogName, ctaUrl){
    if (window.digitalData) {
      window.digitalData.push({
        event: "blogClicked",
        web: {
          webInteraction: {
            name: ctaText || "",
            URL: ctaUrl || "NA",
            position: location || "",
            sectionType: sectionType || '',
            blogName: blogName || '',
          },
        },
        user:{
          hashedEmail: localStorage.getItem("analyticsHashedEmail") ?? "NA",
          hashedMobile: localStorage.getItem("analyticsHashedMobile") ?? "NA",
          hashedMobileMeta: localStorage.getItem("analyticsHashedMobileMeta") ?? "NA",
          customerUniqueIdentifier: localStorage.getItem("analyticsCustomerIdentifier") ?? "NA",
        },
        page: getPageDetails(),
      });
    }
  }

  var blogLinks = document.querySelectorAll(".genericteaser a");
  blogLinks?.forEach(function (links) {
    links?.addEventListener("click", function (event) {
      var parentCard = event?.currentTarget?.closest(".card");
      var titleElement = parentCard?.querySelector(".card-title");
      var blogText = titleElement?.textContent;
      var text = $(this).text().trim() || "";
      var sectionType = $(".bike-tab-section .tab-wrapper a.active").text().trim() || "";
      const ctaUrl = $(this).attr("href");
      dispatchCTADatalayer('blogs-news-section', text, sectionType, blogText, ctaUrl);
    });
  });

  $(".xtreme160r-blog-content").on("click", "a", function () {
    var text = $(this).find('b').text().trim() || $(this).text().trim() || "";
    var blogName =  document.title || "";
    const ctaUrl = $(this).attr("href");
    dispatchCTADatalayer('blog-details', text, 'blog-details', blogName, ctaUrl)
  });

  $("#modify-your-xtreme-160r-4v").on("click", "a", function () {
    var text = 'related-stories-banner' || "";
    var blogName =  $(this).find('.overlay-blogs-text-stories').text().trim() || "";
    const ctaUrl = $(this).attr("href");
    dispatchCTADatalayer('related-stories', text, 'blog-details', blogName, ctaUrl)
  });

});

$(document).ready(function () {

  try {
    if ($(".selectTabOnQuery").length > 0) {
      toMakeFirstLevelTabActive();
    }
  } catch (error) {
    console.log(error);
  }

  // on load for preselecting the first level tabs
  function toMakeFirstLevelTabActive() {
    const params = new Proxy(new URLSearchParams(window.location.search), {
      get: (searchParams, prop) => searchParams.get(prop),
    });
    const queryStringTab = params.key1;

    if (queryStringTab != "") {
      const tabElements = $(".selectTabOnQuery .active .horizontalTabSelection a");
      const tabElements1 = $(".selectTabOnQuery .active .verticalTabSelection li button");
      let loadedTab;
      let selectedTabIndex;

      if (tabElements.length > 0) {
        loadedTab = tabElements;
      } else {
        loadedTab = tabElements1;
      }

      if (loadedTab.length) {
        for (let i = 0; i < loadedTab.length; i++) {
          const tabElementAttr = loadedTab[i].getAttribute("data-tabid");
          if (tabElementAttr == queryStringTab) {
            selectedTabIndex = i;
            break;
          }
        }
        if (selectedTabIndex === undefined) {
          selectedTabIndex = 0;
        }
        loadedTab[selectedTabIndex].click();
        let selectedId;
        if (loadedTab[selectedTabIndex].tagName === 'A') {
          selectedId = loadedTab[selectedTabIndex].getAttribute("href");
        } else if (loadedTab[selectedTabIndex].tagName === 'BUTTON') {
          selectedId = loadedTab[selectedTabIndex].getAttribute("data-target");
        }

        if (selectedId) {
          toMakeSecondLevelTabActive(selectedId);
        }
      }
    }
  }

  // on load for preselecting the second level tabs
  function toMakeSecondLevelTabActive(selectedId) {
    const params = new Proxy(new URLSearchParams(window.location.search), {
      get: (searchParams, prop) => searchParams.get(prop),
    });
    const queryStringSecondLevelTab = params.key3;

    if (queryStringSecondLevelTab != "" && selectedId) {
      const secondLevelTabElements = $(selectedId).find(".verticalSecondLevelSelection ul li button");
      let selectedTabIndex;

      if (secondLevelTabElements.length) {
        for (let i = 0; i < secondLevelTabElements.length; i++) {
          const tabElementAttr = secondLevelTabElements[i].getAttribute("data-tabid");
          if (tabElementAttr == queryStringSecondLevelTab) {
            selectedTabIndex = i;
            break;
          }
        }

        if (selectedTabIndex === undefined) {
          selectedTabIndex = 0;
        }
        secondLevelTabElements[selectedTabIndex].click();
      }
    }
  }
});
